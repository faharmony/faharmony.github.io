{"version":3,"file":"static/js/4244.688f63b5.chunk.js","mappings":"kOAYA,SAASA,EAAeC,GACtB,OAAQA,GACN,KAAK,EACH,MAAO,8BACT,KAAK,EACH,MAAO,+BACT,KAAK,EACH,MAAO,uCACT,QACE,MAAO,eAEb,CAEe,SAASC,IACtB,MAAOC,EAAYC,GAAiBC,EAAAA,SAAe,IAC5CC,EAASC,GAAcF,EAAAA,SAAe,IAAIG,KAC3CC,EAnBC,CAAC,2BAA4B,qBAAsB,gBAqBpDC,EAAkBT,GACN,IAATA,EAGHU,EAAiBV,GACdK,EAAQM,IAAIX,GAqCrB,OACEY,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,MAAO,GAAIC,SAAA,EACpBC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAAChB,WAAYA,EAAWc,SAC7BR,EAAMW,KAAI,CAACC,EAAOC,KACjB,MAAMC,EAAqC,CAAC,EACtCC,EAA6C,CAAC,EASpD,OARId,EAAeY,KACjBE,EAAWC,UACTP,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,QAAQ,UAASV,SAAC,cAG9BN,EAAcW,KAChBC,EAAUK,WAAY,IAGtBV,EAAAA,EAAAA,KAACW,EAAAA,EAAI,IAAiBN,EAASN,UAC7BC,EAAAA,EAAAA,KAACY,EAAAA,EAAS,IAAKN,EAAUP,SAAGI,KADnBA,EAEJ,OAIbH,EAAAA,EAAAA,KAAA,OAAAD,SACGd,IAAeM,EAAMsB,QACpBlB,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACEC,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACX,GAAI,CAAEiB,GAAI,GAAIf,SAAC,2CAG3BC,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CAACC,QA/BEC,KAClB/B,EAAc,EAAE,EA8BsBW,GAAI,CAAEqB,GAAI,GAAInB,SAAC,cAK/CJ,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACEC,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACX,GAAI,CAAEiB,GAAI,GAAIf,SACvBjB,EAAeG,MAElBU,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACEC,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLI,SAAyB,IAAflC,EACV+B,QA9DKI,KACjBlC,GAAcmC,GAAkBA,EAAiB,GAAE,EA8DvCxB,GAAI,CAAEqB,GAAI,GAAInB,SACf,SAGAP,EAAeP,KACde,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLN,QAAQ,YACRa,MAAM,UACNN,QAnEGO,KACjB,IAAK/B,EAAeP,GAGlB,MAAM,IAAIuC,MAAM,8CAGlBtC,GAAcmC,GAAkBA,EAAiB,IACjDhC,GAAWoC,IACT,MAAMC,EAAa,IAAIpC,IAAImC,EAAYE,UAEvC,OADAD,EAAWE,IAAI3C,GACRyC,CAAU,GACjB,EAwDY7B,GAAI,CAAEqB,GAAI,GAAInB,SACf,UAIHC,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLN,QAAQ,YACRa,MAAM,UACNN,QA3FKa,KACjB,IAAIH,EAAatC,EACbK,EAAcR,KAChByC,EAAa,IAAIpC,IAAIoC,EAAWC,UAChCD,EAAWI,OAAO7C,IAGpBC,GAAcmC,GAAkBA,EAAiB,IACjDhC,EAAWqC,EAAW,EAoFV7B,GAAI,CAAEqB,GAAI,GAAInB,SAEbd,IAAeM,EAAMsB,OAAS,EAAI,SAAW,mBAQ9D,C","sources":["modules/components/pages/MUI_Components/Samples/Stepper.tsx"],"sourcesContent":["import { Box } from \"@mui/material\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Step from \"@mui/material/Step\";\r\nimport StepLabel from \"@mui/material/StepLabel\";\r\nimport Stepper from \"@mui/material/Stepper\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport React from \"react\";\r\n\r\nfunction getSteps() {\r\n  return [\"Select campaign settings\", \"Create an ad group\", \"Create an ad\"]\r\n}\r\n\r\nfunction getStepContent(step: number) {\r\n  switch (step) {\r\n    case 0:\r\n      return \"Select campaign settings...\"\r\n    case 1:\r\n      return \"What is an ad group anyways?\"\r\n    case 2:\r\n      return \"This is the bit I really care about!\"\r\n    default:\r\n      return \"Unknown step\"\r\n  }\r\n}\r\n\r\nexport default function StepperExample() {\r\n  const [activeStep, setActiveStep] = React.useState(0)\r\n  const [skipped, setSkipped] = React.useState(new Set<number>())\r\n  const steps = getSteps()\r\n\r\n  const isStepOptional = (step: number) => {\r\n    return step === 1\r\n  }\r\n\r\n  const isStepSkipped = (step: number) => {\r\n    return skipped.has(step)\r\n  }\r\n\r\n  const handleNext = () => {\r\n    let newSkipped = skipped\r\n    if (isStepSkipped(activeStep)) {\r\n      newSkipped = new Set(newSkipped.values())\r\n      newSkipped.delete(activeStep)\r\n    }\r\n\r\n    setActiveStep(prevActiveStep => prevActiveStep + 1)\r\n    setSkipped(newSkipped)\r\n  }\r\n\r\n  const handleBack = () => {\r\n    setActiveStep(prevActiveStep => prevActiveStep - 1)\r\n  }\r\n\r\n  const handleSkip = () => {\r\n    if (!isStepOptional(activeStep)) {\r\n      // You probably want to guard against something like this,\r\n      // it should never occur unless someone's actively trying to break something.\r\n      throw new Error(\"You can't skip a step that isn't optional.\")\r\n    }\r\n\r\n    setActiveStep(prevActiveStep => prevActiveStep + 1)\r\n    setSkipped(prevSkipped => {\r\n      const newSkipped = new Set(prevSkipped.values())\r\n      newSkipped.add(activeStep)\r\n      return newSkipped\r\n    })\r\n  }\r\n\r\n  const handleReset = () => {\r\n    setActiveStep(0)\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ width: 1 }}>\r\n      <Stepper activeStep={activeStep}>\r\n        {steps.map((label, index) => {\r\n          const stepProps: { completed?: boolean } = {}\r\n          const labelProps: { optional?: React.ReactNode } = {}\r\n          if (isStepOptional(index)) {\r\n            labelProps.optional = (\r\n              <Typography variant=\"caption\">Optional</Typography>\r\n            )\r\n          }\r\n          if (isStepSkipped(index)) {\r\n            stepProps.completed = false\r\n          }\r\n          return (\r\n            <Step key={label} {...stepProps}>\r\n              <StepLabel {...labelProps}>{label}</StepLabel>\r\n            </Step>\r\n          )\r\n        })}\r\n      </Stepper>\r\n      <div>\r\n        {activeStep === steps.length ? (\r\n          <div>\r\n            <Typography sx={{ my: 1 }}>\r\n              All steps completed - you&apos;re finished\r\n            </Typography>\r\n            <Button onClick={handleReset} sx={{ mr: 1 }}>\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <Typography sx={{ my: 1 }}>\r\n              {getStepContent(activeStep)}\r\n            </Typography>\r\n            <div>\r\n              <Button\r\n                disabled={activeStep === 0}\r\n                onClick={handleBack}\r\n                sx={{ mr: 1 }}\r\n              >\r\n                Back\r\n              </Button>\r\n              {isStepOptional(activeStep) && (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={handleSkip}\r\n                  sx={{ mr: 1 }}\r\n                >\r\n                  Skip\r\n                </Button>\r\n              )}\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleNext}\r\n                sx={{ mr: 1 }}\r\n              >\r\n                {activeStep === steps.length - 1 ? \"Finish\" : \"Next\"}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Box>\r\n  )\r\n}\r\n"],"names":["getStepContent","step","StepperExample","activeStep","setActiveStep","React","skipped","setSkipped","Set","steps","isStepOptional","isStepSkipped","has","_jsxs","Box","sx","width","children","_jsx","Stepper","map","label","index","stepProps","labelProps","optional","Typography","variant","completed","Step","StepLabel","length","my","Button","onClick","handleReset","mr","disabled","handleBack","prevActiveStep","color","handleSkip","Error","prevSkipped","newSkipped","values","add","handleNext","delete"],"sourceRoot":""}