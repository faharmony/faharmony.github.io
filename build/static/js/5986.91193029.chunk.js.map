{"version":3,"file":"static/js/5986.91193029.chunk.js","mappings":"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","sources":["modules/components/pages/Stepper.tsx"],"sourcesContent":["import { FC, useState, useRef } from \"react\";\r\n\r\nimport { PageView, SummaryView } from \"@faharmony/views\";\r\nimport {\r\n  IStepProps,\r\n  IStepperProps,\r\n  IStepButtonRef,\r\n} from \"@faharmony/navigation\";\r\nimport { Button, useModal } from \"@faharmony/components\";\r\nimport {\r\n  FormControl,\r\n  TextField,\r\n  useForm,\r\n  useFormContext,\r\n  SubmitHandler,\r\n} from \"@faharmony/form\";\r\nimport { Box } from \"@faharmony/theme\";\r\nimport { addToast } from \"@faharmony/core\";\r\n\r\ninterface UserFormInputs {\r\n  firstName: string;\r\n  lastName: string;\r\n  address?: { [key: string]: string };\r\n  phone?: string;\r\n  email?: string;\r\n  username: string | undefined;\r\n  password: string | undefined;\r\n}\r\nconst userFormDefaultValues: Partial<UserFormInputs> = {\r\n  firstName: undefined,\r\n  lastName: undefined,\r\n  address: {},\r\n  phone: \"\",\r\n  email: \"\",\r\n  username: \"\",\r\n  password: \"\",\r\n};\r\n\r\nconst UserFirstNameField: FC = () => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n  } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label=\"First name\"\r\n        errorText={errors.firstName?.message}\r\n        helpText=\"Firstname of the user.\"\r\n        required\r\n      >\r\n        <TextField\r\n          name=\"firstName\"\r\n          placeholder=\"Enter full name\"\r\n          error={!!errors.firstName}\r\n          registerRef={register(\"firstName\", {\r\n            required: \"Firstname is required\",\r\n            minLength: { value: 3, message: \"At least 3 characters required.\" },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst UserLastNameField: FC = () => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n  } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label=\"Lastname\"\r\n        helpText=\"Lastname of the user.\"\r\n        errorText={errors.lastName?.message}\r\n        required\r\n      >\r\n        <TextField\r\n          name=\"lastName\"\r\n          placeholder=\"Enter lastname\"\r\n          error={!!errors.lastName}\r\n          registerRef={register(\"lastName\", {\r\n            required: \"Lastname is required\",\r\n            minLength: { value: 3, message: \"At least 3 characters required.\" },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst AddressField = ({ i }: { i: number }) => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n  } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label={\"Address \" + i}\r\n        errorText={errors.address ? errors.address?.[i]?.message : \"\"}\r\n      >\r\n        <TextField\r\n          name={\"address.\" + i}\r\n          placeholder={\"Enter address line \" + i}\r\n          error={errors.address ? !!errors.address[i] : false}\r\n          registerRef={register(`address.${i}`)}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst PhoneField = () => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n  } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl label=\"Phone\" errorText={errors.phone?.message}>\r\n        <TextField\r\n          name={\"phone\"}\r\n          placeholder=\"Enter phone number\"\r\n          error={!!errors.phone}\r\n          registerRef={register(\"phone\", {\r\n            pattern: {\r\n              value: /^\\d{10}$/,\r\n              message: \"Only 10 digits phone number is allowed \",\r\n            },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst EmailField = () => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n  } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl label=\"Email\" errorText={errors.email?.message}>\r\n        <TextField\r\n          name={\"email\"}\r\n          placeholder=\"Enter email\"\r\n          error={!!errors.email}\r\n          registerRef={register(\"email\", {\r\n            pattern: {\r\n              value: /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/,\r\n              message: \"Invalid email\",\r\n            },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst UserFormUsernameField: FC = () => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n  } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label=\"Username\"\r\n        helpText=\"Login username for the user.\"\r\n        errorText={errors.username?.message}\r\n        required\r\n      >\r\n        <TextField\r\n          name=\"username\"\r\n          placeholder=\"Enter username\"\r\n          error={!!errors.username}\r\n          registerRef={register(\"username\", {\r\n            required: \"Username is required\",\r\n            minLength: { value: 4, message: \"At least 4 characters required.\" },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst UserFormPasswordField: FC = () => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n  } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label=\"Password\"\r\n        helpText=\"Login password for the user.\"\r\n        errorText={errors.password?.message}\r\n        required\r\n      >\r\n        <TextField\r\n          name=\"password\"\r\n          placeholder=\"Enter password\"\r\n          error={!!errors.password}\r\n          registerRef={register(\"password\", {\r\n            required: \"Passsword is required\",\r\n            minLength: { value: 8, message: \"At least 8 characters required.\" },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst Page = () => {\r\n  // https://stackoverflow.com/questions/61380289/react-hook-form-field-value-get-lost-when-i-collapse-add-or-delete-panel\r\n  const [open, setOpen] = useState(true);\r\n\r\n  const [ModalWrapper, openModal, closeModal, isOpen] = useModal(false);\r\n\r\n  const steps: IStepProps[] = [\r\n    {\r\n      label: \"Basic Information and a veryVeryLongWord\",\r\n      completed: false,\r\n      state: \"active\",\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <UserFirstNameField />\r\n          <UserLastNameField />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      label: \"Address\",\r\n      completed: false,\r\n      state: \"active\",\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <AddressField i={0} />\r\n          <AddressField i={1} />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      label: \"Contact\",\r\n      completed: false,\r\n      state: \"active\",\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <PhoneField />\r\n          <EmailField />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      label: \"Credentials\",\r\n      completed: false,\r\n      state: \"active\",\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <UserFormUsernameField />\r\n          <UserFormPasswordField />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      label: \"Dummy Step\",\r\n      completed: false,\r\n      state: \"active\",\r\n    },\r\n    {\r\n      label: \"Dummy Step 2\",\r\n      completed: false,\r\n      state: \"active\",\r\n    },\r\n  ];\r\n\r\n  const formMethods = useForm<UserFormInputs>({\r\n    defaultValues: userFormDefaultValues,\r\n    shouldUnregister: false,\r\n    mode: \"onBlur\",\r\n  });\r\n\r\n  const { reset } = formMethods;\r\n\r\n  const submitButtonRef = useRef<IStepButtonRef>(null);\r\n  const backButtonRef = useRef<IStepButtonRef>(null);\r\n  const nextButtonRef = useRef<IStepButtonRef>(null);\r\n\r\n  const disableButtons = (disable: boolean) => {\r\n    const setSubmitting = submitButtonRef?.current?.setSubmitting;\r\n    setSubmitting && setSubmitting(disable);\r\n\r\n    const back = backButtonRef?.current?.setDisabled;\r\n    back && back(disable);\r\n\r\n    const next = nextButtonRef?.current?.setDisabled;\r\n    next && next(disable);\r\n  };\r\n\r\n  const onSubmit: SubmitHandler<UserFormInputs> = async (\r\n    values: UserFormInputs\r\n  ) => {\r\n    console.log(\"Sent values: \" + JSON.stringify(values));\r\n\r\n    disableButtons(true);\r\n\r\n    await setTimeout(() => {\r\n      addToast({\r\n        id: \"submit\",\r\n        title: \"Information saved\",\r\n        variant: \"positive\",\r\n        persist: false,\r\n      });\r\n      reset();\r\n\r\n      disableButtons(false);\r\n    }, 5000);\r\n  };\r\n\r\n  const stepper: IStepperProps = {\r\n    steps: steps,\r\n    currentStep: 0,\r\n    formMethods: formMethods,\r\n    handleSubmitButton: onSubmit,\r\n    editMode: true,\r\n    submitButtonRef: submitButtonRef,\r\n    backButtonRef: backButtonRef,\r\n    nextButtonRef: nextButtonRef,\r\n  };\r\n\r\n  return (\r\n    <PageView\r\n      heading=\"Stepper component\"\r\n      actions={\r\n        <>\r\n          <Button\r\n            value=\"Open SummaryView\"\r\n            onClick={() => setOpen(true)}\r\n            disabled={open}\r\n          />\r\n\r\n          <Button\r\n            value=\"Open As Modal\"\r\n            onClick={() => {\r\n              openModal();\r\n              setOpen(false); //Close the summary view otherwise it will go on infinite render due to duplicate form.\r\n            }}\r\n            disabled={isOpen}\r\n          />\r\n        </>\r\n      }\r\n    >\r\n      {open && (\r\n        <SummaryView\r\n          caption=\"FA user\"\r\n          heading=\"New user\"\r\n          onClose={() => setOpen(false)}\r\n          stepper={stepper}\r\n        ></SummaryView>\r\n      )}\r\n      <ModalWrapper style={{ height: \"90vh\", width: \"30vw\" }}>\r\n        <SummaryView\r\n          caption=\"FA user\"\r\n          heading=\"New user\"\r\n          onClose={() => closeModal()}\r\n          stepper={stepper}\r\n        ></SummaryView>\r\n      </ModalWrapper>\r\n    </PageView>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["userFormDefaultValues","firstName","undefined","lastName","address","phone","email","username","password","UserFirstNameField","_errors$firstName","register","formState","errors","useFormContext","_jsx","Box","direction","children","FormControl","label","errorText","message","helpText","required","TextField","name","placeholder","error","registerRef","minLength","value","UserLastNameField","_errors$lastName","AddressField","_ref","_errors$address","_errors$address$i","i","concat","PhoneField","_errors$phone","pattern","EmailField","_errors$email","UserFormUsernameField","_errors$username","UserFormPasswordField","_errors$password","Page","open","setOpen","useState","ModalWrapper","openModal","closeModal","isOpen","useModal","steps","completed","state","content","_jsxs","formMethods","useForm","defaultValues","shouldUnregister","mode","reset","submitButtonRef","useRef","backButtonRef","nextButtonRef","disableButtons","disable","_submitButtonRef$curr","_backButtonRef$curren","_nextButtonRef$curren","setSubmitting","current","back","setDisabled","next","stepper","currentStep","handleSubmitButton","async","console","log","JSON","stringify","values","setTimeout","addToast","id","title","variant","persist","editMode","PageView","heading","actions","_Fragment","Button","onClick","disabled","SummaryView","caption","onClose","style","height","width"],"sourceRoot":""}