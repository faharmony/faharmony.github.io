{"version":3,"file":"static/js/8761.5237d806.chunk.js","mappings":"gLA4BMA,EAAwD,CAC5D,CAAEC,MAAO,UAAWC,MAAO,OAC3B,CAAED,MAAO,SAAUC,MAAO,SAAUC,KAAM,sBAC1C,CAAEF,MAAO,OAAQC,MAAO,OAAQE,YAAY,IAGxCC,EAAoC,CACxC,CACEJ,MAAO,QACPK,QAAS,CACP,CAAEL,MAAO,QAASC,MAAO,SACzB,CAAED,MAAO,KAAMC,MAAO,QACtB,CAAED,MAAO,SAAUC,MAAO,QAASE,YAAY,MAK/CG,EAAqC,CACzCC,SAAU,QACVC,SAAU,WACVC,UAAU,EACVC,OAAQ,QACRC,IAAKZ,EAAW,GAChBa,KAAM,OACNC,MAAO,CAACT,EAAa,GAAGC,QAAQ,KAG5BS,EAAW,WAAO,IAAD,IACfC,GAAcC,EAAAA,EAAAA,IAAoB,CACtCV,cAAAA,EACAW,aAAc,QAERC,EAA4CH,EAA5CG,SAAUC,EAAkCJ,EAAlCI,QAASC,EAAyBL,EAAzBK,aAAcC,EAAWN,EAAXM,OACnCC,EAAWF,EAAaG,QAAQC,KAEtC,OACE,UAAC,KAAI,CAACT,YAAaA,EAAaU,MAAO,CAAEC,MAAO,QAAUC,UAAU,MAAK,WACvE,UAAC,KAAG,CAACA,UAAU,SAASD,MAAO,QAASE,WAAW,QAAO,WACxD,SAAC,KAAW,CACV5B,MAAM,WACN6B,SAAU,qDACVC,UAA0B,QAAjB,EAAET,EAAOd,gBAAQ,aAAf,EAAiBwB,QAC5BC,UAAQ,YAER,SAAC,KAAS,CACRC,IAAKf,EAAS,CACZc,SAAU,oBACVE,UAAW,CAAEjC,MAAO,EAAG8B,QAAS,6BAElCI,KAAK,WACLC,YAAY,oBACZC,QAAShB,EAAOd,cAGpB,SAAC,KAAW,CACVP,MAAM,WACNgC,UAAQ,EACRF,UAA0B,QAAjB,EAAET,EAAOb,gBAAQ,aAAf,EAAiBuB,QAAQ,UAEpC,SAAC,KAAS,CACRI,KAAK,WACLF,IAAKf,EAAS,CAAEc,SAAU,sBAC1BI,YAAY,oBACZE,KAAK,WACLD,QAAShB,EAAOb,cAGpB,SAAC,KAAW,CAACR,MAAM,mBAAkB,UACnC,SAAC,KAAQ,CACPmC,KAAK,QACLC,YAAY,kBACZ/B,QAASD,OAGb,SAAC,KAAW,CAACJ,MAAM,cAAc6B,SAAS,0BAAyB,UACjE,SAAC,KAAQ,CACPM,KAAK,MACLC,YAAY,wBACZ/B,QAASN,EACTwC,SAAS,EACTC,cAAc,OAIlB,SAAC,KAAW,CAACxC,MAAM,uBAAsB,UACvC,SAAC,KAAU,CACTmC,KAAK,OACL9B,QAAO,UAAMN,GACbkC,IAAKf,EACLS,UAAU,WAGd,SAAC,KAAW,CAAC3B,MAAM,SAAQ,UACzB,SAAC,KAAS,CAACoC,YAAY,OAAOC,QAAShB,EAAOX,OAAQyB,KAAK,cAG7D,SAAC,KAAO,KACR,UAAC,KAAG,CAACM,eAAe,gBAAe,WACjC,SAAC,KAAQ,CAACR,IAAKf,EAAUiB,KAAK,WAAWnC,MAAM,uBAC/C,UAAC,KAAG,CAAC0B,MAAM,OAAM,WACf,SAAC,KAAM,CACLzB,MAAM,QACNyC,QAAQ,YACRC,QAAS,kBAAMC,EAAAA,EAAAA,IAAgBzB,EAAQ,KAEzC,SAAC,KAAM,CACLmB,KAAK,SACLrC,MAAM,SACN0C,QAASrB,EACToB,QAAQ,sBAKhB,SAAC,KAAiB,MAGxB,EAQA,UANa,WAAH,OACR,SAAC,KAAQ,CAACG,QAAQ,OAAOC,SAAS,SAAQ,UACxC,SAAChC,EAAQ,KACA,C","sources":["modules/components/pages/Form1.tsx"],"sourcesContent":["import {\r\n  Form,\r\n  FormControl,\r\n  TextField,\r\n  Checkbox,\r\n  Combobox,\r\n  RadioGroup,\r\n  useForm,\r\n  resetFormValues,\r\n  ComboboxOptionType,\r\n  ComboboxOptionsType,\r\n  FormValuesWatcher,\r\n  RadioOptionType,\r\n} from \"@faharmony/form\";\r\nimport { Button, Divider } from \"@faharmony/components\";\r\nimport { Box } from \"@faharmony/theme\";\r\nimport { PageView } from \"@faharmony/views\";\r\n\r\ntype FormInputs = {\r\n  username: string;\r\n  password: string;\r\n  env: RadioOptionType;\r\n  roles: ComboboxOptionType[];\r\n  number: number;\r\n  env2: string;\r\n  remember: boolean;\r\n};\r\n\r\nconst envOptions: ComboboxOptionsType[] | RadioOptionType[] = [\r\n  { label: \"Develop\", value: \"dev\" },\r\n  { label: \"Master\", value: \"master\", help: \"Master Environment\" },\r\n  { label: \"Test\", value: \"test\", isDisabled: true },\r\n];\r\n\r\nconst rolesOptions: ComboboxOptionsType = [\r\n  {\r\n    label: \"roles\",\r\n    options: [\r\n      { label: \"Admin\", value: \"admin\" },\r\n      { label: \"BO\", value: \"back\" },\r\n      { label: \"Client\", value: \"front\", isDisabled: true },\r\n    ],\r\n  },\r\n];\r\n\r\nconst defaultValues: Partial<FormInputs> = {\r\n  username: \"admin\",\r\n  password: \"ke5ku5TA\",\r\n  remember: true,\r\n  number: 324.432,\r\n  env: envOptions[0],\r\n  env2: \"test\",\r\n  roles: [rolesOptions[0].options[0]],\r\n};\r\n\r\nconst FormNode = () => {\r\n  const formMethods = useForm<FormInputs>({\r\n    defaultValues,\r\n    criteriaMode: \"all\",\r\n  });\r\n  const { register, control, handleSubmit, errors } = formMethods;\r\n  const onSubmit = handleSubmit(console.log);\r\n\r\n  return (\r\n    <Form formMethods={formMethods} style={{ width: \"100%\" }} direction=\"row\">\r\n      <Box direction=\"column\" width={\"260px\"} alignItems=\"start\">\r\n        <FormControl\r\n          label=\"Username\"\r\n          helpText={\"Your login username.  \\n Must meet the requirement\"}\r\n          errorText={errors.username?.message}\r\n          required\r\n        >\r\n          <TextField\r\n            ref={register({\r\n              required: \"Username required\",\r\n              minLength: { value: 4, message: \"More than 3 characters.\" },\r\n            })}\r\n            name=\"username\"\r\n            placeholder=\"Enter username...\"\r\n            error={!!errors.username}\r\n          />\r\n        </FormControl>\r\n        <FormControl\r\n          label=\"Password\"\r\n          required\r\n          errorText={errors.password?.message}\r\n        >\r\n          <TextField\r\n            name=\"password\"\r\n            ref={register({ required: \"Password required\" })}\r\n            placeholder=\"Enter password...\"\r\n            type=\"password\"\r\n            error={!!errors.password}\r\n          />\r\n        </FormControl>\r\n        <FormControl label=\"Applicable roles\">\r\n          <Combobox\r\n            name=\"roles\"\r\n            placeholder=\"Select roles...\"\r\n            options={rolesOptions}\r\n          />\r\n        </FormControl>\r\n        <FormControl label=\"Environment\" helpText=\"Development environment\">\r\n          <Combobox\r\n            name=\"env\"\r\n            placeholder=\"Select environment...\"\r\n            options={envOptions}\r\n            isMulti={false}\r\n            isSearchable={false}\r\n          />\r\n        </FormControl>\r\n\r\n        <FormControl label=\"Environment again...\">\r\n          <RadioGroup\r\n            name=\"env2\"\r\n            options={[...envOptions]}\r\n            ref={register}\r\n            direction=\"row\"\r\n          />\r\n        </FormControl>\r\n        <FormControl label=\"Number\">\r\n          <TextField placeholder=\"0.00\" error={!!errors.number} name=\"number\" />\r\n        </FormControl>\r\n\r\n        <Divider />\r\n        <Box justifyContent=\"space-between\">\r\n          <Checkbox ref={register} name=\"remember\" label=\"Keep me logged in\" />\r\n          <Box width=\"auto\">\r\n            <Button\r\n              value=\"Reset\"\r\n              variant=\"secondary\"\r\n              onClick={() => resetFormValues(control)}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              value=\"Submit\"\r\n              onClick={onSubmit}\r\n              variant=\"primary\"\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n      <FormValuesWatcher />\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst Page = () => (\r\n  <PageView heading=\"Form\" overflow=\"scroll\">\r\n    <FormNode />\r\n  </PageView>\r\n);\r\n\r\nexport default Page;\r\n"],"names":["envOptions","label","value","help","isDisabled","rolesOptions","options","defaultValues","username","password","remember","number","env","env2","roles","FormNode","formMethods","useForm","criteriaMode","register","control","handleSubmit","errors","onSubmit","console","log","style","width","direction","alignItems","helpText","errorText","message","required","ref","minLength","name","placeholder","error","type","isMulti","isSearchable","justifyContent","variant","onClick","resetFormValues","heading","overflow"],"sourceRoot":""}