{"version":3,"file":"static/js/9629.83cf3fff.chunk.js","mappings":"4NAOMA,EAAmB,CAAC,KAAM,KAAM,MAsFtC,UApCa,WACX,IAAAC,EAjDwB,WAExB,IAAAC,GAAsDC,EAAAA,EAAAA,UAAiB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnEI,EAAmBF,EAAA,GAAEG,EAAsBH,EAAA,GAY5CI,EAAuC,CAC3CC,aAAa,EACbC,aAN+B,WAC/BH,EAAuB,GACzB,EAKEI,SAZ+B,SAACC,GAChCL,EAAuBK,EAAMC,OAAOC,MACtC,EAWEA,MAAOR,EACPS,WAAYC,EAAAA,UA0Bd,MAAO,CAAEC,gBAvBoD,CAC3DC,QAAS,CAAC,EACVC,SAAU,CAAEC,aAAc,gBAC1BC,eAAgB,CAAEC,YAAa,iBAAkBC,WAAYC,EAAAA,SAC7DC,SAAU,CAAEL,aAAc,iBAAkBK,UAAU,GACtDC,SAAU,CAAEN,aAAc,gBAAiBM,UAAU,GACrDC,cAAe,CACbC,SAAS,EACTR,aAAc,SACdS,WAAY,UAEdC,YAAa,CACXC,OAAO,EACPX,aAAc,OACdS,WAAY,OAEdG,QAAS,CACPC,WAAW,EACXb,aAAc,iBACdL,WAAYS,EAAAA,UAIUhB,oBAAAA,EAAqBF,oBAAAA,EACjD,CAII4B,GADMjB,EAAehB,EAAfgB,gBAAiBT,EAAmBP,EAAnBO,oBAAqBF,EAAmBL,EAAnBK,oBAE9C,OACE6B,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,QAAQ,YAAYC,SAAS,OAAMC,UAC3CC,EAAAA,EAAAA,MAACC,EAAAA,GAAG,CAACC,UAAU,SAAQH,SAAA,EACrBC,EAAAA,EAAAA,MAACC,EAAAA,GAAG,CAAAF,SAAA,EACFJ,EAAAA,EAAAA,KAACQ,EAAAA,GAAI,CAAC7B,MAAM,OAAO8B,UAAQ,EAACC,QAAQ,KAAKC,MAAM,WAC/CX,EAAAA,EAAAA,KAACQ,EAAAA,GAAI,CAAC7B,MAAM,aAAa8B,UAAQ,EAACC,QAAQ,QAC1CV,EAAAA,EAAAA,KAACQ,EAAAA,GAAI,CAAC7B,MAAM,uBAAuB8B,UAAQ,EAACC,QAAQ,QACpDV,EAAAA,EAAAA,KAACQ,EAAAA,GAAI,CAAC7B,MAAM,aAAa8B,UAAQ,EAACC,QAAQ,UAE3CE,OAAOC,QAAQ/B,GAAiBgC,KAAI,SAAAC,GAAA,IAAAC,GAAA9C,EAAAA,EAAAA,GAAA6C,EAAA,GAAEE,EAAID,EAAA,GAAEE,EAACF,EAAA,UAC5CX,EAAAA,EAAAA,MAACC,EAAAA,GAAG,CAAAF,SAAA,EACFJ,EAAAA,EAAAA,KAACQ,EAAAA,GAAI,CAACC,UAAQ,EAAC9B,MAAOsC,EAAMN,MAAM,UACjC9C,EAAMiD,KAAI,SAACK,GAAC,OACXnB,EAAAA,EAAAA,KAACoB,EAAAA,IAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAACC,QAASH,GAAsBD,GAAC,IAAEK,IAAK,OAAtBN,EAAOE,EAAuB,MAHpDF,EAKJ,KAERZ,EAAAA,EAAAA,MAACC,EAAAA,GAAG,CAAAF,SAAA,EACFJ,EAAAA,EAAAA,KAACQ,EAAAA,GAAI,CAAC7B,MAAM,mBAAmB8B,UAAQ,EAACE,MAAM,WAC9CX,EAAAA,EAAAA,KAACoB,EAAAA,IAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACRC,QAAS,MAELjD,GAAmB,IACvBkD,IAAK,OAFA,mBAIPvB,EAAAA,EAAAA,KAACQ,EAAAA,GAAI,CAACC,UAAU,EAAKL,SAAEoB,KAAKC,UAAUtD,MACtC6B,EAAAA,EAAAA,KAAC0B,EAAAA,GAAO,WAKlB,C","sources":["modules/components/pages/TextField.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { TextField, ITextFieldProps } from \"@faharmony/form\";\r\nimport { Divider, Text } from \"@faharmony/components\";\r\nimport { faHeart, faSearch } from \"@faharmony/icons\";\r\nimport { SMLType, Box } from \"@faharmony/theme\";\r\nimport { PageView } from \"@faharmony/views\";\r\n\r\nconst sizes: SMLType[] = [\"sm\", \"md\", \"lg\"];\r\n\r\nconst useTextFieldProps = () => {\r\n  // State to store value from the input field\r\n  const [clearableInputValue, setClearableInputValue] = useState<string>(\"\");\r\n\r\n  // Input Field handler\r\n  const handleClearableUserInput = (event: any) => {\r\n    setClearableInputValue(event.target.value);\r\n  };\r\n\r\n  // Reset Input Field handler\r\n  const resetClearableInputField = () => {\r\n    setClearableInputValue(\"\");\r\n  };\r\n\r\n  const clearableInputProps: ITextFieldProps = {\r\n    isClearable: true,\r\n    onInputClear: resetClearableInputField,\r\n    onChange: handleClearableUserInput,\r\n    value: clearableInputValue,\r\n    suffixIcon: faSearch,\r\n  };\r\n\r\n  const textFieldsProps: { [name: string]: ITextFieldProps } = {\r\n    default: {},\r\n    withText: { defaultValue: \"Default text\" },\r\n    withPrefixIcon: { placeholder: \"Favorite hobby\", prefixIcon: faHeart },\r\n    readOnly: { defaultValue: \"Read only name\", readOnly: true },\r\n    disabled: { defaultValue: \"Disabled text\", disabled: true },\r\n    successStatus: {\r\n      success: true,\r\n      defaultValue: \"101.00\",\r\n      prefixText: \"â‚¬\",\r\n    },\r\n    errorStatus: {\r\n      error: true,\r\n      defaultValue: \"101a\",\r\n      prefixText: \"EUR\",\r\n    },\r\n    loading: {\r\n      isLoading: true,\r\n      defaultValue: \"Siddhant Gupta\",\r\n      suffixIcon: faHeart,\r\n    },\r\n  };\r\n\r\n  return { textFieldsProps, clearableInputProps, clearableInputValue };\r\n};\r\n\r\nconst Page = () => {\r\n  const { textFieldsProps, clearableInputProps, clearableInputValue } =\r\n    useTextFieldProps();\r\n  return (\r\n    <PageView heading=\"TextField\" overflow=\"auto\">\r\n      <Box direction=\"column\">\r\n        <Box>\r\n          <Text value=\"Type\" truncate variant=\"h5\" align=\"right\" />\r\n          <Text value=\"Small (sm)\" truncate variant=\"h5\" />\r\n          <Text value=\"Medium (md, default)\" truncate variant=\"h5\" />\r\n          <Text value=\"Large (lg)\" truncate variant=\"h5\" />\r\n        </Box>\r\n        {Object.entries(textFieldsProps).map(([name, o]) => (\r\n          <Box key={name}>\r\n            <Text truncate value={name} align=\"right\" />\r\n            {sizes.map((s) => (\r\n              <TextField spacing={s} key={name + s} {...o} ref={null} />\r\n            ))}\r\n          </Box>\r\n        ))}\r\n        <Box>\r\n          <Text value=\"Clearable field \" truncate align=\"right\" />\r\n          <TextField\r\n            spacing={\"sm\"}\r\n            key={\"clearableInput\"}\r\n            {...clearableInputProps}\r\n            ref={null}\r\n          />\r\n          <Text truncate={true}>{JSON.stringify(clearableInputValue)}</Text>\r\n          <Divider />\r\n        </Box>\r\n      </Box>\r\n    </PageView>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["sizes","_useTextFieldProps","_useState","useState","_useState2","_slicedToArray","clearableInputValue","setClearableInputValue","clearableInputProps","isClearable","onInputClear","onChange","event","target","value","suffixIcon","faSearch","textFieldsProps","default","withText","defaultValue","withPrefixIcon","placeholder","prefixIcon","faHeart","readOnly","disabled","successStatus","success","prefixText","errorStatus","error","loading","isLoading","useTextFieldProps","_jsx","PageView","heading","overflow","children","_jsxs","Box","direction","Text","truncate","variant","align","Object","entries","map","_ref","_ref2","name","o","s","TextField","_objectSpread","spacing","ref","JSON","stringify","Divider"],"sourceRoot":""}