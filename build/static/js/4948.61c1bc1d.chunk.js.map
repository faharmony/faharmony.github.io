{"version":3,"file":"static/js/4948.61c1bc1d.chunk.js","mappings":"oPASA,IAAAA,EAAAC,EAAAC,EAAA,QACAC,EAAAF,EAAAC,EAAA,QAEAF,EAAAI,QAAWC,WAAW,UAAWF,EAAAC,Q,6JCFjC,IAAAE,EAAAJ,EAAA,OAMAK,EAAAN,EAAAC,EAAA,QA+CAM,EAAAA,QAzBwD,SAAAC,GACtD,IAAMC,GAAS,EAAAJ,EAAAK,cAAa,CAC1BC,cAAe,SAAAC,GAAU,OAAAA,EAAOC,SAASR,EAAAS,UAAhB,EACzBC,SAAUV,EAAAW,SACVC,WAAYZ,EAAAa,WACZC,aAAc,CAAEC,QAASZ,EAAOY,WAGlC,MAAO,CACLZ,OAAMA,EACNa,WAAYZ,EAAOY,WACnBC,MAAQb,EAAOa,MAGfC,OAAMjB,EAAAH,QACNqB,cAAe,aACfC,KAAM,QACNC,YAAa,IACbC,cAAe,CACbC,MAAO,WACPC,QAAS,UAGf,C,iEChDAtB,EAAAA,QAAA,SAKEuB,EACAC,G,QAEMC,EAASF,EAAME,OAQrB,QAJGA,GAA4B,IAAlBA,EAAOC,OAEdD,EAAOA,EAAOC,OAAS,KACJ,QAAlBC,EAAAC,KAAKX,qBAAa,IAAAU,OAAA,EAAAA,EAAEE,KAAKL,IAAa,EAAI,GAF3CD,EAAMO,cAGK,KAAiB,QAAXC,EAAAH,KAAK3B,cAAM,IAAA8B,OAAA,EAAAA,EAAEC,aAAc,EACpD,C","sources":["../../node_modules/codemirror-graphql/src/mode.ts","../../node_modules/codemirror-graphql/src/utils/mode-factory.ts","../../node_modules/codemirror-graphql/src/utils/mode-indent.ts"],"sourcesContent":["/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport CodeMirror from 'codemirror';\nimport modeFactory from './utils/mode-factory';\n\nCodeMirror.defineMode('graphql', modeFactory);\n","/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport CodeMirror from 'codemirror';\nimport {\n  LexRules,\n  ParseRules,\n  isIgnored,\n  onlineParser,\n} from 'graphql-language-service';\nimport indent from './mode-indent';\n\n/**\n * The GraphQL mode is defined as a tokenizer along with a list of rules, each\n * of which is either a function or an array.\n *\n *   * Function: Provided a token and the stream, returns an expected next step.\n *   * Array: A list of steps to take in order.\n *\n * A step is either another rule, or a terminal description of a token. If it\n * is a rule, that rule is pushed onto the stack and the parsing continues from\n * that point.\n *\n * If it is a terminal description, the token is checked against it using a\n * `match` function. If the match is successful, the token is colored and the\n * rule is stepped forward. If the match is unsuccessful, the remainder of the\n * rule is skipped and the previous rule is advanced.\n *\n * This parsing algorithm allows for incremental online parsing within various\n * levels of the syntax tree and results in a structured `state` linked-list\n * which contains the relevant information to produce valuable typeaheads.\n */\nconst graphqlModeFactory: CodeMirror.ModeFactory<any> = config => {\n  const parser = onlineParser({\n    eatWhitespace: stream => stream.eatWhile(isIgnored),\n    lexRules: LexRules,\n    parseRules: ParseRules,\n    editorConfig: { tabSize: config.tabSize },\n  });\n\n  return {\n    config,\n    startState: parser.startState,\n    token: (parser.token as unknown) as NonNullable<\n      CodeMirror.Mode<any>['token']\n    >, // TODO: Check if the types are indeed compatible\n    indent,\n    electricInput: /^\\s*[})\\]]/,\n    fold: 'brace',\n    lineComment: '#',\n    closeBrackets: {\n      pairs: '()[]{}\"\"',\n      explode: '()[]{}',\n    },\n  };\n};\n\nexport default graphqlModeFactory;\n","/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport CodeMirror from 'codemirror';\nimport { State } from 'graphql-language-service';\n\n// Seems the electricInput type in @types/codemirror is wrong (i.e it is written as electricinput instead of electricInput)\nexport default function indent(\n  this: CodeMirror.Mode<any> & {\n    electricInput?: RegExp;\n    config?: CodeMirror.EditorConfiguration;\n  },\n  state: State,\n  textAfter: string,\n) {\n  const levels = state.levels;\n  // If there is no stack of levels, use the current level.\n  // Otherwise, use the top level, pre-emptively dedenting for close braces.\n  const level =\n    !levels || levels.length === 0\n      ? state.indentLevel\n      : levels[levels.length - 1] -\n        (this.electricInput?.test(textAfter) ? 1 : 0);\n  return (level || 0) * (this.config?.indentUnit || 0);\n}\n"],"names":["codemirror_1","__importDefault","require","mode_factory_1","default","defineMode","graphql_language_service_1","mode_indent_1","exports","config","parser","onlineParser","eatWhitespace","stream","eatWhile","isIgnored","lexRules","LexRules","parseRules","ParseRules","editorConfig","tabSize","startState","token","indent","electricInput","fold","lineComment","closeBrackets","pairs","explode","state","textAfter","levels","length","_a","this","test","indentLevel","_b","indentUnit"],"sourceRoot":""}