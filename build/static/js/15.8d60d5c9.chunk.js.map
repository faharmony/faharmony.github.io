{"version":3,"sources":["modules/logo/state/initialState.ts","modules/logo/components/ConfigDrawer.tsx","modules/logo/state/reducers.ts","modules/logo/components/Display.tsx","modules/logo/components/ComboBox.tsx","modules/logo/components/InputField.tsx","modules/logo/pages/MainPage.tsx","modules/logo/state/index.ts","modules/logo/components/index.ts"],"names":["colors","brand","loading","isConfigDrawerOpen","config","size","color","primary","secondary","text","variant","icon","configurationOptions","variants","value","label","getCurrentOption","option","find","o","ColorPicker","onChange","useModuleState","React","useState","setValue","handleChange","val","type","ConfigDrawer","dispatch","useDispatch","action","defaultValue","key","toString","split","insertQueryParam","caption","heading","onClose","ModuleActions","toggleConfigDrawer","direction","alignItems","style","padding","Theme","spacing","placeholder","options","setVariant","setIcon","setColor","toggleLoading","state","setLoading","payload","length","Display","independent","panels","id","defaultActive","content","ComboBox","props","marginLeft","name","helpText","StyledInput","styled","input","InputField","e","target","PageActions","disabled","onClick","MainPage","t","useLocale","search","URLSearchParams","useLocation","delete","jsonString","decodeURI","replace","params","JSON","parse","Object","entries","forEach","decodeURIComponent","useSetState","actions","primaryNode","secondaryNode","ModuleState","createModuleState","initialState","reducers"],"mappings":"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","file":"static/js/15.8d60d5c9.chunk.js","sourcesContent":["/**\n * InitialState\n * ---\n * This file maintains the type definition\n * and the actual initialState of the Module.\n */\n\n/** Type definition of the Module's state */\nexport interface IModuleState {\n  loading: boolean;\n  isConfigDrawerOpen: boolean;\n  config: {\n    size: number;\n    color: { primary: string; secondary: string };\n    text: string;\n    variant: \"all\" | \"company\" | \"platform\";\n    icon: \"all\" | \"transparent\" | \"opaque\";\n  };\n}\n\nexport const colors = { brand: \"#AE001A\" };\n\n/** Initial state of Module */\nexport default {\n  loading: true,\n  isConfigDrawerOpen: true,\n  config: {\n    size: 200,\n    color: { primary: colors.brand, secondary: \"\" },\n    text: \"\",\n    variant: \"all\",\n    icon: \"all\",\n  },\n} as IModuleState;\n","import React from \"react\";\nimport { SummaryView } from \"@faharmony/views\";\nimport { Box } from \"@faharmony/components\";\nimport { useModuleState, useDispatch } from \"@faharmony/state\";\nimport { insertQueryParam } from \"@faharmony/router\";\nimport { IModuleState, ModuleActions } from \"../state\";\nimport { ComboBox } from \"./ComboBox\";\nimport { InputField } from \"./InputField\";\nimport { Theme } from \"@faharmony/theme\";\n\ninterface Obj {\n  value: string;\n  label: string;\n}\n\nconst configurationOptions = {\n  variants: [\n    { value: \"all\", label: \"All\" },\n    { value: \"company\", label: \"Company branding\" },\n    { value: \"platform\", label: \"Apps branding\" },\n  ],\n  icon: [\n    { value: \"all\", label: \"All\" },\n    { value: \"transparent\", label: \"Transparent\" },\n    { value: \"opaque\", label: \"Opaque\" },\n  ],\n};\n\nconst getCurrentOption = (\n  option: keyof typeof configurationOptions,\n  value: string\n) =>\n  configurationOptions[option].find((o) => o.value === value) ||\n  configurationOptions[option][0];\n\nconst ColorPicker = ({ onChange }: { onChange: (o: Obj) => void }) => {\n  const {\n    config: { color },\n  } = useModuleState<IModuleState>();\n  const [value, setValue] = React.useState(color.primary);\n  const handleChange = (val: string) => {\n    setValue(val);\n    onChange({ value: val, label: \"\" });\n  };\n  return <InputField handleChange={handleChange} value={value} type=\"color\" />;\n};\n\n/**\n * @author Siddhant Gupta <siddhant@fasolutions.com>\n */\nexport const ConfigDrawer = () => {\n  const dispatch = useDispatch();\n  const { isConfigDrawerOpen, config } = useModuleState<IModuleState>();\n  const { variant, icon } = config;\n\n  const handleChange = (\n    action: Function,\n    option: any,\n    defaultValue = \"all\"\n  ) => {\n    const key = action.toString().split(\"set\")[1];\n    const value = option?.value || defaultValue;\n    dispatch(action(value));\n    insertQueryParam(key, value);\n  };\n\n  return isConfigDrawerOpen ? (\n    <SummaryView\n      caption=\"Logo\"\n      heading=\"Configuration\"\n      onClose={() => dispatch(ModuleActions.toggleConfigDrawer())}\n    >\n      <Box\n        direction=\"column\"\n        alignItems=\"normal\"\n        style={{ padding: Theme.spacing() }}\n      >\n        <ComboBox\n          label=\"Variant\"\n          placeholder=\"Select variant...\"\n          options={configurationOptions.variants}\n          defaultValue={getCurrentOption(\"variants\", variant)}\n          onChange={(o: any) => handleChange(ModuleActions.setVariant, o)}\n        />\n        <ComboBox\n          label=\"Icon style\"\n          placeholder=\"Select icon style...\"\n          options={configurationOptions.icon}\n          defaultValue={getCurrentOption(\"icon\", icon)}\n          onChange={(o: any) => handleChange(ModuleActions.setIcon, o)}\n        />\n        <ColorPicker\n          onChange={(o: any) => handleChange(ModuleActions.setColor, o)}\n        />\n      </Box>\n    </SummaryView>\n  ) : null;\n};\n\nexport default ConfigDrawer;\n","/**\n * Reducers\n * ---\n * This file maintains all the reducers (modifiers)\n * for the Module's state. The name of reducer will\n * become the name of the action.\n *\n * A case reducer can choose to mutate the passed-in\n * state value directly instead of returning a new state.\n * This does not actually cause the store state to be\n * mutated directly; instead, thanks to immer, the\n * mutations are translated to copy operations that\n * result in a new state.\n */\nimport { CaseReducer, PayloadAction } from \"@faharmony/state\";\nimport { IModuleState } from \"./initialState\";\n\n// Generic types for ease-of-use\ntype Reducer = CaseReducer<IModuleState>;\ntype ReducerWithPayload<T> = CaseReducer<IModuleState, PayloadAction<T>>;\ntype Config = IModuleState[\"config\"];\n\n// -------------------\n// Edit reducers below\n\n/** Reducer without required payload.\n * @example dispatch(toggleLoading()) */\nexport const toggleLoading: Reducer = (state) => {\n  state.loading = !state.loading;\n};\n\n/** Reducer with required payload.\n * @example dispatch(setLoading(true)) */\nexport const setLoading: ReducerWithPayload<boolean> = (state, { payload }) => {\n  state.loading = payload;\n};\n\n/** Reducer with to toggle ConfigDrawer.*/\nexport const toggleConfigDrawer: Reducer = (state) => {\n  state.isConfigDrawerOpen = !state.isConfigDrawerOpen;\n};\n\nexport const setVariant: ReducerWithPayload<Config[\"variant\"]> = (\n  state,\n  { payload }\n) => {\n  state.config.variant = payload;\n};\n\nexport const setIcon: ReducerWithPayload<Config[\"icon\"]> = (\n  state,\n  { payload }\n) => {\n  state.config.icon = payload;\n};\n\nexport const setColor: ReducerWithPayload<Config[\"color\"] | string> = (\n  state,\n  { payload }\n) => {\n  if (typeof payload === \"string\") {\n    const colors = payload.split(\"@\");\n    state.config.color.primary = colors[0];\n    colors.length > 0 && (state.config.color.secondary = colors[1]);\n  } else state.config.color = { ...state.config.color, ...payload };\n};\n","import React from \"react\";\nimport { Text, Accordion, Preloader } from \"@faharmony/components\";\nimport { useModuleState } from \"@faharmony/state\";\nimport { IModuleState } from \"../state\";\n\n/**\n * @author Siddhant Gupta <siddhant@fasolutions.com>\n */\nexport const Display = () => {\n  const state = useModuleState<IModuleState>();\n  //   const dispatch = useDispatch();\n  if (state.loading) return <Preloader />;\n  else\n    return (\n      <div>\n        <Text\n          value=\"All generated logos will appear here. They can be configured using side-drawer.\"\n          color=\"disabled\"\n        />\n        <br />\n        <br />\n        <Accordion\n          independent\n          panels={[\n            {\n              id: \"standard\",\n              heading: \"Standard logos\",\n              defaultActive: true,\n              content: <div />,\n            },\n            {\n              id: \"custom\",\n              heading: \"Customized logos\",\n              defaultActive: true,\n              content: <div />,\n            },\n          ]}\n        />\n      </div>\n    );\n};\n\nexport default Display;\n","import React from \"react\";\nimport { Combobox, IComboboxProps } from \"@faharmony/form\";\nimport { Theme } from \"@faharmony/theme\";\nimport { Text } from \"@faharmony/components\";\n\n/**\n * @author Siddhant Gupta <siddhant@fasolutions.com>\n */\nexport const ComboBox = (props: IComboboxProps) => {\n  return (\n    <div>\n      {props.label && (\n        <div style={{ marginLeft: Theme.spacing(\"sm\") }}>\n          <Text value={props.label} variant=\"h5\" />\n        </div>\n      )}\n      <Combobox {...props} name={props.label} />\n      {props.helpText && (\n        <Text value={props.helpText} variant=\"small\" color=\"secondary\" />\n      )}\n    </div>\n  );\n};\n\nexport default ComboBox;\n","import React from \"react\";\nimport { Theme, styled } from \"@faharmony/theme\";\nimport { Text } from \"@faharmony/components\";\n\nexport interface IInputFieldProps {\n  label?: string;\n  helpText?: string;\n  value: string;\n  placeholder?: string;\n  handleChange: (value: string) => void;\n  type: string;\n}\n\nconst StyledInput = styled.input`\n  height: 36px;\n`;\n\n/**\n * @author Siddhant Gupta <siddhant@fasolutions.com>\n */\nexport const InputField = (props: IInputFieldProps) => {\n  const { label, helpText, handleChange } = props;\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    handleChange(e.target.value);\n  return (\n    <div>\n      {label && (\n        <div style={{ marginLeft: Theme.spacing(\"sm\") }}>\n          <Text value={label} variant=\"h5\" />\n        </div>\n      )}\n      <StyledInput {...props} onChange={onChange} />\n      {helpText && <Text value={helpText} variant=\"small\" color=\"secondary\" />}\n    </div>\n  );\n};\n\nexport default InputField;\n","// {{Sample}}:MainView\nimport React from \"react\";\nimport { PageView, PrimaryWithSidebarLayout } from \"@faharmony/views\";\nimport { useLocale } from \"@faharmony/locale\";\nimport { Button, Box } from \"@faharmony/components\";\nimport { useLocation } from \"@faharmony/router\";\nimport { useModuleState, useDispatch } from \"@faharmony/state\";\nimport { IModuleState, ModuleActions } from \"../state\";\nimport { ConfigDrawer, Display } from \"../components\";\n\nconst PageActions = () => {\n  const state = useModuleState<IModuleState>();\n  const dispatch = useDispatch();\n  return (\n    <Box>\n      <Button\n        value=\"Configure logo\"\n        disabled={state.isConfigDrawerOpen}\n        onClick={() => dispatch(ModuleActions.toggleConfigDrawer())}\n      />\n    </Box>\n  );\n};\n\nconst useSetState = (): void => {\n  const dispatch = useDispatch();\n  const search = new URLSearchParams(useLocation().search);\n  search.delete(\"tab\");\n  if (search.toString()) {\n    const jsonString =\n      '\"' +\n      decodeURI(search.toString())\n        .replace(/\"/g, '\\\\\"')\n        .replace(/&/g, '\",\"')\n        .replace(/=/g, '\":\"') +\n      '\"';\n    const params = JSON.parse(`{${jsonString}}`);\n    Object.entries(params).forEach(([key, val]: [string, any]) => {\n      dispatch({ type: `logo/set${key}`, payload: decodeURIComponent(val) });\n    });\n  }\n  dispatch(ModuleActions.setLoading(false));\n};\n\n/**\n * Default page of module\n * @author Siddhant Gupta <siddhant@fasolutions.com>\n */\nexport const MainPage = () => {\n  const t = useLocale();\n  useSetState();\n  return (\n    <PageView heading={t(\"moduleName\")} actions={<PageActions />}>\n      <PrimaryWithSidebarLayout\n        primaryNode={<Display />}\n        secondaryNode={<ConfigDrawer />}\n      />\n    </PageView>\n  );\n};\n\nexport default MainPage;\n","/**\n * State\n * ---\n *\n * This directory contains module state.\n * Harmony uses the Redux-Toolkit setup and\n * treats each Module as a Slice.\n *\n * Use other files like `store.ts` and `reducers.ts`\n * to maintain the functionality of ModuleState.\n * This file is responsible for combining them.\n *\n * There is no need for separately creating or\n * maintaining `actions` as they are generated\n * using slice's case reducers.\n *\n * @readonly No edit required in this file unless\n * ModuleId changes.\n */\n\nimport { createModuleState } from \"@faharmony/state\";\nimport initialState from \"./initialState\";\nimport * as reducers from \"./reducers\";\n\n/** Create Module's state using wrapper of createSlice(). */\nconst ModuleState = createModuleState({\n  /** name should be exact same as Module ID. */\n  name: \"logo\",\n  /** Initial value of Module's state. */\n  initialState,\n  /** Object of case reducers to modify Module's state. */\n  reducers,\n});\n\n// Extract `actions` from Module's state\nconst { actions: ModuleActions } = ModuleState;\n// Export state for Module config and actions for dispatch usage.\nexport { ModuleState, ModuleActions };\n// Export State type definition\nexport * from \"./initialState\";\n","/**\n * Components\n * ---\n *\n * This directory contains reusable components which\n * are used by either Pages or other Components.\n *\n * If a component is useful or essential for multiple\n * modules or applications, then it should be moved\n * to Harmony.\n *\n * To begin, create a Component file/folder in this\n * directory and export it from this file.\n *\n * A sample component is provided for quick start.\n * It should be removed along with its references.\n */\n\nexport * from \"./ConfigDrawer\";\nexport * from \"./Display\";\n"],"sourceRoot":""}