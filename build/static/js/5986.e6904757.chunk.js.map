{"version":3,"file":"static/js/5986.e6904757.chunk.js","mappings":"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","sources":["modules/components/pages/Stepper.tsx"],"sourcesContent":["import { FC, useState, useRef } from \"react\";\r\n\r\nimport { PageView, SummaryView } from \"@faharmony/views\";\r\nimport {\r\n  IStepProps,\r\n  IStepperProps,\r\n  IStepButtonRef,\r\n} from \"@faharmony/navigation\";\r\nimport { Button, useModal } from \"@faharmony/components\";\r\nimport {\r\n  FormControl,\r\n  TextField,\r\n  useForm,\r\n  useFormContext,\r\n  SubmitHandler,\r\n  resetFormValues,\r\n} from \"@faharmony/form\";\r\nimport { Box } from \"@faharmony/theme\";\r\nimport { addToast } from \"@faharmony/core\";\r\n\r\ninterface UserFormInputs {\r\n  firstName: string;\r\n  lastName: string;\r\n  address?: {};\r\n  phone?: string;\r\n  email?: string;\r\n  username: string | undefined;\r\n  password: string | undefined;\r\n}\r\nconst userFormDefaultValues: Partial<UserFormInputs> = {\r\n  firstName: undefined,\r\n  lastName: undefined,\r\n  address: {},\r\n  phone: \"\",\r\n  email: \"\",\r\n  username: \"\",\r\n  password: \"\",\r\n};\r\n\r\nconst UserFirstNameField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label=\"First name\"\r\n        errorText={errors.firstName?.message}\r\n        helpText=\"Firstname of the user.\"\r\n        required\r\n      >\r\n        <TextField\r\n          name=\"firstName\"\r\n          placeholder=\"Enter full name\"\r\n          error={!!errors.firstName}\r\n          ref={register({\r\n            required: \"Firstname is required\",\r\n            minLength: { value: 3, message: \"At least 3 characters required.\" },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst UserLastNameField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label=\"Lastname\"\r\n        helpText=\"Lastname of the user.\"\r\n        errorText={errors.lastName?.message}\r\n        required\r\n      >\r\n        <TextField\r\n          name=\"lastName\"\r\n          placeholder=\"Enter lastname\"\r\n          error={!!errors.lastName}\r\n          ref={register({\r\n            required: \"Lastname is required\",\r\n            minLength: { value: 3, message: \"At least 3 characters required.\" },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst AddressField = ({ i }: { i: number }) => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label={\"Address \" + i}\r\n        errorText={errors.address ? errors.address[i].message : \"\"}\r\n      >\r\n        <TextField\r\n          name={\"address.\" + i}\r\n          placeholder={\"Enter address line \" + i}\r\n          error={errors.address ? !!errors.address[i] : false}\r\n          ref={register}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst PhoneField = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl label=\"Phone\" errorText={errors.phone?.message}>\r\n        <TextField\r\n          name={\"phone\"}\r\n          placeholder=\"Enter phone number\"\r\n          error={!!errors.phone}\r\n          ref={register({\r\n            pattern: {\r\n              value: /^\\d{10}$/,\r\n              message: \"Only 10 digits phone number is allowed \",\r\n            },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst EmailField = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl label=\"Email\" errorText={errors.email?.message}>\r\n        <TextField\r\n          name={\"email\"}\r\n          placeholder=\"Enter email\"\r\n          error={!!errors.email}\r\n          ref={register({\r\n            pattern: {\r\n              value: /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/,\r\n              message: \"Invalid email\",\r\n            },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst UserFormUsernameField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label=\"Username\"\r\n        helpText=\"Login username for the user.\"\r\n        errorText={errors.username?.message}\r\n        required\r\n      >\r\n        <TextField\r\n          name=\"username\"\r\n          placeholder=\"Enter username\"\r\n          error={!!errors.username}\r\n          ref={register({\r\n            required: \"Username is required\",\r\n            minLength: { value: 4, message: \"At least 4 characters required.\" },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst UserFormPasswordField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label=\"Password\"\r\n        helpText=\"Login password for the user.\"\r\n        errorText={errors.password?.message}\r\n        required\r\n      >\r\n        <TextField\r\n          name=\"password\"\r\n          placeholder=\"Enter password\"\r\n          error={!!errors.password}\r\n          ref={register({\r\n            required: \"Passsword is required\",\r\n            minLength: { value: 8, message: \"At least 8 characters required.\" },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst Page = () => {\r\n  // https://stackoverflow.com/questions/61380289/react-hook-form-field-value-get-lost-when-i-collapse-add-or-delete-panel\r\n  const [open, setOpen] = useState(true);\r\n\r\n  const [ModalWrapper, openModal, closeModal, isOpen] = useModal(false);\r\n\r\n  const steps: IStepProps[] = [\r\n    {\r\n      label: \"Basic Information and a veryVeryLongWord\",\r\n      completed: false,\r\n      state: \"active\",\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <UserFirstNameField />\r\n          <UserLastNameField />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      label: \"Address\",\r\n      completed: false,\r\n      state: \"active\",\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <AddressField i={0} />\r\n          <AddressField i={1} />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      label: \"Contact\",\r\n      completed: false,\r\n      state: \"active\",\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <PhoneField />\r\n          <EmailField />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      label: \"Credentials\",\r\n      completed: false,\r\n      state: \"active\",\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <UserFormUsernameField />\r\n          <UserFormPasswordField />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      label: \"Dummy Step\",\r\n      completed: false,\r\n      state: \"active\",\r\n    },\r\n    {\r\n      label: \"Dummy Step 2\",\r\n      completed: false,\r\n      state: \"active\",\r\n    },\r\n  ];\r\n\r\n  const formMethods = useForm<UserFormInputs>({\r\n    defaultValues: userFormDefaultValues,\r\n    shouldUnregister: false,\r\n    mode: \"onBlur\",\r\n  });\r\n\r\n  const { control } = formMethods;\r\n\r\n  const submitButtonRef = useRef<IStepButtonRef>(null);\r\n  const backButtonRef = useRef<IStepButtonRef>(null);\r\n  const nextButtonRef = useRef<IStepButtonRef>(null);\r\n\r\n  const disableButtons = (disable: boolean) => {\r\n    const setSubmitting = submitButtonRef?.current?.setSubmitting;\r\n    setSubmitting && setSubmitting(disable);\r\n\r\n    const back = backButtonRef?.current?.setDisabled;\r\n    back && back(disable);\r\n\r\n    const next = nextButtonRef?.current?.setDisabled;\r\n    next && next(disable);\r\n  };\r\n\r\n  const onSubmit: SubmitHandler<UserFormInputs> = async (\r\n    values: UserFormInputs\r\n  ) => {\r\n    console.log(\"Sent values: \" + JSON.stringify(values));\r\n\r\n    disableButtons(true);\r\n\r\n    await setTimeout(() => {\r\n      addToast({\r\n        id: \"submit\",\r\n        title: \"Information saved\",\r\n        variant: \"positive\",\r\n        persist: false,\r\n      });\r\n      resetFormValues(control);\r\n\r\n      disableButtons(false);\r\n    }, 5000);\r\n  };\r\n\r\n  const stepper: IStepperProps = {\r\n    steps: steps,\r\n    currentStep: 0,\r\n    formMethods: formMethods,\r\n    handleSubmitButton: onSubmit,\r\n    editMode: true,\r\n    submitButtonRef: submitButtonRef,\r\n    backButtonRef: backButtonRef,\r\n    nextButtonRef: nextButtonRef,\r\n  };\r\n\r\n  return (\r\n    <PageView\r\n      heading=\"Stepper component\"\r\n      actions={\r\n        <>\r\n          <Button\r\n            value=\"Open SummaryView\"\r\n            onClick={() => setOpen(true)}\r\n            disabled={open}\r\n          />\r\n\r\n          <Button\r\n            value=\"Open As Modal\"\r\n            onClick={() => {\r\n              openModal();\r\n              setOpen(false); //Close the summary view otherwise it will go on infinite render due to duplicate form.\r\n            }}\r\n            disabled={isOpen}\r\n          />\r\n        </>\r\n      }\r\n    >\r\n      {open && (\r\n        <SummaryView\r\n          caption=\"FA user\"\r\n          heading=\"New user\"\r\n          onClose={() => setOpen(false)}\r\n          stepper={stepper}\r\n        ></SummaryView>\r\n      )}\r\n      <ModalWrapper style={{ height: \"90vh\", width: \"30vw\" }}>\r\n        <SummaryView\r\n          caption=\"FA user\"\r\n          heading=\"New user\"\r\n          onClose={() => closeModal()}\r\n          stepper={stepper}\r\n        ></SummaryView>\r\n      </ModalWrapper>\r\n    </PageView>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["userFormDefaultValues","firstName","undefined","lastName","address","phone","email","username","password","UserFirstNameField","_errors$firstName","_useFormContext","useFormContext","register","errors","_jsx","Box","direction","children","FormControl","label","errorText","message","helpText","required","TextField","name","placeholder","error","ref","minLength","value","UserLastNameField","_errors$lastName","_useFormContext2","AddressField","_ref","i","_useFormContext3","PhoneField","_errors$phone","_useFormContext4","pattern","EmailField","_errors$email","_useFormContext5","UserFormUsernameField","_errors$username","_useFormContext6","UserFormPasswordField","_errors$password","_useFormContext7","_useState","useState","_useState2","_slicedToArray","open","setOpen","_useModal","useModal","_useModal2","ModalWrapper","openModal","closeModal","isOpen","steps","completed","state","content","_jsxs","formMethods","useForm","defaultValues","shouldUnregister","mode","control","submitButtonRef","useRef","backButtonRef","nextButtonRef","disableButtons","disable","_submitButtonRef$curr","_backButtonRef$curren","_nextButtonRef$curren","setSubmitting","current","back","setDisabled","next","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","console","log","JSON","stringify","setTimeout","addToast","id","title","variant","persist","resetFormValues","stop","_x","apply","arguments","stepper","currentStep","handleSubmitButton","editMode","PageView","heading","actions","_Fragment","Button","onClick","disabled","SummaryView","caption","onClose","style","height","width"],"sourceRoot":""}