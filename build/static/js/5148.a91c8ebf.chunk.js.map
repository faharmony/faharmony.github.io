{"version":3,"file":"static/js/5148.a91c8ebf.chunk.js","mappings":"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","sources":["modules/components/pages/Form.tsx"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  TextField,\r\n  Checkbox,\r\n  Combobox,\r\n  Button,\r\n  DatePicker,\r\n  Toggle,\r\n  useForm,\r\n  useFormContext,\r\n  useFormDatePickerProps,\r\n  resetFormValues,\r\n} from \"@faharmony/form\";\r\nimport { Box } from \"@faharmony/theme\";\r\nimport { formatDate } from \"@faharmony/locale\";\r\nimport type {\r\n  ComboboxOptionType,\r\n  ComboboxOptionsType,\r\n  SubmitHandler,\r\n} from \"@faharmony/form\";\r\nimport type { FC } from \"react\";\r\n\r\ninterface UserFormInputs {\r\n  fullName?: string;\r\n  username: string;\r\n  password: string;\r\n  dob: string;\r\n  roles: ComboboxOptionType[];\r\n  massiveOptions: ComboboxOptionType[];\r\n  locale?: ComboboxOptionType;\r\n  darkMode?: boolean;\r\n  terms: boolean;\r\n  privacy: boolean;\r\n}\r\n\r\nconst userFormDefaultValues: Partial<UserFormInputs> = {\r\n  fullName: \"\",\r\n  username: \"Love\",\r\n  password: \"KesKus44tA\",\r\n  dob: formatDate(new Date(\"01-01-2020\")),\r\n  darkMode: false,\r\n  locale: { value: \"en\", label: \"English\" },\r\n  terms: false,\r\n  privacy: false,\r\n};\r\n\r\nconst UserFormFullNameField: FC = () => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n  } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <FormControl label=\"Full name\" errorText={errors.fullName?.message}>\r\n      <TextField\r\n        name=\"fullName\"\r\n        placeholder=\"Enter full name\"\r\n        error={!!errors.fullName}\r\n        registerRef={register(\"fullName\")}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormUsernameField: FC = () => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n  } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <FormControl\r\n      label=\"Username\"\r\n      helpText=\"Login username for the user.\"\r\n      errorText={errors.username?.message}\r\n      required\r\n    >\r\n      <TextField\r\n        name=\"username\"\r\n        placeholder=\"Enter username\"\r\n        error={!!errors.username}\r\n        registerRef={register(\"username\", {\r\n          required: \"Username is required\",\r\n          minLength: { value: 4, message: \"At least 4 characters required.\" },\r\n        })}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormUsernameFieldWithLongLabel: FC = () => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n  } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <FormControl\r\n      label=\"Long label for a long field (Testing positioning of help and asterick )\"\r\n      helpText=\"Login username for the user.\"\r\n      errorText={errors.username?.message}\r\n      required\r\n    >\r\n      <TextField\r\n        name=\"username\"\r\n        placeholder=\"Enter username\"\r\n        error={!!errors.username}\r\n        registerRef={register(\"username\", {\r\n          required: \"Username is required\",\r\n          minLength: { value: 4, message: \"At least 4 characters required.\" },\r\n        })}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormPasswordField: FC = () => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n  } = useFormContext<UserFormInputs>();\r\n  const passwordPatternRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\r\n  const passwordPatternMessage =\r\n    \"Password should be minimum 8 characters long and contain at least one uppercase letter, one lowercase letter and one number.\";\r\n  return (\r\n    <FormControl\r\n      label=\"Password\"\r\n      helpText=\"Login password for the user.\"\r\n      errorText={errors.password?.message}\r\n      required\r\n    >\r\n      <TextField\r\n        name=\"password\"\r\n        type=\"password\"\r\n        placeholder=\"Enter password\"\r\n        error={!!errors.password}\r\n        registerRef={register(\"password\", {\r\n          required: \"Password is required\",\r\n          pattern: {\r\n            value: passwordPatternRegex,\r\n            message: passwordPatternMessage,\r\n          },\r\n        })}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormDOBField: FC = () => {\r\n  const formDatePickerProps = useFormDatePickerProps(\r\n    \"dob\",\r\n    userFormDefaultValues.dob\r\n  );\r\n\r\n  return (\r\n    <FormControl label=\"Date of birth\" required>\r\n      <DatePicker\r\n        {...formDatePickerProps}\r\n        dateFormat=\"dd.MM.yyyy hh:mm a\"\r\n        selected={new Date(\"2021/05/04 22:21\")}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormRolesField: FC = () => {\r\n  const rolesOptions: ComboboxOptionsType = [\r\n    { label: \"Admin\", value: \"admin\" },\r\n    { label: \"BO\", value: \"back\" },\r\n    { label: \"Client\", value: \"front\" },\r\n    { label: \"Super Admin\", value: \"super\", isDisabled: true },\r\n  ];\r\n  return (\r\n    <FormControl label=\"Roles\" required>\r\n      <Combobox\r\n        name=\"roles\"\r\n        required\r\n        placeholder=\"Select roles...\"\r\n        options={rolesOptions}\r\n        isMulti\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormMassiveComboboxField: FC = () => {\r\n  const options = [];\r\n  for (let i = 0; i < 10000; i = i + 1) {\r\n    options.push({ value: i, label: `Option ${i}` });\r\n  }\r\n  return (\r\n    <Box width={\"500px\"}>\r\n      <FormControl label=\"Massive Options\" required>\r\n        <Combobox\r\n          name=\"massiveOptions\"\r\n          required\r\n          placeholder=\"Select option...\"\r\n          options={options}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst UserFormLocaleField: FC = () => {\r\n  const localeOptions: ComboboxOptionsType = [\r\n    { label: \"English\", value: \"en\" },\r\n    { label: \"Suomi\", value: \"fi\" },\r\n    { label: \"Sverige\", value: \"sv\" },\r\n  ];\r\n  return (\r\n    <FormControl label=\"Locale\">\r\n      <Combobox\r\n        name=\"locale\"\r\n        placeholder=\"Select locale...\"\r\n        options={localeOptions}\r\n        isSearchable={false}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormDarkModeField: FC = () => {\r\n  const { register } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <FormControl label=\"Prefer dark mode?\">\r\n      <Toggle name=\"darkMode\" registerRef={register(\"darkMode\")} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormTermsField: FC = () => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n  } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <>\r\n      <FormControl\r\n        label=\"Terms and conditions\"\r\n        errorText={errors.terms?.message}\r\n      >\r\n        <Checkbox\r\n          name=\"terms\"\r\n          label=\"Accept the terms and conditions.\"\r\n          registerRef={register(\"terms\", {\r\n            required: \"It is required to accept the terms and condition\",\r\n          })}\r\n        />\r\n      </FormControl>\r\n      <FormControl errorText={errors.privacy?.message}>\r\n        <Checkbox\r\n          name=\"privacy\"\r\n          label=\"Accept the privacy policy.\"\r\n          helpText=\"Test\"\r\n          registerRef={register(\"privacy\", {\r\n            required: \"It is required to accept the privacy policy\",\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </>\r\n  );\r\n};\r\n\r\nconst UserFormButtons: FC = () => {\r\n  const { formState, control } = useFormContext<UserFormInputs>();\r\n  const { isSubmitting, isDirty } = formState;\r\n  return (\r\n    <Box direction=\"row-reverse\">\r\n      <Button\r\n        type=\"submit\"\r\n        variant=\"primary\"\r\n        value=\"Add user\"\r\n        loading={isSubmitting}\r\n      />\r\n      <Button\r\n        type=\"reset\"\r\n        variant=\"secondary\"\r\n        value=\"Reset form\"\r\n        onClick={() => resetFormValues(control)}\r\n        disabled={!isDirty}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst UserForm: FC = () => {\r\n  const formMethods = useForm<UserFormInputs>({\r\n    defaultValues: userFormDefaultValues,\r\n  });\r\n  const onSubmit: SubmitHandler<UserFormInputs> = React.useCallback(\r\n    async (values) => {\r\n      console.log(values);\r\n      // Dummy wait for 1s.\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n    },\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Form\r\n      formMethods={formMethods}\r\n      onSubmit={formMethods.handleSubmit(onSubmit)}\r\n    >\r\n      <UserFormFullNameField />\r\n      <UserFormUsernameField />\r\n      <UserFormUsernameFieldWithLongLabel />\r\n      <UserFormPasswordField />\r\n      <UserFormDOBField />\r\n      <UserFormRolesField />\r\n      <UserFormMassiveComboboxField />\r\n      <UserFormLocaleField />\r\n      <UserFormDarkModeField />\r\n      <UserFormTermsField />\r\n      <UserFormButtons />\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default UserForm;\r\n"],"names":["userFormDefaultValues","fullName","username","password","dob","formatDate","Date","darkMode","locale","value","label","terms","privacy","UserFormFullNameField","_errors$fullName","register","formState","errors","useFormContext","_jsx","FormControl","errorText","message","children","TextField","name","placeholder","error","registerRef","UserFormUsernameField","_errors$username","helpText","required","minLength","UserFormUsernameFieldWithLongLabel","_errors$username2","UserFormPasswordField","_errors$password","type","pattern","UserFormDOBField","formDatePickerProps","useFormDatePickerProps","DatePicker","dateFormat","selected","UserFormRolesField","Combobox","options","isDisabled","isMulti","UserFormMassiveComboboxField","i","push","concat","Box","width","UserFormLocaleField","isSearchable","UserFormDarkModeField","Toggle","UserFormTermsField","_errors$terms","_errors$privacy","_jsxs","_Fragment","Checkbox","UserFormButtons","control","isSubmitting","isDirty","direction","Button","variant","loading","onClick","resetFormValues","disabled","UserForm","formMethods","useForm","defaultValues","onSubmit","React","async","console","log","values","Promise","resolve","setTimeout","Form","handleSubmit"],"sourceRoot":""}