{"version":3,"file":"static/js/6071.fc2816bc.chunk.js","mappings":"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","sources":["modules/components/pages/Form.tsx"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  TextField,\r\n  Checkbox,\r\n  Combobox,\r\n  Button,\r\n  DatePicker,\r\n  Toggle,\r\n  useForm,\r\n  useFormContext,\r\n  useFormDatePickerProps,\r\n} from \"@faharmony/form\";\r\nimport { Box } from \"@faharmony/theme\";\r\nimport { formatDate } from \"@faharmony/locale\";\r\nimport type {\r\n  ComboboxOptionType,\r\n  ComboboxOptionsType,\r\n  SubmitHandler,\r\n} from \"@faharmony/form\";\r\nimport type { FC } from \"react\";\r\n\r\ninterface UserFormInputs {\r\n  fullName?: string;\r\n  username: string;\r\n  password: string;\r\n  dob: string;\r\n  roles: ComboboxOptionType[];\r\n  massiveOptions: ComboboxOptionType[];\r\n  locale?: ComboboxOptionType;\r\n  darkMode?: boolean;\r\n  terms: boolean;\r\n  privacy: boolean;\r\n}\r\n\r\nconst userFormDefaultValues: Partial<UserFormInputs> = {\r\n  fullName: \"\",\r\n  username: \"Love\",\r\n  password: \"KesKus44tA\",\r\n  dob: formatDate(new Date(\"01-01-2020\")),\r\n  darkMode: false,\r\n  locale: { value: \"en\", label: \"English\" },\r\n  terms: false,\r\n  privacy: false,\r\n};\r\n\r\nconst UserFormFullNameField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <FormControl label=\"Full name\" errorText={errors.fullName?.message}>\r\n      <TextField\r\n        name=\"fullName\"\r\n        placeholder=\"Enter full name\"\r\n        error={!!errors.fullName}\r\n        ref={register}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormUsernameField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <FormControl\r\n      label=\"Username\"\r\n      helpText=\"Login username for the user.\"\r\n      errorText={errors.username?.message}\r\n      required\r\n    >\r\n      <TextField\r\n        name=\"username\"\r\n        placeholder=\"Enter username\"\r\n        error={!!errors.username}\r\n        ref={register({\r\n          required: \"Username is required\",\r\n          minLength: { value: 4, message: \"At least 4 characters required.\" },\r\n        })}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormUsernameFieldWithLongLabel: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <FormControl\r\n      label=\"Long label for a long field (Testing positioning of help and asterick )\"\r\n      helpText=\"Login username for the user.\"\r\n      errorText={errors.username?.message}\r\n      required\r\n    >\r\n      <TextField\r\n        name=\"username\"\r\n        placeholder=\"Enter username\"\r\n        error={!!errors.username}\r\n        ref={register({\r\n          required: \"Username is required\",\r\n          minLength: { value: 4, message: \"At least 4 characters required.\" },\r\n        })}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormPasswordField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  const passwordPatternRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\r\n  const passwordPatternMessage =\r\n    \"Password should be minimum 8 characters long and contain at least one uppercase letter, one lowercase letter and one number.\";\r\n  return (\r\n    <FormControl\r\n      label=\"Password\"\r\n      helpText=\"Login password for the user.\"\r\n      errorText={errors.password?.message}\r\n      required\r\n    >\r\n      <TextField\r\n        name=\"password\"\r\n        type=\"password\"\r\n        placeholder=\"Enter password\"\r\n        error={!!errors.password}\r\n        ref={register({\r\n          required: \"Password is required\",\r\n          pattern: {\r\n            value: passwordPatternRegex,\r\n            message: passwordPatternMessage,\r\n          },\r\n        })}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormDOBField: FC = () => {\r\n  const formDatePickerProps = useFormDatePickerProps(\r\n    \"dob\",\r\n    userFormDefaultValues.dob\r\n  );\r\n  return (\r\n    <FormControl label=\"Date of birth\" required>\r\n      <DatePicker {...formDatePickerProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormRolesField: FC = () => {\r\n  const rolesOptions: ComboboxOptionsType = [\r\n    { label: \"Admin\", value: \"admin\" },\r\n    { label: \"BO\", value: \"back\" },\r\n    { label: \"Client\", value: \"front\" },\r\n    { label: \"Super Admin\", value: \"super\", isDisabled: true },\r\n  ];\r\n  return (\r\n    <FormControl label=\"Roles\" required>\r\n      <Combobox\r\n        name=\"roles\"\r\n        required\r\n        placeholder=\"Select roles...\"\r\n        options={rolesOptions}\r\n        isMulti\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormMassiveComboboxField: FC = () => {\r\n  const options = [];\r\n  for (let i = 0; i < 10000; i = i + 1) {\r\n    options.push({ value: i, label: `Option ${i}` });\r\n  }\r\n  return (\r\n    <FormControl label=\"Massive Options\" required>\r\n      <Combobox\r\n        name=\"massiveOptions\"\r\n        required\r\n        placeholder=\"Select option...\"\r\n        options={options}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormLocaleField: FC = () => {\r\n  const localeOptions: ComboboxOptionsType = [\r\n    { label: \"English\", value: \"en\" },\r\n    { label: \"Suomi\", value: \"fi\" },\r\n    { label: \"Sverige\", value: \"sv\" },\r\n  ];\r\n  return (\r\n    <FormControl label=\"Locale\">\r\n      <Combobox\r\n        name=\"locale\"\r\n        placeholder=\"Select locale...\"\r\n        options={localeOptions}\r\n        isSearchable={false}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormDarkModeField: FC = () => {\r\n  const { register } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <FormControl label=\"Prefer dark mode?\">\r\n      <Toggle name=\"darkMode\" ref={register} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormTermsField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <>\r\n      <FormControl\r\n        label=\"Terms and conditions\"\r\n        errorText={errors.terms?.message}\r\n      >\r\n        <Checkbox\r\n          name=\"terms\"\r\n          label=\"Accept the terms and conditions.\"\r\n          ref={register({\r\n            required: \"It is required to accept the terms and condition\",\r\n          })}\r\n        />\r\n      </FormControl>\r\n      <FormControl errorText={errors.privacy?.message}>\r\n        <Checkbox\r\n          name=\"privacy\"\r\n          label=\"Accept the privacy policy.\"\r\n          helpText=\"Test\"\r\n          ref={register({\r\n            required: \"It is required to accept the privacy policy\",\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </>\r\n  );\r\n};\r\n\r\nconst UserFormButtons: FC = () => {\r\n  const { formState } = useFormContext<UserFormInputs>();\r\n  const { isSubmitting, isDirty } = formState;\r\n  return (\r\n    <Box direction=\"row-reverse\">\r\n      <Button\r\n        type=\"submit\"\r\n        variant=\"primary\"\r\n        value=\"Add user\"\r\n        loading={isSubmitting}\r\n      />\r\n      <Button\r\n        type=\"reset\"\r\n        variant=\"secondary\"\r\n        value=\"Reset form\"\r\n        disabled={!isDirty}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst UserForm: FC = () => {\r\n  const formMethods = useForm<UserFormInputs>({\r\n    defaultValues: userFormDefaultValues,\r\n  });\r\n  const onSubmit: SubmitHandler<UserFormInputs> = React.useCallback(\r\n    async (values) => {\r\n      console.log(values);\r\n      // Dummy wait for 1s.\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n    },\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Form\r\n      formMethods={formMethods}\r\n      onSubmit={formMethods.handleSubmit(onSubmit)}\r\n    >\r\n      <UserFormFullNameField />\r\n      <UserFormUsernameField />\r\n      <UserFormUsernameFieldWithLongLabel />\r\n      <UserFormPasswordField />\r\n      <UserFormDOBField />\r\n      <UserFormRolesField />\r\n      <UserFormMassiveComboboxField />\r\n      <UserFormLocaleField />\r\n      <UserFormDarkModeField />\r\n      <UserFormTermsField />\r\n      <UserFormButtons />\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default UserForm;\r\n"],"names":["userFormDefaultValues","fullName","username","password","dob","formatDate","Date","darkMode","locale","value","label","terms","privacy","UserFormFullNameField","useFormContext","register","errors","errorText","message","name","placeholder","error","ref","UserFormUsernameField","helpText","required","minLength","UserFormUsernameFieldWithLongLabel","UserFormPasswordField","type","pattern","UserFormDOBField","formDatePickerProps","useFormDatePickerProps","UserFormRolesField","options","isDisabled","isMulti","UserFormMassiveComboboxField","i","push","UserFormLocaleField","isSearchable","UserFormDarkModeField","UserFormTermsField","UserFormButtons","formState","isSubmitting","isDirty","direction","variant","loading","disabled","formMethods","useForm","defaultValues","onSubmit","React","values","console","log","Promise","resolve","setTimeout","handleSubmit"],"sourceRoot":""}