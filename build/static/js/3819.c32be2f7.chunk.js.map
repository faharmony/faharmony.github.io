{"version":3,"file":"static/js/3819.c32be2f7.chunk.js","mappings":"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","sources":["modules/components/pages/Form2.tsx"],"sourcesContent":["import {\n  Form,\n  useForm,\n  resetFormValues,\n  FormValuesWatcher,\n  DatePicker,\n  FormControl,\n  Toggle,\n  TextField,\n  DateRangePicker,\n  useFormDateRangeProps,\n} from \"@faharmony/form\";\nimport { Box, useExternalRef } from \"@faharmony/theme\";\nimport { Button, Divider, InfoBox } from \"@faharmony/components\";\nimport { PageView } from \"@faharmony/views\";\nimport React from \"react\";\n\ntype FormInputs = {\n  testDate: Date;\n  realDate: Date;\n  toggle: boolean;\n  number: number;\n  startDate: Date;\n  endDate: Date;\n};\n\nconst defaultValues: Partial<FormInputs> = {\n  testDate: new Date(),\n  realDate: new Date(\"2020-12-12\"),\n  toggle: true,\n  number: 1343400.234,\n  startDate: undefined,\n  endDate: undefined,\n};\n\nconst enabledDates = [\n  new Date(),\n  new Date(\"2021-03-12\"),\n  new Date(\"2021-03-29\"),\n];\n\nconst FormNode = () => {\n  const formMethods = useForm<FormInputs>({\n    defaultValues,\n    criteriaMode: \"all\",\n  });\n  const { control, handleSubmit, register, setValue } = formMethods;\n\n  const onSubmit = handleSubmit(console.log);\n  return (\n    <Form formMethods={formMethods} style={{ width: \"100%\" }} direction=\"row\">\n      <Box direction=\"column\" width={\"350px\"} alignItems=\"start\">\n        <FormControl label=\"Date\">\n          <DatePicker name=\"testDate\" includeDates={enabledDates} ref={useExternalRef()} />\n        </FormControl>\n        <FormControl label=\"Date (disabled)\">\n          <DatePicker\n            name=\"realDate\"\n            onChange={console.log}\n            includeDates={[new Date()]}\n            disabled\n          />\n        </FormControl>\n        <Box>\n          <FormControl label=\"Toggle (enabled)\">\n            <Toggle name=\"toggle\" ref={register} label=\"Hello world\" />\n          </FormControl>\n          <FormControl label=\"Toggle (disabled)\">\n            <Box>\n              <Toggle disabled />\n              <Toggle disabled checked={true} />\n            </Box>\n          </FormControl>\n        </Box>\n        <FormControl label=\"NumberField\">\n          <TextField\n            name=\"number\"\n            ref={register}\n            prefixText=\"EUR\"\n            isClearable\n            onInputClear={() => setValue(\"number\", \"\")}\n          />\n        </FormControl>\n        <Divider />\n\n        <UserFormDateRangeField />\n        <Box justifyContent=\"space-between\">\n          <Box width=\"auto\">\n            <Button\n              value=\"Reset\"\n              variant=\"secondary\"\n              loading\n              onClick={() => resetFormValues(control)}\n            />\n            <Button\n              type=\"submit\"\n              value=\"Submit\"\n              onClick={onSubmit}\n              variant=\"primary\"\n            />\n          </Box>\n        </Box>\n      </Box>\n      <div>\n        <FormValuesWatcher />\n      </div>\n    </Form>\n  );\n};\n\nconst Page = () => (\n  <PageView heading=\"Form\" overflow=\"scroll\">\n    <FormNode />\n    <Box style={{ width: \"300px\" }}>\n      <FormControl label=\"Date (readonly)\">\n        <DatePicker\n          name=\"realDate\"\n          onChange={console.log}\n          selected={new Date()}\n          readOnly\n        />\n      </FormControl>\n\n      <InfoBox field=\"Date \">\n        <DatePicker\n          name=\"realDate\"\n          onDateChange={console.log}\n          selected={new Date()}\n          ref={useExternalRef()}\n        />\n      </InfoBox>\n    </Box>\n\n    <UserFormDateRangeField2 />\n  </PageView>\n);\n\nexport default Page;\n\nconst UserFormDateRangeField: React.FC = () => {\n  const props = useFormDateRangeProps(\n    \"startDate\",\n    \"endDate\",\n    new Date(\"2021/05/04 22:21\"),\n    new Date(\"2021/06/04 15:30\")\n  );\n\n  return (\n    <FormControl label=\"Date Range in a Form\" required>\n      <DateRangePicker\n        {...props}\n        onStartCalenderClose={() => {\n          console.log(\"start calender closed \");\n        }}\n        onEndCalenderClose={() => {\n          console.log(\"end calender closed \");\n        }}\n        showCustomTimeSelector\n        hideTodayButton\n      ></DateRangePicker>\n    </FormControl>\n  );\n};\n\nconst UserFormDateRangeField2: React.FC = () => {\n  const [startDate, setStartDate] = React.useState<Date | undefined>(\n    new Date(\"2021/05/04 22:21\")\n  );\n  const [endDate, setEndDate] = React.useState<Date | undefined>(\n    new Date(\"2021/05/04 22:21\")\n  );\n\n  React.useEffect(\n    () =>\n      console.log(\n        \"This is date state controlled date range outside a form \",\n        startDate,\n        endDate\n      ),\n    [startDate, endDate]\n  );\n\n  return (\n    <Box justifyContent=\"flex-start\">\n      <FormControl label=\"Test Range without form \" required>\n        <Box width={\"min-content\"}>\n          <DateRangePicker\n            endDate={endDate}\n            startDate={startDate}\n            setEndDate={setEndDate}\n            setStartDate={setStartDate}\n            onStartCalenderClose={() => {\n              console.log(\"start calender closed \");\n            }}\n            onEndCalenderClose={() => {\n              console.log(\"end calender closed \");\n            }}\n            showCustomTimeSelector\n          ></DateRangePicker>\n        </Box>\n      </FormControl>\n    </Box>\n  );\n};\n"],"names":["defaultValues","testDate","Date","realDate","toggle","number","startDate","undefined","endDate","enabledDates","FormNode","formMethods","useForm","criteriaMode","control","handleSubmit","register","setValue","onSubmit","console","log","style","width","direction","alignItems","label","name","includeDates","ref","useExternalRef","onChange","disabled","checked","prefixText","isClearable","onInputClear","UserFormDateRangeField","justifyContent","value","variant","loading","onClick","resetFormValues","type","heading","overflow","selected","readOnly","field","onDateChange","UserFormDateRangeField2","props","useFormDateRangeProps","required","onStartCalenderClose","onEndCalenderClose","showCustomTimeSelector","hideTodayButton","React","setStartDate","setEndDate"],"sourceRoot":""}