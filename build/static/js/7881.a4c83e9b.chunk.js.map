{"version":3,"file":"static/js/7881.a4c83e9b.chunk.js","mappings":"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","sources":["modules/logo/components/ComboBox.tsx","modules/logo/components/ConfigDrawer.tsx","modules/logo/components/Display.tsx","modules/logo/components/InputField.tsx","modules/logo/index.ts","modules/logo/pages/MainPage.tsx","modules/logo/state/index.ts","modules/logo/state/initialState.ts","modules/logo/state/reducers.ts"],"sourcesContent":["import { Combobox, IComboboxProps } from \"@faharmony/form\";\r\nimport { theme } from \"@faharmony/theme\";\r\nimport { Text } from \"@faharmony/components\";\r\n\r\n/**\r\n * @author Siddhant Gupta <siddhant@fasolutions.com>\r\n */\r\nexport const ComboBox = (props: IComboboxProps) => {\r\n  return (\r\n    <div>\r\n      {props.label && (\r\n        <div style={{ marginLeft: theme.spacing.sm }}>\r\n          <Text value={props.label} variant=\"h5\" />\r\n        </div>\r\n      )}\r\n      <Combobox {...props} name={props.label} />\r\n      {props.helpText && (\r\n        <Text value={props.helpText} variant=\"small\" color=\"secondary\" />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ComboBox;\r\n","import React from \"react\";\r\nimport { SummaryView } from \"@faharmony/views\";\r\nimport { theme, Box } from \"@faharmony/theme\";\r\nimport { insertQueryParam } from \"@faharmony/router\";\r\n\r\nimport { useModuleState, useDispatch, ModuleActions } from \"../state\";\r\nimport { ComboBox } from \"./ComboBox\";\r\nimport { InputField } from \"./InputField\";\r\n\r\ninterface Obj {\r\n  value: string;\r\n  label: string;\r\n}\r\n\r\nconst configurationOptions = {\r\n  variants: [\r\n    { value: \"all\", label: \"All\" },\r\n    { value: \"company\", label: \"Company branding\" },\r\n    { value: \"platform\", label: \"Apps branding\" },\r\n  ],\r\n  icon: [\r\n    { value: \"all\", label: \"All\" },\r\n    { value: \"transparent\", label: \"Transparent\" },\r\n    { value: \"opaque\", label: \"Opaque\" },\r\n  ],\r\n};\r\n\r\nconst getCurrentOption = (\r\n  option: keyof typeof configurationOptions,\r\n  value: string\r\n) =>\r\n  configurationOptions[option].find((o) => o.value === value) ||\r\n  configurationOptions[option][0];\r\n\r\nconst ColorPicker = ({ onChange }: { onChange: (o: Obj) => void }) => {\r\n  const {\r\n    config: { color },\r\n  } = useModuleState();\r\n  const [value, setValue] = React.useState(color.primary);\r\n  const handleChange = (val: string) => {\r\n    setValue(val);\r\n    onChange({ value: val, label: \"\" });\r\n  };\r\n  return <InputField handleChange={handleChange} value={value} type=\"color\" />;\r\n};\r\n\r\n/**\r\n * @author Siddhant Gupta <siddhant@fasolutions.com>\r\n */\r\nexport const ConfigDrawer = () => {\r\n  const dispatch = useDispatch();\r\n  const { isConfigDrawerOpen, config } = useModuleState();\r\n  const { variant, icon } = config;\r\n\r\n  const handleChange = (\r\n    action: Function,\r\n    option: any,\r\n    defaultValue = \"all\"\r\n  ) => {\r\n    const key = action.toString().split(\"set\")[1];\r\n    const value = option?.value || defaultValue;\r\n    dispatch(action(value));\r\n    insertQueryParam(key, value);\r\n  };\r\n\r\n  return isConfigDrawerOpen ? (\r\n    <SummaryView\r\n      caption=\"Logo\"\r\n      heading=\"Configuration\"\r\n      onClose={() => dispatch(ModuleActions.toggleConfigDrawer())}\r\n    >\r\n      <Box\r\n        direction=\"column\"\r\n        alignItems=\"normal\"\r\n        style={{ padding: theme.spacing.md }}\r\n      >\r\n        <ComboBox\r\n          label=\"Variant\"\r\n          placeholder=\"Select variant...\"\r\n          options={configurationOptions.variants}\r\n          defaultValue={getCurrentOption(\"variants\", variant)}\r\n          onChange={(o: any) => handleChange(ModuleActions.setVariant, o)}\r\n        />\r\n        <ComboBox\r\n          label=\"Icon style\"\r\n          placeholder=\"Select icon style...\"\r\n          options={configurationOptions.icon}\r\n          defaultValue={getCurrentOption(\"icon\", icon)}\r\n          onChange={(o: any) => handleChange(ModuleActions.setIcon, o)}\r\n        />\r\n        <ColorPicker\r\n          onChange={(o: any) => handleChange(ModuleActions.setColor, o)}\r\n        />\r\n      </Box>\r\n    </SummaryView>\r\n  ) : null;\r\n};\r\n\r\nexport default ConfigDrawer;\r\n","import { Accordion, Text, Preloader } from \"@faharmony/components\";\r\n\r\nimport { useModuleState } from \"../state\";\r\n\r\n/**\r\n * @author Siddhant Gupta <siddhant@fasolutions.com>\r\n */\r\nexport const Display = () => {\r\n  const state = useModuleState();\r\n  //   const dispatch = useDispatch();\r\n  if (state.loading) return <Preloader />;\r\n  else\r\n    return (\r\n      <div>\r\n        <Text\r\n          value=\"All generated logos will appear here. They can be configured using side-drawer.\"\r\n          color=\"disabled\"\r\n        />\r\n        <br />\r\n        <br />\r\n        <Accordion\r\n          independent\r\n          panels={[\r\n            {\r\n              id: \"standard\",\r\n              heading: \"Standard logos\",\r\n              defaultActive: true,\r\n              content: <div />,\r\n            },\r\n            {\r\n              id: \"custom\",\r\n              heading: \"Customized logos\",\r\n              defaultActive: true,\r\n              content: <div />,\r\n            },\r\n          ]}\r\n        />\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Display;\r\n","import React from \"react\";\r\nimport { theme, styled } from \"@faharmony/theme\";\r\nimport { Text } from \"@faharmony/components\";\r\n\r\nexport interface IInputFieldProps {\r\n  label?: string;\r\n  helpText?: string;\r\n  value: string;\r\n  placeholder?: string;\r\n  handleChange: (value: string) => void;\r\n  type: string;\r\n}\r\n\r\nconst StyledInput = styled.input`\r\n  height: 36px;\r\n`;\r\n\r\n/**\r\n * @author Siddhant Gupta <siddhant@fasolutions.com>\r\n */\r\nexport const InputField = (props: IInputFieldProps) => {\r\n  const { label, helpText, handleChange } = props;\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) =>\r\n    handleChange(e.target.value);\r\n  return (\r\n    <div>\r\n      {label && (\r\n        <div style={{ marginLeft: theme.spacing.sm }}>\r\n          <Text value={label} variant=\"h5\" />\r\n        </div>\r\n      )}\r\n      <StyledInput {...props} onChange={onChange} />\r\n      {helpText && <Text value={helpText} variant=\"small\" color=\"secondary\" />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputField;\r\n","/**\r\n * MODULE\r\n * ------\r\n * This is the module configuration\r\n * -- Change required here --\r\n *\r\n * @author Siddhant Gupta <siddhant@fasolutions.com>\r\n * @copyright FA Solutions Oy\r\n */\r\n\r\nimport { IModuleProps } from \"@faharmony/module\";\r\nimport { FALogoIconDefinition } from \"@faharmony/icons\";\r\nimport { MainPage } from \"./pages\";\r\nimport { ModuleState } from \"./state\";\r\n// import { appRoles } from \"../../config\";\r\n\r\n/** Should match the Module folder name */\r\nexport const ModuleId: string = `logo`;\r\n\r\n/** Fallback Module label.\r\n * Actual label is taken from locale files (key: moduleName) */\r\nconst ModuleLabelFallback: string = `Logo generator`;\r\n\r\n/**\r\n * List of roles to restrict access.\r\n * Empty array for unrestricted access.\r\n *\r\n * Use appRoles object defined in App configuration\r\n * to access roles available in app.\r\n */\r\nconst ModuleRoles: IModuleProps[\"roles\"] = [];\r\n\r\n/** Icon of the Module. Visible in Menu. */\r\nconst ModuleIcon: IModuleProps[\"icon\"] = FALogoIconDefinition;\r\n\r\n/** Sub-modules of the module. Visible in Menu\r\n * Empty array means no subModules. */\r\nconst subModules: IModuleProps[\"subModules\"] = [];\r\n\r\n/**\r\n * MODULE CONFIG\r\n * -------------\r\n * DO NOT CHANGE\r\n */\r\nexport default {\r\n  id: ModuleId,\r\n  component: MainPage,\r\n  label: ModuleLabelFallback,\r\n  roles: ModuleRoles,\r\n  icon: ModuleIcon,\r\n  state: ModuleState,\r\n  subModules,\r\n} as IModuleProps;\r\n","// {{Sample}}:MainView\r\n\r\nimport { PageView, PrimaryWithSidebarLayout } from \"@faharmony/views\";\r\nimport { useModuleTranslation } from \"@faharmony/module\";\r\nimport { Box } from \"@faharmony/theme\";\r\nimport { Button } from \"@faharmony/components\";\r\nimport { useLocation } from \"@faharmony/router\";\r\nimport { ModuleActions, useModuleState, useDispatch } from \"../state\";\r\nimport { ConfigDrawer, Display } from \"../components\";\r\n\r\nconst PageActions = () => {\r\n  const state = useModuleState();\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Box>\r\n      <Button\r\n        value=\"Configure logo\"\r\n        disabled={state.isConfigDrawerOpen}\r\n        onClick={() => dispatch(ModuleActions.toggleConfigDrawer())}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst useSetState = (): void => {\r\n  const dispatch = useDispatch();\r\n  const search = new URLSearchParams(useLocation().search);\r\n  search.delete(\"tab\");\r\n  if (search.toString()) {\r\n    const jsonString =\r\n      '\"' +\r\n      decodeURI(search.toString())\r\n        .replace(/\"/g, '\\\\\"')\r\n        .replace(/&/g, '\",\"')\r\n        .replace(/=/g, '\":\"') +\r\n      '\"';\r\n    const params = JSON.parse(`{${jsonString}}`);\r\n    Object.entries(params).forEach(([key, val]: [string, any]) => {\r\n      dispatch({ type: `logo/set${key}`, payload: decodeURIComponent(val) });\r\n    });\r\n  }\r\n  dispatch(ModuleActions.setLoading(false));\r\n};\r\n\r\n/**\r\n * Default page of module\r\n * @author Siddhant Gupta <siddhant@fasolutions.com>\r\n */\r\nexport const MainPage = () => {\r\n  const t = useModuleTranslation();\r\n  useSetState();\r\n  return (\r\n    <PageView heading={t(\"moduleName\")} actions={<PageActions />}>\r\n      <PrimaryWithSidebarLayout\r\n        primaryNode={<Display />}\r\n        secondaryNode={<ConfigDrawer />}\r\n      />\r\n    </PageView>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","/**\r\n * State\r\n * ---\r\n *\r\n * This directory contains module state.\r\n * Harmony uses the Redux-Toolkit setup and\r\n * treats each Module as a Slice.\r\n *\r\n * Use other files like `store.ts` and `reducers.ts`\r\n * to maintain the functionality of ModuleState.\r\n * This file is responsible for combining them.\r\n *\r\n * There is no need for separately creating or\r\n * maintaining `actions` as they are generated\r\n * using slice's case reducers.\r\n *\r\n * @readonly No edit required in this file unless\r\n * ModuleId changes.\r\n */\r\n\r\nimport {\r\n  createModuleState,\r\n  createUseModuleStateHook,\r\n  useDispatch,\r\n} from \"@faharmony/state\";\r\nimport initialState, { IModuleState } from \"./initialState\";\r\nimport * as reducers from \"./reducers\";\r\n\r\nconst ModuleID = \"logo\";\r\n\r\n/** Create Module's state using wrapper of createSlice(). */\r\nconst ModuleState = createModuleState({\r\n  /** name should be exact same as Module ID. */\r\n  name: ModuleID,\r\n  /** Initial value of Module's state. */\r\n  initialState,\r\n  /** Object of case reducers to modify Module's state. */\r\n  reducers,\r\n});\r\n\r\nconst {\r\n  useModuleState,\r\n  useModuleStateSelector,\r\n} = createUseModuleStateHook<IModuleState>(ModuleID);\r\n\r\n// Extract `actions` from Module's state\r\nconst { actions: ModuleActions } = ModuleState;\r\n// Export state for Module config and actions for dispatch usage.\r\nexport { ModuleState, ModuleActions, useModuleState, useModuleStateSelector };\r\n// Export State type definition\r\nexport * from \"./initialState\";\r\n\r\nexport { useDispatch };\r\n","/**\r\n * InitialState\r\n * ---\r\n * This file maintains the type definition\r\n * and the actual initialState of the Module.\r\n */\r\n\r\n/** Type definition of the Module's state */\r\nexport interface IModuleState {\r\n  loading: boolean;\r\n  isConfigDrawerOpen: boolean;\r\n  config: {\r\n    size: number;\r\n    color: { primary: string; secondary: string };\r\n    text: string;\r\n    variant: \"all\" | \"company\" | \"platform\";\r\n    icon: \"all\" | \"transparent\" | \"opaque\";\r\n  };\r\n}\r\n\r\nexport const colors = { brand: \"#AE001A\" };\r\n\r\n/** Initial state of Module */\r\nexport default {\r\n  loading: true,\r\n  isConfigDrawerOpen: true,\r\n  config: {\r\n    size: 200,\r\n    color: { primary: colors.brand, secondary: \"\" },\r\n    text: \"\",\r\n    variant: \"all\",\r\n    icon: \"all\",\r\n  },\r\n} as IModuleState;\r\n","/**\r\n * Reducers\r\n * ---\r\n * This file maintains all the reducers (modifiers)\r\n * for the Module's state. The name of reducer will\r\n * become the name of the action.\r\n *\r\n * A case reducer can choose to mutate the passed-in\r\n * state value directly instead of returning a new state.\r\n * This does not actually cause the store state to be\r\n * mutated directly; instead, thanks to immer, the\r\n * mutations are translated to copy operations that\r\n * result in a new state.\r\n */\r\nimport { CaseReducer, PayloadAction } from \"@faharmony/state\";\r\nimport { IModuleState } from \"./initialState\";\r\n\r\n// Generic types for ease-of-use\r\ntype Reducer = CaseReducer<IModuleState>;\r\ntype ReducerWithPayload<T> = CaseReducer<IModuleState, PayloadAction<T>>;\r\ntype Config = IModuleState[\"config\"];\r\n\r\n// -------------------\r\n// Edit reducers below\r\n\r\n/** Reducer without required payload.\r\n * @example dispatch(toggleLoading()) */\r\nexport const toggleLoading: Reducer = (state) => {\r\n  state.loading = !state.loading;\r\n};\r\n\r\n/** Reducer with required payload.\r\n * @example dispatch(setLoading(true)) */\r\nexport const setLoading: ReducerWithPayload<boolean> = (state, { payload }) => {\r\n  state.loading = payload;\r\n};\r\n\r\n/** Reducer with to toggle ConfigDrawer.*/\r\nexport const toggleConfigDrawer: Reducer = (state) => {\r\n  state.isConfigDrawerOpen = !state.isConfigDrawerOpen;\r\n};\r\n\r\nexport const setVariant: ReducerWithPayload<Config[\"variant\"]> = (\r\n  state,\r\n  { payload }\r\n) => {\r\n  state.config.variant = payload;\r\n};\r\n\r\nexport const setIcon: ReducerWithPayload<Config[\"icon\"]> = (\r\n  state,\r\n  { payload }\r\n) => {\r\n  state.config.icon = payload;\r\n};\r\n\r\nexport const setColor: ReducerWithPayload<Config[\"color\"] | string> = (\r\n  state,\r\n  { payload }\r\n) => {\r\n  if (typeof payload === \"string\") {\r\n    const colors = payload.split(\"@\");\r\n    state.config.color.primary = colors[0];\r\n    colors.length > 0 && (state.config.color.secondary = colors[1]);\r\n  } else state.config.color = { ...state.config.color, ...payload };\r\n};\r\n"],"names":["ComboBox","props","label","style","marginLeft","theme","value","variant","name","helpText","color","configurationOptions","variants","icon","getCurrentOption","option","find","o","ColorPicker","onChange","useModuleState","config","React","primary","setValue","InputField","handleChange","val","type","ConfigDrawer","dispatch","useDispatch","isConfigDrawerOpen","action","defaultValue","key","toString","split","insertQueryParam","caption","heading","onClose","ModuleActions","direction","alignItems","padding","placeholder","options","Display","loading","independent","panels","id","defaultActive","content","StyledInput","styled","e","target","ModuleId","ModuleIcon","FALogoIconDefinition","component","MainPage","roles","state","ModuleState","subModules","PageActions","disabled","onClick","t","useModuleTranslation","search","URLSearchParams","useLocation","delete","jsonString","decodeURI","replace","params","JSON","parse","Object","entries","forEach","payload","decodeURIComponent","useSetState","actions","primaryNode","secondaryNode","ModuleID","createModuleState","initialState","reducers","createUseModuleStateHook","useModuleStateSelector","colors","brand","size","secondary","text","toggleLoading","setLoading","toggleConfigDrawer","setVariant","setIcon","setColor","length"],"sourceRoot":""}