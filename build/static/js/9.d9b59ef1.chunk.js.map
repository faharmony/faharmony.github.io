{"version":3,"sources":["modules/welcome/state/store.ts","modules/welcome/state/reducers.ts","modules/welcome/pages/MainPage.tsx","modules/welcome/state/index.ts","modules/welcome/pages/index.ts"],"names":["initialState","loading","startLoading","state","stopLoading","setLoading","payload","Redux","t","useModule","dispatch","useDispatch","useModuleState","justifyContent","width","value","onClick","ModuleActions","spin","icon","faSpinner","MainPage","heading","toolbarContent","variant","ModuleState","createModuleState","name","reducers","actions"],"mappings":"sHAIA,oDAAO,MAAMA,EAAuB,CAAEC,SAAS,I,iCCE/C,iJAAMC,EAAyBC,IAC7BA,EAAMF,SAAU,GAGZG,EAAwBD,IAC5BA,EAAMF,SAAU,GAGZI,EAA0C,CAACF,GAASG,cACxDH,EAAMF,QAAUK,I,iCCflB,oHASA,MAAMC,EAAQ,KAAO,MACXC,EAAMC,cAAND,EACFE,EAAWC,cACXR,EAAQS,cACd,OACE,kBAAC,IAAD,CAAKC,eAAe,cAClB,kBAAC,IAAD,CAAKC,MAAM,QACT,kBAAC,IAAD,CACEC,MAAM,QACNC,QAAS,IAAMN,EAASO,gBAAcf,kBAExC,kBAAC,IAAD,CACEa,MAAM,OACNC,QAAS,IAAMN,EAASO,gBAAcb,iBAExC,kBAAC,IAAD,CACEW,MAAM,SACNC,QAAS,IAAMN,EAASO,gBAAcZ,YAAYF,EAAMF,aAG5D,kBAAC,IAAD,CAAMiB,KAAMf,EAAMF,QAASkB,KAAMC,OACjC,kBAAC,IAAD,CAAML,MAAOP,EAAE,eAmCRa,EAAW,KAAO,MACrBb,EAAMC,cAAND,EAER,OACE,kBAAC,IAAD,CACEc,QAASd,EAAE,cACXe,eACE,kBAAC,IAAD,CAAMC,QAAQ,MAAd,iEAKF,kBAACjB,EAAD,S,gCC7EN,0LAIA,MAEMkB,EAAcC,YAAkB,CACpCC,KAHe,UAIf3B,4BACA4B,aAGeX,EAAkBQ,EAA3BI,S,gCCZR","file":"static/js/9.d9b59ef1.chunk.js","sourcesContent":["export interface IState {\n  loading: boolean;\n}\n\nexport const initialState: IState = { loading: true };\n","import { CaseReducer, PayloadAction } from \"@faharmony/state\";\nimport { IState } from \"./store\";\n\ntype Reducer = CaseReducer<IState>;\ntype ReducerWithPayload<T extends any> = CaseReducer<IState, PayloadAction<T>>;\n\nconst startLoading: Reducer = (state) => {\n  state.loading = true;\n};\n\nconst stopLoading: Reducer = (state) => {\n  state.loading = false;\n};\n\nconst setLoading: ReducerWithPayload<boolean> = (state, { payload }) => {\n  state.loading = payload;\n};\n\nexport { startLoading, stopLoading, setLoading };\n","/** i18n-ally useTranslation(\"welcome\") */\nimport React from \"react\";\nimport { useModule } from \"@faharmony/module\";\nimport { PageView } from \"@faharmony/views\";\nimport { Text, Button, Box, Icon } from \"@faharmony/components\";\nimport { useDispatch, useModuleState } from \"@faharmony/state\";\nimport { faSpinner } from \"@faharmony/icons\";\nimport { ModuleActions, IState } from \"../state\";\n\nconst Redux = () => {\n  const { t } = useModule();\n  const dispatch = useDispatch();\n  const state = useModuleState<IState>();\n  return (\n    <Box justifyContent=\"flex-start\">\n      <Box width=\"auto\">\n        <Button\n          value=\"Start\"\n          onClick={() => dispatch(ModuleActions.startLoading())}\n        />\n        <Button\n          value=\"Stop\"\n          onClick={() => dispatch(ModuleActions.stopLoading())}\n        />\n        <Button\n          value=\"Toggle\"\n          onClick={() => dispatch(ModuleActions.setLoading(!state.loading))}\n        />\n      </Box>\n      <Icon spin={state.loading} icon={faSpinner} />\n      <Text value={t(\"loading\")} />\n    </Box>\n  );\n};\n\n// const ApolloRest = () => {\n//   const query = gql`\n//     query Roles {\n//       groups @rest(type: \"Group\", path: \"groups\", endpoint: \"keycloak\") {\n//         id\n//         name\n//         realmRoles\n//         clientRoles\n//         subGroups\n//         attributes\n//       }\n//     }\n//   `;\n//   const { data, loading, error } = useQuery(query);\n//   console.dir(data);\n//   return (\n//     <div>\n//       {loading\n//         ? \"Loading...\"\n//         : error\n//         ? \"Error\"\n//         : JSON.stringify(data.groups, null, 2)}\n//     </div>\n//   );\n// };\n\n/**\n * Default page of module\n * @author Siddhant Gupta <siddhant@fasolutions.com>\n */\nexport const MainPage = () => {\n  const { t } = useModule();\n\n  return (\n    <PageView\n      heading={t(\"moduleName\")}\n      toolbarContent={\n        <Text variant=\"h4\">\n          Harmony is FA Solutions' framework for React-app development\n        </Text>\n      }\n    >\n      <Redux />\n      {/* <ApolloRest /> */}\n    </PageView>\n  );\n};\n","import { createModuleState } from \"@faharmony/state\";\nimport { initialState } from \"./store\";\nimport * as reducers from \"./reducers\";\n\nconst ModuleId = \"welcome\";\n\nconst ModuleState = createModuleState({\n  name: ModuleId,\n  initialState,\n  reducers,\n});\n\nconst { actions: ModuleActions } = ModuleState;\n\nexport { ModuleState, ModuleActions };\nexport * from \"./store\";\n","/**\n * Pages\n * ---\n *\n * This directory contains module Pages.\n * A page is primary construct (a scaffold) onto which\n * other components and helpers are placed.\n *\n * Pages are directly linked with Router. Essentially,\n * each module or subModule can have it's own page and\n * own unique url route.\n *\n * At least 1 page is mandatory since that will act as\n * landing or primary page for the module. This page\n * should be called `MainPage.tsx`.\n *\n * 1 page is added as a sample. It can be edited or\n * replaced as per requirement.\n */\n\nexport { MainPage } from \"./MainPage\";\n"],"sourceRoot":""}