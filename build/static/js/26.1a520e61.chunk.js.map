{"version":3,"file":"static/js/26.1a520e61.chunk.js","mappings":"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","sources":["modules/components/pages/Tabs_PageView.tsx"],"sourcesContent":["import { Box, Center } from \"@faharmony/theme\";\r\nimport { PageView } from \"@faharmony/views\";\r\nimport {\r\n  ITabsProps,\r\n  TabOrientationType,\r\n  ITabFormProps,\r\n} from \"@faharmony/navigation\";\r\nimport { useForm, useFormContext } from \"react-hook-form\";\r\nimport { FormControl, TextField } from \"@faharmony/form\";\r\nimport { useState } from \"react\";\r\nimport { Button } from \"@faharmony/components\";\r\n\r\nconst Page = () => {\r\n  interface UserFormInputs {\r\n    firstName: string;\r\n    lastName: string;\r\n    address?: {};\r\n    phone?: string;\r\n    email?: string;\r\n    username: string | undefined;\r\n    password: string | undefined;\r\n  }\r\n  const userFormDefaultValues: Partial<UserFormInputs> = {\r\n    firstName: undefined,\r\n    lastName: undefined,\r\n    address: {},\r\n    phone: \"\",\r\n    email: \"\",\r\n    username: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const UserFirstNameField = () => {\r\n    const { register, errors } = useFormContext<UserFormInputs>();\r\n    return (\r\n      <Box direction=\"column\">\r\n        <FormControl\r\n          label=\"First name\"\r\n          errorText={errors.firstName?.message}\r\n          helpText=\"Firstname of the user.\"\r\n          required\r\n        >\r\n          <TextField\r\n            name=\"firstName\"\r\n            placeholder=\"Enter full name\"\r\n            error={!!errors.firstName}\r\n            ref={register({\r\n              required: \"Firstname is required\",\r\n              minLength: {\r\n                value: 3,\r\n                message: \"At least 3 characters required.\",\r\n              },\r\n            })}\r\n          />\r\n        </FormControl>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const UserLastNameField = () => {\r\n    const { register, errors } = useFormContext<UserFormInputs>();\r\n    return (\r\n      <Box direction=\"column\">\r\n        <FormControl\r\n          label=\"Lastname\"\r\n          helpText=\"Lastname of the user.\"\r\n          errorText={errors.lastName?.message}\r\n          required\r\n        >\r\n          <TextField\r\n            name=\"lastName\"\r\n            placeholder=\"Enter lastname\"\r\n            error={!!errors.lastName}\r\n            ref={register({\r\n              required: \"Lastname is required\",\r\n              minLength: {\r\n                value: 3,\r\n                message: \"At least 3 characters required.\",\r\n              },\r\n            })}\r\n          />\r\n        </FormControl>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const AddressField = ({ i }: { i: number }) => {\r\n    const { register, errors } = useFormContext<UserFormInputs>();\r\n    return (\r\n      <Box direction=\"column\">\r\n        <FormControl\r\n          label={\"Address \" + i}\r\n          errorText={errors.address ? errors.address[i].message : \"\"}\r\n        >\r\n          <TextField\r\n            name={\"address.\" + i}\r\n            placeholder={\"Enter address line \" + i}\r\n            error={errors.address ? !!errors.address[i] : false}\r\n            ref={register}\r\n          />\r\n        </FormControl>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const PhoneField = () => {\r\n    const { register, errors } = useFormContext<UserFormInputs>();\r\n    return (\r\n      <Box direction=\"column\">\r\n        <FormControl label=\"Phone\" errorText={errors.phone?.message}>\r\n          <TextField\r\n            name={\"phone\"}\r\n            placeholder=\"Enter phone number\"\r\n            error={!!errors.phone}\r\n            ref={register({\r\n              pattern: {\r\n                value: /^\\d{10}$/,\r\n                message: \"Only 10 digits phone number is allowed \",\r\n              },\r\n            })}\r\n          />\r\n        </FormControl>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const EmailField = () => {\r\n    const { register, errors } = useFormContext<UserFormInputs>();\r\n    return (\r\n      <Box direction=\"column\">\r\n        <FormControl label=\"Email\" errorText={errors.email?.message}>\r\n          <TextField\r\n            name={\"email\"}\r\n            placeholder=\"Enter email\"\r\n            error={!!errors.email}\r\n            ref={register({\r\n              pattern: {\r\n                value: /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/,\r\n                message: \"Invalid email\",\r\n              },\r\n            })}\r\n          />\r\n        </FormControl>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const UserFormUsernameField = () => {\r\n    const { register, errors } = useFormContext<UserFormInputs>();\r\n    return (\r\n      <Box direction=\"column\">\r\n        <FormControl\r\n          label=\"Username\"\r\n          helpText=\"Login username for the user.\"\r\n          errorText={errors.username?.message}\r\n          required\r\n        >\r\n          <TextField\r\n            name=\"username\"\r\n            placeholder=\"Enter username\"\r\n            error={!!errors.username}\r\n            ref={register({\r\n              required: \"Username is required\",\r\n              minLength: {\r\n                value: 4,\r\n                message: \"At least 4 characters required.\",\r\n              },\r\n            })}\r\n          />\r\n        </FormControl>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const UserFormPasswordField = () => {\r\n    const { register, errors } = useFormContext<UserFormInputs>();\r\n    return (\r\n      <Box direction=\"column\">\r\n        <FormControl\r\n          label=\"Password\"\r\n          helpText=\"Login password for the user.\"\r\n          errorText={errors.password?.message}\r\n          required\r\n        >\r\n          <TextField\r\n            name=\"password\"\r\n            placeholder=\"Enter password\"\r\n            error={!!errors.password}\r\n            ref={register({\r\n              required: \"Passsword is required\",\r\n              minLength: {\r\n                value: 8,\r\n                message: \"At least 8 characters required.\",\r\n              },\r\n            })}\r\n          />\r\n        </FormControl>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const formMethods = useForm<UserFormInputs>({\r\n    defaultValues: userFormDefaultValues,\r\n    shouldUnregister: false,\r\n    mode: \"onBlur\",\r\n  });\r\n\r\n  const dummytabs: ITabsProps[] = [\r\n    \"Very very long tab name\",\r\n    \"dummy1\",\r\n    \"dummy2\",\r\n    \"dummy3\",\r\n    \"dummy4\",\r\n    \"dummy5\",\r\n    \"dummy6\",\r\n    \"dummy7\",\r\n    \"dummy8\",\r\n    \"dummy9\",\r\n    \"dummy10\",\r\n    \"dummy11\",\r\n    \"dummy12\",\r\n    \"dummy13\",\r\n    \"dummy14\",\r\n    \"dummy15\",\r\n    \"dummy16\",\r\n    \"dummy17\",\r\n    \"dummy18\",\r\n  ].map((id, index) => ({\r\n    id,\r\n    label: `Tab ${id}`,\r\n    defaultActive: index === 0,\r\n    content: <Center>Content {id}</Center>,\r\n    onActive: () => console.log(1),\r\n    disabled: index === 2,\r\n  }));\r\n  const tabs: ITabsProps[] = [\r\n    {\r\n      id: \"basicInfo\",\r\n      label: `Basic info`,\r\n      defaultActive: true,\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <UserFirstNameField />\r\n          <UserLastNameField />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      id: \"address\",\r\n      label: `Address`,\r\n      defaultActive: false,\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <AddressField i={1} />\r\n          <AddressField i={2} />\r\n        </Box>\r\n      ),\r\n    },\r\n    ...dummytabs,\r\n    {\r\n      id: \"contact\",\r\n      label: `Contact`,\r\n      defaultActive: false,\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <EmailField />\r\n          <PhoneField />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      id: \"credentials\",\r\n      label: `Credentials`,\r\n      defaultActive: false,\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <UserFormUsernameField />\r\n          <UserFormPasswordField />\r\n        </Box>\r\n      ),\r\n    },\r\n  ];\r\n  const [orientation, setOrientation] =\r\n    useState<TabOrientationType>(\"vertical\");\r\n  const tabsForms: ITabFormProps = {\r\n    formMethods: formMethods,\r\n    tabs: tabs,\r\n    orientation: orientation,\r\n    fieldNames: {\r\n      basicInfo: [\"firstName\", \"lastName\"],\r\n      address: [\"address\"],\r\n      contact: [\"email\", \"phone\"],\r\n      credentials: [\"username\", \"password\"],\r\n    },\r\n  };\r\n\r\n  const toggleOrientation = () => {\r\n    if (orientation === \"vertical\") {\r\n      setOrientation(\"horizontal\");\r\n    } else {\r\n      setOrientation(\"vertical\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PageView\r\n      heading=\"Tabs component\"\r\n      caption={\"Testing tabs on page view\"}\r\n      actions={\r\n        <Button\r\n          value={` Set ${\r\n            orientation === \"horizontal\" ? \"vertical\" : \"horizontal\"\r\n          }`}\r\n          onClick={() => {\r\n            toggleOrientation(); //Close the summary view otherwise it will go on infinite render due to duplicate form.\r\n          }}\r\n        />\r\n      }\r\n      tabs={tabsForms}\r\n    ></PageView>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["userFormDefaultValues","firstName","undefined","lastName","address","phone","email","username","password","UserFirstNameField","useFormContext","register","errors","direction","label","errorText","message","helpText","required","name","placeholder","error","ref","minLength","value","UserLastNameField","AddressField","i","PhoneField","pattern","EmailField","UserFormUsernameField","UserFormPasswordField","formMethods","useForm","defaultValues","shouldUnregister","mode","dummytabs","map","id","index","defaultActive","content","onActive","console","log","disabled","tabs","useState","orientation","setOrientation","tabsForms","fieldNames","basicInfo","contact","credentials","heading","caption","actions","onClick"],"sourceRoot":""}