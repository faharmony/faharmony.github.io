{"version":3,"file":"static/js/9409.02e15904.chunk.js","mappings":"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","sources":["modules/components/pages/Tabs.tsx"],"sourcesContent":["import { Box, Center } from \"@faharmony/theme\";\nimport { PageView, SummaryView } from \"@faharmony/views\";\nimport {\n  ITabsProps,\n  TabOrientationType,\n  ITabFormProps,\n} from \"@faharmony/navigation\";\nimport { useForm, useFormContext } from \"react-hook-form\";\nimport { FormControl, TextField } from \"@faharmony/form\";\nimport { useState } from \"react\";\nimport { Button, useModal } from \"@faharmony/components\";\n\nconst Page = () => {\n  interface UserFormInputs {\n    firstName: string;\n    lastName: string;\n    address?: {};\n    phone?: string;\n    email?: string;\n    username: string | undefined;\n    password: string | undefined;\n  }\n  const userFormDefaultValues: Partial<UserFormInputs> = {\n    firstName: undefined,\n    lastName: undefined,\n    address: {},\n    phone: \"\",\n    email: \"\",\n    username: \"\",\n    password: \"\",\n  };\n\n  const UserFirstNameField = () => {\n    const { register, errors } = useFormContext<UserFormInputs>();\n    return (\n      <Box direction=\"column\">\n        <FormControl\n          label=\"First name\"\n          errorText={errors.firstName?.message}\n          helpText=\"Firstname of the user.\"\n          required\n        >\n          <TextField\n            name=\"firstName\"\n            placeholder=\"Enter full name\"\n            error={!!errors.firstName}\n            ref={register({\n              required: \"Firstname is required\",\n              minLength: {\n                value: 3,\n                message: \"At least 3 characters required.\",\n              },\n            })}\n          />\n        </FormControl>\n      </Box>\n    );\n  };\n\n  const UserLastNameField = () => {\n    const { register, errors } = useFormContext<UserFormInputs>();\n    return (\n      <Box direction=\"column\">\n        <FormControl\n          label=\"Lastname\"\n          helpText=\"Lastname of the user.\"\n          errorText={errors.lastName?.message}\n          required\n        >\n          <TextField\n            name=\"lastName\"\n            placeholder=\"Enter lastname\"\n            error={!!errors.lastName}\n            ref={register({\n              required: \"Lastname is required\",\n              minLength: {\n                value: 3,\n                message: \"At least 3 characters required.\",\n              },\n            })}\n          />\n        </FormControl>\n      </Box>\n    );\n  };\n\n  const AddressField = ({ i }: { i: number }) => {\n    const { register, errors } = useFormContext<UserFormInputs>();\n    return (\n      <Box direction=\"column\">\n        <FormControl\n          label={\"Address \" + i}\n          errorText={errors.address ? errors.address[i].message : \"\"}\n        >\n          <TextField\n            name={\"address.\" + i}\n            placeholder={\"Enter address line \" + i}\n            error={errors.address ? !!errors.address[i] : false}\n            ref={register}\n          />\n        </FormControl>\n      </Box>\n    );\n  };\n\n  const PhoneField = () => {\n    const { register, errors } = useFormContext<UserFormInputs>();\n    return (\n      <Box direction=\"column\">\n        <FormControl label=\"Phone\" errorText={errors.phone?.message}>\n          <TextField\n            name={\"phone\"}\n            placeholder=\"Enter phone number\"\n            error={!!errors.phone}\n            ref={register({\n              pattern: {\n                value: /^\\d{10}$/,\n                message: \"Only 10 digits phone number is allowed \",\n              },\n            })}\n          />\n        </FormControl>\n      </Box>\n    );\n  };\n\n  const EmailField = () => {\n    const { register, errors } = useFormContext<UserFormInputs>();\n    return (\n      <Box direction=\"column\">\n        <FormControl label=\"Email\" errorText={errors.email?.message}>\n          <TextField\n            name={\"email\"}\n            placeholder=\"Enter email\"\n            error={!!errors.email}\n            ref={register({\n              pattern: {\n                value: /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/,\n                message: \"Invalid email\",\n              },\n            })}\n          />\n        </FormControl>\n      </Box>\n    );\n  };\n\n  const UserFormUsernameField = () => {\n    const { register, errors } = useFormContext<UserFormInputs>();\n    return (\n      <Box direction=\"column\">\n        <FormControl\n          label=\"Username\"\n          helpText=\"Login username for the user.\"\n          errorText={errors.username?.message}\n          required\n        >\n          <TextField\n            name=\"username\"\n            placeholder=\"Enter username\"\n            error={!!errors.username}\n            ref={register({\n              required: \"Username is required\",\n              minLength: {\n                value: 4,\n                message: \"At least 4 characters required.\",\n              },\n            })}\n          />\n        </FormControl>\n      </Box>\n    );\n  };\n\n  const UserFormPasswordField = () => {\n    const { register, errors } = useFormContext<UserFormInputs>();\n    return (\n      <Box direction=\"column\">\n        <FormControl\n          label=\"Password\"\n          helpText=\"Login password for the user.\"\n          errorText={errors.password?.message}\n          required\n        >\n          <TextField\n            name=\"password\"\n            placeholder=\"Enter password\"\n            error={!!errors.password}\n            ref={register({\n              required: \"Passsword is required\",\n              minLength: {\n                value: 8,\n                message: \"At least 8 characters required.\",\n              },\n            })}\n          />\n        </FormControl>\n      </Box>\n    );\n  };\n\n  const formMethods = useForm<UserFormInputs>({\n    defaultValues: userFormDefaultValues,\n    shouldUnregister: false,\n    mode: \"onBlur\",\n  });\n\n  const dummytabs: ITabsProps[] = [\n    \"Very very long tab name maxwidth check/ tooltip\",\n    \"dummy1\",\n    \"dummy2\",\n    \"dummy3\",\n    \"dummy4\",\n    \"dummy5\",\n    \"dummy6\",\n    \"dummy7\",\n    \"dummy8\",\n    \"dummy9\",\n    \"dummy10\",\n    \"dummy11\",\n    \"dummy12\",\n    \"dummy13\",\n    \"dummy14\",\n    \"dummy15\",\n    \"dummy16\",\n    \"dummy17\",\n    \"dummy18\",\n    \"dummy19\",\n  ].map((id, index) => ({\n    id,\n    label: `Tab ${id}`,\n    defaultActive: index === 0,\n    content: <Center>Content {id}</Center>,\n    onActive: () => console.log(1),\n    disabled: index === 2,\n  }));\n  const tabs: ITabsProps[] = [\n    {\n      id: \"basicInfo\",\n      label: `Basic info`,\n      defaultActive: true,\n      content: (\n        <Box direction=\"column\">\n          <UserFirstNameField />\n          <UserLastNameField />\n        </Box>\n      ),\n    },\n    {\n      id: \"address\",\n      label: `Address`,\n      defaultActive: false,\n      content: (\n        <Box direction=\"column\">\n          <AddressField i={1} />\n          <AddressField i={2} />\n        </Box>\n      ),\n    },\n    ...dummytabs,\n    {\n      id: \"contact\",\n      label: `Contact`,\n      defaultActive: false,\n      content: (\n        <Box direction=\"column\">\n          <EmailField />\n          <PhoneField />\n        </Box>\n      ),\n    },\n    {\n      id: \"credentials\",\n      label: `Credentials`,\n      defaultActive: false,\n      content: (\n        <Box direction=\"column\">\n          <UserFormUsernameField />\n          <UserFormPasswordField />\n        </Box>\n      ),\n    },\n  ];\n  const [orientation, setOrientation] =\n    useState<TabOrientationType>(\"vertical\");\n  const tabsForms: ITabFormProps = {\n    formMethods: formMethods,\n    tabs: tabs,\n    orientation: orientation,\n    fieldNames: {\n      basicInfo: [\"firstName\", \"lastName\"],\n      address: [\"address\"],\n      contact: [\"email\", \"phone\"],\n      credentials: [\"username\", \"password\"],\n    },\n  };\n\n  const [open, setOpen] = useState(true);\n\n  const [ModalWrapper, openModal, closeModal, isOpen] = useModal(false);\n\n  const toggleOrientation = () => {\n    if (orientation === \"vertical\") {\n      setOrientation(\"horizontal\");\n    } else {\n      setOrientation(\"vertical\");\n    }\n  };\n\n  return (\n    <PageView\n      heading=\"Tabs component\"\n      actions={\n        <>\n          <Button\n            value=\"Open SummaryView\"\n            onClick={() => setOpen(true)}\n            disabled={open}\n          />\n\n          <Button\n            value=\"Open As Modal\"\n            onClick={() => {\n              openModal();\n              setOpen(false); //Close the summary view otherwise it will go on infinite render due to duplicate form.\n            }}\n            disabled={isOpen}\n          />\n\n          <Button\n            value={` Set ${\n              orientation === \"horizontal\" ? \"vertical\" : \"horizontal\"\n            }`}\n            onClick={() => {\n              toggleOrientation(); //Close the summary view otherwise it will go on infinite render due to duplicate form.\n            }}\n          />\n        </>\n      }\n    >\n      {open && (\n        <SummaryView\n          caption=\"FA user\"\n          heading=\"Tabs with Form\"\n          onClose={() => setOpen(false)}\n          tabs={tabsForms}\n        ></SummaryView>\n      )}\n      <ModalWrapper style={{ height: \"90vh\", width: \"800px\" }}>\n        <SummaryView\n          caption=\"FA user\"\n          heading=\"Tabs Form Modal\"\n          onClose={() => closeModal()}\n          tabs={tabsForms}\n        ></SummaryView>\n      </ModalWrapper>\n    </PageView>\n  );\n};\n\nexport default Page;\n"],"names":["userFormDefaultValues","firstName","undefined","lastName","address","phone","email","username","password","UserFirstNameField","useFormContext","register","errors","direction","label","errorText","message","helpText","required","name","placeholder","error","ref","minLength","value","UserLastNameField","AddressField","i","PhoneField","pattern","EmailField","UserFormUsernameField","UserFormPasswordField","formMethods","useForm","defaultValues","shouldUnregister","mode","dummytabs","map","id","index","defaultActive","content","onActive","console","log","disabled","tabs","useState","orientation","setOrientation","tabsForms","fieldNames","basicInfo","contact","credentials","open","setOpen","useModal","ModalWrapper","openModal","closeModal","isOpen","heading","actions","onClick","caption","onClose","style","height","width"],"sourceRoot":""}