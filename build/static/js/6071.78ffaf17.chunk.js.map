{"version":3,"file":"static/js/6071.78ffaf17.chunk.js","mappings":"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","sources":["modules/components/pages/Form.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  Form,\n  FormControl,\n  TextField,\n  Checkbox,\n  Combobox,\n  Button,\n  DatePicker,\n  Toggle,\n  useForm,\n  useFormContext,\n  useFormDatePickerProps,\n} from \"@faharmony/form\";\nimport { Box } from \"@faharmony/theme\";\nimport { formatDate } from \"@faharmony/locale\";\nimport type {\n  ComboboxOptionType,\n  ComboboxOptionsType,\n  SubmitHandler,\n} from \"@faharmony/form\";\nimport type { FC } from \"react\";\n\ninterface UserFormInputs {\n  fullName?: string;\n  username: string;\n  password: string;\n  dob: string;\n  roles: ComboboxOptionType[];\n  massiveOptions: ComboboxOptionType[];\n  locale?: ComboboxOptionType;\n  darkMode?: boolean;\n  terms: boolean;\n  privacy: boolean;\n}\n\nconst userFormDefaultValues: Partial<UserFormInputs> = {\n  fullName: \"\",\n  username: \"Love\",\n  password: \"KesKus44tA\",\n  dob: formatDate(new Date(\"01-01-2020\")),\n  darkMode: false,\n  locale: { value: \"en\", label: \"English\" },\n  terms: false,\n  privacy: false,\n};\n\nconst UserFormFullNameField: FC = () => {\n  const { register, errors } = useFormContext<UserFormInputs>();\n  return (\n    <FormControl label=\"Full name\" errorText={errors.fullName?.message}>\n      <TextField\n        name=\"fullName\"\n        placeholder=\"Enter full name\"\n        error={!!errors.fullName}\n        ref={register}\n      />\n    </FormControl>\n  );\n};\n\nconst UserFormUsernameField: FC = () => {\n  const { register, errors } = useFormContext<UserFormInputs>();\n  return (\n    <FormControl\n      label=\"Username\"\n      helpText=\"Login username for the user.\"\n      errorText={errors.username?.message}\n      required\n    >\n      <TextField\n        name=\"username\"\n        placeholder=\"Enter username\"\n        error={!!errors.username}\n        ref={register({\n          required: \"Username is required\",\n          minLength: { value: 4, message: \"At least 4 characters required.\" },\n        })}\n      />\n    </FormControl>\n  );\n};\n\nconst UserFormUsernameFieldWithLongLabel: FC = () => {\n  const { register, errors } = useFormContext<UserFormInputs>();\n  return (\n    <FormControl\n      label=\"Long label for a long field (Testing positioning of help and asterick )\"\n      helpText=\"Login username for the user.\"\n      errorText={errors.username?.message}\n      required\n    >\n      <TextField\n        name=\"username\"\n        placeholder=\"Enter username\"\n        error={!!errors.username}\n        ref={register({\n          required: \"Username is required\",\n          minLength: { value: 4, message: \"At least 4 characters required.\" },\n        })}\n      />\n    </FormControl>\n  );\n};\n\nconst UserFormPasswordField: FC = () => {\n  const { register, errors } = useFormContext<UserFormInputs>();\n  const passwordPatternRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\n  const passwordPatternMessage =\n    \"Password should be minimum 8 characters long and contain at least one uppercase letter, one lowercase letter and one number.\";\n  return (\n    <FormControl\n      label=\"Password\"\n      helpText=\"Login password for the user.\"\n      errorText={errors.password?.message}\n      required\n    >\n      <TextField\n        name=\"password\"\n        type=\"password\"\n        placeholder=\"Enter password\"\n        error={!!errors.password}\n        ref={register({\n          required: \"Password is required\",\n          pattern: {\n            value: passwordPatternRegex,\n            message: passwordPatternMessage,\n          },\n        })}\n      />\n    </FormControl>\n  );\n};\n\nconst UserFormDOBField: FC = () => {\n  const formDatePickerProps = useFormDatePickerProps(\n    \"dob\",\n    userFormDefaultValues.dob\n  );\n\n  return (\n    <FormControl label=\"Date of birth\" required>\n      <DatePicker\n        {...formDatePickerProps}\n        dateFormat=\"dd.MM.yyyy hh:mm a\"\n        selected={new Date(\"2021/05/04 22:21\")}\n      />\n    </FormControl>\n  );\n};\n\nconst UserFormRolesField: FC = () => {\n  const rolesOptions: ComboboxOptionsType = [\n    { label: \"Admin\", value: \"admin\" },\n    { label: \"BO\", value: \"back\" },\n    { label: \"Client\", value: \"front\" },\n    { label: \"Super Admin\", value: \"super\", isDisabled: true },\n  ];\n  return (\n    <FormControl label=\"Roles\" required>\n      <Combobox\n        name=\"roles\"\n        required\n        placeholder=\"Select roles...\"\n        options={rolesOptions}\n        isMulti\n      />\n    </FormControl>\n  );\n};\n\nconst UserFormMassiveComboboxField: FC = () => {\n  const options = [];\n  for (let i = 0; i < 10000; i = i + 1) {\n    options.push({ value: i, label: `Option ${i}` });\n  }\n  return (\n    <Box width={\"500px\"}>\n      <FormControl label=\"Massive Options\" required>\n        <Combobox\n          name=\"massiveOptions\"\n          required\n          placeholder=\"Select option...\"\n          options={options}\n          isMulti={true}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n\nconst UserFormLocaleField: FC = () => {\n  const localeOptions: ComboboxOptionsType = [\n    { label: \"English\", value: \"en\" },\n    { label: \"Suomi\", value: \"fi\" },\n    { label: \"Sverige\", value: \"sv\" },\n  ];\n  return (\n    <FormControl label=\"Locale\">\n      <Combobox\n        name=\"locale\"\n        placeholder=\"Select locale...\"\n        options={localeOptions}\n        isSearchable={false}\n      />\n    </FormControl>\n  );\n};\n\nconst UserFormDarkModeField: FC = () => {\n  const { register } = useFormContext<UserFormInputs>();\n  return (\n    <FormControl label=\"Prefer dark mode?\">\n      <Toggle name=\"darkMode\" ref={register} />\n    </FormControl>\n  );\n};\n\nconst UserFormTermsField: FC = () => {\n  const { register, errors } = useFormContext<UserFormInputs>();\n  return (\n    <>\n      <FormControl\n        label=\"Terms and conditions\"\n        errorText={errors.terms?.message}\n      >\n        <Checkbox\n          name=\"terms\"\n          label=\"Accept the terms and conditions.\"\n          ref={register({\n            required: \"It is required to accept the terms and condition\",\n          })}\n        />\n      </FormControl>\n      <FormControl errorText={errors.privacy?.message}>\n        <Checkbox\n          name=\"privacy\"\n          label=\"Accept the privacy policy.\"\n          helpText=\"Test\"\n          ref={register({\n            required: \"It is required to accept the privacy policy\",\n          })}\n        />\n      </FormControl>\n    </>\n  );\n};\n\nconst UserFormButtons: FC = () => {\n  const { formState } = useFormContext<UserFormInputs>();\n  const { isSubmitting, isDirty } = formState;\n  return (\n    <Box direction=\"row-reverse\">\n      <Button\n        type=\"submit\"\n        variant=\"primary\"\n        value=\"Add user\"\n        loading={isSubmitting}\n      />\n      <Button\n        type=\"reset\"\n        variant=\"secondary\"\n        value=\"Reset form\"\n        disabled={!isDirty}\n      />\n    </Box>\n  );\n};\n\nconst UserForm: FC = () => {\n  const formMethods = useForm<UserFormInputs>({\n    defaultValues: userFormDefaultValues,\n  });\n  const onSubmit: SubmitHandler<UserFormInputs> = React.useCallback(\n    async (values) => {\n      console.log(values);\n      // Dummy wait for 1s.\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n    },\n    []\n  );\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={formMethods.handleSubmit(onSubmit)}\n    >\n      <UserFormFullNameField />\n      <UserFormUsernameField />\n      <UserFormUsernameFieldWithLongLabel />\n      <UserFormPasswordField />\n      <UserFormDOBField />\n      <UserFormRolesField />\n      <UserFormMassiveComboboxField />\n      <UserFormLocaleField />\n      <UserFormDarkModeField />\n      <UserFormTermsField />\n      <UserFormButtons />\n    </Form>\n  );\n};\n\nexport default UserForm;\n"],"names":["userFormDefaultValues","fullName","username","password","dob","formatDate","Date","darkMode","locale","value","label","terms","privacy","UserFormFullNameField","useFormContext","register","errors","errorText","message","name","placeholder","error","ref","UserFormUsernameField","helpText","required","minLength","UserFormUsernameFieldWithLongLabel","UserFormPasswordField","type","pattern","UserFormDOBField","formDatePickerProps","useFormDatePickerProps","dateFormat","selected","UserFormRolesField","options","isDisabled","isMulti","UserFormMassiveComboboxField","i","push","width","UserFormLocaleField","isSearchable","UserFormDarkModeField","UserFormTermsField","UserFormButtons","formState","isSubmitting","isDirty","direction","variant","loading","disabled","formMethods","useForm","defaultValues","onSubmit","React","values","console","log","Promise","resolve","setTimeout","handleSubmit"],"sourceRoot":""}