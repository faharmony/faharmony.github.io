{"version":3,"sources":["modules/logo/services/axios.ts","modules/logo/services/api.ts","modules/logo/services/index.ts"],"names":["apiInstance","axios","create","baseURL","interceptors","request","use","config","headers","Authorization","getAuthToken","error","Promise","reject","returnStatus","res","status","returnJSON","data","result","console","warn","statusText","returnSuccess","success","displayResult","dir","returnWarning","sampleRestApi","cancelToken","get","then","catch"],"mappings":"iHAAA,iSAMO,MAAMA,EAAcC,IAAMC,OAAO,CACtCC,QAAQ,2BAKVH,EAAYI,aAAaC,QAAQC,IAC9BC,IAECA,EAAOC,QAAQC,cAAf,iBAAyCC,eAAkB,IACpDH,GAERI,GAAUC,QAAQC,OAAOF,IAGbX,YAQR,MAAMc,EAAgBC,GAC3BA,EAAIC,SACY,MAAfD,EAAIC,QAAiC,MAAfD,EAAIC,QAAiC,MAAfD,EAAIC,QAGtCC,EAAcF,GACzBD,EAAaC,GAAOA,EAAIG,KAAKC,OAASC,QAAQC,KAAKN,EAAIO,YAG5CC,EAAiBR,GAC5BD,EAAaC,GAAOA,EAAIG,KAAKC,OAAOK,QAAUJ,QAAQC,KAAKN,EAAIO,YAGpDG,EAAgBL,QAAQM,IAGxBC,EAAgBP,QAAQT,O,iCC7CrC,kEAiBO,MAAMiB,EAAgB,EAAGC,iBAC9B7B,UACG8B,IADH,WACmB,CAAED,gBAClBE,KAAKR,iBACLS,MAAML,kB,gCCrBX","file":"static/js/11.84835b44.chunk.js","sourcesContent":["// Axios is used for managing REST API calls\n// Axios Documentation: https://github.com/axios/axios\nimport { getAuthToken, axios, CancelToken } from \"@faharmony/service\";\n\n// Base API\n// Axios instance initialized with common information like baseURL and headers.\nexport const apiInstance = axios.create({\n  baseURL: `/services/service-name`,\n});\n\n// Interceptor to add current authentication bearer token\n// Comment this if no bearer token is required.\napiInstance.interceptors.request.use(\n  (config) => {\n    // Read token from in-memory.\n    config.headers.Authorization = `Bearer ${getAuthToken() || \"\"}`;\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport default apiInstance;\n\n///////////////////////////\n\n/**\n * Return functions for API call\n */\n// Return whether request was successful or not.\nexport const returnStatus = (res: any): boolean =>\n  res.status &&\n  (res.status === 200 || res.status === 201 || res.status === 204);\n\n// Returns JSON data if found, else undefined.\nexport const returnJSON = (res: any) =>\n  returnStatus(res) ? res.data.result : console.warn(res.statusText);\n\n// Returns Boolean: True if success\nexport const returnSuccess = (res: any): boolean =>\n  returnStatus(res) ? res.data.result.success : console.warn(res.statusText);\n\n// Display return data in console\nexport const displayResult = console.dir;\n\n// Warning for API catch\nexport const returnWarning = console.error;\n\n/**\n * TypeDefinitions for API props\n */\n\n/**\n * Base interface for all API.\n * Extend it to create your own interfaces.\n */\nexport interface ICancelTokenProps {\n  cancelToken?: CancelToken;\n}\n","/**\n * List of all REST API used in this module.\n */\nimport apiInstance, {\n  ICancelTokenProps,\n  returnSuccess,\n  returnWarning,\n} from \"./axios\";\n\n// The following API functions use an initialized instance of Axios\n// @see axios.ts\n// @param cancelToken is optional and can be used to interrupt api call.\n\n/**\n * Get all files/folders in a directory\n * @returns Array of file objects\n */\nexport const sampleRestApi = ({ cancelToken }: ICancelTokenProps) =>\n  apiInstance\n    .get(`endpoint`, { cancelToken })\n    .then(returnSuccess)\n    .catch(returnWarning);\n","/**\n * Services\n * ---\n *\n * This directory contains services.\n * A service is a method for the module to connect\n * to external sources in order to fetch/send data.\n * This could be REST API, GraphQL, or something else.\n *\n * Service functions are difficult to move to Harmony\n * so repetition might occur in modules.\n *\n * The best practice is to group services by their\n * functionality rather than there method.\n *\n * 2 files are provided to get started -\n * config.ts, api.ts\n */\n\nexport * from \"./api\";\n"],"sourceRoot":""}