{"version":3,"file":"static/js/4285.e482ff7a.chunk.js","mappings":"+MAOaA,EAAU,WAGrB,OAFcC,EAAAA,EAAAA,kBAEJC,SAAgB,SAAC,KAAD,KAGtB,4BACE,SAAC,KAAD,CACEC,MAAM,kFACNC,MAAM,cAER,mBACA,mBACA,SAAC,KAAD,CACEC,aAAW,EACXC,OAAQ,CACN,CACEC,GAAI,WACJC,QAAS,iBACTC,eAAe,EACfC,SAAS,oBAEX,CACEH,GAAI,SACJC,QAAS,mBACTC,eAAe,EACfC,SAAS,yBAMtB,EAED,W,wSCbMC,EAAW,OAGXC,GAAcC,EAAAA,EAAAA,IAAkB,CAEpCC,KAAMH,EAENI,aAAAA,EAAAA,QAEAC,SAAAA,IAGF,GAGIC,EAAAA,EAAAA,IAAuCN,GAFzCV,EADF,EACEA,eACAiB,EAFF,EAEEA,uBAIeC,EAAkBP,EAA3BQ,O,oEC1BD,IAAMC,EAAS,CAAEC,MAAO,WAG/B,WACEpB,SAAS,EACTqB,oBAAoB,EACpBC,OAAQ,CACNC,KAAM,IACNrB,MAAO,CAAEsB,QAASL,EAAOC,MAAOK,UAAW,IAC3CC,KAAM,GACNC,QAAS,MACTC,KAAM,O,6PCJGC,EAAyB,SAACC,GACrCA,EAAM9B,SAAW8B,EAAM9B,OACxB,EAIY+B,EAA0C,SAACD,EAAD,GAAyB,IAAfE,EAAc,EAAdA,QAC/DF,EAAM9B,QAAUgC,CACjB,EAGYC,EAA8B,SAACH,GAC1CA,EAAMT,oBAAsBS,EAAMT,kBACnC,EAEYa,EAAoD,SAC/DJ,EAD+D,GAG3D,IADFE,EACC,EADDA,QAEFF,EAAMR,OAAOK,QAAUK,CACxB,EAEYG,EAA8C,SACzDL,EADyD,GAGrD,IADFE,EACC,EADDA,QAEFF,EAAMR,OAAOM,KAAOI,CACrB,EAEYI,EAAyD,SACpEN,EADoE,GAGhE,IADFE,EACC,EADDA,QAEF,GAAuB,kBAAZA,EAAsB,CAC/B,IAAMb,EAASa,EAAQK,MAAM,KAC7BP,EAAMR,OAAOpB,MAAMsB,QAAUL,EAAO,GACpCA,EAAOmB,OAAS,IAAMR,EAAMR,OAAOpB,MAAMuB,UAAYN,EAAO,GAC7D,MAAMW,EAAMR,OAAOpB,OAAb,kBAA0B4B,EAAMR,OAAOpB,OAAU8B,EACzD,C","sources":["modules/logo/components/Display.tsx","modules/logo/state/index.ts","modules/logo/state/initialState.ts","modules/logo/state/reducers.ts"],"sourcesContent":["import { Accordion, Text, Preloader } from \"@faharmony/components\";\n\nimport { useModuleState } from \"../state\";\n\n/**\n * @author Siddhant Gupta <siddhant@fasolutions.com>\n */\nexport const Display = () => {\n  const state = useModuleState();\n  //   const dispatch = useDispatch();\n  if (state.loading) return <Preloader />;\n  else\n    return (\n      <div>\n        <Text\n          value=\"All generated logos will appear here. They can be configured using side-drawer.\"\n          color=\"disabled\"\n        />\n        <br />\n        <br />\n        <Accordion\n          independent\n          panels={[\n            {\n              id: \"standard\",\n              heading: \"Standard logos\",\n              defaultActive: true,\n              content: <div />,\n            },\n            {\n              id: \"custom\",\n              heading: \"Customized logos\",\n              defaultActive: true,\n              content: <div />,\n            },\n          ]}\n        />\n      </div>\n    );\n};\n\nexport default Display;\n","/**\n * State\n * ---\n *\n * This directory contains module state.\n * Harmony uses the Redux-Toolkit setup and\n * treats each Module as a Slice.\n *\n * Use other files like `store.ts` and `reducers.ts`\n * to maintain the functionality of ModuleState.\n * This file is responsible for combining them.\n *\n * There is no need for separately creating or\n * maintaining `actions` as they are generated\n * using slice's case reducers.\n *\n * @readonly No edit required in this file unless\n * ModuleId changes.\n */\n\nimport {\n  createModuleState,\n  createUseModuleStateHook,\n  useDispatch,\n} from \"@faharmony/state\";\nimport initialState, { IModuleState } from \"./initialState\";\nimport * as reducers from \"./reducers\";\n\nconst ModuleID = \"logo\";\n\n/** Create Module's state using wrapper of createSlice(). */\nconst ModuleState = createModuleState({\n  /** name should be exact same as Module ID. */\n  name: ModuleID,\n  /** Initial value of Module's state. */\n  initialState,\n  /** Object of case reducers to modify Module's state. */\n  reducers,\n});\n\nconst {\n  useModuleState,\n  useModuleStateSelector,\n} = createUseModuleStateHook<IModuleState>(ModuleID);\n\n// Extract `actions` from Module's state\nconst { actions: ModuleActions } = ModuleState;\n// Export state for Module config and actions for dispatch usage.\nexport { ModuleState, ModuleActions, useModuleState, useModuleStateSelector };\n// Export State type definition\nexport * from \"./initialState\";\n\nexport { useDispatch };\n","/**\n * InitialState\n * ---\n * This file maintains the type definition\n * and the actual initialState of the Module.\n */\n\n/** Type definition of the Module's state */\nexport interface IModuleState {\n  loading: boolean;\n  isConfigDrawerOpen: boolean;\n  config: {\n    size: number;\n    color: { primary: string; secondary: string };\n    text: string;\n    variant: \"all\" | \"company\" | \"platform\";\n    icon: \"all\" | \"transparent\" | \"opaque\";\n  };\n}\n\nexport const colors = { brand: \"#AE001A\" };\n\n/** Initial state of Module */\nexport default {\n  loading: true,\n  isConfigDrawerOpen: true,\n  config: {\n    size: 200,\n    color: { primary: colors.brand, secondary: \"\" },\n    text: \"\",\n    variant: \"all\",\n    icon: \"all\",\n  },\n} as IModuleState;\n","/**\n * Reducers\n * ---\n * This file maintains all the reducers (modifiers)\n * for the Module's state. The name of reducer will\n * become the name of the action.\n *\n * A case reducer can choose to mutate the passed-in\n * state value directly instead of returning a new state.\n * This does not actually cause the store state to be\n * mutated directly; instead, thanks to immer, the\n * mutations are translated to copy operations that\n * result in a new state.\n */\nimport { CaseReducer, PayloadAction } from \"@faharmony/state\";\nimport { IModuleState } from \"./initialState\";\n\n// Generic types for ease-of-use\ntype Reducer = CaseReducer<IModuleState>;\ntype ReducerWithPayload<T> = CaseReducer<IModuleState, PayloadAction<T>>;\ntype Config = IModuleState[\"config\"];\n\n// -------------------\n// Edit reducers below\n\n/** Reducer without required payload.\n * @example dispatch(toggleLoading()) */\nexport const toggleLoading: Reducer = (state) => {\n  state.loading = !state.loading;\n};\n\n/** Reducer with required payload.\n * @example dispatch(setLoading(true)) */\nexport const setLoading: ReducerWithPayload<boolean> = (state, { payload }) => {\n  state.loading = payload;\n};\n\n/** Reducer with to toggle ConfigDrawer.*/\nexport const toggleConfigDrawer: Reducer = (state) => {\n  state.isConfigDrawerOpen = !state.isConfigDrawerOpen;\n};\n\nexport const setVariant: ReducerWithPayload<Config[\"variant\"]> = (\n  state,\n  { payload }\n) => {\n  state.config.variant = payload;\n};\n\nexport const setIcon: ReducerWithPayload<Config[\"icon\"]> = (\n  state,\n  { payload }\n) => {\n  state.config.icon = payload;\n};\n\nexport const setColor: ReducerWithPayload<Config[\"color\"] | string> = (\n  state,\n  { payload }\n) => {\n  if (typeof payload === \"string\") {\n    const colors = payload.split(\"@\");\n    state.config.color.primary = colors[0];\n    colors.length > 0 && (state.config.color.secondary = colors[1]);\n  } else state.config.color = { ...state.config.color, ...payload };\n};\n"],"names":["Display","useModuleState","loading","value","color","independent","panels","id","heading","defaultActive","content","ModuleID","ModuleState","createModuleState","name","initialState","reducers","createUseModuleStateHook","useModuleStateSelector","ModuleActions","actions","colors","brand","isConfigDrawerOpen","config","size","primary","secondary","text","variant","icon","toggleLoading","state","setLoading","payload","toggleConfigDrawer","setVariant","setIcon","setColor","split","length"],"sourceRoot":""}