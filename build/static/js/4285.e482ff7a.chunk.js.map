{"version":3,"file":"static/js/4285.e482ff7a.chunk.js","mappings":"+MAOaA,EAAU,WAGrB,OAFcC,EAAAA,EAAAA,kBAEJC,SAAgB,SAAC,KAAS,KAGhC,4BACE,SAAC,KAAI,CACHC,MAAM,kFACNC,MAAM,cAER,mBACA,mBACA,SAAC,KAAS,CACRC,aAAW,EACXC,OAAQ,CACN,CACEC,GAAI,WACJC,QAAS,iBACTC,eAAe,EACfC,SAAS,oBAEX,CACEH,GAAI,SACJC,QAAS,mBACTC,eAAe,EACfC,SAAS,yBAMvB,EAEA,W,wSCbMC,EAAW,OAGXC,GAAcC,EAAAA,EAAAA,IAAkB,CAEpCC,KAAMH,EAENI,aAAAA,EAAAA,QAEAC,SAAAA,IAGF,GAGIC,EAAAA,EAAAA,IAAuCN,GAFzCV,EAAc,EAAdA,eACAiB,EAAsB,EAAtBA,uBAIeC,EAAkBP,EAA3BQ,O,oEC1BD,IAAMC,EAAS,CAAEC,MAAO,WAG/B,WACEpB,SAAS,EACTqB,oBAAoB,EACpBC,OAAQ,CACNC,KAAM,IACNrB,MAAO,CAAEsB,QAASL,EAAOC,MAAOK,UAAW,IAC3CC,KAAM,GACNC,QAAS,MACTC,KAAM,O,6PCJGC,EAAyB,SAACC,GACrCA,EAAM9B,SAAW8B,EAAM9B,OACzB,EAIa+B,EAA0C,SAACD,EAAM,GAAkB,IAAfE,EAAO,EAAPA,QAC/DF,EAAM9B,QAAUgC,CAClB,EAGaC,EAA8B,SAACH,GAC1CA,EAAMT,oBAAsBS,EAAMT,kBACpC,EAEaa,EAAoD,SAC/DJ,EAAM,GAEF,IADFE,EAAO,EAAPA,QAEFF,EAAMR,OAAOK,QAAUK,CACzB,EAEaG,EAA8C,SACzDL,EAAM,GAEF,IADFE,EAAO,EAAPA,QAEFF,EAAMR,OAAOM,KAAOI,CACtB,EAEaI,EAAyD,SACpEN,EAAM,GAEF,IADFE,EAAO,EAAPA,QAEF,GAAuB,kBAAZA,EAAsB,CAC/B,IAAMb,EAASa,EAAQK,MAAM,KAC7BP,EAAMR,OAAOpB,MAAMsB,QAAUL,EAAO,GACpCA,EAAOmB,OAAS,IAAMR,EAAMR,OAAOpB,MAAMuB,UAAYN,EAAO,GAC9D,MAAOW,EAAMR,OAAOpB,OAAK,kBAAQ4B,EAAMR,OAAOpB,OAAU8B,EAC1D,C","sources":["modules/logo/components/Display.tsx","modules/logo/state/index.ts","modules/logo/state/initialState.ts","modules/logo/state/reducers.ts"],"sourcesContent":["import { Accordion, Text, Preloader } from \"@faharmony/components\";\r\n\r\nimport { useModuleState } from \"../state\";\r\n\r\n/**\r\n * @author Siddhant Gupta <siddhant@fasolutions.com>\r\n */\r\nexport const Display = () => {\r\n  const state = useModuleState();\r\n  //   const dispatch = useDispatch();\r\n  if (state.loading) return <Preloader />;\r\n  else\r\n    return (\r\n      <div>\r\n        <Text\r\n          value=\"All generated logos will appear here. They can be configured using side-drawer.\"\r\n          color=\"disabled\"\r\n        />\r\n        <br />\r\n        <br />\r\n        <Accordion\r\n          independent\r\n          panels={[\r\n            {\r\n              id: \"standard\",\r\n              heading: \"Standard logos\",\r\n              defaultActive: true,\r\n              content: <div />,\r\n            },\r\n            {\r\n              id: \"custom\",\r\n              heading: \"Customized logos\",\r\n              defaultActive: true,\r\n              content: <div />,\r\n            },\r\n          ]}\r\n        />\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Display;\r\n","/**\r\n * State\r\n * ---\r\n *\r\n * This directory contains module state.\r\n * Harmony uses the Redux-Toolkit setup and\r\n * treats each Module as a Slice.\r\n *\r\n * Use other files like `store.ts` and `reducers.ts`\r\n * to maintain the functionality of ModuleState.\r\n * This file is responsible for combining them.\r\n *\r\n * There is no need for separately creating or\r\n * maintaining `actions` as they are generated\r\n * using slice's case reducers.\r\n *\r\n * @readonly No edit required in this file unless\r\n * ModuleId changes.\r\n */\r\n\r\nimport {\r\n  createModuleState,\r\n  createUseModuleStateHook,\r\n  useDispatch,\r\n} from \"@faharmony/state\";\r\nimport initialState, { IModuleState } from \"./initialState\";\r\nimport * as reducers from \"./reducers\";\r\n\r\nconst ModuleID = \"logo\";\r\n\r\n/** Create Module's state using wrapper of createSlice(). */\r\nconst ModuleState = createModuleState({\r\n  /** name should be exact same as Module ID. */\r\n  name: ModuleID,\r\n  /** Initial value of Module's state. */\r\n  initialState,\r\n  /** Object of case reducers to modify Module's state. */\r\n  reducers,\r\n});\r\n\r\nconst {\r\n  useModuleState,\r\n  useModuleStateSelector,\r\n} = createUseModuleStateHook<IModuleState>(ModuleID);\r\n\r\n// Extract `actions` from Module's state\r\nconst { actions: ModuleActions } = ModuleState;\r\n// Export state for Module config and actions for dispatch usage.\r\nexport { ModuleState, ModuleActions, useModuleState, useModuleStateSelector };\r\n// Export State type definition\r\nexport * from \"./initialState\";\r\n\r\nexport { useDispatch };\r\n","/**\r\n * InitialState\r\n * ---\r\n * This file maintains the type definition\r\n * and the actual initialState of the Module.\r\n */\r\n\r\n/** Type definition of the Module's state */\r\nexport interface IModuleState {\r\n  loading: boolean;\r\n  isConfigDrawerOpen: boolean;\r\n  config: {\r\n    size: number;\r\n    color: { primary: string; secondary: string };\r\n    text: string;\r\n    variant: \"all\" | \"company\" | \"platform\";\r\n    icon: \"all\" | \"transparent\" | \"opaque\";\r\n  };\r\n}\r\n\r\nexport const colors = { brand: \"#AE001A\" };\r\n\r\n/** Initial state of Module */\r\nexport default {\r\n  loading: true,\r\n  isConfigDrawerOpen: true,\r\n  config: {\r\n    size: 200,\r\n    color: { primary: colors.brand, secondary: \"\" },\r\n    text: \"\",\r\n    variant: \"all\",\r\n    icon: \"all\",\r\n  },\r\n} as IModuleState;\r\n","/**\r\n * Reducers\r\n * ---\r\n * This file maintains all the reducers (modifiers)\r\n * for the Module's state. The name of reducer will\r\n * become the name of the action.\r\n *\r\n * A case reducer can choose to mutate the passed-in\r\n * state value directly instead of returning a new state.\r\n * This does not actually cause the store state to be\r\n * mutated directly; instead, thanks to immer, the\r\n * mutations are translated to copy operations that\r\n * result in a new state.\r\n */\r\nimport { CaseReducer, PayloadAction } from \"@faharmony/state\";\r\nimport { IModuleState } from \"./initialState\";\r\n\r\n// Generic types for ease-of-use\r\ntype Reducer = CaseReducer<IModuleState>;\r\ntype ReducerWithPayload<T> = CaseReducer<IModuleState, PayloadAction<T>>;\r\ntype Config = IModuleState[\"config\"];\r\n\r\n// -------------------\r\n// Edit reducers below\r\n\r\n/** Reducer without required payload.\r\n * @example dispatch(toggleLoading()) */\r\nexport const toggleLoading: Reducer = (state) => {\r\n  state.loading = !state.loading;\r\n};\r\n\r\n/** Reducer with required payload.\r\n * @example dispatch(setLoading(true)) */\r\nexport const setLoading: ReducerWithPayload<boolean> = (state, { payload }) => {\r\n  state.loading = payload;\r\n};\r\n\r\n/** Reducer with to toggle ConfigDrawer.*/\r\nexport const toggleConfigDrawer: Reducer = (state) => {\r\n  state.isConfigDrawerOpen = !state.isConfigDrawerOpen;\r\n};\r\n\r\nexport const setVariant: ReducerWithPayload<Config[\"variant\"]> = (\r\n  state,\r\n  { payload }\r\n) => {\r\n  state.config.variant = payload;\r\n};\r\n\r\nexport const setIcon: ReducerWithPayload<Config[\"icon\"]> = (\r\n  state,\r\n  { payload }\r\n) => {\r\n  state.config.icon = payload;\r\n};\r\n\r\nexport const setColor: ReducerWithPayload<Config[\"color\"] | string> = (\r\n  state,\r\n  { payload }\r\n) => {\r\n  if (typeof payload === \"string\") {\r\n    const colors = payload.split(\"@\");\r\n    state.config.color.primary = colors[0];\r\n    colors.length > 0 && (state.config.color.secondary = colors[1]);\r\n  } else state.config.color = { ...state.config.color, ...payload };\r\n};\r\n"],"names":["Display","useModuleState","loading","value","color","independent","panels","id","heading","defaultActive","content","ModuleID","ModuleState","createModuleState","name","initialState","reducers","createUseModuleStateHook","useModuleStateSelector","ModuleActions","actions","colors","brand","isConfigDrawerOpen","config","size","primary","secondary","text","variant","icon","toggleLoading","state","setLoading","payload","toggleConfigDrawer","setVariant","setIcon","setColor","split","length"],"sourceRoot":""}