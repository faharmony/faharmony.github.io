{"version":3,"sources":["modules/components/pages/Form2.tsx"],"names":["defaultValues","testDate","Date","realDate","toggle","number","enabledDates","FormNode","formMethods","useForm","criteriaMode","control","handleSubmit","register","onSubmit","console","log","style","width","direction","alignItems","label","name","includeDates","onChange","disabled","ref","checked","prefixText","justifyContent","value","variant","loading","onClick","resetFormValues","type","Page","heading","overflow","selected","readOnly","field","onDateChange"],"mappings":"2GAAA,iDAqBMA,EAAqC,CACzCC,SAAU,IAAIC,KACdC,SAAU,IAAID,KAAK,cACnBE,QAAQ,EACRC,OAAQ,aAGJC,EAAe,CACnB,IAAIJ,KACJ,IAAIA,KAAK,cACT,IAAIA,KAAK,eAGLK,EAAW,WACf,IAAMC,EAAcC,YAAoB,CACtCT,gBACAU,aAAc,QAERC,EAAoCH,EAApCG,QAASC,EAA2BJ,EAA3BI,aAAcC,EAAaL,EAAbK,SAEzBC,EAAWF,EAAaG,QAAQC,KACtC,OACE,eAAC,IAAD,CAAMR,YAAaA,EAAaS,MAAO,CAAEC,MAAO,QAAUC,UAAU,MAApE,UACE,eAAC,IAAD,CAAKA,UAAU,SAASD,MAAO,QAASE,WAAW,QAAnD,UACE,cAAC,IAAD,CAAaC,MAAM,OAAnB,SACE,cAAC,IAAD,CAAYC,KAAK,WAAWC,aAAcjB,MAE5C,cAAC,IAAD,CAAae,MAAM,kBAAnB,SACE,cAAC,IAAD,CACEC,KAAK,WACLE,SAAUT,QAAQC,IAClBO,aAAc,CAAC,IAAIrB,MACnBuB,UAAQ,MAGZ,eAAC,IAAD,WACE,cAAC,IAAD,CAAaJ,MAAM,mBAAnB,SACE,cAAC,IAAD,CAAQC,KAAK,SAASI,IAAKb,EAAUQ,MAAM,kBAE7C,cAAC,IAAD,CAAaA,MAAM,oBAAnB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAQI,UAAQ,IAChB,cAAC,IAAD,CAAQA,UAAQ,EAACE,SAAS,YAIhC,cAAC,IAAD,CAAaN,MAAM,cAAnB,SACE,cAAC,IAAD,CAAWC,KAAK,SAASI,IAAKb,EAAUe,WAAW,UAErD,cAAC,IAAD,IACA,cAAC,IAAD,CAAKC,eAAe,gBAApB,SACE,eAAC,IAAD,CAAKX,MAAM,OAAX,UACE,cAAC,IAAD,CACEY,MAAM,QACNC,QAAQ,YACRC,SAAO,EACPC,QAAS,kBAAMC,YAAgBvB,MAEjC,cAAC,IAAD,CACEwB,KAAK,SACLL,MAAM,SACNG,QAASnB,EACTiB,QAAQ,oBAKhB,8BACE,cAAC,IAAD,UA8BOK,UAxBF,kBACX,eAAC,IAAD,CAAUC,QAAQ,OAAOC,SAAS,SAAlC,UACE,cAAC/B,EAAD,IACA,eAAC,IAAD,CAAKU,MAAO,CAAEC,MAAO,SAArB,UACE,cAAC,IAAD,CAAaG,MAAM,kBAAnB,SACE,cAAC,IAAD,CACEC,KAAK,WACLE,SAAUT,QAAQC,IAClBuB,SAAU,IAAIrC,KACdsC,UAAQ,MAIZ,cAAC,IAAD,CAASC,MAAM,QAAf,SACE,cAAC,IAAD,CACEnB,KAAK,WACLoB,aAAc3B,QAAQC,IACtBuB,SAAU,IAAIrC","file":"static/js/22.4e2c2b21.chunk.js","sourcesContent":["import {\n  Form,\n  useForm,\n  resetFormValues,\n  FormValuesWatcher,\n  DatePicker,\n  FormControl,\n  Toggle,\n  TextField,\n} from \"@faharmony/form\";\nimport { Box } from \"@faharmony/theme\";\nimport { Button, Divider, InfoBox } from \"@faharmony/components\";\nimport { PageView } from \"@faharmony/views\";\n\ntype FormInputs = {\n  testDate: Date;\n  realDate: Date;\n  toggle: boolean;\n  number: number;\n};\n\nconst defaultValues: Partial<FormInputs> = {\n  testDate: new Date(),\n  realDate: new Date(\"2020-12-12\"),\n  toggle: true,\n  number: 1343400.234,\n};\n\nconst enabledDates = [\n  new Date(),\n  new Date(\"2021-03-12\"),\n  new Date(\"2021-03-29\"),\n];\n\nconst FormNode = () => {\n  const formMethods = useForm<FormInputs>({\n    defaultValues,\n    criteriaMode: \"all\",\n  });\n  const { control, handleSubmit, register } = formMethods;\n\n  const onSubmit = handleSubmit(console.log);\n  return (\n    <Form formMethods={formMethods} style={{ width: \"100%\" }} direction=\"row\">\n      <Box direction=\"column\" width={\"260px\"} alignItems=\"start\">\n        <FormControl label=\"Date\">\n          <DatePicker name=\"testDate\" includeDates={enabledDates} />\n        </FormControl>\n        <FormControl label=\"Date (disabled)\">\n          <DatePicker\n            name=\"realDate\"\n            onChange={console.log}\n            includeDates={[new Date()]}\n            disabled\n          />\n        </FormControl>\n        <Box>\n          <FormControl label=\"Toggle (enabled)\">\n            <Toggle name=\"toggle\" ref={register} label=\"Hello world\" />\n          </FormControl>\n          <FormControl label=\"Toggle (disabled)\">\n            <Box>\n              <Toggle disabled />\n              <Toggle disabled checked={true} />\n            </Box>\n          </FormControl>\n        </Box>\n        <FormControl label=\"NumberField\">\n          <TextField name=\"number\" ref={register} prefixText=\"EUR\" />\n        </FormControl>\n        <Divider />\n        <Box justifyContent=\"space-between\">\n          <Box width=\"auto\">\n            <Button\n              value=\"Reset\"\n              variant=\"secondary\"\n              loading\n              onClick={() => resetFormValues(control)}\n            />\n            <Button\n              type=\"submit\"\n              value=\"Submit\"\n              onClick={onSubmit}\n              variant=\"primary\"\n            />\n          </Box>\n        </Box>\n      </Box>\n      <div>\n        <FormValuesWatcher />\n      </div>\n    </Form>\n  );\n};\n\nconst Page = () => (\n  <PageView heading=\"Form\" overflow=\"scroll\">\n    <FormNode />\n    <Box style={{ width: \"300px\" }}>\n      <FormControl label=\"Date (readonly)\">\n        <DatePicker\n          name=\"realDate\"\n          onChange={console.log}\n          selected={new Date()}\n          readOnly\n        />\n      </FormControl>\n\n      <InfoBox field=\"Date \">\n        <DatePicker\n          name=\"realDate\"\n          onDateChange={console.log}\n          selected={new Date()}\n        />\n      </InfoBox>\n    </Box>\n  </PageView>\n);\n\nexport default Page;\n"],"sourceRoot":""}