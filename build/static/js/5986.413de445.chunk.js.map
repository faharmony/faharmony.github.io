{"version":3,"file":"static/js/5986.413de445.chunk.js","mappings":"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","sources":["modules/components/pages/Stepper.tsx"],"sourcesContent":["import { FC, useState, useRef } from \"react\";\n\nimport { PageView, SummaryView } from \"@faharmony/views\";\nimport {\n  IStepProps,\n  IStepperProps,\n  IStepButtonRef,\n} from \"@faharmony/navigation\";\nimport { Button, useModal } from \"@faharmony/components\";\nimport {\n  FormControl,\n  TextField,\n  useForm,\n  useFormContext,\n  SubmitHandler,\n  resetFormValues,\n} from \"@faharmony/form\";\nimport { Box } from \"@faharmony/theme\";\nimport { addToast } from \"@faharmony/core\";\n\ninterface UserFormInputs {\n  firstName: string;\n  lastName: string;\n  address?: {};\n  phone?: string;\n  email?: string;\n  username: string | undefined;\n  password: string | undefined;\n}\nconst userFormDefaultValues: Partial<UserFormInputs> = {\n  firstName: undefined,\n  lastName: undefined,\n  address: {},\n  phone: \"\",\n  email: \"\",\n  username: \"\",\n  password: \"\",\n};\n\nconst UserFirstNameField: FC = () => {\n  const { register, errors } = useFormContext<UserFormInputs>();\n  return (\n    <Box direction=\"column\">\n      <FormControl\n        label=\"First name\"\n        errorText={errors.firstName?.message}\n        helpText=\"Firstname of the user.\"\n        required\n      >\n        <TextField\n          name=\"firstName\"\n          placeholder=\"Enter full name\"\n          error={!!errors.firstName}\n          ref={register({\n            required: \"Firstname is required\",\n            minLength: { value: 3, message: \"At least 3 characters required.\" },\n          })}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n\nconst UserLastNameField: FC = () => {\n  const { register, errors } = useFormContext<UserFormInputs>();\n  return (\n    <Box direction=\"column\">\n      <FormControl\n        label=\"Lastname\"\n        helpText=\"Lastname of the user.\"\n        errorText={errors.lastName?.message}\n        required\n      >\n        <TextField\n          name=\"lastName\"\n          placeholder=\"Enter lastname\"\n          error={!!errors.lastName}\n          ref={register({\n            required: \"Lastname is required\",\n            minLength: { value: 3, message: \"At least 3 characters required.\" },\n          })}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n\nconst AddressField = ({ i }: { i: number }) => {\n  const { register, errors } = useFormContext<UserFormInputs>();\n  return (\n    <Box direction=\"column\">\n      <FormControl\n        label={\"Address \" + i}\n        errorText={errors.address ? errors.address[i].message : \"\"}\n      >\n        <TextField\n          name={\"address.\" + i}\n          placeholder={\"Enter address line \" + i}\n          error={errors.address ? !!errors.address[i] : false}\n          ref={register}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n\nconst PhoneField = () => {\n  const { register, errors } = useFormContext<UserFormInputs>();\n  return (\n    <Box direction=\"column\">\n      <FormControl label=\"Phone\" errorText={errors.phone?.message}>\n        <TextField\n          name={\"phone\"}\n          placeholder=\"Enter phone number\"\n          error={!!errors.phone}\n          ref={register({\n            pattern: {\n              value: /^\\d{10}$/,\n              message: \"Only 10 digits phone number is allowed \",\n            },\n          })}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n\nconst EmailField = () => {\n  const { register, errors } = useFormContext<UserFormInputs>();\n  return (\n    <Box direction=\"column\">\n      <FormControl label=\"Email\" errorText={errors.email?.message}>\n        <TextField\n          name={\"email\"}\n          placeholder=\"Enter email\"\n          error={!!errors.email}\n          ref={register({\n            pattern: {\n              value: /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/,\n              message: \"Invalid email\",\n            },\n          })}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n\nconst UserFormUsernameField: FC = () => {\n  const { register, errors } = useFormContext<UserFormInputs>();\n  return (\n    <Box direction=\"column\">\n      <FormControl\n        label=\"Username\"\n        helpText=\"Login username for the user.\"\n        errorText={errors.username?.message}\n        required\n      >\n        <TextField\n          name=\"username\"\n          placeholder=\"Enter username\"\n          error={!!errors.username}\n          ref={register({\n            required: \"Username is required\",\n            minLength: { value: 4, message: \"At least 4 characters required.\" },\n          })}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n\nconst UserFormPasswordField: FC = () => {\n  const { register, errors } = useFormContext<UserFormInputs>();\n  return (\n    <Box direction=\"column\">\n      <FormControl\n        label=\"Password\"\n        helpText=\"Login password for the user.\"\n        errorText={errors.password?.message}\n        required\n      >\n        <TextField\n          name=\"password\"\n          placeholder=\"Enter password\"\n          error={!!errors.password}\n          ref={register({\n            required: \"Passsword is required\",\n            minLength: { value: 8, message: \"At least 8 characters required.\" },\n          })}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n\nconst Page = () => {\n  // https://stackoverflow.com/questions/61380289/react-hook-form-field-value-get-lost-when-i-collapse-add-or-delete-panel\n  const [open, setOpen] = useState(true);\n\n  const [ModalWrapper, openModal, closeModal, isOpen] = useModal(false);\n\n  const steps: IStepProps[] = [\n    {\n      label: \"Basic Information and a veryVeryLongWord\",\n      completed: false,\n      state: \"active\",\n      content: (\n        <Box direction=\"column\">\n          <UserFirstNameField />\n          <UserLastNameField />\n        </Box>\n      ),\n    },\n    {\n      label: \"Address\",\n      completed: false,\n      state: \"active\",\n      content: (\n        <Box direction=\"column\">\n          <AddressField i={0} />\n          <AddressField i={1} />\n        </Box>\n      ),\n    },\n    {\n      label: \"Contact\",\n      completed: false,\n      state: \"active\",\n      content: (\n        <Box direction=\"column\">\n          <PhoneField />\n          <EmailField />\n        </Box>\n      ),\n    },\n    {\n      label: \"Credentials\",\n      completed: false,\n      state: \"active\",\n      content: (\n        <Box direction=\"column\">\n          <UserFormUsernameField />\n          <UserFormPasswordField />\n        </Box>\n      ),\n    },\n    {\n      label: \"Dummy Step\",\n      completed: false,\n      state: \"active\",\n    },\n    {\n      label: \"Dummy Step 2\",\n      completed: false,\n      state: \"active\",\n    },\n  ];\n\n  const formMethods = useForm<UserFormInputs>({\n    defaultValues: userFormDefaultValues,\n    shouldUnregister: false,\n    mode: \"onBlur\",\n  });\n\n  const { control } = formMethods;\n\n  const submitButtonRef = useRef<IStepButtonRef>(null);\n  const backButtonRef = useRef<IStepButtonRef>(null);\n  const nextButtonRef = useRef<IStepButtonRef>(null);\n\n  const disableButtons = (disable: boolean) => {\n    const setSubmitting = submitButtonRef?.current?.setSubmitting;\n    setSubmitting && setSubmitting(disable);\n\n    const back = backButtonRef?.current?.setDisabled;\n    back && back(disable);\n\n    const next = nextButtonRef?.current?.setDisabled;\n    next && next(disable);\n  };\n\n  const onSubmit: SubmitHandler<UserFormInputs> = async (\n    values: UserFormInputs\n  ) => {\n    console.log(\"Sent values: \" + JSON.stringify(values));\n\n    disableButtons(true);\n\n    await setTimeout(() => {\n      addToast({\n        id: \"submit\",\n        title: \"Information saved\",\n        variant: \"positive\",\n        persist: false,\n      });\n      resetFormValues(control);\n\n      disableButtons(false);\n    }, 5000);\n  };\n\n  const stepper: IStepperProps = {\n    steps: steps,\n    currentStep: 0,\n    formMethods: formMethods,\n    handleSubmitButton: onSubmit,\n    editMode: true,\n    submitButtonRef: submitButtonRef,\n    backButtonRef: backButtonRef,\n    nextButtonRef: nextButtonRef,\n  };\n\n  return (\n    <PageView\n      heading=\"Stepper component\"\n      actions={\n        <>\n          <Button\n            value=\"Open SummaryView\"\n            onClick={() => setOpen(true)}\n            disabled={open}\n          />\n\n          <Button\n            value=\"Open As Modal\"\n            onClick={() => {\n              openModal();\n              setOpen(false); //Close the summary view otherwise it will go on infinite render due to duplicate form.\n            }}\n            disabled={isOpen}\n          />\n        </>\n      }\n    >\n      {open && (\n        <SummaryView\n          caption=\"FA user\"\n          heading=\"New user\"\n          onClose={() => setOpen(false)}\n          stepper={stepper}\n        ></SummaryView>\n      )}\n      <ModalWrapper style={{ height: \"90vh\", width: \"30vw\" }}>\n        <SummaryView\n          caption=\"FA user\"\n          heading=\"New user\"\n          onClose={() => closeModal()}\n          stepper={stepper}\n        ></SummaryView>\n      </ModalWrapper>\n    </PageView>\n  );\n};\n\nexport default Page;\n"],"names":["userFormDefaultValues","firstName","undefined","lastName","address","phone","email","username","password","UserFirstNameField","useFormContext","register","errors","direction","label","errorText","message","helpText","required","name","placeholder","error","ref","minLength","value","UserLastNameField","AddressField","i","PhoneField","pattern","EmailField","UserFormUsernameField","UserFormPasswordField","useState","open","setOpen","useModal","ModalWrapper","openModal","closeModal","isOpen","steps","completed","state","content","formMethods","useForm","defaultValues","shouldUnregister","mode","control","submitButtonRef","useRef","backButtonRef","nextButtonRef","disableButtons","disable","setSubmitting","current","back","setDisabled","next","onSubmit","values","console","log","JSON","stringify","setTimeout","addToast","id","title","variant","persist","resetFormValues","stepper","currentStep","handleSubmitButton","editMode","heading","actions","onClick","disabled","caption","onClose","style","height","width"],"sourceRoot":""}