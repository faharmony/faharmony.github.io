{"version":3,"sources":["modules/logo/state/index.ts","modules/logo/components/index.ts","modules/logo/pages/index.ts","modules/logo/index.ts","modules/logo/state/initialState.ts","modules/logo/components/ConfigDrawer.tsx","modules/logo/state/reducers.ts","modules/logo/components/Display.tsx","modules/logo/components/ComboBox.tsx","modules/logo/components/InputField.tsx","modules/logo/pages/MainPage.tsx"],"names":["ModuleState","createModuleState","name","initialState","reducers","ModuleActions","actions","ModuleId","ModuleIcon","FALogoIconDefinition","id","component","MainPage","label","roles","icon","state","subModules","colors","brand","loading","isConfigDrawerOpen","config","size","color","primary","secondary","text","variant","configurationOptions","variants","value","getCurrentOption","option","find","o","ColorPicker","onChange","useModuleState","React","useState","setValue","handleChange","val","type","ConfigDrawer","dispatch","useDispatch","action","defaultValue","key","toString","split","insertQueryParam","caption","heading","onClose","toggleConfigDrawer","direction","alignItems","style","padding","Theme","spacing","placeholder","options","setVariant","setIcon","setColor","toggleLoading","setLoading","payload","length","Display","independent","panels","defaultActive","content","ComboBox","props","marginLeft","helpText","StyledInput","styled","input","InputField","e","target","PageActions","disabled","onClick","t","useModuleTranslation","search","URLSearchParams","useLocation","delete","jsonString","decodeURI","replace","params","JSON","parse","Object","entries","forEach","decodeURIComponent","useSetState","primaryNode","secondaryNode"],"mappings":"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","file":"static/js/3.30b7f479.chunk.js","sourcesContent":["/**\n * State\n * ---\n *\n * This directory contains module state.\n * Harmony uses the Redux-Toolkit setup and\n * treats each Module as a Slice.\n *\n * Use other files like `store.ts` and `reducers.ts`\n * to maintain the functionality of ModuleState.\n * This file is responsible for combining them.\n *\n * There is no need for separately creating or\n * maintaining `actions` as they are generated\n * using slice's case reducers.\n *\n * @readonly No edit required in this file unless\n * ModuleId changes.\n */\n\nimport { createModuleState } from \"@faharmony/state\";\nimport initialState from \"./initialState\";\nimport * as reducers from \"./reducers\";\n\n/** Create Module's state using wrapper of createSlice(). */\nconst ModuleState = createModuleState({\n  /** name should be exact same as Module ID. */\n  name: \"logo\",\n  /** Initial value of Module's state. */\n  initialState,\n  /** Object of case reducers to modify Module's state. */\n  reducers,\n});\n\n// Extract `actions` from Module's state\nconst { actions: ModuleActions } = ModuleState;\n// Export state for Module config and actions for dispatch usage.\nexport { ModuleState, ModuleActions };\n// Export State type definition\nexport * from \"./initialState\";\n","/**\n * Components\n * ---\n *\n * This directory contains reusable components which\n * are used by either Pages or other Components.\n *\n * If a component is useful or essential for multiple\n * modules or applications, then it should be moved\n * to Harmony.\n *\n * To begin, create a Component file/folder in this\n * directory and export it from this file.\n *\n * A sample component is provided for quick start.\n * It should be removed along with its references.\n */\n\nexport * from \"./ConfigDrawer\";\nexport * from \"./Display\";\n","/**\n * Pages\n * ---\n *\n * This directory contains module Pages.\n * A page is primary construct (a scaffold) onto which\n * other components and helpers are placed.\n *\n * Pages are directly linked with Router. Essentially,\n * each module or subModule can have it's own page and\n * own unique url route.\n *\n * At least 1 page is mandatory since that will act as\n * landing or primary page for the module. This page\n * should be called `MainPage.tsx`.\n *\n * 1 page is added as a sample. It can be edited or\n * replaced as per requirement.\n */\n\nexport { MainPage } from \"./MainPage\";\n","/**\n * MODULE\n * ------\n * This is the module configuration\n * -- Change required here --\n *\n * @author Siddhant Gupta <siddhant@fasolutions.com>\n * @copyright FA Solutions Oy\n */\n\nimport { IModuleProps } from \"@faharmony/module\";\nimport { FALogoIconDefinition } from \"@faharmony/icons\";\nimport { MainPage } from \"./pages\";\nimport { ModuleState } from \"./state\";\n// import { appRoles } from \"../../config\";\n\n/** Should match the Module folder name */\nexport const ModuleId: string = `logo`;\n\n/** Fallback Module label.\n * Actual label is taken from locale files (key: moduleName) */\nconst ModuleLabelFallback: string = `Logo generator`;\n\n/**\n * List of roles to restrict access.\n * Empty array for unrestricted access.\n *\n * Use appRoles object defined in App configuration\n * to access roles available in app.\n */\nconst ModuleRoles: IModuleProps[\"roles\"] = [];\n\n/** Icon of the Module. Visible in Menu. */\nconst ModuleIcon: IModuleProps[\"icon\"] = FALogoIconDefinition;\n\n/** Sub-modules of the module. Visible in Menu\n * Empty array means no subModules. */\nconst subModules: IModuleProps[\"subModules\"] = [];\n\n/**\n * MODULE CONFIG\n * -------------\n * DO NOT CHANGE\n */\nexport default {\n  id: ModuleId,\n  component: MainPage,\n  label: ModuleLabelFallback,\n  roles: ModuleRoles,\n  icon: ModuleIcon,\n  state: ModuleState,\n  subModules,\n} as IModuleProps;\n","/**\n * InitialState\n * ---\n * This file maintains the type definition\n * and the actual initialState of the Module.\n */\n\n/** Type definition of the Module's state */\nexport interface IModuleState {\n  loading: boolean;\n  isConfigDrawerOpen: boolean;\n  config: {\n    size: number;\n    color: { primary: string; secondary: string };\n    text: string;\n    variant: \"all\" | \"company\" | \"platform\";\n    icon: \"all\" | \"transparent\" | \"opaque\";\n  };\n}\n\nexport const colors = { brand: \"#AE001A\" };\n\n/** Initial state of Module */\nexport default {\n  loading: true,\n  isConfigDrawerOpen: true,\n  config: {\n    size: 200,\n    color: { primary: colors.brand, secondary: \"\" },\n    text: \"\",\n    variant: \"all\",\n    icon: \"all\",\n  },\n} as IModuleState;\n","import React from \"react\";\nimport { SummaryView } from \"@faharmony/views\";\nimport { Box } from \"@faharmony/components\";\nimport { useModuleState, useDispatch } from \"@faharmony/state\";\nimport { insertQueryParam } from \"@faharmony/router\";\nimport { IModuleState, ModuleActions } from \"../state\";\nimport { ComboBox } from \"./ComboBox\";\nimport { InputField } from \"./InputField\";\nimport { Theme } from \"@faharmony/theme\";\n\ninterface Obj {\n  value: string;\n  label: string;\n}\n\nconst configurationOptions = {\n  variants: [\n    { value: \"all\", label: \"All\" },\n    { value: \"company\", label: \"Company branding\" },\n    { value: \"platform\", label: \"Apps branding\" },\n  ],\n  icon: [\n    { value: \"all\", label: \"All\" },\n    { value: \"transparent\", label: \"Transparent\" },\n    { value: \"opaque\", label: \"Opaque\" },\n  ],\n};\n\nconst getCurrentOption = (\n  option: keyof typeof configurationOptions,\n  value: string\n) =>\n  configurationOptions[option].find((o) => o.value === value) ||\n  configurationOptions[option][0];\n\nconst ColorPicker = ({ onChange }: { onChange: (o: Obj) => void }) => {\n  const {\n    config: { color },\n  } = useModuleState<IModuleState>();\n  const [value, setValue] = React.useState(color.primary);\n  const handleChange = (val: string) => {\n    setValue(val);\n    onChange({ value: val, label: \"\" });\n  };\n  return <InputField handleChange={handleChange} value={value} type=\"color\" />;\n};\n\n/**\n * @author Siddhant Gupta <siddhant@fasolutions.com>\n */\nexport const ConfigDrawer = () => {\n  const dispatch = useDispatch();\n  const { isConfigDrawerOpen, config } = useModuleState<IModuleState>();\n  const { variant, icon } = config;\n\n  const handleChange = (\n    action: Function,\n    option: any,\n    defaultValue = \"all\"\n  ) => {\n    const key = action.toString().split(\"set\")[1];\n    const value = option?.value || defaultValue;\n    dispatch(action(value));\n    insertQueryParam(key, value);\n  };\n\n  return isConfigDrawerOpen ? (\n    <SummaryView\n      caption=\"Logo\"\n      heading=\"Configuration\"\n      onClose={() => dispatch(ModuleActions.toggleConfigDrawer())}\n    >\n      <Box\n        direction=\"column\"\n        alignItems=\"normal\"\n        style={{ padding: Theme.spacing() }}\n      >\n        <ComboBox\n          label=\"Variant\"\n          placeholder=\"Select variant...\"\n          options={configurationOptions.variants}\n          defaultValue={getCurrentOption(\"variants\", variant)}\n          onChange={(o: any) => handleChange(ModuleActions.setVariant, o)}\n        />\n        <ComboBox\n          label=\"Icon style\"\n          placeholder=\"Select icon style...\"\n          options={configurationOptions.icon}\n          defaultValue={getCurrentOption(\"icon\", icon)}\n          onChange={(o: any) => handleChange(ModuleActions.setIcon, o)}\n        />\n        <ColorPicker\n          onChange={(o: any) => handleChange(ModuleActions.setColor, o)}\n        />\n      </Box>\n    </SummaryView>\n  ) : null;\n};\n\nexport default ConfigDrawer;\n","/**\n * Reducers\n * ---\n * This file maintains all the reducers (modifiers)\n * for the Module's state. The name of reducer will\n * become the name of the action.\n *\n * A case reducer can choose to mutate the passed-in\n * state value directly instead of returning a new state.\n * This does not actually cause the store state to be\n * mutated directly; instead, thanks to immer, the\n * mutations are translated to copy operations that\n * result in a new state.\n */\nimport { CaseReducer, PayloadAction } from \"@faharmony/state\";\nimport { IModuleState } from \"./initialState\";\n\n// Generic types for ease-of-use\ntype Reducer = CaseReducer<IModuleState>;\ntype ReducerWithPayload<T> = CaseReducer<IModuleState, PayloadAction<T>>;\ntype Config = IModuleState[\"config\"];\n\n// -------------------\n// Edit reducers below\n\n/** Reducer without required payload.\n * @example dispatch(toggleLoading()) */\nexport const toggleLoading: Reducer = (state) => {\n  state.loading = !state.loading;\n};\n\n/** Reducer with required payload.\n * @example dispatch(setLoading(true)) */\nexport const setLoading: ReducerWithPayload<boolean> = (state, { payload }) => {\n  state.loading = payload;\n};\n\n/** Reducer with to toggle ConfigDrawer.*/\nexport const toggleConfigDrawer: Reducer = (state) => {\n  state.isConfigDrawerOpen = !state.isConfigDrawerOpen;\n};\n\nexport const setVariant: ReducerWithPayload<Config[\"variant\"]> = (\n  state,\n  { payload }\n) => {\n  state.config.variant = payload;\n};\n\nexport const setIcon: ReducerWithPayload<Config[\"icon\"]> = (\n  state,\n  { payload }\n) => {\n  state.config.icon = payload;\n};\n\nexport const setColor: ReducerWithPayload<Config[\"color\"] | string> = (\n  state,\n  { payload }\n) => {\n  if (typeof payload === \"string\") {\n    const colors = payload.split(\"@\");\n    state.config.color.primary = colors[0];\n    colors.length > 0 && (state.config.color.secondary = colors[1]);\n  } else state.config.color = { ...state.config.color, ...payload };\n};\n","import React from \"react\";\nimport { Text, Accordion, Preloader } from \"@faharmony/components\";\nimport { useModuleState } from \"@faharmony/state\";\nimport { IModuleState } from \"../state\";\n\n/**\n * @author Siddhant Gupta <siddhant@fasolutions.com>\n */\nexport const Display = () => {\n  const state = useModuleState<IModuleState>();\n  //   const dispatch = useDispatch();\n  if (state.loading) return <Preloader />;\n  else\n    return (\n      <div>\n        <Text\n          value=\"All generated logos will appear here. They can be configured using side-drawer.\"\n          color=\"disabled\"\n        />\n        <br />\n        <br />\n        <Accordion\n          independent\n          panels={[\n            {\n              id: \"standard\",\n              heading: \"Standard logos\",\n              defaultActive: true,\n              content: <div />,\n            },\n            {\n              id: \"custom\",\n              heading: \"Customized logos\",\n              defaultActive: true,\n              content: <div />,\n            },\n          ]}\n        />\n      </div>\n    );\n};\n\nexport default Display;\n","import React from \"react\";\nimport { Combobox, IComboboxProps } from \"@faharmony/form\";\nimport { Theme } from \"@faharmony/theme\";\nimport { Text } from \"@faharmony/components\";\n\n/**\n * @author Siddhant Gupta <siddhant@fasolutions.com>\n */\nexport const ComboBox = (props: IComboboxProps) => {\n  return (\n    <div>\n      {props.label && (\n        <div style={{ marginLeft: Theme.spacing(\"sm\") }}>\n          <Text value={props.label} variant=\"h5\" />\n        </div>\n      )}\n      <Combobox {...props} name={props.label} />\n      {props.helpText && (\n        <Text value={props.helpText} variant=\"small\" color=\"secondary\" />\n      )}\n    </div>\n  );\n};\n\nexport default ComboBox;\n","import React from \"react\";\nimport { Theme, styled } from \"@faharmony/theme\";\nimport { Text } from \"@faharmony/components\";\n\nexport interface IInputFieldProps {\n  label?: string;\n  helpText?: string;\n  value: string;\n  placeholder?: string;\n  handleChange: (value: string) => void;\n  type: string;\n}\n\nconst StyledInput = styled.input`\n  height: 36px;\n`;\n\n/**\n * @author Siddhant Gupta <siddhant@fasolutions.com>\n */\nexport const InputField = (props: IInputFieldProps) => {\n  const { label, helpText, handleChange } = props;\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    handleChange(e.target.value);\n  return (\n    <div>\n      {label && (\n        <div style={{ marginLeft: Theme.spacing(\"sm\") }}>\n          <Text value={label} variant=\"h5\" />\n        </div>\n      )}\n      <StyledInput {...props} onChange={onChange} />\n      {helpText && <Text value={helpText} variant=\"small\" color=\"secondary\" />}\n    </div>\n  );\n};\n\nexport default InputField;\n","// {{Sample}}:MainView\nimport React from \"react\";\nimport { PageView, PrimaryWithSidebarLayout } from \"@faharmony/views\";\nimport { useModuleTranslation } from \"@faharmony/module\";\nimport { Button, Box } from \"@faharmony/components\";\nimport { useLocation } from \"@faharmony/router\";\nimport { useModuleState, useDispatch } from \"@faharmony/state\";\nimport { IModuleState, ModuleActions } from \"../state\";\nimport { ConfigDrawer, Display } from \"../components\";\n\nconst PageActions = () => {\n  const state = useModuleState<IModuleState>();\n  const dispatch = useDispatch();\n  return (\n    <Box>\n      <Button\n        value=\"Configure logo\"\n        disabled={state.isConfigDrawerOpen}\n        onClick={() => dispatch(ModuleActions.toggleConfigDrawer())}\n      />\n    </Box>\n  );\n};\n\nconst useSetState = (): void => {\n  const dispatch = useDispatch();\n  const search = new URLSearchParams(useLocation().search);\n  search.delete(\"tab\");\n  if (search.toString()) {\n    const jsonString =\n      '\"' +\n      decodeURI(search.toString())\n        .replace(/\"/g, '\\\\\"')\n        .replace(/&/g, '\",\"')\n        .replace(/=/g, '\":\"') +\n      '\"';\n    const params = JSON.parse(`{${jsonString}}`);\n    Object.entries(params).forEach(([key, val]: [string, any]) => {\n      dispatch({ type: `logo/set${key}`, payload: decodeURIComponent(val) });\n    });\n  }\n  dispatch(ModuleActions.setLoading(false));\n};\n\n/**\n * Default page of module\n * @author Siddhant Gupta <siddhant@fasolutions.com>\n */\nexport const MainPage = () => {\n  const t = useModuleTranslation();\n  useSetState();\n  return (\n    <PageView heading={t(\"moduleName\")} actions={<PageActions />}>\n      <PrimaryWithSidebarLayout\n        primaryNode={<Display />}\n        secondaryNode={<ConfigDrawer />}\n      />\n    </PageView>\n  );\n};\n\nexport default MainPage;\n"],"sourceRoot":""}