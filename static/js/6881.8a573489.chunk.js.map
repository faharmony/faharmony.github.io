{"version":3,"file":"static/js/6881.8a573489.chunk.js","mappings":"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","sources":["../../node_modules/codemirror-graphql/src/info.ts","../../node_modules/codemirror-graphql/src/utils/SchemaReference.ts","../../node_modules/codemirror-graphql/src/utils/forEachState.ts","../../node_modules/codemirror-graphql/src/utils/getTypeInfo.ts","../../node_modules/codemirror-graphql/src/utils/info-addon.ts"],"sourcesContent":["/* @flow */\n/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport {\n  GraphQLDirective,\n  GraphQLEnumType,\n  GraphQLEnumValue,\n  GraphQLInputField,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLType,\n} from 'graphql';\nimport CodeMirror from 'codemirror';\n\nimport getTypeInfo, { TypeInfo } from './utils/getTypeInfo';\nimport {\n  getArgumentReference,\n  getDirectiveReference,\n  getEnumValueReference,\n  getFieldReference,\n  getTypeReference,\n  SchemaReference,\n} from './utils/SchemaReference';\nimport './utils/info-addon';\nimport type { Maybe } from 'graphql-language-service';\n\nexport interface GraphQLInfoOptions {\n  schema?: GraphQLSchema;\n  onClick?: Maybe<(ref: Maybe<SchemaReference>, e: MouseEvent) => void>;\n  renderDescription?: (str: string) => string;\n  render?: () => string;\n}\n\n/**\n * Registers GraphQL \"info\" tooltips for CodeMirror.\n *\n * When hovering over a token, this presents a tooltip explaining it.\n *\n * Options:\n *\n *   - schema: GraphQLSchema provides positionally relevant info.\n *   - hoverTime: The number of ms to wait before showing info. (Default 500)\n *   - renderDescription: Convert a description to some HTML, Useful since\n *                        descriptions are often Markdown formatted.\n *   - onClick: A function called when a named thing is clicked.\n *\n */\nCodeMirror.registerHelper(\n  'info',\n  'graphql',\n  (token: CodeMirror.Token, options: GraphQLInfoOptions) => {\n    if (!options.schema || !token.state) {\n      return;\n    }\n\n    const state = token.state;\n    const kind = state.kind;\n    const step = state.step;\n    const typeInfo = getTypeInfo(options.schema, token.state);\n\n    // Given a Schema and a Token, produce the contents of an info tooltip.\n    // To do this, create a div element that we will render \"into\" and then pass\n    // it to various rendering functions.\n    if (\n      (kind === 'Field' && step === 0 && typeInfo.fieldDef) ||\n      (kind === 'AliasedField' && step === 2 && typeInfo.fieldDef)\n    ) {\n      const into = document.createElement('div');\n      renderField(into, typeInfo, options);\n      renderDescription(into, options, typeInfo.fieldDef as any);\n      return into;\n    } else if (kind === 'Directive' && step === 1 && typeInfo.directiveDef) {\n      const into = document.createElement('div');\n      renderDirective(into, typeInfo, options);\n      renderDescription(into, options, typeInfo.directiveDef);\n      return into;\n    } else if (kind === 'Argument' && step === 0 && typeInfo.argDef) {\n      const into = document.createElement('div');\n      renderArg(into, typeInfo, options);\n      renderDescription(into, options, typeInfo.argDef);\n      return into;\n    } else if (\n      kind === 'EnumValue' &&\n      typeInfo.enumValue &&\n      typeInfo.enumValue.description\n    ) {\n      const into = document.createElement('div');\n      renderEnumValue(into, typeInfo, options);\n      renderDescription(into, options, typeInfo.enumValue);\n      return into;\n    } else if (\n      kind === 'NamedType' &&\n      typeInfo.type &&\n      (typeInfo.type as GraphQLObjectType).description\n    ) {\n      const into = document.createElement('div');\n      renderType(into, typeInfo, options, typeInfo.type);\n      renderDescription(into, options, typeInfo.type);\n      return into;\n    }\n  },\n);\n\nfunction renderField(\n  into: HTMLElement,\n  typeInfo: TypeInfo,\n  options: GraphQLInfoOptions,\n) {\n  renderQualifiedField(into, typeInfo, options);\n  renderTypeAnnotation(into, typeInfo, options, typeInfo.type);\n}\n\nfunction renderQualifiedField(\n  into: HTMLElement,\n  typeInfo: TypeInfo,\n  options: GraphQLInfoOptions,\n) {\n  const fieldName = typeInfo.fieldDef?.name || '';\n  if (fieldName.slice(0, 2) !== '__') {\n    renderType(into, typeInfo, options, typeInfo.parentType);\n    text(into, '.');\n  }\n  text(into, fieldName, 'field-name', options, getFieldReference(typeInfo));\n}\n\nfunction renderDirective(\n  into: HTMLElement,\n  typeInfo: TypeInfo,\n  options: GraphQLInfoOptions,\n) {\n  const name = '@' + (typeInfo.directiveDef?.name || '');\n  text(into, name, 'directive-name', options, getDirectiveReference(typeInfo));\n}\n\nfunction renderArg(\n  into: HTMLElement,\n  typeInfo: TypeInfo,\n  options: GraphQLInfoOptions,\n) {\n  if (typeInfo.directiveDef) {\n    renderDirective(into, typeInfo, options);\n  } else if (typeInfo.fieldDef) {\n    renderQualifiedField(into, typeInfo, options);\n  }\n\n  const name = typeInfo.argDef?.name || '';\n  text(into, '(');\n  text(into, name, 'arg-name', options, getArgumentReference(typeInfo));\n  renderTypeAnnotation(into, typeInfo, options, typeInfo.inputType);\n  text(into, ')');\n}\n\nfunction renderTypeAnnotation(\n  into: HTMLElement,\n  typeInfo: TypeInfo,\n  options: GraphQLInfoOptions,\n  t: Maybe<GraphQLType>,\n) {\n  text(into, ': ');\n  renderType(into, typeInfo, options, t);\n}\n\nfunction renderEnumValue(\n  into: HTMLElement,\n  typeInfo: TypeInfo,\n  options: GraphQLInfoOptions,\n) {\n  const name = typeInfo.enumValue?.name || '';\n  renderType(into, typeInfo, options, typeInfo.inputType);\n  text(into, '.');\n  text(into, name, 'enum-value', options, getEnumValueReference(typeInfo));\n}\n\nfunction renderType(\n  into: HTMLElement,\n  typeInfo: TypeInfo,\n  options: GraphQLInfoOptions,\n  t: Maybe<GraphQLType>,\n) {\n  if (t instanceof GraphQLNonNull) {\n    renderType(into, typeInfo, options, t.ofType);\n    text(into, '!');\n  } else if (t instanceof GraphQLList) {\n    text(into, '[');\n    renderType(into, typeInfo, options, t.ofType);\n    text(into, ']');\n  } else {\n    text(\n      into,\n      t?.name || '',\n      'type-name',\n      options,\n      getTypeReference(typeInfo, t),\n    );\n  }\n}\n\nfunction renderDescription(\n  into: HTMLElement,\n  options: GraphQLInfoOptions,\n  def:\n    | GraphQLInputField\n    | GraphQLEnumType\n    | GraphQLDirective\n    | GraphQLEnumValue\n    | GraphQLType,\n) {\n  const description = (def as GraphQLInputField).description;\n  if (description) {\n    const descriptionDiv = document.createElement('div');\n    descriptionDiv.className = 'info-description';\n    if (options.renderDescription) {\n      descriptionDiv.innerHTML = options.renderDescription(description);\n    } else {\n      descriptionDiv.appendChild(document.createTextNode(description));\n    }\n    into.appendChild(descriptionDiv);\n  }\n\n  renderDeprecation(into, options, def);\n}\n\nfunction renderDeprecation(\n  into: HTMLElement,\n  options: GraphQLInfoOptions,\n  def:\n    | GraphQLInputField\n    | GraphQLEnumType\n    | GraphQLDirective\n    | GraphQLEnumValue\n    | GraphQLType,\n) {\n  const reason = (def as GraphQLInputField).deprecationReason;\n  if (reason) {\n    const deprecationDiv = document.createElement('div');\n    deprecationDiv.className = 'info-deprecation';\n    if (options.renderDescription) {\n      deprecationDiv.innerHTML = options.renderDescription(reason);\n    } else {\n      deprecationDiv.appendChild(document.createTextNode(reason));\n    }\n    const label = document.createElement('span');\n    label.className = 'info-deprecation-label';\n    label.appendChild(document.createTextNode('Deprecated: '));\n    deprecationDiv.insertBefore(label, deprecationDiv.firstChild);\n    into.appendChild(deprecationDiv);\n  }\n}\n\nfunction text(\n  into: HTMLElement,\n  content: string,\n  className = '',\n  options: GraphQLInfoOptions = { onClick: null },\n  ref: Maybe<SchemaReference> = null,\n) {\n  if (className) {\n    const onClick = options.onClick;\n    let node;\n    if (onClick) {\n      node = document.createElement('a');\n\n      // Providing a href forces proper a tag behavior, though we don't actually\n      // want clicking the node to navigate anywhere.\n      node.href = 'javascript:void 0'; // eslint-disable-line no-script-url\n      node.addEventListener('click', (e: MouseEvent) => {\n        onClick(ref, e);\n      });\n    } else {\n      node = document.createElement('span');\n    }\n    node.className = className;\n    node.appendChild(document.createTextNode(content));\n    into.appendChild(node);\n  } else {\n    into.appendChild(document.createTextNode(content));\n  }\n}\n","/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport { getNamedType, GraphQLSchema } from 'graphql';\n\nimport type {\n  GraphQLArgument,\n  GraphQLDirective,\n  GraphQLEnumValue,\n  GraphQLEnumType,\n  GraphQLField,\n  GraphQLNamedType,\n} from 'graphql';\nimport { Maybe } from 'graphql/jsutils/Maybe';\nimport { TypeInfo } from './getTypeInfo';\n\nexport type SchemaReference =\n  | FieldReference\n  | DirectiveReference\n  | ArgumentReference\n  | EnumValueReference\n  | TypeReference;\n\nexport type FieldReference = {\n  kind: 'Field';\n  field: GraphQLField<any, any>;\n  type: Maybe<GraphQLNamedType>;\n  schema?: GraphQLSchema;\n};\n\nexport type DirectiveReference = {\n  kind: 'Directive';\n  directive: GraphQLDirective;\n  schema?: GraphQLSchema;\n};\n\nexport type ArgumentReference = {\n  kind: 'Argument';\n  argument: GraphQLArgument;\n  field?: GraphQLField<any, any>;\n  type?: GraphQLNamedType;\n  directive?: GraphQLDirective;\n  schema?: GraphQLSchema;\n};\n\nexport type EnumValueReference = {\n  kind: 'EnumValue';\n  value?: GraphQLEnumValue;\n  type?: GraphQLEnumType;\n  schema?: GraphQLSchema;\n};\n\nexport type TypeReference = {\n  kind: 'Type';\n  type: GraphQLNamedType;\n  schema?: GraphQLSchema;\n};\n\nexport function getFieldReference(typeInfo: any): FieldReference {\n  return {\n    kind: 'Field',\n    schema: typeInfo.schema,\n    field: typeInfo.fieldDef,\n    type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType,\n  };\n}\n\nexport function getDirectiveReference(typeInfo: any): DirectiveReference {\n  return {\n    kind: 'Directive',\n    schema: typeInfo.schema,\n    directive: typeInfo.directiveDef,\n  };\n}\n\nexport function getArgumentReference(typeInfo: any): ArgumentReference {\n  return typeInfo.directiveDef\n    ? {\n        kind: 'Argument',\n        schema: typeInfo.schema,\n        argument: typeInfo.argDef,\n        directive: typeInfo.directiveDef,\n      }\n    : {\n        kind: 'Argument',\n        schema: typeInfo.schema,\n        argument: typeInfo.argDef,\n        field: typeInfo.fieldDef,\n        type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType,\n      };\n}\n\nexport function getEnumValueReference(typeInfo: TypeInfo): EnumValueReference {\n  return {\n    kind: 'EnumValue',\n    value: typeInfo.enumValue || undefined,\n    // $FlowFixMe\n    type: typeInfo.inputType\n      ? (getNamedType(typeInfo.inputType) as GraphQLEnumType)\n      : undefined,\n  };\n}\n\n// Note: for reusability, getTypeReference can produce a reference to any type,\n// though it defaults to the current type.\nexport function getTypeReference(\n  typeInfo: any,\n  type?: Maybe<GraphQLNamedType>,\n): TypeReference {\n  return {\n    kind: 'Type',\n    schema: typeInfo.schema,\n    type: type || typeInfo.type,\n  };\n}\n\nfunction isMetaField(fieldDef: GraphQLField<any, any>) {\n  return fieldDef.name.slice(0, 2) === '__';\n}\n","/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport type { State, Maybe } from 'graphql-language-service';\n\n// Utility for iterating through a CodeMirror parse state stack bottom-up.\nexport default function forEachState(stack: State, fn: (state: State) => void) {\n  const reverseStateStack = [];\n  let state: Maybe<State> = stack;\n  while (state?.kind) {\n    reverseStateStack.push(state);\n    state = state.prevState;\n  }\n  for (let i = reverseStateStack.length - 1; i >= 0; i--) {\n    fn(reverseStateStack[i]);\n  }\n}\n","/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport {\n  isCompositeType,\n  getNullableType,\n  getNamedType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLSchema,\n  GraphQLType,\n  GraphQLObjectType,\n  GraphQLField,\n  GraphQLDirective,\n  GraphQLArgument,\n  GraphQLInputType,\n  GraphQLEnumValue,\n  GraphQLInputFieldMap,\n} from 'graphql';\nimport type { State, Maybe } from 'graphql-language-service';\n\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from 'graphql/type/introspection';\n\nimport forEachState from './forEachState';\n\nexport interface TypeInfo {\n  schema: GraphQLSchema;\n  type?: Maybe<GraphQLType>;\n  parentType?: Maybe<GraphQLType>;\n  inputType?: Maybe<GraphQLInputType>;\n  directiveDef?: Maybe<GraphQLDirective>;\n  fieldDef?: Maybe<GraphQLField<any, any>>;\n  argDef?: Maybe<GraphQLArgument>;\n  argDefs?: Maybe<GraphQLArgument[]>;\n  enumValue?: Maybe<GraphQLEnumValue>;\n  objectFieldDefs?: Maybe<GraphQLInputFieldMap>;\n}\n\n/**\n * Utility for collecting rich type information given any token's state\n * from the graphql-mode parser.\n */\nexport default function getTypeInfo(schema: GraphQLSchema, tokenState: State) {\n  const info: TypeInfo = {\n    schema,\n    type: null,\n    parentType: null,\n    inputType: null,\n    directiveDef: null,\n    fieldDef: null,\n    argDef: null,\n    argDefs: null,\n    objectFieldDefs: null,\n  };\n\n  forEachState(tokenState, (state: State) => {\n    switch (state.kind) {\n      case 'Query':\n      case 'ShortQuery':\n        info.type = schema.getQueryType();\n        break;\n      case 'Mutation':\n        info.type = schema.getMutationType();\n        break;\n      case 'Subscription':\n        info.type = schema.getSubscriptionType();\n        break;\n      case 'InlineFragment':\n      case 'FragmentDefinition':\n        if (state.type) {\n          info.type = schema.getType(state.type);\n        }\n        break;\n      case 'Field':\n      case 'AliasedField':\n        info.fieldDef =\n          info.type && state.name\n            ? getFieldDef(schema, info.parentType, state.name)\n            : null;\n        info.type = info.fieldDef?.type;\n        break;\n      case 'SelectionSet':\n        info.parentType = info.type ? getNamedType(info.type) : null;\n        break;\n      case 'Directive':\n        info.directiveDef = state.name ? schema.getDirective(state.name) : null;\n        break;\n      case 'Arguments':\n        const parentDef = state.prevState\n          ? state.prevState.kind === 'Field'\n            ? info.fieldDef\n            : state.prevState.kind === 'Directive'\n            ? info.directiveDef\n            : state.prevState.kind === 'AliasedField'\n            ? state.prevState.name &&\n              getFieldDef(schema, info.parentType, state.prevState.name)\n            : null\n          : null;\n        info.argDefs = parentDef ? (parentDef.args as GraphQLArgument[]) : null;\n        break;\n      case 'Argument':\n        info.argDef = null;\n        if (info.argDefs) {\n          for (let i = 0; i < info.argDefs.length; i++) {\n            if (info.argDefs[i].name === state.name) {\n              info.argDef = info.argDefs[i];\n              break;\n            }\n          }\n        }\n        info.inputType = info.argDef?.type;\n        break;\n      case 'EnumValue':\n        const enumType = info.inputType ? getNamedType(info.inputType) : null;\n        info.enumValue =\n          enumType instanceof GraphQLEnumType\n            ? find(\n                enumType.getValues() as GraphQLEnumValue[],\n                val => val.value === state.name,\n              )\n            : null;\n        break;\n      case 'ListValue':\n        const nullableType = info.inputType\n          ? getNullableType(info.inputType)\n          : null;\n        info.inputType =\n          nullableType instanceof GraphQLList ? nullableType.ofType : null;\n        break;\n      case 'ObjectValue':\n        const objectType = info.inputType ? getNamedType(info.inputType) : null;\n        info.objectFieldDefs =\n          objectType instanceof GraphQLInputObjectType\n            ? objectType.getFields()\n            : null;\n        break;\n      case 'ObjectField':\n        const objectField =\n          state.name && info.objectFieldDefs\n            ? info.objectFieldDefs[state.name]\n            : null;\n        info.inputType = objectField?.type;\n        break;\n      case 'NamedType':\n        info.type = state.name ? schema.getType(state.name) : null;\n        break;\n    }\n  });\n\n  return info;\n}\n\n// Gets the field definition given a type and field name\nfunction getFieldDef(\n  schema: GraphQLSchema,\n  type: Maybe<GraphQLType>,\n  fieldName: string,\n) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === type) {\n    return SchemaMetaFieldDef;\n  }\n  if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === type) {\n    return TypeMetaFieldDef;\n  }\n  if (fieldName === TypeNameMetaFieldDef.name && isCompositeType(type)) {\n    return TypeNameMetaFieldDef;\n  }\n  if (type && (type as GraphQLObjectType).getFields) {\n    return (type as GraphQLObjectType).getFields()[fieldName];\n  }\n}\n\n// Returns the first item in the array which causes predicate to return truthy.\nfunction find<T>(array: T[], predicate: (item: T) => boolean) {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i])) {\n      return array[i];\n    }\n  }\n}\n","/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport CodeMirror from 'codemirror';\nimport { GraphQLInfoOptions } from '../info';\n\nCodeMirror.defineOption(\n  'info',\n  false,\n  (\n    cm: CodeMirror.Editor,\n    options: GraphQLInfoOptions,\n    old?: GraphQLInfoOptions,\n  ) => {\n    if (old && old !== CodeMirror.Init) {\n      const oldOnMouseOver = cm.state.info.onMouseOver;\n      CodeMirror.off(cm.getWrapperElement(), 'mouseover', oldOnMouseOver);\n      clearTimeout(cm.state.info.hoverTimeout);\n      delete cm.state.info;\n    }\n\n    if (options) {\n      const state: Record<string, any> = (cm.state.info = createState(options));\n      state.onMouseOver = onMouseOver.bind(null, cm);\n      CodeMirror.on(cm.getWrapperElement(), 'mouseover', state.onMouseOver);\n    }\n  },\n);\n\nfunction createState(options: GraphQLInfoOptions) {\n  return {\n    options:\n      options instanceof Function\n        ? { render: options }\n        : options === true\n        ? {}\n        : options,\n  };\n}\n\nfunction getHoverTime(cm: CodeMirror.Editor) {\n  const options = cm.state.info.options;\n  return options?.hoverTime || 500;\n}\n\nfunction onMouseOver(cm: CodeMirror.Editor, e: MouseEvent) {\n  const state = cm.state.info;\n\n  const target = e.target || e.srcElement;\n\n  if (!(target instanceof HTMLElement)) {\n    return;\n  }\n  if (target.nodeName !== 'SPAN' || state.hoverTimeout !== undefined) {\n    return;\n  }\n\n  const box = target.getBoundingClientRect();\n\n  const onMouseMove = function () {\n    clearTimeout(state.hoverTimeout);\n    state.hoverTimeout = setTimeout(onHover, hoverTime);\n  };\n\n  const onMouseOut = function () {\n    CodeMirror.off(document, 'mousemove', onMouseMove);\n    CodeMirror.off(cm.getWrapperElement(), 'mouseout', onMouseOut);\n    clearTimeout(state.hoverTimeout);\n    state.hoverTimeout = undefined;\n  };\n\n  const onHover = function () {\n    CodeMirror.off(document, 'mousemove', onMouseMove);\n    CodeMirror.off(cm.getWrapperElement(), 'mouseout', onMouseOut);\n    state.hoverTimeout = undefined;\n    onMouseHover(cm, box);\n  };\n\n  const hoverTime = getHoverTime(cm);\n  state.hoverTimeout = setTimeout(onHover, hoverTime);\n\n  CodeMirror.on(document, 'mousemove', onMouseMove);\n  CodeMirror.on(cm.getWrapperElement(), 'mouseout', onMouseOut);\n}\n\nfunction onMouseHover(cm: CodeMirror.Editor, box: DOMRect) {\n  const pos = cm.coordsChar({\n    left: (box.left + box.right) / 2,\n    top: (box.top + box.bottom) / 2,\n  });\n\n  const state = cm.state.info;\n  const options = state.options;\n  const render = options.render || cm.getHelper(pos, 'info');\n  if (render) {\n    const token = cm.getTokenAt(pos, true);\n    if (token) {\n      const info: HTMLDivElement = render(token, options, cm, pos);\n      if (info) {\n        showPopup(cm, box, info);\n      }\n    }\n  }\n}\n\nfunction showPopup(cm: CodeMirror.Editor, box: DOMRect, info: HTMLDivElement) {\n  const popup = document.createElement('div');\n  popup.className = 'CodeMirror-info';\n  popup.appendChild(info);\n  document.body.appendChild(popup);\n\n  const popupBox = popup.getBoundingClientRect();\n  const popupStyle = window.getComputedStyle(popup);\n  const popupWidth =\n    popupBox.right -\n    popupBox.left +\n    parseFloat(popupStyle.marginLeft) +\n    parseFloat(popupStyle.marginRight);\n  const popupHeight =\n    popupBox.bottom -\n    popupBox.top +\n    parseFloat(popupStyle.marginTop) +\n    parseFloat(popupStyle.marginBottom);\n\n  let topPos = box.bottom;\n  if (\n    popupHeight > window.innerHeight - box.bottom - 15 &&\n    box.top > window.innerHeight - box.bottom\n  ) {\n    topPos = box.top - popupHeight;\n  }\n\n  if (topPos < 0) {\n    topPos = box.bottom;\n  }\n\n  let leftPos = Math.max(0, window.innerWidth - popupWidth - 15);\n  if (leftPos > box.left) {\n    leftPos = box.left;\n  }\n\n  popup.style.opacity = '1';\n  popup.style.top = topPos + 'px';\n  popup.style.left = leftPos + 'px';\n\n  let popupTimeout: NodeJS.Timeout;\n\n  const onMouseOverPopup = function () {\n    clearTimeout(popupTimeout);\n  };\n\n  const onMouseOut = function () {\n    clearTimeout(popupTimeout);\n    popupTimeout = setTimeout(hidePopup, 200);\n  };\n\n  const hidePopup = function () {\n    CodeMirror.off(popup, 'mouseover', onMouseOverPopup);\n    CodeMirror.off(popup, 'mouseout', onMouseOut);\n    CodeMirror.off(cm.getWrapperElement(), 'mouseout', onMouseOut);\n\n    if (popup.style.opacity) {\n      popup.style.opacity = '0';\n      setTimeout(() => {\n        if (popup.parentNode) {\n          popup.parentNode.removeChild(popup);\n        }\n      }, 600);\n    } else if (popup.parentNode) {\n      popup.parentNode.removeChild(popup);\n    }\n  };\n\n  CodeMirror.on(popup, 'mouseover', onMouseOverPopup);\n  CodeMirror.on(popup, 'mouseout', onMouseOut);\n  CodeMirror.on(cm.getWrapperElement(), 'mouseout', onMouseOut);\n}\n"],"names":["graphql_1","require","codemirror_1","__importDefault","getTypeInfo_1","SchemaReference_1","renderQualifiedField","into","typeInfo","options","fieldName","_a","fieldDef","name","slice","renderType","parentType","text","getFieldReference","renderDirective","directiveDef","getDirectiveReference","renderTypeAnnotation","t","GraphQLNonNull","ofType","GraphQLList","getTypeReference","renderDescription","def","description","descriptionDiv","document","createElement","className","innerHTML","appendChild","createTextNode","reason","deprecationReason","deprecationDiv","label","insertBefore","firstChild","renderDeprecation","content","ref","onClick","onClick_1","node","href","addEventListener","e","default","registerHelper","token","schema","state","kind","step","type","renderField","argDef","getArgumentReference","inputType","renderArg","enumValue","getEnumValueReference","renderEnumValue","isMetaField","exports","field","directive","argument","value","undefined","getNamedType","stack","fn","reverseStateStack","push","prevState","i","length","introspection_1","forEachState_1","getFieldDef","SchemaMetaFieldDef","getQueryType","TypeMetaFieldDef","TypeNameMetaFieldDef","isCompositeType","getFields","tokenState","info","argDefs","objectFieldDefs","getMutationType","getSubscriptionType","getType","getDirective","parentDef","args","_b","enumType","GraphQLEnumType","array","predicate","find","getValues","val","nullableType","getNullableType","objectType","GraphQLInputObjectType","objectField","onMouseOver","cm","target","srcElement","HTMLElement","nodeName","hoverTimeout","box","getBoundingClientRect","onMouseMove","clearTimeout","setTimeout","onHover","hoverTime","onMouseOut","off","getWrapperElement","pos","coordsChar","left","right","top","bottom","render","getHelper","getTokenAt","popup","body","popupBox","popupStyle","window","getComputedStyle","popupWidth","parseFloat","marginLeft","marginRight","popupHeight","marginTop","marginBottom","topPos","innerHeight","popupTimeout","leftPos","Math","max","innerWidth","style","opacity","onMouseOverPopup","hidePopup","parentNode","removeChild","on","showPopup","onMouseHover","getHoverTime","defineOption","old","Init","oldOnMouseOver","Function","createState","bind"],"sourceRoot":""}