{"version":3,"sources":["modules/logo/state/reducers.ts"],"names":["toggleLoading","state","loading","setLoading","payload","toggleConfigDrawer","isConfigDrawerOpen","setVariant","config","variant","setIcon","icon","setColor","colors","split","color","primary","length","secondary"],"mappings":"qYA2BO,MAAMA,EAA0BC,IACrCA,EAAMC,SAAWD,EAAMC,SAKZC,EAA0C,CAACF,GAASG,cAC/DH,EAAMC,QAAUE,GAILC,EAA+BJ,IAC1CA,EAAMK,oBAAsBL,EAAMK,oBAGvBC,EAAoD,CAC/DN,GACEG,cAEFH,EAAMO,OAAOC,QAAUL,GAGZM,EAA8C,CACzDT,GACEG,cAEFH,EAAMO,OAAOG,KAAOP,GAGTQ,EAAyD,CACpEX,GACEG,cAEF,GAAuB,kBAAZA,EAAsB,CAC/B,MAAMS,EAAST,EAAQU,MAAM,KAC7Bb,EAAMO,OAAOO,MAAMC,QAAUH,EAAO,GACpCA,EAAOI,OAAS,IAAMhB,EAAMO,OAAOO,MAAMG,UAAYL,EAAO,SACvDZ,EAAMO,OAAOO,MAAb,2BAA0Bd,EAAMO,OAAOO,OAAUX","file":"static/js/34.22816a01.chunk.js","sourcesContent":["/**\n * Reducers\n * ---\n * This file maintains all the reducers (modifiers)\n * for the Module's state. The name of reducer will\n * become the name of the action.\n *\n * A case reducer can choose to mutate the passed-in\n * state value directly instead of returning a new state.\n * This does not actually cause the store state to be\n * mutated directly; instead, thanks to immer, the\n * mutations are translated to copy operations that\n * result in a new state.\n */\nimport { CaseReducer, PayloadAction } from \"@faharmony/state\";\nimport { IModuleState } from \"./initialState\";\n\n// Generic types for ease-of-use\ntype Reducer = CaseReducer<IModuleState>;\ntype ReducerWithPayload<T> = CaseReducer<IModuleState, PayloadAction<T>>;\ntype Config = IModuleState[\"config\"];\n\n// -------------------\n// Edit reducers below\n\n/** Reducer without required payload.\n * @example dispatch(toggleLoading()) */\nexport const toggleLoading: Reducer = (state) => {\n  state.loading = !state.loading;\n};\n\n/** Reducer with required payload.\n * @example dispatch(setLoading(true)) */\nexport const setLoading: ReducerWithPayload<boolean> = (state, { payload }) => {\n  state.loading = payload;\n};\n\n/** Reducer with to toggle ConfigDrawer.*/\nexport const toggleConfigDrawer: Reducer = (state) => {\n  state.isConfigDrawerOpen = !state.isConfigDrawerOpen;\n};\n\nexport const setVariant: ReducerWithPayload<Config[\"variant\"]> = (\n  state,\n  { payload }\n) => {\n  state.config.variant = payload;\n};\n\nexport const setIcon: ReducerWithPayload<Config[\"icon\"]> = (\n  state,\n  { payload }\n) => {\n  state.config.icon = payload;\n};\n\nexport const setColor: ReducerWithPayload<Config[\"color\"] | string> = (\n  state,\n  { payload }\n) => {\n  if (typeof payload === \"string\") {\n    const colors = payload.split(\"@\");\n    state.config.color.primary = colors[0];\n    colors.length > 0 && (state.config.color.secondary = colors[1]);\n  } else state.config.color = { ...state.config.color, ...payload };\n};\n"],"sourceRoot":""}