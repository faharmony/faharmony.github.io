{"version":3,"file":"static/js/4827.a6f1e132.chunk.js","mappings":"674JAuBMA,EAAQ,SAACC,GAA6B,IAAD,IACnCC,GAAMC,EAAAA,EAAAA,QAAuB,MAC7BC,EAA2B,YAAfH,EAAMI,KAAqBC,EAAQC,EACrD,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,UAAQ,WACvB,OAAOC,OAAOC,KAAKV,GAChBK,QACC,SAACM,GAAD,MACiC,oBAAxBX,EAAUW,SACOC,IAAxBZ,EAAUW,KACTA,EAASE,MAAM,mBAAqBF,EAASE,MAAM,cACxCD,IAAXP,GACmB,KAAlBA,EAAOS,QACPH,EAASI,cAAcF,MAAMR,EAAOW,qBANxC,IAQDC,QAAO,SAACC,EAAaC,EAAMC,GAC1B,IAAMC,EAAaC,KAAKC,MAAMH,EAAQ,IAKtC,OAJKF,EAAYG,KACfH,EAAYG,GAAc,IAE5BH,EAAYG,GAAYG,KAAKL,GACtBD,CACR,GAAE,GACN,GAAE,CAAClB,EAAWK,IAEToB,GAAUC,EAAAA,EAAAA,OACd,SAAC7B,GACC,OACE,SAAC,KAAD,CACE8B,UAAU,MACVC,OAAK,kBACA/B,EAAM+B,OADN,IAEHC,eAAgB,aAChBC,WAAY,eALhB,SAQGjC,EAAMkC,KAAKlC,EAAMuB,OAAOY,KAAI,SAACrB,GAC5B,IAAMQ,EAAOnB,EAAUW,GACvB,OACE,SAAC,IAAD,CAEEsB,MAAOtB,EAASuB,QAAQ,iBAAkB,IAF5C,UAIE,SAAC,KAAD,CAAKN,MAAO,CAAEO,YAAa,GAAIC,MAAO,QAAtC,UACE,SAAC,KAAD,CAAMjB,KAAMA,OAJTR,EAQV,KAGN,GACD0B,EAAAA,IAGF,GAA4BjC,EAAAA,EAAAA,UAAS,GAArC,eAAOkC,EAAP,KAAeC,EAAf,KAMA,OAJAC,EAAAA,EAAAA,kBAAgB,WAAO,IAAD,IACpBD,GAAa,OAAHzC,QAAG,IAAHA,GAAA,UAAAA,EAAK2C,eAAL,mBAAcC,qBAAd,eAA6BC,eAAgB,IACxD,GAAE,QAAC7C,QAAD,IAACA,GAAD,UAACA,EAAK2C,eAAN,iBAAC,EAAcC,qBAAf,aAAC,EAA6BC,gBAG/B,UAAC,KAAD,CAAKhB,UAAU,SAAS7B,IAAKA,EAAK8B,MAAO,CAAEU,OAAQ,QAAnD,WACE,SAAC,KAAD,CAAKF,MAAO,GAAZ,UACE,SAAC,KAAD,CACEQ,YAAY,SACZX,MAAO5B,EACPwC,SAAU,SAACC,GACTxC,EAAUwC,EAAEC,cAAcd,MAC3B,EACDe,aAAa,EACbC,WAAY/C,EAAAA,cAGhB,SAAC,KAAD,CACEoC,OAAQA,EACRY,UAAW3C,EAAS4C,OACpBC,SAAU7C,EACV8C,SAAU,GACVjB,MAAO,MALT,SAOGX,MAIR,EAED,EApGa,WACX,IAAM6B,EAAqB,CAAC,UAAW,SAAStB,KAAI,SAACuB,EAAInC,GAAL,MAAgB,CAClEmC,GAAAA,EACAC,MAAM,GAAD,OAAKD,GACVE,cAAyB,IAAVrC,EACfsC,SAAS,SAAC9D,EAAD,CAAOK,KAAMsD,IAJ4B,IAOpD,OACE,SAAC,KAAD,CAAUI,QAAQ,QAAQC,SAAS,SAASN,MAAI,OAAMA,IAEzD,C","sources":["modules/components/pages/Icons.tsx"],"sourcesContent":["import { PageView } from \"@faharmony/views\";\r\nimport { Icon, Tooltip } from \"@faharmony/components\";\r\nimport * as icons from \"@faharmony/icons\";\r\nimport * as solidIcons from \"@faharmony/icons/solid\";\r\nimport { memo, useMemo, useState, useRef, useLayoutEffect } from \"react\";\r\nimport { Box } from \"@faharmony/theme\";\r\nimport { ITabsProps } from \"@faharmony/navigation\";\r\nimport { FixedSizeList as List, areEqual } from \"react-window\";\r\nimport { TextField } from \"@faharmony/form\";\r\n\r\nconst Page = () => {\r\n  const tabs: ITabsProps[] = [\"Regular\", \"Solid\"].map((id, index) => ({\r\n    id,\r\n    label: `${id}`,\r\n    defaultActive: index === 0,\r\n    content: <Icons type={id}></Icons>,\r\n  }));\r\n\r\n  return (\r\n    <PageView heading=\"Icons\" overflow=\"scroll\" tabs={[...tabs]}></PageView>\r\n  );\r\n};\r\n\r\nconst Icons = (props: { type: string }) => {\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  const iconLists = props.type === \"Regular\" ? icons : solidIcons;\r\n  const [filter, setFilter] = useState(\"\");\r\n  const iconRows = useMemo(() => {\r\n    return Object.keys(iconLists)\r\n      .filter(\r\n        (iconName) =>\r\n          typeof iconLists[iconName] !== \"function\" &&\r\n          iconLists[iconName] !== undefined &&\r\n          (iconName.match(\"IconDefinition\") || iconName.match(\"fa\")) &&\r\n          (filter === undefined ||\r\n            filter.trim() === \"\" ||\r\n            iconName.toLowerCase().match(filter.toLocaleLowerCase()))\r\n      )\r\n      .reduce((resultArray, icon, index) => {\r\n        const chunkIndex = Math.floor(index / 12);\r\n        if (!resultArray[chunkIndex]) {\r\n          resultArray[chunkIndex] = [];\r\n        }\r\n        resultArray[chunkIndex].push(icon);\r\n        return resultArray;\r\n      }, [] as string[][]);\r\n  }, [iconLists, filter]);\r\n\r\n  const IconRow = memo(\r\n    (props: { data: string[][]; index: number; style: any }) => {\r\n      return (\r\n        <Box\r\n          direction=\"row\"\r\n          style={{\r\n            ...props.style,\r\n            justifyContent: \"flex-start\",\r\n            alignItems: \"flex-start\",\r\n          }}\r\n        >\r\n          {props.data[props.index].map((iconName) => {\r\n            const icon = iconLists[iconName];\r\n            return (\r\n              <Tooltip\r\n                key={iconName}\r\n                value={iconName.replace(\"IconDefinition\", \"\")}\r\n              >\r\n                <Box style={{ marginRight: 75, width: \"auto\" }}>\r\n                  <Icon icon={icon}></Icon>\r\n                </Box>\r\n              </Tooltip>\r\n            );\r\n          })}\r\n        </Box>\r\n      );\r\n    },\r\n    areEqual\r\n  );\r\n\r\n  const [height, setHeight] = useState(0);\r\n\r\n  useLayoutEffect(() => {\r\n    setHeight(ref?.current?.parentElement?.offsetHeight || 800);\r\n  }, [ref?.current?.parentElement?.offsetHeight]);\r\n\r\n  return (\r\n    <Box direction=\"column\" ref={ref} style={{ height: \"100%\" }}>\r\n      <Box width={10}>\r\n        <TextField\r\n          placeholder=\"Search\"\r\n          value={filter}\r\n          onChange={(e) => {\r\n            setFilter(e.currentTarget.value);\r\n          }}\r\n          isClearable={true}\r\n          suffixIcon={icons.faSearch}\r\n        ></TextField>\r\n      </Box>\r\n      <List\r\n        height={height}\r\n        itemCount={iconRows.length}\r\n        itemData={iconRows}\r\n        itemSize={35}\r\n        width={\"99%\"}\r\n      >\r\n        {IconRow}\r\n      </List>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["Icons","props","ref","useRef","iconLists","type","icons","solidIcons","useState","filter","setFilter","iconRows","useMemo","Object","keys","iconName","undefined","match","trim","toLowerCase","toLocaleLowerCase","reduce","resultArray","icon","index","chunkIndex","Math","floor","push","IconRow","memo","direction","style","justifyContent","alignItems","data","map","value","replace","marginRight","width","areEqual","height","setHeight","useLayoutEffect","current","parentElement","offsetHeight","placeholder","onChange","e","currentTarget","isClearable","suffixIcon","itemCount","length","itemData","itemSize","tabs","id","label","defaultActive","content","heading","overflow"],"sourceRoot":""}