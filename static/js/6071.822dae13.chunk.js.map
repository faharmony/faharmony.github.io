{"version":3,"file":"static/js/6071.822dae13.chunk.js","mappings":"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","sources":["modules/components/pages/Form.tsx"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  TextField,\r\n  Checkbox,\r\n  Combobox,\r\n  Button,\r\n  DatePicker,\r\n  Toggle,\r\n  useForm,\r\n  useFormContext,\r\n  useFormDatePickerProps,\r\n} from \"@faharmony/form\";\r\nimport { Box } from \"@faharmony/theme\";\r\nimport { formatDate } from \"@faharmony/locale\";\r\nimport type {\r\n  ComboboxOptionType,\r\n  ComboboxOptionsType,\r\n  SubmitHandler,\r\n} from \"@faharmony/form\";\r\nimport type { FC } from \"react\";\r\n\r\ninterface UserFormInputs {\r\n  fullName?: string;\r\n  username: string;\r\n  password: string;\r\n  dob: string;\r\n  roles: ComboboxOptionType[];\r\n  massiveOptions: ComboboxOptionType[];\r\n  locale?: ComboboxOptionType;\r\n  darkMode?: boolean;\r\n  terms: boolean;\r\n  privacy: boolean;\r\n}\r\n\r\nconst userFormDefaultValues: Partial<UserFormInputs> = {\r\n  fullName: \"\",\r\n  username: \"Love\",\r\n  password: \"KesKus44tA\",\r\n  dob: formatDate(new Date(\"01-01-2020\")),\r\n  darkMode: false,\r\n  locale: { value: \"en\", label: \"English\" },\r\n  terms: false,\r\n  privacy: false,\r\n};\r\n\r\nconst UserFormFullNameField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <FormControl label=\"Full name\" errorText={errors.fullName?.message}>\r\n      <TextField\r\n        name=\"fullName\"\r\n        placeholder=\"Enter full name\"\r\n        error={!!errors.fullName}\r\n        ref={register}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormUsernameField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <FormControl\r\n      label=\"Username\"\r\n      helpText=\"Login username for the user.\"\r\n      errorText={errors.username?.message}\r\n      required\r\n    >\r\n      <TextField\r\n        name=\"username\"\r\n        placeholder=\"Enter username\"\r\n        error={!!errors.username}\r\n        ref={register({\r\n          required: \"Username is required\",\r\n          minLength: { value: 4, message: \"At least 4 characters required.\" },\r\n        })}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormUsernameFieldWithLongLabel: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <FormControl\r\n      label=\"Long label for a long field (Testing positioning of help and asterick )\"\r\n      helpText=\"Login username for the user.\"\r\n      errorText={errors.username?.message}\r\n      required\r\n    >\r\n      <TextField\r\n        name=\"username\"\r\n        placeholder=\"Enter username\"\r\n        error={!!errors.username}\r\n        ref={register({\r\n          required: \"Username is required\",\r\n          minLength: { value: 4, message: \"At least 4 characters required.\" },\r\n        })}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormPasswordField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  const passwordPatternRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\r\n  const passwordPatternMessage =\r\n    \"Password should be minimum 8 characters long and contain at least one uppercase letter, one lowercase letter and one number.\";\r\n  return (\r\n    <FormControl\r\n      label=\"Password\"\r\n      helpText=\"Login password for the user.\"\r\n      errorText={errors.password?.message}\r\n      required\r\n    >\r\n      <TextField\r\n        name=\"password\"\r\n        type=\"password\"\r\n        placeholder=\"Enter password\"\r\n        error={!!errors.password}\r\n        ref={register({\r\n          required: \"Password is required\",\r\n          pattern: {\r\n            value: passwordPatternRegex,\r\n            message: passwordPatternMessage,\r\n          },\r\n        })}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormDOBField: FC = () => {\r\n  const formDatePickerProps = useFormDatePickerProps(\r\n    \"dob\",\r\n    userFormDefaultValues.dob\r\n  );\r\n\r\n  return (\r\n    <FormControl label=\"Date of birth\" required>\r\n      <DatePicker\r\n        {...formDatePickerProps}\r\n        dateFormat=\"dd.MM.yyyy hh:mm a\"\r\n        selected={new Date(\"2021/05/04 22:21\")}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormRolesField: FC = () => {\r\n  const rolesOptions: ComboboxOptionsType = [\r\n    { label: \"Admin\", value: \"admin\" },\r\n    { label: \"BO\", value: \"back\" },\r\n    { label: \"Client\", value: \"front\" },\r\n    { label: \"Super Admin\", value: \"super\", isDisabled: true },\r\n  ];\r\n  return (\r\n    <FormControl label=\"Roles\" required>\r\n      <Combobox\r\n        name=\"roles\"\r\n        required\r\n        placeholder=\"Select roles...\"\r\n        options={rolesOptions}\r\n        isMulti\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormMassiveComboboxField: FC = () => {\r\n  const options = [];\r\n  for (let i = 0; i < 10000; i = i + 1) {\r\n    options.push({ value: i, label: `Option ${i}` });\r\n  }\r\n  return (\r\n    <Box width={\"500px\"}>\r\n      <FormControl label=\"Massive Options\" required>\r\n        <Combobox\r\n          name=\"massiveOptions\"\r\n          required\r\n          placeholder=\"Select option...\"\r\n          options={options}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst UserFormLocaleField: FC = () => {\r\n  const localeOptions: ComboboxOptionsType = [\r\n    { label: \"English\", value: \"en\" },\r\n    { label: \"Suomi\", value: \"fi\" },\r\n    { label: \"Sverige\", value: \"sv\" },\r\n  ];\r\n  return (\r\n    <FormControl label=\"Locale\">\r\n      <Combobox\r\n        name=\"locale\"\r\n        placeholder=\"Select locale...\"\r\n        options={localeOptions}\r\n        isSearchable={false}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormDarkModeField: FC = () => {\r\n  const { register } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <FormControl label=\"Prefer dark mode?\">\r\n      <Toggle name=\"darkMode\" ref={register} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst UserFormTermsField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <>\r\n      <FormControl\r\n        label=\"Terms and conditions\"\r\n        errorText={errors.terms?.message}\r\n      >\r\n        <Checkbox\r\n          name=\"terms\"\r\n          label=\"Accept the terms and conditions.\"\r\n          ref={register({\r\n            required: \"It is required to accept the terms and condition\",\r\n          })}\r\n        />\r\n      </FormControl>\r\n      <FormControl errorText={errors.privacy?.message}>\r\n        <Checkbox\r\n          name=\"privacy\"\r\n          label=\"Accept the privacy policy.\"\r\n          helpText=\"Test\"\r\n          ref={register({\r\n            required: \"It is required to accept the privacy policy\",\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </>\r\n  );\r\n};\r\n\r\nconst UserFormButtons: FC = () => {\r\n  const { formState } = useFormContext<UserFormInputs>();\r\n  const { isSubmitting, isDirty } = formState;\r\n  return (\r\n    <Box direction=\"row-reverse\">\r\n      <Button\r\n        type=\"submit\"\r\n        variant=\"primary\"\r\n        value=\"Add user\"\r\n        loading={isSubmitting}\r\n      />\r\n      <Button\r\n        type=\"reset\"\r\n        variant=\"secondary\"\r\n        value=\"Reset form\"\r\n        disabled={!isDirty}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst UserForm: FC = () => {\r\n  const formMethods = useForm<UserFormInputs>({\r\n    defaultValues: userFormDefaultValues,\r\n  });\r\n  const onSubmit: SubmitHandler<UserFormInputs> = React.useCallback(\r\n    async (values) => {\r\n      console.log(values);\r\n      // Dummy wait for 1s.\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n    },\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Form\r\n      formMethods={formMethods}\r\n      onSubmit={formMethods.handleSubmit(onSubmit)}\r\n    >\r\n      <UserFormFullNameField />\r\n      <UserFormUsernameField />\r\n      <UserFormUsernameFieldWithLongLabel />\r\n      <UserFormPasswordField />\r\n      <UserFormDOBField />\r\n      <UserFormRolesField />\r\n      <UserFormMassiveComboboxField />\r\n      <UserFormLocaleField />\r\n      <UserFormDarkModeField />\r\n      <UserFormTermsField />\r\n      <UserFormButtons />\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default UserForm;\r\n"],"names":["userFormDefaultValues","fullName","username","password","dob","formatDate","Date","darkMode","locale","value","label","terms","privacy","UserFormFullNameField","_errors$fullName","_useFormContext","useFormContext","register","errors","_jsx","FormControl","errorText","message","children","TextField","name","placeholder","error","ref","UserFormUsernameField","_errors$username","_useFormContext2","helpText","required","minLength","UserFormUsernameFieldWithLongLabel","_errors$username2","_useFormContext3","UserFormPasswordField","_errors$password","_useFormContext4","type","pattern","UserFormDOBField","formDatePickerProps","useFormDatePickerProps","DatePicker","_objectSpread","dateFormat","selected","UserFormRolesField","Combobox","options","isDisabled","isMulti","UserFormMassiveComboboxField","i","push","concat","Box","width","UserFormLocaleField","isSearchable","UserFormDarkModeField","Toggle","UserFormTermsField","_errors$terms","_errors$privacy","_useFormContext6","_jsxs","_Fragment","Checkbox","UserFormButtons","formState","isSubmitting","isDirty","direction","Button","variant","loading","disabled","formMethods","useForm","defaultValues","onSubmit","React","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","console","log","Promise","resolve","setTimeout","stop","_x","apply","arguments","Form","handleSubmit"],"sourceRoot":""}