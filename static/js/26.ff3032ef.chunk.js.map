{"version":3,"file":"static/js/26.ff3032ef.chunk.js","mappings":"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","sources":["modules/components/pages/Tabs_PageView.tsx"],"sourcesContent":["import { Box, Center } from \"@faharmony/theme\";\r\nimport { PageView } from \"@faharmony/views\";\r\nimport {\r\n  ITabsProps,\r\n  TabOrientationType,\r\n  ITabFormProps,\r\n} from \"@faharmony/navigation\";\r\nimport { useForm, useFormContext } from \"react-hook-form\";\r\nimport { FormControl, TextField } from \"@faharmony/form\";\r\nimport { useState } from \"react\";\r\nimport { Button } from \"@faharmony/components\";\r\n\r\nconst Page = () => {\r\n  interface UserFormInputs {\r\n    firstName: string;\r\n    lastName: string;\r\n    address?: {};\r\n    phone?: string;\r\n    email?: string;\r\n    username: string | undefined;\r\n    password: string | undefined;\r\n  }\r\n  const userFormDefaultValues: Partial<UserFormInputs> = {\r\n    firstName: undefined,\r\n    lastName: undefined,\r\n    address: {},\r\n    phone: \"\",\r\n    email: \"\",\r\n    username: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const UserFirstNameField = () => {\r\n    const { register, errors } = useFormContext<UserFormInputs>();\r\n    return (\r\n      <Box direction=\"column\">\r\n        <FormControl\r\n          label=\"First name\"\r\n          errorText={errors.firstName?.message}\r\n          helpText=\"Firstname of the user.\"\r\n          required\r\n        >\r\n          <TextField\r\n            name=\"firstName\"\r\n            placeholder=\"Enter full name\"\r\n            error={!!errors.firstName}\r\n            ref={register({\r\n              required: \"Firstname is required\",\r\n              minLength: {\r\n                value: 3,\r\n                message: \"At least 3 characters required.\",\r\n              },\r\n            })}\r\n          />\r\n        </FormControl>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const UserLastNameField = () => {\r\n    const { register, errors } = useFormContext<UserFormInputs>();\r\n    return (\r\n      <Box direction=\"column\">\r\n        <FormControl\r\n          label=\"Lastname\"\r\n          helpText=\"Lastname of the user.\"\r\n          errorText={errors.lastName?.message}\r\n          required\r\n        >\r\n          <TextField\r\n            name=\"lastName\"\r\n            placeholder=\"Enter lastname\"\r\n            error={!!errors.lastName}\r\n            ref={register({\r\n              required: \"Lastname is required\",\r\n              minLength: {\r\n                value: 3,\r\n                message: \"At least 3 characters required.\",\r\n              },\r\n            })}\r\n          />\r\n        </FormControl>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const AddressField = ({ i }: { i: number }) => {\r\n    const { register, errors } = useFormContext<UserFormInputs>();\r\n    return (\r\n      <Box direction=\"column\">\r\n        <FormControl\r\n          label={\"Address \" + i}\r\n          errorText={errors.address ? errors.address[i].message : \"\"}\r\n        >\r\n          <TextField\r\n            name={\"address.\" + i}\r\n            placeholder={\"Enter address line \" + i}\r\n            error={errors.address ? !!errors.address[i] : false}\r\n            ref={register}\r\n          />\r\n        </FormControl>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const PhoneField = () => {\r\n    const { register, errors } = useFormContext<UserFormInputs>();\r\n    return (\r\n      <Box direction=\"column\">\r\n        <FormControl label=\"Phone\" errorText={errors.phone?.message}>\r\n          <TextField\r\n            name={\"phone\"}\r\n            placeholder=\"Enter phone number\"\r\n            error={!!errors.phone}\r\n            ref={register({\r\n              pattern: {\r\n                value: /^\\d{10}$/,\r\n                message: \"Only 10 digits phone number is allowed \",\r\n              },\r\n            })}\r\n          />\r\n        </FormControl>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const EmailField = () => {\r\n    const { register, errors } = useFormContext<UserFormInputs>();\r\n    return (\r\n      <Box direction=\"column\">\r\n        <FormControl label=\"Email\" errorText={errors.email?.message}>\r\n          <TextField\r\n            name={\"email\"}\r\n            placeholder=\"Enter email\"\r\n            error={!!errors.email}\r\n            ref={register({\r\n              pattern: {\r\n                value: /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/,\r\n                message: \"Invalid email\",\r\n              },\r\n            })}\r\n          />\r\n        </FormControl>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const UserFormUsernameField = () => {\r\n    const { register, errors } = useFormContext<UserFormInputs>();\r\n    return (\r\n      <Box direction=\"column\">\r\n        <FormControl\r\n          label=\"Username\"\r\n          helpText=\"Login username for the user.\"\r\n          errorText={errors.username?.message}\r\n          required\r\n        >\r\n          <TextField\r\n            name=\"username\"\r\n            placeholder=\"Enter username\"\r\n            error={!!errors.username}\r\n            ref={register({\r\n              required: \"Username is required\",\r\n              minLength: {\r\n                value: 4,\r\n                message: \"At least 4 characters required.\",\r\n              },\r\n            })}\r\n          />\r\n        </FormControl>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const UserFormPasswordField = () => {\r\n    const { register, errors } = useFormContext<UserFormInputs>();\r\n    return (\r\n      <Box direction=\"column\">\r\n        <FormControl\r\n          label=\"Password\"\r\n          helpText=\"Login password for the user.\"\r\n          errorText={errors.password?.message}\r\n          required\r\n        >\r\n          <TextField\r\n            name=\"password\"\r\n            placeholder=\"Enter password\"\r\n            error={!!errors.password}\r\n            ref={register({\r\n              required: \"Passsword is required\",\r\n              minLength: {\r\n                value: 8,\r\n                message: \"At least 8 characters required.\",\r\n              },\r\n            })}\r\n          />\r\n        </FormControl>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const formMethods = useForm<UserFormInputs>({\r\n    defaultValues: userFormDefaultValues,\r\n    shouldUnregister: false,\r\n    mode: \"onBlur\",\r\n  });\r\n\r\n  const dummytabs: ITabsProps[] = [\r\n    \"Very very long tab name\",\r\n    \"dummy1\",\r\n    \"dummy2\",\r\n    \"dummy3\",\r\n    \"dummy4\",\r\n    \"dummy5\",\r\n    \"dummy6\",\r\n    \"dummy7\",\r\n    \"dummy8\",\r\n    \"dummy9\",\r\n    \"dummy10\",\r\n    \"dummy11\",\r\n    \"dummy12\",\r\n    \"dummy13\",\r\n    \"dummy14\",\r\n    \"dummy15\",\r\n    \"dummy16\",\r\n    \"dummy17\",\r\n    \"dummy18\",\r\n  ].map((id, index) => ({\r\n    id,\r\n    label: `Tab ${id}`,\r\n    defaultActive: index === 0,\r\n    content: <Center>Content {id}</Center>,\r\n    onActive: () => console.log(1),\r\n    disabled: index === 2,\r\n  }));\r\n  const tabs: ITabsProps[] = [\r\n    {\r\n      id: \"basicInfo\",\r\n      label: `Basic info`,\r\n      defaultActive: true,\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <UserFirstNameField />\r\n          <UserLastNameField />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      id: \"address\",\r\n      label: `Address`,\r\n      defaultActive: false,\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <AddressField i={1} />\r\n          <AddressField i={2} />\r\n        </Box>\r\n      ),\r\n    },\r\n    ...dummytabs,\r\n    {\r\n      id: \"contact\",\r\n      label: `Contact`,\r\n      defaultActive: false,\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <EmailField />\r\n          <PhoneField />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      id: \"credentials\",\r\n      label: `Credentials`,\r\n      defaultActive: false,\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <UserFormUsernameField />\r\n          <UserFormPasswordField />\r\n        </Box>\r\n      ),\r\n    },\r\n  ];\r\n  const [orientation, setOrientation] =\r\n    useState<TabOrientationType>(\"vertical\");\r\n  const tabsForms: ITabFormProps = {\r\n    formMethods: formMethods,\r\n    tabs: tabs,\r\n    orientation: orientation,\r\n    fieldNames: {\r\n      basicInfo: [\"firstName\", \"lastName\"],\r\n      address: [\"address\"],\r\n      contact: [\"email\", \"phone\"],\r\n      credentials: [\"username\", \"password\"],\r\n    },\r\n  };\r\n\r\n  const toggleOrientation = () => {\r\n    if (orientation === \"vertical\") {\r\n      setOrientation(\"horizontal\");\r\n    } else {\r\n      setOrientation(\"vertical\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PageView\r\n      heading=\"Tabs component\"\r\n      caption={\"Testing tabs on page view\"}\r\n      actions={\r\n        <Button\r\n          value={` Set ${\r\n            orientation === \"horizontal\" ? \"vertical\" : \"horizontal\"\r\n          }`}\r\n          onClick={() => {\r\n            toggleOrientation(); //Close the summary view otherwise it will go on infinite render due to duplicate form.\r\n          }}\r\n        />\r\n      }\r\n      tabs={tabsForms}\r\n    ></PageView>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["userFormDefaultValues","firstName","undefined","lastName","address","phone","email","username","password","UserFirstNameField","_errors$firstName","_useFormContext","useFormContext","register","errors","_jsx","Box","direction","children","FormControl","label","errorText","message","helpText","required","TextField","name","placeholder","error","ref","minLength","value","UserLastNameField","_errors$lastName","_useFormContext2","AddressField","_ref","i","_useFormContext3","PhoneField","_errors$phone","_useFormContext4","pattern","EmailField","_errors$email","_useFormContext5","UserFormUsernameField","_errors$username","_useFormContext6","UserFormPasswordField","_errors$password","_useFormContext7","formMethods","useForm","defaultValues","shouldUnregister","mode","dummytabs","map","id","index","concat","defaultActive","content","_jsxs","Center","onActive","console","log","disabled","tabs","_toConsumableArray","_useState","useState","_useState2","_slicedToArray","orientation","setOrientation","tabsForms","fieldNames","basicInfo","contact","credentials","PageView","heading","caption","actions","Button","onClick"],"sourceRoot":""}