{"version":3,"file":"static/js/8728.386bdd90.chunk.js","mappings":"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","sources":["../../node_modules/codemirror-graphql/src/jump.ts","../../node_modules/codemirror-graphql/src/utils/SchemaReference.ts","../../node_modules/codemirror-graphql/src/utils/forEachState.ts","../../node_modules/codemirror-graphql/src/utils/getTypeInfo.ts","../../node_modules/codemirror-graphql/src/utils/jump-addon.ts"],"sourcesContent":["/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n *\n */\n\nimport CodeMirror from 'codemirror';\n\nimport getTypeInfo from './utils/getTypeInfo';\nimport {\n  getArgumentReference,\n  getDirectiveReference,\n  getEnumValueReference,\n  getFieldReference,\n  getTypeReference,\n} from './utils/SchemaReference';\nimport './utils/jump-addon';\nimport { GraphQLSchema } from 'graphql';\nimport type { State } from 'graphql-language-service';\n\nexport interface GraphQLJumpOptions {\n  schema?: GraphQLSchema;\n  onClick?: () => void;\n  state?: State;\n}\n\n/**\n * Registers GraphQL \"jump\" links for CodeMirror.\n *\n * When command-hovering over a token, this converts it to a link, which when\n * pressed will call the provided onClick handler.\n *\n * Options:\n *\n *   - schema: GraphQLSchema provides positionally relevant info.\n *   - onClick: A function called when a named thing is clicked.\n *\n */\nCodeMirror.registerHelper(\n  'jump',\n  'graphql',\n  (token: CodeMirror.Token, options: GraphQLJumpOptions) => {\n    if (!options.schema || !options.onClick || !token.state) {\n      return;\n    }\n\n    // Given a Schema and a Token, produce a \"SchemaReference\" which refers to\n    // the particular artifact from the schema (such as a type, field, argument,\n    // or directive) that token references.\n    const state = token.state;\n    const kind = state.kind;\n    const step = state.step;\n    const typeInfo = getTypeInfo(options.schema, state);\n\n    if (\n      (kind === 'Field' && step === 0 && typeInfo.fieldDef) ||\n      (kind === 'AliasedField' && step === 2 && typeInfo.fieldDef)\n    ) {\n      return getFieldReference(typeInfo);\n    } else if (kind === 'Directive' && step === 1 && typeInfo.directiveDef) {\n      return getDirectiveReference(typeInfo);\n    } else if (kind === 'Argument' && step === 0 && typeInfo.argDef) {\n      return getArgumentReference(typeInfo);\n    } else if (kind === 'EnumValue' && typeInfo.enumValue) {\n      return getEnumValueReference(typeInfo);\n    } else if (kind === 'NamedType' && typeInfo.type) {\n      return getTypeReference(typeInfo);\n    }\n  },\n);\n","/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport { getNamedType, GraphQLSchema } from 'graphql';\n\nimport type {\n  GraphQLArgument,\n  GraphQLDirective,\n  GraphQLEnumValue,\n  GraphQLEnumType,\n  GraphQLField,\n  GraphQLNamedType,\n} from 'graphql';\nimport { Maybe } from 'graphql/jsutils/Maybe';\nimport { TypeInfo } from './getTypeInfo';\n\nexport type SchemaReference =\n  | FieldReference\n  | DirectiveReference\n  | ArgumentReference\n  | EnumValueReference\n  | TypeReference;\n\nexport type FieldReference = {\n  kind: 'Field';\n  field: GraphQLField<any, any>;\n  type: Maybe<GraphQLNamedType>;\n  schema?: GraphQLSchema;\n};\n\nexport type DirectiveReference = {\n  kind: 'Directive';\n  directive: GraphQLDirective;\n  schema?: GraphQLSchema;\n};\n\nexport type ArgumentReference = {\n  kind: 'Argument';\n  argument: GraphQLArgument;\n  field?: GraphQLField<any, any>;\n  type?: GraphQLNamedType;\n  directive?: GraphQLDirective;\n  schema?: GraphQLSchema;\n};\n\nexport type EnumValueReference = {\n  kind: 'EnumValue';\n  value?: GraphQLEnumValue;\n  type?: GraphQLEnumType;\n  schema?: GraphQLSchema;\n};\n\nexport type TypeReference = {\n  kind: 'Type';\n  type: GraphQLNamedType;\n  schema?: GraphQLSchema;\n};\n\nexport function getFieldReference(typeInfo: any): FieldReference {\n  return {\n    kind: 'Field',\n    schema: typeInfo.schema,\n    field: typeInfo.fieldDef,\n    type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType,\n  };\n}\n\nexport function getDirectiveReference(typeInfo: any): DirectiveReference {\n  return {\n    kind: 'Directive',\n    schema: typeInfo.schema,\n    directive: typeInfo.directiveDef,\n  };\n}\n\nexport function getArgumentReference(typeInfo: any): ArgumentReference {\n  return typeInfo.directiveDef\n    ? {\n        kind: 'Argument',\n        schema: typeInfo.schema,\n        argument: typeInfo.argDef,\n        directive: typeInfo.directiveDef,\n      }\n    : {\n        kind: 'Argument',\n        schema: typeInfo.schema,\n        argument: typeInfo.argDef,\n        field: typeInfo.fieldDef,\n        type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType,\n      };\n}\n\nexport function getEnumValueReference(typeInfo: TypeInfo): EnumValueReference {\n  return {\n    kind: 'EnumValue',\n    value: typeInfo.enumValue || undefined,\n    // $FlowFixMe\n    type: typeInfo.inputType\n      ? (getNamedType(typeInfo.inputType) as GraphQLEnumType)\n      : undefined,\n  };\n}\n\n// Note: for reusability, getTypeReference can produce a reference to any type,\n// though it defaults to the current type.\nexport function getTypeReference(\n  typeInfo: any,\n  type?: Maybe<GraphQLNamedType>,\n): TypeReference {\n  return {\n    kind: 'Type',\n    schema: typeInfo.schema,\n    type: type || typeInfo.type,\n  };\n}\n\nfunction isMetaField(fieldDef: GraphQLField<any, any>) {\n  return fieldDef.name.slice(0, 2) === '__';\n}\n","/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport type { State, Maybe } from 'graphql-language-service';\n\n// Utility for iterating through a CodeMirror parse state stack bottom-up.\nexport default function forEachState(stack: State, fn: (state: State) => void) {\n  const reverseStateStack = [];\n  let state: Maybe<State> = stack;\n  while (state?.kind) {\n    reverseStateStack.push(state);\n    state = state.prevState;\n  }\n  for (let i = reverseStateStack.length - 1; i >= 0; i--) {\n    fn(reverseStateStack[i]);\n  }\n}\n","/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport {\n  isCompositeType,\n  getNullableType,\n  getNamedType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLSchema,\n  GraphQLType,\n  GraphQLObjectType,\n  GraphQLField,\n  GraphQLDirective,\n  GraphQLArgument,\n  GraphQLInputType,\n  GraphQLEnumValue,\n  GraphQLInputFieldMap,\n} from 'graphql';\nimport type { State, Maybe } from 'graphql-language-service';\n\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from 'graphql/type/introspection';\n\nimport forEachState from './forEachState';\n\nexport interface TypeInfo {\n  schema: GraphQLSchema;\n  type?: Maybe<GraphQLType>;\n  parentType?: Maybe<GraphQLType>;\n  inputType?: Maybe<GraphQLInputType>;\n  directiveDef?: Maybe<GraphQLDirective>;\n  fieldDef?: Maybe<GraphQLField<any, any>>;\n  argDef?: Maybe<GraphQLArgument>;\n  argDefs?: Maybe<GraphQLArgument[]>;\n  enumValue?: Maybe<GraphQLEnumValue>;\n  objectFieldDefs?: Maybe<GraphQLInputFieldMap>;\n}\n\n/**\n * Utility for collecting rich type information given any token's state\n * from the graphql-mode parser.\n */\nexport default function getTypeInfo(schema: GraphQLSchema, tokenState: State) {\n  const info: TypeInfo = {\n    schema,\n    type: null,\n    parentType: null,\n    inputType: null,\n    directiveDef: null,\n    fieldDef: null,\n    argDef: null,\n    argDefs: null,\n    objectFieldDefs: null,\n  };\n\n  forEachState(tokenState, (state: State) => {\n    switch (state.kind) {\n      case 'Query':\n      case 'ShortQuery':\n        info.type = schema.getQueryType();\n        break;\n      case 'Mutation':\n        info.type = schema.getMutationType();\n        break;\n      case 'Subscription':\n        info.type = schema.getSubscriptionType();\n        break;\n      case 'InlineFragment':\n      case 'FragmentDefinition':\n        if (state.type) {\n          info.type = schema.getType(state.type);\n        }\n        break;\n      case 'Field':\n      case 'AliasedField':\n        info.fieldDef =\n          info.type && state.name\n            ? getFieldDef(schema, info.parentType, state.name)\n            : null;\n        info.type = info.fieldDef?.type;\n        break;\n      case 'SelectionSet':\n        info.parentType = info.type ? getNamedType(info.type) : null;\n        break;\n      case 'Directive':\n        info.directiveDef = state.name ? schema.getDirective(state.name) : null;\n        break;\n      case 'Arguments':\n        const parentDef = state.prevState\n          ? state.prevState.kind === 'Field'\n            ? info.fieldDef\n            : state.prevState.kind === 'Directive'\n            ? info.directiveDef\n            : state.prevState.kind === 'AliasedField'\n            ? state.prevState.name &&\n              getFieldDef(schema, info.parentType, state.prevState.name)\n            : null\n          : null;\n        info.argDefs = parentDef ? (parentDef.args as GraphQLArgument[]) : null;\n        break;\n      case 'Argument':\n        info.argDef = null;\n        if (info.argDefs) {\n          for (let i = 0; i < info.argDefs.length; i++) {\n            if (info.argDefs[i].name === state.name) {\n              info.argDef = info.argDefs[i];\n              break;\n            }\n          }\n        }\n        info.inputType = info.argDef?.type;\n        break;\n      case 'EnumValue':\n        const enumType = info.inputType ? getNamedType(info.inputType) : null;\n        info.enumValue =\n          enumType instanceof GraphQLEnumType\n            ? find(\n                enumType.getValues() as GraphQLEnumValue[],\n                val => val.value === state.name,\n              )\n            : null;\n        break;\n      case 'ListValue':\n        const nullableType = info.inputType\n          ? getNullableType(info.inputType)\n          : null;\n        info.inputType =\n          nullableType instanceof GraphQLList ? nullableType.ofType : null;\n        break;\n      case 'ObjectValue':\n        const objectType = info.inputType ? getNamedType(info.inputType) : null;\n        info.objectFieldDefs =\n          objectType instanceof GraphQLInputObjectType\n            ? objectType.getFields()\n            : null;\n        break;\n      case 'ObjectField':\n        const objectField =\n          state.name && info.objectFieldDefs\n            ? info.objectFieldDefs[state.name]\n            : null;\n        info.inputType = objectField?.type;\n        break;\n      case 'NamedType':\n        info.type = state.name ? schema.getType(state.name) : null;\n        break;\n    }\n  });\n\n  return info;\n}\n\n// Gets the field definition given a type and field name\nfunction getFieldDef(\n  schema: GraphQLSchema,\n  type: Maybe<GraphQLType>,\n  fieldName: string,\n) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === type) {\n    return SchemaMetaFieldDef;\n  }\n  if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === type) {\n    return TypeMetaFieldDef;\n  }\n  if (fieldName === TypeNameMetaFieldDef.name && isCompositeType(type)) {\n    return TypeNameMetaFieldDef;\n  }\n  if (type && (type as GraphQLObjectType).getFields) {\n    return (type as GraphQLObjectType).getFields()[fieldName];\n  }\n}\n\n// Returns the first item in the array which causes predicate to return truthy.\nfunction find<T>(array: T[], predicate: (item: T) => boolean) {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i])) {\n      return array[i];\n    }\n  }\n}\n","/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport CodeMirror from 'codemirror';\nimport { GraphQLJumpOptions } from '../jump';\n\nCodeMirror.defineOption(\n  'jump',\n  false,\n  (\n    cm: CodeMirror.Editor,\n    options: GraphQLJumpOptions,\n    old?: GraphQLJumpOptions,\n  ) => {\n    if (old && old !== CodeMirror.Init) {\n      const oldOnMouseOver = cm.state.jump.onMouseOver;\n      CodeMirror.off(cm.getWrapperElement(), 'mouseover', oldOnMouseOver);\n      const oldOnMouseOut = cm.state.jump.onMouseOut;\n      CodeMirror.off(cm.getWrapperElement(), 'mouseout', oldOnMouseOut);\n      CodeMirror.off(document, 'keydown', cm.state.jump.onKeyDown);\n      delete cm.state.jump;\n    }\n\n    if (options) {\n      const state = (cm.state.jump = {\n        options,\n        onMouseOver: onMouseOver.bind(null, cm),\n        onMouseOut: onMouseOut.bind(null, cm),\n        onKeyDown: onKeyDown.bind(null, cm),\n      });\n\n      CodeMirror.on(cm.getWrapperElement(), 'mouseover', state.onMouseOver);\n      CodeMirror.on(cm.getWrapperElement(), 'mouseout', state.onMouseOut);\n      CodeMirror.on(document, 'keydown', state.onKeyDown);\n    }\n  },\n);\n\nfunction onMouseOver(cm: CodeMirror.Editor, event: MouseEvent) {\n  const target = event.target || event.srcElement;\n  if (!(target instanceof HTMLElement)) {\n    return;\n  }\n  if (target?.nodeName !== 'SPAN') {\n    return;\n  }\n\n  const box = target.getBoundingClientRect();\n  const cursor = {\n    left: (box.left + box.right) / 2,\n    top: (box.top + box.bottom) / 2,\n  };\n\n  cm.state.jump.cursor = cursor;\n\n  if (cm.state.jump.isHoldingModifier) {\n    enableJumpMode(cm);\n  }\n}\n\nfunction onMouseOut(cm: CodeMirror.Editor) {\n  if (!cm.state.jump.isHoldingModifier && cm.state.jump.cursor) {\n    cm.state.jump.cursor = null;\n    return;\n  }\n\n  if (cm.state.jump.isHoldingModifier && cm.state.jump.marker) {\n    disableJumpMode(cm);\n  }\n}\n\nfunction onKeyDown(cm: CodeMirror.Editor, event: KeyboardEvent) {\n  if (cm.state.jump.isHoldingModifier || !isJumpModifier(event.key)) {\n    return;\n  }\n\n  cm.state.jump.isHoldingModifier = true;\n\n  if (cm.state.jump.cursor) {\n    enableJumpMode(cm);\n  }\n\n  const onKeyUp = (upEvent: KeyboardEvent) => {\n    if (upEvent.code !== event.code) {\n      return;\n    }\n\n    cm.state.jump.isHoldingModifier = false;\n\n    if (cm.state.jump.marker) {\n      disableJumpMode(cm);\n    }\n\n    CodeMirror.off(document, 'keyup', onKeyUp);\n    CodeMirror.off(document, 'click', onClick);\n    cm.off('mousedown', onMouseDown);\n  };\n\n  const onClick = (clickEvent: MouseEvent) => {\n    const destination = cm.state.jump.destination;\n    if (destination) {\n      cm.state.jump.options.onClick(destination, clickEvent);\n    }\n  };\n\n  const onMouseDown = (_: any, downEvent: MouseEvent) => {\n    if (cm.state.jump.destination) {\n      (downEvent as any).codemirrorIgnore = true;\n    }\n  };\n\n  CodeMirror.on(document, 'keyup', onKeyUp);\n  CodeMirror.on(document, 'click', onClick);\n  cm.on('mousedown', onMouseDown);\n}\n\nconst isMac =\n  typeof navigator !== 'undefined' &&\n  navigator &&\n  navigator.appVersion.indexOf('Mac') !== -1;\n\nfunction isJumpModifier(key: string) {\n  return key === (isMac ? 'Meta' : 'Control');\n}\n\nfunction enableJumpMode(cm: CodeMirror.Editor) {\n  if (cm.state.jump.marker) {\n    return;\n  }\n\n  const cursor = cm.state.jump.cursor;\n  const pos = cm.coordsChar(cursor);\n  const token = cm.getTokenAt(pos, true);\n\n  const options = cm.state.jump.options;\n  const getDestination = options.getDestination || cm.getHelper(pos, 'jump');\n  if (getDestination) {\n    const destination = getDestination(token, options, cm);\n    if (destination) {\n      const marker = cm.markText(\n        { line: pos.line, ch: token.start },\n        { line: pos.line, ch: token.end },\n        { className: 'CodeMirror-jump-token' },\n      );\n\n      cm.state.jump.marker = marker;\n      cm.state.jump.destination = destination;\n    }\n  }\n}\n\nfunction disableJumpMode(cm: CodeMirror.Editor) {\n  const marker = cm.state.jump.marker;\n  cm.state.jump.marker = null;\n  cm.state.jump.destination = null;\n\n  marker.clear();\n}\n"],"names":["codemirror_1","__importDefault","require","getTypeInfo_1","SchemaReference_1","default","registerHelper","token","options","schema","onClick","state","kind","step","typeInfo","fieldDef","getFieldReference","directiveDef","getDirectiveReference","argDef","getArgumentReference","enumValue","getEnumValueReference","type","getTypeReference","graphql_1","isMetaField","name","slice","exports","field","parentType","directive","argument","value","undefined","inputType","getNamedType","stack","fn","reverseStateStack","push","prevState","i","length","introspection_1","forEachState_1","getFieldDef","fieldName","SchemaMetaFieldDef","getQueryType","TypeMetaFieldDef","TypeNameMetaFieldDef","isCompositeType","getFields","tokenState","info","argDefs","objectFieldDefs","getMutationType","getSubscriptionType","getType","_a","getDirective","parentDef","args","_b","enumType","GraphQLEnumType","array","predicate","find","getValues","val","nullableType","getNullableType","GraphQLList","ofType","objectType","GraphQLInputObjectType","objectField","onMouseOver","cm","event","target","srcElement","HTMLElement","nodeName","box","getBoundingClientRect","cursor","left","right","top","bottom","jump","isHoldingModifier","enableJumpMode","onMouseOut","marker","disableJumpMode","onKeyDown","key","isMac","onKeyUp","upEvent","code","off","document","onMouseDown","clickEvent","destination","_","downEvent","codemirrorIgnore","on","defineOption","old","Init","oldOnMouseOver","getWrapperElement","oldOnMouseOut","bind","navigator","appVersion","indexOf","pos","coordsChar","getTokenAt","getDestination","getHelper","markText","line","ch","start","end","className","clear"],"sourceRoot":""}