{"version":3,"sources":["modules/components/pages/Stepper.tsx"],"names":["userFormDefaultValues","firstName","lastName","address","phone","email","username","password","UserFirstNameField","useFormContext","register","errors","direction","label","errorText","message","helpText","required","name","placeholder","error","ref","minLength","value","UserLastNameField","AddressField","i","PhoneField","pattern","EmailField","UserFormUsernameField","UserFormPasswordField","Page","useState","open","setOpen","useModal","ModalWrapper","openModal","closeModal","isOpen","steps","completed","state","content","formMethods","useForm","defaultValues","shouldUnregister","mode","control","submitButtonRef","useRef","backButtonRef","nextButtonRef","disableButtons","disable","setSubmitting","current","back","setDisabled","next","stepper","currentStep","handleSubmitButton","values","a","console","log","JSON","stringify","setTimeout","addToast","id","title","variant","persist","resetFormValues","editMode","heading","actions","onClick","disabled","caption","onClose","style","height","width"],"mappings":"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","file":"static/js/27.87f3b1d4.chunk.js","sourcesContent":["import { FC, useState, useRef } from \"react\";\r\n\r\nimport { PageView, SummaryView } from \"@faharmony/views\";\r\nimport {\r\n  IStepProps,\r\n  IStepperProps,\r\n  IStepButtonRef,\r\n} from \"@faharmony/navigation\";\r\nimport { Button, useModal } from \"@faharmony/components\";\r\nimport {\r\n  FormControl,\r\n  TextField,\r\n  useForm,\r\n  useFormContext,\r\n  SubmitHandler,\r\n  resetFormValues,\r\n} from \"@faharmony/form\";\r\nimport { Box } from \"@faharmony/theme\";\r\nimport { addToast } from \"@faharmony/core\";\r\n\r\ninterface UserFormInputs {\r\n  firstName: string;\r\n  lastName: string;\r\n  address?: {};\r\n  phone?: string;\r\n  email?: string;\r\n  username: string;\r\n  password: string;\r\n}\r\nconst userFormDefaultValues: Partial<UserFormInputs> = {\r\n  firstName: \"test\",\r\n  lastName: \"ssss\",\r\n  address: {},\r\n  phone: \"\",\r\n  email: \"\",\r\n  username: \"\",\r\n  password: \"\",\r\n};\r\n\r\nconst UserFirstNameField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label=\"First name\"\r\n        errorText={errors.firstName?.message}\r\n        helpText=\"Firstname of the user.\"\r\n        required\r\n      >\r\n        <TextField\r\n          name=\"firstName\"\r\n          placeholder=\"Enter full name\"\r\n          error={!!errors.firstName}\r\n          ref={register({\r\n            required: \"Firstname is required\",\r\n            minLength: { value: 3, message: \"At least 3 characters required.\" },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst UserLastNameField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label=\"Lastname\"\r\n        helpText=\"Lastname of the user.\"\r\n        errorText={errors.lastName?.message}\r\n        required\r\n      >\r\n        <TextField\r\n          name=\"lastName\"\r\n          placeholder=\"Enter lastname\"\r\n          error={!!errors.lastName}\r\n          ref={register({\r\n            required: \"Lastname is required\",\r\n            minLength: { value: 3, message: \"At least 3 characters required.\" },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst AddressField = ({ i }: { i: number }) => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label={\"Address \" + i}\r\n        errorText={errors.address ? errors.address[i].message : \"\"}\r\n      >\r\n        <TextField\r\n          name={\"address.\" + i}\r\n          placeholder={\"Enter address line \" + i}\r\n          error={errors.address ? !!errors.address[i] : false}\r\n          ref={register}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst PhoneField = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl label=\"Phone\" errorText={errors.phone?.message}>\r\n        <TextField\r\n          name={\"phone\"}\r\n          placeholder=\"Enter phone number\"\r\n          error={!!errors.phone}\r\n          ref={register({\r\n            pattern: {\r\n              value: /^\\d{10}$/,\r\n              message: \"Only 10 digits phone number is allowed \",\r\n            },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst EmailField = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl label=\"Email\" errorText={errors.email?.message}>\r\n        <TextField\r\n          name={\"email\"}\r\n          placeholder=\"Enter email\"\r\n          error={!!errors.email}\r\n          ref={register({\r\n            pattern: {\r\n              value: /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/,\r\n              message: \"Invalid email\",\r\n            },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst UserFormUsernameField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label=\"Username\"\r\n        helpText=\"Login username for the user.\"\r\n        errorText={errors.username?.message}\r\n        required\r\n      >\r\n        <TextField\r\n          name=\"username\"\r\n          placeholder=\"Enter username\"\r\n          error={!!errors.username}\r\n          ref={register({\r\n            required: \"Username is required\",\r\n            minLength: { value: 4, message: \"At least 4 characters required.\" },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst UserFormPasswordField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label=\"Password\"\r\n        helpText=\"Login password for the user.\"\r\n        errorText={errors.password?.message}\r\n        required\r\n      >\r\n        <TextField\r\n          name=\"password\"\r\n          placeholder=\"Enter password\"\r\n          error={!!errors.password}\r\n          ref={register({\r\n            required: \"Passsword is required\",\r\n            minLength: { value: 8, message: \"At least 8 characters required.\" },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst Page = () => {\r\n  // https://stackoverflow.com/questions/61380289/react-hook-form-field-value-get-lost-when-i-collapse-add-or-delete-panel\r\n  const [open, setOpen] = useState(true);\r\n\r\n  const [ModalWrapper, openModal, closeModal, isOpen] = useModal(false);\r\n\r\n  const steps: IStepProps[] = [\r\n    {\r\n      label: \"Basic Information\",\r\n      completed: false,\r\n      state: \"active\",\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <UserFirstNameField />\r\n          <UserLastNameField />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      label: \"Address\",\r\n      completed: false,\r\n      state: \"active\",\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <AddressField i={0} />\r\n          <AddressField i={1} />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      label: \"Contact\",\r\n      completed: false,\r\n      state: \"active\",\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <PhoneField />\r\n          <EmailField />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      label: \"Credentials\",\r\n      completed: false,\r\n      state: \"active\",\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <UserFormUsernameField />\r\n          <UserFormPasswordField />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      label: \"Dummy Step\",\r\n      completed: false,\r\n      state: \"active\",\r\n    },\r\n    {\r\n      label: \"Dummy Step 2\",\r\n      completed: false,\r\n      state: \"active\",\r\n    },\r\n  ];\r\n\r\n  const formMethods = useForm<UserFormInputs>({\r\n    defaultValues: userFormDefaultValues,\r\n    shouldUnregister: false,\r\n    mode: \"onBlur\",\r\n  });\r\n\r\n  const { control } = formMethods;\r\n\r\n  const submitButtonRef = useRef<IStepButtonRef>(null);\r\n  const backButtonRef = useRef<IStepButtonRef>(null);\r\n  const nextButtonRef = useRef<IStepButtonRef>(null);\r\n\r\n  const disableButtons = (disable: boolean) => {\r\n    const setSubmitting = submitButtonRef?.current?.setSubmitting;\r\n    setSubmitting && setSubmitting(disable);\r\n\r\n    const back = backButtonRef?.current?.setDisabled;\r\n    back && back(disable);\r\n\r\n    const next = nextButtonRef?.current?.setDisabled;\r\n    next && next(disable);\r\n  };\r\n\r\n  const onSubmit: SubmitHandler<UserFormInputs> = async (\r\n    values: UserFormInputs\r\n  ) => {\r\n    console.log(\"Sent values: \" + JSON.stringify(values));\r\n\r\n    disableButtons(true);\r\n\r\n    await setTimeout(() => {\r\n      addToast({\r\n        id: \"submit\",\r\n        title: \"Information saved\",\r\n        variant: \"positive\",\r\n        persist: false,\r\n      });\r\n      resetFormValues(control);\r\n\r\n      disableButtons(false);\r\n    }, 5000);\r\n  };\r\n\r\n  const stepper: IStepperProps = {\r\n    steps: steps,\r\n    currentStep: 0,\r\n    formMethods: formMethods,\r\n    handleSubmitButton: onSubmit,\r\n    editMode: true,\r\n    submitButtonRef: submitButtonRef,\r\n    backButtonRef: backButtonRef,\r\n    nextButtonRef: nextButtonRef,\r\n  };\r\n\r\n  return (\r\n    <PageView\r\n      heading=\"Stepper component\"\r\n      actions={\r\n        <>\r\n          <Button\r\n            value=\"Open SummaryView\"\r\n            onClick={() => setOpen(true)}\r\n            disabled={open}\r\n          />\r\n\r\n          <Button\r\n            value=\"Open As Modal\"\r\n            onClick={() => {\r\n              openModal();\r\n              setOpen(false); //Close the summary view otherwise it will go on infinite render due to duplicate form.\r\n            }}\r\n            disabled={isOpen}\r\n          />\r\n        </>\r\n      }\r\n    >\r\n      {open && (\r\n        <SummaryView\r\n          caption=\"FA user\"\r\n          heading=\"New user\"\r\n          onClose={() => setOpen(false)}\r\n          stepper={stepper}\r\n        ></SummaryView>\r\n      )}\r\n      <ModalWrapper style={{ height: \"90vh\", width: \"30vw\" }}>\r\n        <SummaryView\r\n          caption=\"FA user\"\r\n          heading=\"New user\"\r\n          onClose={() => closeModal()}\r\n          stepper={stepper}\r\n        ></SummaryView>\r\n      </ModalWrapper>\r\n    </PageView>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"sourceRoot":""}