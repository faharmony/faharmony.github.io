{"version":3,"sources":["modules/logo/state/initialState.ts","modules/logo/state/reducers.ts","modules/logo/state/index.ts"],"names":["colors","brand","loading","isConfigDrawerOpen","config","size","color","primary","secondary","text","variant","icon","toggleLoading","state","setLoading","payload","toggleConfigDrawer","setVariant","setIcon","setColor","split","length","ModuleState","createModuleState","name","initialState","reducers","ModuleActions","actions"],"mappings":"iHAAA,8CAoBO,MAAMA,EAAS,CAAEC,MAAO,WAGhB,WACbC,SAAS,EACTC,oBAAoB,EACpBC,OAAQ,CACNC,KAAM,IACNC,MAAO,CAAEC,QAASP,EAAOC,MAAOO,UAAW,IAC3CC,KAAM,GACNC,QAAS,MACTC,KAAM,S,2TCJH,MAAMC,EAA0BC,IACrCA,EAAMX,SAAWW,EAAMX,SAKZY,EAA0C,CAACD,GAASE,cAC/DF,EAAMX,QAAUa,GAILC,EAA+BH,IAC1CA,EAAMV,oBAAsBU,EAAMV,oBAGvBc,EAAoD,CAC/DJ,GACEE,cAEFF,EAAMT,OAAOM,QAAUK,GAGZG,EAA8C,CACzDL,GACEE,cAEFF,EAAMT,OAAOO,KAAOI,GAGTI,EAAyD,CACpEN,GACEE,cAEF,GAAuB,kBAAZA,EAAsB,CAC/B,MAAMf,EAASe,EAAQK,MAAM,KAC7BP,EAAMT,OAAOE,MAAMC,QAAUP,EAAO,GACpCA,EAAOqB,OAAS,IAAMR,EAAMT,OAAOE,MAAME,UAAYR,EAAO,SACvDa,EAAMT,OAAOE,MAAb,2BAA0BO,EAAMT,OAAOE,OAAUS,K,gCChE1D,8KAyBA,MAAMO,EAAcC,YAAkB,CAEpCC,KAAM,OAENC,uBAEAC,aAIeC,EAAkBL,EAA3BM","file":"static/js/12.3edbb7d7.chunk.js","sourcesContent":["/**\n * InitialState\n * ---\n * This file maintains the type definition\n * and the actual initialState of the Module.\n */\n\n/** Type definition of the Module's state */\nexport interface IModuleState {\n  loading: boolean;\n  isConfigDrawerOpen: boolean;\n  config: {\n    size: number;\n    color: { primary: string; secondary: string };\n    text: string;\n    variant: \"all\" | \"company\" | \"platform\";\n    icon: \"all\" | \"transparent\" | \"opaque\";\n  };\n}\n\nexport const colors = { brand: \"#AE001A\" };\n\n/** Initial state of Module */\nexport default {\n  loading: true,\n  isConfigDrawerOpen: true,\n  config: {\n    size: 200,\n    color: { primary: colors.brand, secondary: \"\" },\n    text: \"\",\n    variant: \"all\",\n    icon: \"all\",\n  },\n} as IModuleState;\n","/**\n * Reducers\n * ---\n * This file maintains all the reducers (modifiers)\n * for the Module's state. The name of reducer will\n * become the name of the action.\n *\n * A case reducer can choose to mutate the passed-in\n * state value directly instead of returning a new state.\n * This does not actually cause the store state to be\n * mutated directly; instead, thanks to immer, the\n * mutations are translated to copy operations that\n * result in a new state.\n */\nimport { CaseReducer, PayloadAction } from \"@faharmony/state\";\nimport { IModuleState } from \"./initialState\";\n\n// Generic types for ease-of-use\ntype Reducer = CaseReducer<IModuleState>;\ntype ReducerWithPayload<T> = CaseReducer<IModuleState, PayloadAction<T>>;\ntype Config = IModuleState[\"config\"];\n\n// -------------------\n// Edit reducers below\n\n/** Reducer without required payload.\n * @example dispatch(toggleLoading()) */\nexport const toggleLoading: Reducer = (state) => {\n  state.loading = !state.loading;\n};\n\n/** Reducer with required payload.\n * @example dispatch(setLoading(true)) */\nexport const setLoading: ReducerWithPayload<boolean> = (state, { payload }) => {\n  state.loading = payload;\n};\n\n/** Reducer with to toggle ConfigDrawer.*/\nexport const toggleConfigDrawer: Reducer = (state) => {\n  state.isConfigDrawerOpen = !state.isConfigDrawerOpen;\n};\n\nexport const setVariant: ReducerWithPayload<Config[\"variant\"]> = (\n  state,\n  { payload }\n) => {\n  state.config.variant = payload;\n};\n\nexport const setIcon: ReducerWithPayload<Config[\"icon\"]> = (\n  state,\n  { payload }\n) => {\n  state.config.icon = payload;\n};\n\nexport const setColor: ReducerWithPayload<Config[\"color\"] | string> = (\n  state,\n  { payload }\n) => {\n  if (typeof payload === \"string\") {\n    const colors = payload.split(\"@\");\n    state.config.color.primary = colors[0];\n    colors.length > 0 && (state.config.color.secondary = colors[1]);\n  } else state.config.color = { ...state.config.color, ...payload };\n};\n","/**\n * State\n * ---\n *\n * This directory contains module state.\n * Harmony uses the Redux-Toolkit setup and\n * treats each Module as a Slice.\n *\n * Use other files like `store.ts` and `reducers.ts`\n * to maintain the functionality of ModuleState.\n * This file is responsible for combining them.\n *\n * There is no need for separately creating or\n * maintaining `actions` as they are generated\n * using slice's case reducers.\n *\n * @readonly No edit required in this file unless\n * ModuleId changes.\n */\n\nimport { createModuleState } from \"@faharmony/state\";\nimport initialState from \"./initialState\";\nimport * as reducers from \"./reducers\";\n\n/** Create Module's state using wrapper of createSlice(). */\nconst ModuleState = createModuleState({\n  /** name should be exact same as Module ID. */\n  name: \"logo\",\n  /** Initial value of Module's state. */\n  initialState,\n  /** Object of case reducers to modify Module's state. */\n  reducers,\n});\n\n// Extract `actions` from Module's state\nconst { actions: ModuleActions } = ModuleState;\n// Export state for Module config and actions for dispatch usage.\nexport { ModuleState, ModuleActions };\n// Export State type definition\nexport * from \"./initialState\";\n"],"sourceRoot":""}