{"version":3,"file":"static/js/4291.6c433d9c.chunk.js","mappings":"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","sources":["modules/logo/components/ComboBox.tsx","modules/logo/components/ConfigDrawer.tsx","modules/logo/components/InputField.tsx","modules/logo/state/index.ts","modules/logo/state/initialState.ts","modules/logo/state/reducers.ts"],"sourcesContent":["import { Combobox, IComboboxProps } from \"@faharmony/form\";\r\nimport { theme } from \"@faharmony/theme\";\r\nimport { Text } from \"@faharmony/components\";\r\n\r\n/**\r\n * @author Siddhant Gupta <siddhant@fasolutions.com>\r\n */\r\nexport const ComboBox = (props: IComboboxProps) => {\r\n  return (\r\n    <div>\r\n      {props.label && (\r\n        <div style={{ marginLeft: theme.spacing.sm }}>\r\n          <Text value={props.label} variant=\"h5\" />\r\n        </div>\r\n      )}\r\n      <Combobox {...props} name={props.label} />\r\n      {props.helpText && (\r\n        <Text value={props.helpText} variant=\"small\" color=\"secondary\" />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ComboBox;\r\n","import React from \"react\";\r\nimport { SummaryView } from \"@faharmony/views\";\r\nimport { theme, Box } from \"@faharmony/theme\";\r\nimport { insertQueryParam } from \"@faharmony/router\";\r\n\r\nimport { useModuleState, useDispatch, ModuleActions } from \"../state\";\r\nimport { ComboBox } from \"./ComboBox\";\r\nimport { InputField } from \"./InputField\";\r\n\r\ninterface Obj {\r\n  value: string;\r\n  label: string;\r\n}\r\n\r\nconst configurationOptions = {\r\n  variants: [\r\n    { value: \"all\", label: \"All\" },\r\n    { value: \"company\", label: \"Company branding\" },\r\n    { value: \"platform\", label: \"Apps branding\" },\r\n  ],\r\n  icon: [\r\n    { value: \"all\", label: \"All\" },\r\n    { value: \"transparent\", label: \"Transparent\" },\r\n    { value: \"opaque\", label: \"Opaque\" },\r\n  ],\r\n};\r\n\r\nconst getCurrentOption = (\r\n  option: keyof typeof configurationOptions,\r\n  value: string\r\n) =>\r\n  configurationOptions[option].find((o) => o.value === value) ||\r\n  configurationOptions[option][0];\r\n\r\nconst ColorPicker = ({ onChange }: { onChange: (o: Obj) => void }) => {\r\n  const {\r\n    config: { color },\r\n  } = useModuleState();\r\n  const [value, setValue] = React.useState(color.primary);\r\n  const handleChange = (val: string) => {\r\n    setValue(val);\r\n    onChange({ value: val, label: \"\" });\r\n  };\r\n  return <InputField handleChange={handleChange} value={value} type=\"color\" />;\r\n};\r\n\r\n/**\r\n * @author Siddhant Gupta <siddhant@fasolutions.com>\r\n */\r\nexport const ConfigDrawer = () => {\r\n  const dispatch = useDispatch();\r\n  const { isConfigDrawerOpen, config } = useModuleState();\r\n  const { variant, icon } = config;\r\n\r\n  const handleChange = (\r\n    action: Function,\r\n    option: any,\r\n    defaultValue = \"all\"\r\n  ) => {\r\n    const key = action.toString().split(\"set\")[1];\r\n    const value = option?.value || defaultValue;\r\n    dispatch(action(value));\r\n    insertQueryParam(key, value);\r\n  };\r\n\r\n  return isConfigDrawerOpen ? (\r\n    <SummaryView\r\n      caption=\"Logo\"\r\n      heading=\"Configuration\"\r\n      onClose={() => dispatch(ModuleActions.toggleConfigDrawer())}\r\n    >\r\n      <Box\r\n        direction=\"column\"\r\n        alignItems=\"normal\"\r\n        style={{ padding: theme.spacing.md }}\r\n      >\r\n        <ComboBox\r\n          label=\"Variant\"\r\n          placeholder=\"Select variant...\"\r\n          options={configurationOptions.variants}\r\n          defaultValue={getCurrentOption(\"variants\", variant)}\r\n          onChange={(o: any) => handleChange(ModuleActions.setVariant, o)}\r\n        />\r\n        <ComboBox\r\n          label=\"Icon style\"\r\n          placeholder=\"Select icon style...\"\r\n          options={configurationOptions.icon}\r\n          defaultValue={getCurrentOption(\"icon\", icon)}\r\n          onChange={(o: any) => handleChange(ModuleActions.setIcon, o)}\r\n        />\r\n        <ColorPicker\r\n          onChange={(o: any) => handleChange(ModuleActions.setColor, o)}\r\n        />\r\n      </Box>\r\n    </SummaryView>\r\n  ) : null;\r\n};\r\n\r\nexport default ConfigDrawer;\r\n","import React from \"react\";\r\nimport { theme, styled } from \"@faharmony/theme\";\r\nimport { Text } from \"@faharmony/components\";\r\n\r\nexport interface IInputFieldProps {\r\n  label?: string;\r\n  helpText?: string;\r\n  value: string;\r\n  placeholder?: string;\r\n  handleChange: (value: string) => void;\r\n  type: string;\r\n}\r\n\r\nconst StyledInput = styled.input`\r\n  height: 36px;\r\n`;\r\n\r\n/**\r\n * @author Siddhant Gupta <siddhant@fasolutions.com>\r\n */\r\nexport const InputField = (props: IInputFieldProps) => {\r\n  const { label, helpText, handleChange } = props;\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) =>\r\n    handleChange(e.target.value);\r\n  return (\r\n    <div>\r\n      {label && (\r\n        <div style={{ marginLeft: theme.spacing.sm }}>\r\n          <Text value={label} variant=\"h5\" />\r\n        </div>\r\n      )}\r\n      <StyledInput {...props} onChange={onChange} />\r\n      {helpText && <Text value={helpText} variant=\"small\" color=\"secondary\" />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputField;\r\n","/**\r\n * State\r\n * ---\r\n *\r\n * This directory contains module state.\r\n * Harmony uses the Redux-Toolkit setup and\r\n * treats each Module as a Slice.\r\n *\r\n * Use other files like `store.ts` and `reducers.ts`\r\n * to maintain the functionality of ModuleState.\r\n * This file is responsible for combining them.\r\n *\r\n * There is no need for separately creating or\r\n * maintaining `actions` as they are generated\r\n * using slice's case reducers.\r\n *\r\n * @readonly No edit required in this file unless\r\n * ModuleId changes.\r\n */\r\n\r\nimport {\r\n  createModuleState,\r\n  createUseModuleStateHook,\r\n  useDispatch,\r\n} from \"@faharmony/state\";\r\nimport initialState, { IModuleState } from \"./initialState\";\r\nimport * as reducers from \"./reducers\";\r\n\r\nconst ModuleID = \"logo\";\r\n\r\n/** Create Module's state using wrapper of createSlice(). */\r\nconst ModuleState = createModuleState({\r\n  /** name should be exact same as Module ID. */\r\n  name: ModuleID,\r\n  /** Initial value of Module's state. */\r\n  initialState,\r\n  /** Object of case reducers to modify Module's state. */\r\n  reducers,\r\n});\r\n\r\nconst {\r\n  useModuleState,\r\n  useModuleStateSelector,\r\n} = createUseModuleStateHook<IModuleState>(ModuleID);\r\n\r\n// Extract `actions` from Module's state\r\nconst { actions: ModuleActions } = ModuleState;\r\n// Export state for Module config and actions for dispatch usage.\r\nexport { ModuleState, ModuleActions, useModuleState, useModuleStateSelector };\r\n// Export State type definition\r\nexport * from \"./initialState\";\r\n\r\nexport { useDispatch };\r\n","/**\r\n * InitialState\r\n * ---\r\n * This file maintains the type definition\r\n * and the actual initialState of the Module.\r\n */\r\n\r\n/** Type definition of the Module's state */\r\nexport interface IModuleState {\r\n  loading: boolean;\r\n  isConfigDrawerOpen: boolean;\r\n  config: {\r\n    size: number;\r\n    color: { primary: string; secondary: string };\r\n    text: string;\r\n    variant: \"all\" | \"company\" | \"platform\";\r\n    icon: \"all\" | \"transparent\" | \"opaque\";\r\n  };\r\n}\r\n\r\nexport const colors = { brand: \"#AE001A\" };\r\n\r\n/** Initial state of Module */\r\nexport default {\r\n  loading: true,\r\n  isConfigDrawerOpen: true,\r\n  config: {\r\n    size: 200,\r\n    color: { primary: colors.brand, secondary: \"\" },\r\n    text: \"\",\r\n    variant: \"all\",\r\n    icon: \"all\",\r\n  },\r\n} as IModuleState;\r\n","/**\r\n * Reducers\r\n * ---\r\n * This file maintains all the reducers (modifiers)\r\n * for the Module's state. The name of reducer will\r\n * become the name of the action.\r\n *\r\n * A case reducer can choose to mutate the passed-in\r\n * state value directly instead of returning a new state.\r\n * This does not actually cause the store state to be\r\n * mutated directly; instead, thanks to immer, the\r\n * mutations are translated to copy operations that\r\n * result in a new state.\r\n */\r\nimport { CaseReducer, PayloadAction } from \"@faharmony/state\";\r\nimport { IModuleState } from \"./initialState\";\r\n\r\n// Generic types for ease-of-use\r\ntype Reducer = CaseReducer<IModuleState>;\r\ntype ReducerWithPayload<T> = CaseReducer<IModuleState, PayloadAction<T>>;\r\ntype Config = IModuleState[\"config\"];\r\n\r\n// -------------------\r\n// Edit reducers below\r\n\r\n/** Reducer without required payload.\r\n * @example dispatch(toggleLoading()) */\r\nexport const toggleLoading: Reducer = (state) => {\r\n  state.loading = !state.loading;\r\n};\r\n\r\n/** Reducer with required payload.\r\n * @example dispatch(setLoading(true)) */\r\nexport const setLoading: ReducerWithPayload<boolean> = (state, { payload }) => {\r\n  state.loading = payload;\r\n};\r\n\r\n/** Reducer with to toggle ConfigDrawer.*/\r\nexport const toggleConfigDrawer: Reducer = (state) => {\r\n  state.isConfigDrawerOpen = !state.isConfigDrawerOpen;\r\n};\r\n\r\nexport const setVariant: ReducerWithPayload<Config[\"variant\"]> = (\r\n  state,\r\n  { payload }\r\n) => {\r\n  state.config.variant = payload;\r\n};\r\n\r\nexport const setIcon: ReducerWithPayload<Config[\"icon\"]> = (\r\n  state,\r\n  { payload }\r\n) => {\r\n  state.config.icon = payload;\r\n};\r\n\r\nexport const setColor: ReducerWithPayload<Config[\"color\"] | string> = (\r\n  state,\r\n  { payload }\r\n) => {\r\n  if (typeof payload === \"string\") {\r\n    const colors = payload.split(\"@\");\r\n    state.config.color.primary = colors[0];\r\n    colors.length > 0 && (state.config.color.secondary = colors[1]);\r\n  } else state.config.color = { ...state.config.color, ...payload };\r\n};\r\n"],"names":["ComboBox","props","_jsxs","children","label","_jsx","style","marginLeft","theme","Text","value","variant","Combobox","_objectSpread","name","helpText","color","configurationOptions","variants","icon","getCurrentOption","option","find","o","ColorPicker","_ref","onChange","useModuleState","config","_React$useState","React","primary","_React$useState2","_slicedToArray","setValue","InputField","handleChange","val","type","ConfigDrawer","dispatch","useDispatch","_useModuleState2","isConfigDrawerOpen","action","defaultValue","arguments","length","undefined","key","toString","split","insertQueryParam","SummaryView","caption","heading","onClose","ModuleActions","Box","direction","alignItems","padding","placeholder","options","StyledInput","styled","_templateObject","_taggedTemplateLiteral","e","target","ModuleID","ModuleState","createModuleState","initialState","reducers","_createUseModuleState","createUseModuleStateHook","useModuleStateSelector","actions","colors","brand","loading","size","secondary","text","toggleLoading","state","setLoading","payload","toggleConfigDrawer","setVariant","_ref2","setIcon","_ref3","setColor","_ref4"],"sourceRoot":""}