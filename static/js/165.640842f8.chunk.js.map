{"version":3,"file":"static/js/165.640842f8.chunk.js","mappings":"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","sources":["../../node_modules/@mui/material/Alert/alertClasses.js","../../node_modules/@mui/material/internal/svg-icons/SuccessOutlined.js","../../node_modules/@mui/material/internal/svg-icons/ReportProblemOutlined.js","../../node_modules/@mui/material/internal/svg-icons/ErrorOutline.js","../../node_modules/@mui/material/internal/svg-icons/InfoOutlined.js","../../node_modules/@mui/material/Alert/Alert.js","../../node_modules/@mui/material/utils/useSlot.js","../../node_modules/@mui/x-data-grid-premium/hooks/features/aggregation/gridAggregationSelectors.js","../../node_modules/@mui/x-data-grid-premium/hooks/features/aggregation/gridAggregationUtils.js","../../node_modules/@mui/x-data-grid-premium/hooks/features/aggregation/createAggregationLookup.js","../../node_modules/@mui/x-data-grid-premium/hooks/features/aggregation/useGridAggregation.js","../../node_modules/@mui/x-data-grid-premium/components/GridFooterCell.js","../../node_modules/@mui/x-data-grid-premium/components/GridAggregationHeader.js","../../node_modules/@mui/x-data-grid-premium/hooks/features/aggregation/wrapColumnWithAggregation.js","../../node_modules/@mui/x-data-grid-premium/hooks/features/aggregation/useGridAggregationPreProcessors.js","../../node_modules/@mui/x-data-grid-premium/hooks/features/rowGrouping/gridRowGroupingSelector.js","../../node_modules/@mui/x-data-grid-premium/hooks/features/rowGrouping/gridRowGroupingUtils.js","../../node_modules/@mui/x-data-grid-premium/hooks/features/rowGrouping/useGridRowGrouping.js","../../node_modules/@mui/x-data-grid-premium/components/GridGroupingColumnFooterCell.js","../../node_modules/@mui/x-data-grid-premium/components/GridGroupingCriteriaCell.js","../../node_modules/@mui/x-data-grid-premium/components/GridGroupingColumnLeafCell.js","../../node_modules/@mui/x-data-grid-premium/hooks/features/rowGrouping/createGroupingColDef.js","../../node_modules/@mui/x-data-grid-premium/hooks/features/rowGrouping/useGridRowGroupingPreProcessors.js","../../node_modules/@mui/x-data-grid-premium/hooks/features/export/serializer/excelSerializer.js","../../node_modules/@mui/x-data-grid-premium/components/GridExcelExportMenuItem.js","../../node_modules/@mui/x-data-grid-premium/hooks/features/export/useGridExcelExport.js","../../node_modules/@mui/x-data-grid-premium/hooks/features/cellSelection/gridCellSelectionSelector.js","../../node_modules/@mui/x-data-grid-premium/hooks/features/cellSelection/useGridCellSelection.js","../../node_modules/@mui/x-data-grid-premium/hooks/features/clipboard/useGridClipboardImport.js","../../node_modules/@mui/x-data-grid-premium/DataGridPremium/useDataGridPremiumComponent.js","../../node_modules/@mui/x-data-grid-premium/hooks/features/aggregation/gridAggregationFunctions.js","../../node_modules/@mui/x-data-grid-premium/components/GridColumnMenuRowGroupItem.js","../../node_modules/@mui/x-data-grid-premium/components/GridColumnMenuRowUngroupItem.js","../../node_modules/@mui/x-data-grid-premium/components/GridPremiumColumnMenu.js","../../node_modules/@mui/x-data-grid-premium/components/GridColumnMenuAggregationItem.js","../../node_modules/@mui/x-data-grid-premium/material/icons.js","../../node_modules/@mui/x-data-grid-premium/material/index.js","../../node_modules/@mui/x-data-grid-premium/constants/dataGridPremiumDefaultSlotsComponents.js","../../node_modules/@mui/x-data-grid-premium/DataGridPremium/useDataGridPremiumProps.js","../../node_modules/@mui/x-data-grid-premium/DataGridPremium/DataGridPremium.js","../../node_modules/@mui/x-data-grid-premium/utils/releaseInfo.js","../../node_modules/@mui/x-data-grid-premium/hooks/utils/useGridApiContext.js","../../node_modules/@mui/x-data-grid/hooks/utils/useGridApiRef.js","../../node_modules/@mui/x-data-grid-premium/hooks/utils/useGridApiRef.js","../../node_modules/@mui/x-data-grid-premium/hooks/utils/useGridRootProps.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getAlertUtilityClass(slot) {\n  return generateUtilityClass('MuiAlert', slot);\n}\nconst alertClasses = generateUtilityClasses('MuiAlert', ['root', 'action', 'icon', 'message', 'filled', 'colorSuccess', 'colorInfo', 'colorWarning', 'colorError', 'filledSuccess', 'filledInfo', 'filledWarning', 'filledError', 'outlined', 'outlinedSuccess', 'outlinedInfo', 'outlinedWarning', 'outlinedError', 'standard', 'standardSuccess', 'standardInfo', 'standardWarning', 'standardError']);\nexport default alertClasses;","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z\"\n}), 'SuccessOutlined');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z\"\n}), 'ReportProblemOutlined');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'ErrorOutline');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z\"\n}), 'InfoOutlined');","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"action\", \"children\", \"className\", \"closeText\", \"color\", \"components\", \"componentsProps\", \"icon\", \"iconMapping\", \"onClose\", \"role\", \"severity\", \"slotProps\", \"slots\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { darken, lighten } from '@mui/system/colorManipulator';\nimport { styled, createUseThemeProps } from '../zero-styled';\nimport useSlot from '../utils/useSlot';\nimport capitalize from '../utils/capitalize';\nimport Paper from '../Paper';\nimport alertClasses, { getAlertUtilityClass } from './alertClasses';\nimport IconButton from '../IconButton';\nimport SuccessOutlinedIcon from '../internal/svg-icons/SuccessOutlined';\nimport ReportProblemOutlinedIcon from '../internal/svg-icons/ReportProblemOutlined';\nimport ErrorOutlineIcon from '../internal/svg-icons/ErrorOutline';\nimport InfoOutlinedIcon from '../internal/svg-icons/InfoOutlined';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useThemeProps = createUseThemeProps('MuiAlert');\nconst useUtilityClasses = ownerState => {\n  const {\n    variant,\n    color,\n    severity,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', `color${capitalize(color || severity)}`, `${variant}${capitalize(color || severity)}`, `${variant}`],\n    icon: ['icon'],\n    message: ['message'],\n    action: ['action']\n  };\n  return composeClasses(slots, getAlertUtilityClass, classes);\n};\nconst AlertRoot = styled(Paper, {\n  name: 'MuiAlert',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color || ownerState.severity)}`]];\n  }\n})(({\n  theme\n}) => {\n  const getColor = theme.palette.mode === 'light' ? darken : lighten;\n  const getBackgroundColor = theme.palette.mode === 'light' ? lighten : darken;\n  return _extends({}, theme.typography.body2, {\n    backgroundColor: 'transparent',\n    display: 'flex',\n    padding: '6px 16px',\n    variants: [...Object.entries(theme.palette).filter(([, value]) => value.main && value.light).map(([color]) => ({\n      props: {\n        colorSeverity: color,\n        variant: 'standard'\n      },\n      style: {\n        color: theme.vars ? theme.vars.palette.Alert[`${color}Color`] : getColor(theme.palette[color].light, 0.6),\n        backgroundColor: theme.vars ? theme.vars.palette.Alert[`${color}StandardBg`] : getBackgroundColor(theme.palette[color].light, 0.9),\n        [`& .${alertClasses.icon}`]: theme.vars ? {\n          color: theme.vars.palette.Alert[`${color}IconColor`]\n        } : {\n          color: theme.palette[color].main\n        }\n      }\n    })), ...Object.entries(theme.palette).filter(([, value]) => value.main && value.light).map(([color]) => ({\n      props: {\n        colorSeverity: color,\n        variant: 'outlined'\n      },\n      style: {\n        color: theme.vars ? theme.vars.palette.Alert[`${color}Color`] : getColor(theme.palette[color].light, 0.6),\n        border: `1px solid ${(theme.vars || theme).palette[color].light}`,\n        [`& .${alertClasses.icon}`]: theme.vars ? {\n          color: theme.vars.palette.Alert[`${color}IconColor`]\n        } : {\n          color: theme.palette[color].main\n        }\n      }\n    })), ...Object.entries(theme.palette).filter(([, value]) => value.main && value.dark).map(([color]) => ({\n      props: {\n        colorSeverity: color,\n        variant: 'filled'\n      },\n      style: _extends({\n        fontWeight: theme.typography.fontWeightMedium\n      }, theme.vars ? {\n        color: theme.vars.palette.Alert[`${color}FilledColor`],\n        backgroundColor: theme.vars.palette.Alert[`${color}FilledBg`]\n      } : {\n        backgroundColor: theme.palette.mode === 'dark' ? theme.palette[color].dark : theme.palette[color].main,\n        color: theme.palette.getContrastText(theme.palette[color].main)\n      })\n    }))]\n  });\n});\nconst AlertIcon = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Icon',\n  overridesResolver: (props, styles) => styles.icon\n})({\n  marginRight: 12,\n  padding: '7px 0',\n  display: 'flex',\n  fontSize: 22,\n  opacity: 0.9\n});\nconst AlertMessage = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Message',\n  overridesResolver: (props, styles) => styles.message\n})({\n  padding: '8px 0',\n  minWidth: 0,\n  overflow: 'auto'\n});\nconst AlertAction = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Action',\n  overridesResolver: (props, styles) => styles.action\n})({\n  display: 'flex',\n  alignItems: 'flex-start',\n  padding: '4px 0 0 16px',\n  marginLeft: 'auto',\n  marginRight: -8\n});\nconst defaultIconMapping = {\n  success: /*#__PURE__*/_jsx(SuccessOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  warning: /*#__PURE__*/_jsx(ReportProblemOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  error: /*#__PURE__*/_jsx(ErrorOutlineIcon, {\n    fontSize: \"inherit\"\n  }),\n  info: /*#__PURE__*/_jsx(InfoOutlinedIcon, {\n    fontSize: \"inherit\"\n  })\n};\nconst Alert = /*#__PURE__*/React.forwardRef(function Alert(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAlert'\n  });\n  const {\n      action,\n      children,\n      className,\n      closeText = 'Close',\n      color,\n      components = {},\n      componentsProps = {},\n      icon,\n      iconMapping = defaultIconMapping,\n      onClose,\n      role = 'alert',\n      severity = 'success',\n      slotProps = {},\n      slots = {},\n      variant = 'standard'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    color,\n    severity,\n    variant,\n    colorSeverity: color || severity\n  });\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = {\n    slots: _extends({\n      closeButton: components.CloseButton,\n      closeIcon: components.CloseIcon\n    }, slots),\n    slotProps: _extends({}, componentsProps, slotProps)\n  };\n  const [CloseButtonSlot, closeButtonProps] = useSlot('closeButton', {\n    elementType: IconButton,\n    externalForwardedProps,\n    ownerState\n  });\n  const [CloseIconSlot, closeIconProps] = useSlot('closeIcon', {\n    elementType: CloseIcon,\n    externalForwardedProps,\n    ownerState\n  });\n  return /*#__PURE__*/_jsxs(AlertRoot, _extends({\n    role: role,\n    elevation: 0,\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other, {\n    children: [icon !== false ? /*#__PURE__*/_jsx(AlertIcon, {\n      ownerState: ownerState,\n      className: classes.icon,\n      children: icon || iconMapping[severity] || defaultIconMapping[severity]\n    }) : null, /*#__PURE__*/_jsx(AlertMessage, {\n      ownerState: ownerState,\n      className: classes.message,\n      children: children\n    }), action != null ? /*#__PURE__*/_jsx(AlertAction, {\n      ownerState: ownerState,\n      className: classes.action,\n      children: action\n    }) : null, action == null && onClose ? /*#__PURE__*/_jsx(AlertAction, {\n      ownerState: ownerState,\n      className: classes.action,\n      children: /*#__PURE__*/_jsx(CloseButtonSlot, _extends({\n        size: \"small\",\n        \"aria-label\": closeText,\n        title: closeText,\n        color: \"inherit\",\n        onClick: onClose\n      }, closeButtonProps, {\n        children: /*#__PURE__*/_jsx(CloseIconSlot, _extends({\n          fontSize: \"small\"\n        }, closeIconProps))\n      }))\n    }) : null]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Alert.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The action to display. It renders after the message, at the end of the alert.\n   */\n  action: PropTypes.node,\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Override the default label for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The color of the component. Unless provided, the value is taken from the `severity` prop.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The components used for each slot inside.\n   *\n   * @deprecated use the `slots` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n   *\n   * @default {}\n   */\n  components: PropTypes.shape({\n    CloseButton: PropTypes.elementType,\n    CloseIcon: PropTypes.elementType\n  }),\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n   *\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    closeButton: PropTypes.object,\n    closeIcon: PropTypes.object\n  }),\n  /**\n   * Override the icon displayed before the children.\n   * Unless provided, the icon is mapped to the value of the `severity` prop.\n   * Set to `false` to remove the `icon`.\n   */\n  icon: PropTypes.node,\n  /**\n   * The component maps the `severity` prop to a range of different icons,\n   * for instance success to `<SuccessOutlined>`.\n   * If you wish to change this mapping, you can provide your own.\n   * Alternatively, you can use the `icon` prop to override the icon displayed.\n   */\n  iconMapping: PropTypes.shape({\n    error: PropTypes.node,\n    info: PropTypes.node,\n    success: PropTypes.node,\n    warning: PropTypes.node\n  }),\n  /**\n   * Callback fired when the component requests to be closed.\n   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n  /**\n   * The ARIA role attribute of the element.\n   * @default 'alert'\n   */\n  role: PropTypes.string,\n  /**\n   * The severity of the alert. This defines the color and icon used.\n   * @default 'success'\n   */\n  severity: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    closeButton: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    closeIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    closeButton: PropTypes.elementType,\n    closeIcon: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['filled', 'outlined', 'standard']), PropTypes.string])\n} : void 0;\nexport default Alert;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"elementType\", \"ownerState\", \"externalForwardedProps\", \"getSlotOwnerState\", \"internalForwardedProps\"],\n  _excluded2 = [\"component\", \"slots\", \"slotProps\"],\n  _excluded3 = [\"component\"];\nimport useForkRef from '@mui/utils/useForkRef';\nimport { appendOwnerState, resolveComponentProps, mergeSlotProps } from '@mui/base/utils';\n/**\n * An internal function to create a Material UI slot.\n *\n * This is an advanced version of Base UI `useSlotProps` because Material UI allows leaf component to be customized via `component` prop\n * while Base UI does not need to support leaf component customization.\n *\n * @param {string} name: name of the slot\n * @param {object} parameters\n * @returns {[Slot, slotProps]} The slot's React component and the slot's props\n *\n * Note: the returned slot's props\n * - will never contain `component` prop.\n * - might contain `as` prop.\n */\nexport default function useSlot(\n/**\n * The slot's name. All Material UI components should have `root` slot.\n *\n * If the name is `root`, the logic behaves differently from other slots,\n * e.g. the `externalForwardedProps` are spread to `root` slot but not other slots.\n */\nname, parameters) {\n  const {\n      className,\n      elementType: initialElementType,\n      ownerState,\n      externalForwardedProps,\n      getSlotOwnerState,\n      internalForwardedProps\n    } = parameters,\n    useSlotPropsParams = _objectWithoutPropertiesLoose(parameters, _excluded);\n  const {\n      component: rootComponent,\n      slots = {\n        [name]: undefined\n      },\n      slotProps = {\n        [name]: undefined\n      }\n    } = externalForwardedProps,\n    other = _objectWithoutPropertiesLoose(externalForwardedProps, _excluded2);\n  const elementType = slots[name] || initialElementType;\n\n  // `slotProps[name]` can be a callback that receives the component's ownerState.\n  // `resolvedComponentsProps` is always a plain object.\n  const resolvedComponentsProps = resolveComponentProps(slotProps[name], ownerState);\n  const _mergeSlotProps = mergeSlotProps(_extends({\n      className\n    }, useSlotPropsParams, {\n      externalForwardedProps: name === 'root' ? other : undefined,\n      externalSlotProps: resolvedComponentsProps\n    })),\n    {\n      props: {\n        component: slotComponent\n      },\n      internalRef\n    } = _mergeSlotProps,\n    mergedProps = _objectWithoutPropertiesLoose(_mergeSlotProps.props, _excluded3);\n  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, parameters.ref);\n  const slotOwnerState = getSlotOwnerState ? getSlotOwnerState(mergedProps) : {};\n  const finalOwnerState = _extends({}, ownerState, slotOwnerState);\n  const LeafComponent = name === 'root' ? slotComponent || rootComponent : slotComponent;\n  const props = appendOwnerState(elementType, _extends({}, name === 'root' && !rootComponent && !slots[name] && internalForwardedProps, name !== 'root' && !slots[name] && internalForwardedProps, mergedProps, LeafComponent && {\n    as: LeafComponent\n  }, {\n    ref\n  }), finalOwnerState);\n  Object.keys(slotOwnerState).forEach(propName => {\n    delete props[propName];\n  });\n  return [elementType, props];\n}","import { createSelector } from '@mui/x-data-grid-pro/internals';\nexport const gridAggregationStateSelector = state => state.aggregation;\n\n/**\n * Get the aggregation model, containing the aggregation function of each column.\n * If a column is not in the model, it is not aggregated.\n * @category Aggregation\n */\nexport const gridAggregationModelSelector = createSelector(gridAggregationStateSelector, aggregationState => aggregationState.model);\n\n/**\n * Get the aggregation results as a lookup.\n * @category Aggregation\n */\nexport const gridAggregationLookupSelector = createSelector(gridAggregationStateSelector, aggregationState => aggregationState.lookup);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { unstable_capitalize as capitalize } from '@mui/utils';\nimport { GRID_ID_AUTOGENERATED } from '@mui/x-data-grid/internals';\nimport { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid-pro';\nimport { addPinnedRow, isDeepEqual, insertNodeInTree, removeNodeFromTree } from '@mui/x-data-grid-pro/internals';\nexport const GRID_AGGREGATION_ROOT_FOOTER_ROW_ID = 'auto-generated-group-footer-root';\nexport const getAggregationFooterRowIdFromGroupId = groupId => {\n  if (groupId == null) {\n    return GRID_AGGREGATION_ROOT_FOOTER_ROW_ID;\n  }\n  return `auto-generated-group-footer-${groupId}`;\n};\nexport const canColumnHaveAggregationFunction = ({\n  colDef,\n  aggregationFunctionName,\n  aggregationFunction\n}) => {\n  if (!colDef || !colDef.aggregable) {\n    return false;\n  }\n  if (!aggregationFunction) {\n    return false;\n  }\n  if (colDef.availableAggregationFunctions != null) {\n    return colDef.availableAggregationFunctions.includes(aggregationFunctionName);\n  }\n  if (!aggregationFunction.columnTypes) {\n    return true;\n  }\n  return aggregationFunction.columnTypes.includes(colDef.type);\n};\nexport const getAvailableAggregationFunctions = ({\n  aggregationFunctions,\n  colDef\n}) => Object.keys(aggregationFunctions).filter(aggregationFunctionName => canColumnHaveAggregationFunction({\n  colDef,\n  aggregationFunctionName,\n  aggregationFunction: aggregationFunctions[aggregationFunctionName]\n}));\nexport const mergeStateWithAggregationModel = aggregationModel => state => _extends({}, state, {\n  aggregation: _extends({}, state.aggregation, {\n    model: aggregationModel\n  })\n});\nexport const getAggregationRules = ({\n  columnsLookup,\n  aggregationModel,\n  aggregationFunctions\n}) => {\n  const aggregationRules = {};\n  Object.entries(aggregationModel).forEach(([field, columnItem]) => {\n    if (columnsLookup[field] && canColumnHaveAggregationFunction({\n      colDef: columnsLookup[field],\n      aggregationFunctionName: columnItem,\n      aggregationFunction: aggregationFunctions[columnItem]\n    })) {\n      aggregationRules[field] = {\n        aggregationFunctionName: columnItem,\n        aggregationFunction: aggregationFunctions[columnItem]\n      };\n    }\n  });\n  return aggregationRules;\n};\n/**\n * Add a footer for each group that has at least one column with an aggregated value.\n */\nexport const addFooterRows = ({\n  groupingParams,\n  apiRef,\n  getAggregationPosition,\n  hasAggregationRule\n}) => {\n  let newGroupingParams = _extends({}, groupingParams, {\n    tree: _extends({}, groupingParams.tree),\n    treeDepths: _extends({}, groupingParams.treeDepths)\n  });\n  const updateChildGroupFooter = groupNode => {\n    const shouldHaveFooter = hasAggregationRule && getAggregationPosition(groupNode) === 'footer';\n    if (shouldHaveFooter) {\n      const footerId = getAggregationFooterRowIdFromGroupId(groupNode.id);\n      if (groupNode.footerId !== footerId) {\n        if (groupNode.footerId != null) {\n          removeNodeFromTree({\n            node: newGroupingParams.tree[groupNode.footerId],\n            tree: newGroupingParams.tree,\n            treeDepths: newGroupingParams.treeDepths\n          });\n        }\n        const footerNode = {\n          id: footerId,\n          parent: groupNode.id,\n          depth: groupNode ? groupNode.depth + 1 : 0,\n          type: 'footer'\n        };\n        insertNodeInTree(footerNode, newGroupingParams.tree, newGroupingParams.treeDepths, null);\n      }\n    } else if (groupNode.footerId != null) {\n      removeNodeFromTree({\n        node: newGroupingParams.tree[groupNode.footerId],\n        tree: newGroupingParams.tree,\n        treeDepths: newGroupingParams.treeDepths\n      });\n      newGroupingParams.tree[groupNode.id] = _extends({}, newGroupingParams.tree[groupNode.id], {\n        footerId: null\n      });\n    }\n  };\n  const updateRootGroupFooter = groupNode => {\n    const shouldHaveFooter = hasAggregationRule && getAggregationPosition(groupNode) === 'footer';\n    if (shouldHaveFooter) {\n      const rowId = getAggregationFooterRowIdFromGroupId(null);\n      newGroupingParams = addPinnedRow({\n        groupingParams: newGroupingParams,\n        rowModel: {\n          [GRID_ID_AUTOGENERATED]: rowId\n        },\n        rowId,\n        position: 'bottom',\n        apiRef,\n        isAutoGenerated: true\n      });\n    }\n  };\n  const updateGroupFooter = groupNode => {\n    if (groupNode.id === GRID_ROOT_GROUP_ID) {\n      updateRootGroupFooter(groupNode);\n    } else {\n      updateChildGroupFooter(groupNode);\n    }\n    groupNode.children.forEach(childId => {\n      const childNode = newGroupingParams.tree[childId];\n      if (childNode.type === 'group') {\n        updateGroupFooter(childNode);\n      }\n    });\n  };\n  updateGroupFooter(newGroupingParams.tree[GRID_ROOT_GROUP_ID]);\n  return newGroupingParams;\n};\n\n/**\n * Compares two sets of aggregation rules to determine if they are equal or not.\n */\nexport const areAggregationRulesEqual = (previousValue, newValue) => {\n  const previousFields = Object.keys(previousValue != null ? previousValue : {});\n  const newFields = Object.keys(newValue);\n  if (!isDeepEqual(previousFields, newFields)) {\n    return false;\n  }\n  return newFields.every(field => {\n    const previousRule = previousValue == null ? void 0 : previousValue[field];\n    const newRule = newValue[field];\n    if ((previousRule == null ? void 0 : previousRule.aggregationFunction) !== (newRule == null ? void 0 : newRule.aggregationFunction)) {\n      return false;\n    }\n    if ((previousRule == null ? void 0 : previousRule.aggregationFunctionName) !== (newRule == null ? void 0 : newRule.aggregationFunctionName)) {\n      return false;\n    }\n    return true;\n  });\n};\nexport const getAggregationFunctionLabel = ({\n  apiRef,\n  aggregationRule\n}) => {\n  if (aggregationRule.aggregationFunction.label != null) {\n    return aggregationRule.aggregationFunction.label;\n  }\n  try {\n    return apiRef.current.getLocaleText(`aggregationFunctionLabel${capitalize(aggregationRule.aggregationFunctionName)}`);\n  } catch (e) {\n    return aggregationRule.aggregationFunctionName;\n  }\n};","import { gridColumnLookupSelector, gridFilteredRowsLookupSelector, gridRowTreeSelector, GRID_ROOT_GROUP_ID } from '@mui/x-data-grid-pro';\nimport { getAggregationRules } from './gridAggregationUtils';\nimport { gridAggregationModelSelector } from './gridAggregationSelectors';\nconst getAggregationCellValue = ({\n  apiRef,\n  groupId,\n  field,\n  aggregationFunction,\n  aggregationRowsScope\n}) => {\n  const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n  const rowIds = apiRef.current.getRowGroupChildren({\n    groupId\n  });\n  const values = [];\n  rowIds.forEach(rowId => {\n    if (aggregationRowsScope === 'filtered' && filteredRowsLookup[rowId] === false) {\n      return;\n    }\n\n    // If the row is a group, we want to aggregate based on its children\n    // For instance in the following tree, we want the aggregated values of A to be based on A.A, A.B.A and A.B.B but not A.B\n    // A\n    //   A.A\n    //   A.B\n    //     A.B.A\n    //     A.B.B\n    const rowNode = apiRef.current.getRowNode(rowId);\n    if (rowNode.type === 'group') {\n      return;\n    }\n    if (typeof aggregationFunction.getCellValue === 'function') {\n      const row = apiRef.current.getRow(rowId);\n      values.push(aggregationFunction.getCellValue({\n        row\n      }));\n    } else {\n      values.push(apiRef.current.getCellValue(rowId, field));\n    }\n  });\n  return aggregationFunction.apply({\n    values,\n    groupId,\n    field // Added per user request in https://github.com/mui/mui-x/issues/6995#issuecomment-1327423455\n  });\n};\nconst getGroupAggregatedValue = ({\n  groupId,\n  apiRef,\n  aggregationRowsScope,\n  aggregatedFields,\n  aggregationRules,\n  position\n}) => {\n  const groupAggregationLookup = {};\n  for (let j = 0; j < aggregatedFields.length; j += 1) {\n    const aggregatedField = aggregatedFields[j];\n    const columnAggregationRules = aggregationRules[aggregatedField];\n    groupAggregationLookup[aggregatedField] = {\n      position,\n      value: getAggregationCellValue({\n        apiRef,\n        groupId,\n        field: aggregatedField,\n        aggregationFunction: columnAggregationRules.aggregationFunction,\n        aggregationRowsScope\n      })\n    };\n  }\n  return groupAggregationLookup;\n};\nexport const createAggregationLookup = ({\n  apiRef,\n  aggregationFunctions,\n  aggregationRowsScope,\n  getAggregationPosition\n}) => {\n  const aggregationRules = getAggregationRules({\n    columnsLookup: gridColumnLookupSelector(apiRef),\n    aggregationModel: gridAggregationModelSelector(apiRef),\n    aggregationFunctions\n  });\n  const aggregatedFields = Object.keys(aggregationRules);\n  if (aggregatedFields.length === 0) {\n    return {};\n  }\n  const aggregationLookup = {};\n  const rowTree = gridRowTreeSelector(apiRef);\n  const createGroupAggregationLookup = groupNode => {\n    for (let i = 0; i < groupNode.children.length; i += 1) {\n      const childId = groupNode.children[i];\n      const childNode = rowTree[childId];\n      if (childNode.type === 'group') {\n        createGroupAggregationLookup(childNode);\n      }\n    }\n    const hasAggregableChildren = groupNode.children.length;\n    if (hasAggregableChildren) {\n      const position = getAggregationPosition(groupNode);\n      if (position != null) {\n        aggregationLookup[groupNode.id] = getGroupAggregatedValue({\n          groupId: groupNode.id,\n          apiRef,\n          aggregatedFields,\n          aggregationRowsScope,\n          aggregationRules,\n          position\n        });\n      }\n    }\n  };\n  createGroupAggregationLookup(rowTree[GRID_ROOT_GROUP_ID]);\n  return aggregationLookup;\n};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridColumnLookupSelector, useGridApiEventHandler, useGridApiMethod } from '@mui/x-data-grid-pro';\nimport { gridAggregationModelSelector } from './gridAggregationSelectors';\nimport { getAggregationRules, mergeStateWithAggregationModel, areAggregationRulesEqual } from './gridAggregationUtils';\nimport { createAggregationLookup } from './createAggregationLookup';\nexport const aggregationStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$aggregationMod, _props$initialState;\n  apiRef.current.caches.aggregation = {\n    rulesOnLastColumnHydration: {},\n    rulesOnLastRowHydration: {}\n  };\n  return _extends({}, state, {\n    aggregation: {\n      model: (_ref = (_props$aggregationMod = props.aggregationModel) != null ? _props$aggregationMod : (_props$initialState = props.initialState) == null || (_props$initialState = _props$initialState.aggregation) == null ? void 0 : _props$initialState.model) != null ? _ref : {}\n    }\n  });\n};\nexport const useGridAggregation = (apiRef, props) => {\n  apiRef.current.registerControlState({\n    stateId: 'aggregation',\n    propModel: props.aggregationModel,\n    propOnChange: props.onAggregationModelChange,\n    stateSelector: gridAggregationModelSelector,\n    changeEvent: 'aggregationModelChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setAggregationModel = React.useCallback(model => {\n    const currentModel = gridAggregationModelSelector(apiRef);\n    if (currentModel !== model) {\n      apiRef.current.setState(mergeStateWithAggregationModel(model));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef]);\n  const applyAggregation = React.useCallback(() => {\n    const aggregationLookup = createAggregationLookup({\n      apiRef,\n      getAggregationPosition: props.getAggregationPosition,\n      aggregationFunctions: props.aggregationFunctions,\n      aggregationRowsScope: props.aggregationRowsScope\n    });\n    apiRef.current.setState(state => _extends({}, state, {\n      aggregation: _extends({}, state.aggregation, {\n        lookup: aggregationLookup\n      })\n    }));\n  }, [apiRef, props.getAggregationPosition, props.aggregationFunctions, props.aggregationRowsScope]);\n  const aggregationApi = {\n    setAggregationModel\n  };\n  useGridApiMethod(apiRef, aggregationApi, 'public');\n\n  /**\n   * EVENTS\n   */\n  const checkAggregationRulesDiff = React.useCallback(() => {\n    const {\n      rulesOnLastRowHydration,\n      rulesOnLastColumnHydration\n    } = apiRef.current.caches.aggregation;\n    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({\n      columnsLookup: gridColumnLookupSelector(apiRef),\n      aggregationModel: gridAggregationModelSelector(apiRef),\n      aggregationFunctions: props.aggregationFunctions\n    });\n\n    // Re-apply the row hydration to add / remove the aggregation footers\n    if (!areAggregationRulesEqual(rulesOnLastRowHydration, aggregationRules)) {\n      apiRef.current.requestPipeProcessorsApplication('hydrateRows');\n      applyAggregation();\n    }\n\n    // Re-apply the column hydration to wrap / unwrap the aggregated columns\n    if (!areAggregationRulesEqual(rulesOnLastColumnHydration, aggregationRules)) {\n      apiRef.current.caches.aggregation.rulesOnLastColumnHydration = aggregationRules;\n      apiRef.current.requestPipeProcessorsApplication('hydrateColumns');\n    }\n  }, [apiRef, applyAggregation, props.aggregationFunctions, props.disableAggregation]);\n  useGridApiEventHandler(apiRef, 'aggregationModelChange', checkAggregationRulesDiff);\n  useGridApiEventHandler(apiRef, 'columnsChange', checkAggregationRulesDiff);\n  useGridApiEventHandler(apiRef, 'filteredRowsSet', applyAggregation);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (props.aggregationModel !== undefined) {\n      apiRef.current.setAggregationModel(props.aggregationModel);\n    }\n  }, [apiRef, props.aggregationModel]);\n};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"formattedValue\", \"colDef\", \"cellMode\", \"row\", \"api\", \"id\", \"value\", \"rowNode\", \"field\", \"focusElementRef\", \"hasFocus\", \"tabIndex\", \"isEditable\"];\nimport * as React from 'react';\nimport { getDataGridUtilityClass } from '@mui/x-data-grid';\nimport { styled } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst GridFooterCellRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'FooterCell',\n  overridesResolver: (_, styles) => styles.footerCell\n})(({\n  theme\n}) => ({\n  fontWeight: theme.typography.fontWeightMedium,\n  color: (theme.vars || theme).palette.primary.dark\n}));\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['footerCell']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nfunction GridFooterCell(props) {\n  const {\n      formattedValue\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const rootProps = useGridRootProps();\n  const ownerState = rootProps;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(GridFooterCellRoot, _extends({\n    ownerState: ownerState,\n    className: classes.root\n  }, other, {\n    children: formattedValue\n  }));\n}\nexport { GridFooterCell };","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"renderHeader\"];\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { styled } from '@mui/material/styles';\nimport { getDataGridUtilityClass, gridClasses, GridColumnHeaderTitle } from '@mui/x-data-grid';\nimport { getAggregationFunctionLabel } from '../hooks/features/aggregation/gridAggregationUtils';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst GridAggregationHeaderRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'AggregationColumnHeader',\n  overridesResolver: (_, styles) => styles.aggregationColumnHeader\n})({\n  display: 'flex',\n  flexDirection: 'column',\n  [`&.${gridClasses['aggregationColumnHeader--alignRight']}`]: {\n    alignItems: 'flex-end'\n  },\n  [`&.${gridClasses['aggregationColumnHeader--alignCenter']}`]: {\n    alignItems: 'center'\n  }\n});\nconst GridAggregationFunctionLabel = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'AggregationColumnHeaderLabel',\n  overridesResolver: (_, styles) => styles.aggregationColumnHeaderLabel\n})(({\n  theme\n}) => {\n  return {\n    fontSize: theme.typography.caption.fontSize,\n    lineHeight: theme.typography.caption.fontSize,\n    position: 'absolute',\n    bottom: 4,\n    fontWeight: theme.typography.fontWeightMedium,\n    color: (theme.vars || theme).palette.primary.dark,\n    textTransform: 'uppercase'\n  };\n});\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    colDef\n  } = ownerState;\n  const slots = {\n    root: ['aggregationColumnHeader', colDef.headerAlign === 'left' && 'aggregationColumnHeader--alignLeft', colDef.headerAlign === 'center' && 'aggregationColumnHeader--alignCenter', colDef.headerAlign === 'right' && 'aggregationColumnHeader--alignRight'],\n    aggregationLabel: ['aggregationColumnHeaderLabel']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nfunction GridAggregationHeader(props) {\n  var _colDef$headerName;\n  const {\n      renderHeader\n    } = props,\n    params = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    colDef,\n    aggregation\n  } = params;\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const ownerState = _extends({}, rootProps, {\n    classes: rootProps.classes,\n    colDef\n  });\n  const classes = useUtilityClasses(ownerState);\n  if (!aggregation) {\n    return null;\n  }\n  const aggregationLabel = getAggregationFunctionLabel({\n    apiRef,\n    aggregationRule: aggregation.aggregationRule\n  });\n  return /*#__PURE__*/_jsxs(GridAggregationHeaderRoot, {\n    ownerState: ownerState,\n    className: classes.root,\n    children: [renderHeader ? renderHeader(params) : /*#__PURE__*/_jsx(GridColumnHeaderTitle, {\n      label: (_colDef$headerName = colDef.headerName) != null ? _colDef$headerName : colDef.field,\n      description: colDef.description,\n      columnWidth: colDef.computedWidth\n    }), /*#__PURE__*/_jsx(GridAggregationFunctionLabel, {\n      ownerState: ownerState,\n      className: classes.aggregationLabel,\n      children: aggregationLabel\n    })]\n  });\n}\nexport { GridAggregationHeader };","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"aggregationWrappedProperties\"];\nimport * as React from 'react';\nimport { isInternalFilter, tagInternalFilter } from '@mui/x-data-grid-pro/internals';\nimport { gridAggregationLookupSelector } from './gridAggregationSelectors';\nimport { GridFooterCell } from '../../../components/GridFooterCell';\nimport { GridAggregationHeader } from '../../../components/GridAggregationHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AGGREGATION_WRAPPABLE_PROPERTIES = ['valueGetter', 'valueFormatter', 'renderCell', 'renderHeader', 'filterOperators'];\nconst getAggregationValueWrappedValueGetter = ({\n  value: valueGetter,\n  getCellAggregationResult\n}) => {\n  const wrappedValueGetter = params => {\n    const cellAggregationResult = getCellAggregationResult(params.id, params.field);\n    if (cellAggregationResult != null) {\n      var _cellAggregationResul;\n      return (_cellAggregationResul = cellAggregationResult == null ? void 0 : cellAggregationResult.value) != null ? _cellAggregationResul : null;\n    }\n    if (valueGetter) {\n      return valueGetter(params);\n    }\n    return params.row[params.field];\n  };\n  return wrappedValueGetter;\n};\nconst getAggregationValueWrappedValueFormatter = ({\n  value: valueFormatter,\n  aggregationRule,\n  getCellAggregationResult\n}) => {\n  // If neither the inline aggregation function nor the footer aggregation function have a custom value formatter,\n  // Then we don't wrap the column value formatter\n  if (!aggregationRule.aggregationFunction.valueFormatter) {\n    return valueFormatter;\n  }\n  const wrappedValueFormatter = params => {\n    if (params.id != null) {\n      const cellAggregationResult = getCellAggregationResult(params.id, params.field);\n      if (cellAggregationResult != null) {\n        return aggregationRule.aggregationFunction.valueFormatter(params);\n      }\n    }\n    if (valueFormatter) {\n      return valueFormatter(params);\n    }\n    return params.value;\n  };\n  return wrappedValueFormatter;\n};\nconst getAggregationValueWrappedRenderCell = ({\n  value: renderCell,\n  aggregationRule,\n  getCellAggregationResult\n}) => {\n  const wrappedRenderCell = params => {\n    const cellAggregationResult = getCellAggregationResult(params.id, params.field);\n    if (cellAggregationResult != null) {\n      var _aggregationFunction$;\n      if (!renderCell) {\n        if (cellAggregationResult.position === 'footer') {\n          return /*#__PURE__*/_jsx(GridFooterCell, _extends({}, params));\n        }\n        return params.formattedValue;\n      }\n      const aggregationMeta = {\n        hasCellUnit: (_aggregationFunction$ = aggregationRule.aggregationFunction.hasCellUnit) != null ? _aggregationFunction$ : true,\n        aggregationFunctionName: aggregationRule.aggregationFunctionName\n      };\n      return renderCell(_extends({}, params, {\n        aggregation: aggregationMeta\n      }));\n    }\n    if (!renderCell) {\n      return params.formattedValue;\n    }\n    return renderCell(params);\n  };\n  return wrappedRenderCell;\n};\n\n/**\n * Skips the filtering for aggregated rows\n */\nconst getWrappedFilterOperators = ({\n  value: filterOperators,\n  apiRef,\n  getCellAggregationResult\n}) => filterOperators.map(operator => {\n  const baseGetApplyFilterFn = operator.getApplyFilterFn;\n  const baseGetApplyFilterFnV7 = operator.getApplyFilterFnV7;\n  let getApplyFilterFn = (filterItem, colDef) => {\n    const filterFn = baseGetApplyFilterFn(filterItem, colDef);\n    if (!filterFn) {\n      return null;\n    }\n    return params => {\n      if (getCellAggregationResult(params.id, params.field) != null) {\n        return true;\n      }\n      return filterFn(params);\n    };\n  };\n  if (isInternalFilter(baseGetApplyFilterFn)) {\n    getApplyFilterFn = tagInternalFilter(getApplyFilterFn);\n  }\n  let getApplyFilterFnV7;\n  if (baseGetApplyFilterFnV7 !== undefined) {\n    getApplyFilterFnV7 = tagInternalFilter((filterItem, colDef) => {\n      const filterFn = baseGetApplyFilterFnV7(filterItem, colDef);\n      if (!filterFn) {\n        return null;\n      }\n      return (value, row, column, api) => {\n        if (getCellAggregationResult(apiRef.current.getRowId(row), column.field) != null) {\n          return true;\n        }\n        return filterFn(value, row, column, api);\n      };\n    });\n    if (isInternalFilter(baseGetApplyFilterFnV7)) {\n      getApplyFilterFnV7 = tagInternalFilter(getApplyFilterFnV7);\n    }\n  }\n  return _extends({}, operator, {\n    getApplyFilterFn,\n    getApplyFilterFnV7\n  });\n});\n\n/**\n * Add the aggregation method around the header name\n */\nconst getWrappedRenderHeader = ({\n  value: renderHeader,\n  aggregationRule\n}) => {\n  const wrappedRenderHeader = params => {\n    return /*#__PURE__*/_jsx(GridAggregationHeader, _extends({}, params, {\n      aggregation: {\n        aggregationRule\n      },\n      renderHeader: renderHeader\n    }));\n  };\n  return wrappedRenderHeader;\n};\n\n/**\n * Add a wrapper around each wrappable property of the column to customize the behavior of the aggregation cells.\n */\nexport const wrapColumnWithAggregationValue = ({\n  column,\n  apiRef,\n  aggregationRule\n}) => {\n  const getCellAggregationResult = (id, field) => {\n    var _rowNode$parent, _gridAggregationLooku;\n    let cellAggregationPosition = null;\n    const rowNode = apiRef.current.getRowNode(id);\n    if (rowNode.type === 'group') {\n      cellAggregationPosition = 'inline';\n    } else if (id.toString().startsWith('auto-generated-group-footer-')) {\n      cellAggregationPosition = 'footer';\n    }\n    if (cellAggregationPosition == null) {\n      return null;\n    }\n\n    // TODO: Add custom root id\n    const groupId = cellAggregationPosition === 'inline' ? id : (_rowNode$parent = rowNode.parent) != null ? _rowNode$parent : '';\n    const aggregationResult = (_gridAggregationLooku = gridAggregationLookupSelector(apiRef)) == null || (_gridAggregationLooku = _gridAggregationLooku[groupId]) == null ? void 0 : _gridAggregationLooku[field];\n    if (!aggregationResult || aggregationResult.position !== cellAggregationPosition) {\n      return null;\n    }\n    return aggregationResult;\n  };\n  let didWrapSomeProperty = false;\n  const wrappedColumn = _extends({}, column, {\n    aggregationWrappedProperties: []\n  });\n  const wrapColumnProperty = (property, wrapper) => {\n    const originalValue = column[property];\n    const wrappedProperty = wrapper({\n      apiRef,\n      value: originalValue,\n      colDef: column,\n      aggregationRule,\n      getCellAggregationResult\n    });\n    if (wrappedProperty !== originalValue) {\n      didWrapSomeProperty = true;\n      wrappedColumn[property] = wrappedProperty;\n      wrappedColumn.aggregationWrappedProperties.push({\n        name: property,\n        originalValue,\n        wrappedValue: wrappedProperty\n      });\n    }\n  };\n  wrapColumnProperty('valueGetter', getAggregationValueWrappedValueGetter);\n  wrapColumnProperty('valueFormatter', getAggregationValueWrappedValueFormatter);\n  wrapColumnProperty('renderCell', getAggregationValueWrappedRenderCell);\n  wrapColumnProperty('renderHeader', getWrappedRenderHeader);\n  wrapColumnProperty('filterOperators', getWrappedFilterOperators);\n  if (!didWrapSomeProperty) {\n    return column;\n  }\n  return wrappedColumn;\n};\n\n/**\n * Remove the aggregation wrappers around the wrappable properties of the column.\n */\nexport const unwrapColumnFromAggregation = ({\n  column\n}) => {\n  if (!column.aggregationWrappedProperties) {\n    return column;\n  }\n  const _ref = column,\n    {\n      aggregationWrappedProperties\n    } = _ref,\n    unwrappedColumn = _objectWithoutPropertiesLoose(_ref, _excluded);\n  aggregationWrappedProperties.forEach(({\n    name,\n    originalValue,\n    wrappedValue\n  }) => {\n    // The value changed since we wrapped it\n    if (wrappedValue !== unwrappedColumn[name]) {\n      return;\n    }\n    unwrappedColumn[name] = originalValue;\n  });\n  return unwrappedColumn;\n};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridColumnLookupSelector } from '@mui/x-data-grid-pro';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid-pro/internals';\nimport { getAvailableAggregationFunctions, addFooterRows, getAggregationRules, mergeStateWithAggregationModel } from './gridAggregationUtils';\nimport { wrapColumnWithAggregationValue, unwrapColumnFromAggregation } from './wrapColumnWithAggregation';\nimport { gridAggregationModelSelector } from './gridAggregationSelectors';\nexport const useGridAggregationPreProcessors = (apiRef, props) => {\n  // apiRef.current.caches.aggregation.rulesOnLastColumnHydration is not used because by the time\n  // that the pre-processor is called it will already have been updated with the current rules.\n  const rulesOnLastColumnHydration = React.useRef({});\n  const updateAggregatedColumns = React.useCallback(columnsState => {\n    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({\n      columnsLookup: columnsState.lookup,\n      aggregationModel: gridAggregationModelSelector(apiRef),\n      aggregationFunctions: props.aggregationFunctions\n    });\n    columnsState.orderedFields.forEach(field => {\n      const shouldHaveAggregationValue = !!aggregationRules[field];\n      const haveAggregationColumnValue = !!rulesOnLastColumnHydration.current[field];\n      let column = columnsState.lookup[field];\n      if (haveAggregationColumnValue) {\n        column = unwrapColumnFromAggregation({\n          column\n        });\n      }\n      if (shouldHaveAggregationValue) {\n        column = wrapColumnWithAggregationValue({\n          column,\n          aggregationRule: aggregationRules[field],\n          apiRef\n        });\n      }\n      columnsState.lookup[field] = column;\n    });\n    rulesOnLastColumnHydration.current = aggregationRules;\n    return columnsState;\n  }, [apiRef, props.aggregationFunctions, props.disableAggregation]);\n  const addGroupFooterRows = React.useCallback(value => {\n    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({\n      columnsLookup: gridColumnLookupSelector(apiRef),\n      aggregationModel: gridAggregationModelSelector(apiRef),\n      aggregationFunctions: props.aggregationFunctions\n    });\n    const hasAggregationRule = Object.keys(aggregationRules).length > 0;\n\n    // If we did not have any aggregation footer before, and we still don't have any,\n    // Then we can skip this step\n    if (Object.keys(apiRef.current.caches.aggregation.rulesOnLastRowHydration).length === 0 && !hasAggregationRule) {\n      return value;\n    }\n    apiRef.current.caches.aggregation.rulesOnLastRowHydration = aggregationRules;\n    return addFooterRows({\n      apiRef,\n      groupingParams: value,\n      getAggregationPosition: props.getAggregationPosition,\n      hasAggregationRule\n    });\n  }, [apiRef, props.disableAggregation, props.getAggregationPosition, props.aggregationFunctions]);\n  const addColumnMenuButtons = React.useCallback((columnMenuItems, colDef) => {\n    if (props.disableAggregation) {\n      return columnMenuItems;\n    }\n    const availableAggregationFunctions = getAvailableAggregationFunctions({\n      aggregationFunctions: props.aggregationFunctions,\n      colDef\n    });\n    if (availableAggregationFunctions.length === 0) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuAggregationItem'];\n  }, [props.aggregationFunctions, props.disableAggregation]);\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    if (props.disableAggregation) {\n      return prevState;\n    }\n    const aggregationModelToExport = gridAggregationModelSelector(apiRef);\n    if (Object.values(aggregationModelToExport).length === 0) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      aggregation: {\n        model: aggregationModelToExport\n      }\n    });\n  }, [apiRef, props.disableAggregation]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n    if (props.disableAggregation) {\n      return params;\n    }\n    const aggregationModel = (_context$stateToResto = context.stateToRestore.aggregation) == null ? void 0 : _context$stateToResto.model;\n    if (aggregationModel != null) {\n      apiRef.current.setState(mergeStateWithAggregationModel(aggregationModel));\n    }\n    return params;\n  }, [apiRef, props.disableAggregation]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', updateAggregatedColumns);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateRows', addGroupFooterRows);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuButtons);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n};","import { gridColumnLookupSelector } from '@mui/x-data-grid-pro';\nimport { createSelector, createSelectorMemoized } from '@mui/x-data-grid/internals';\nconst gridRowGroupingStateSelector = state => state.rowGrouping;\nexport const gridRowGroupingModelSelector = createSelector(gridRowGroupingStateSelector, rowGrouping => rowGrouping.model);\nexport const gridRowGroupingSanitizedModelSelector = createSelectorMemoized(gridRowGroupingModelSelector, gridColumnLookupSelector, (model, columnsLookup) => model.filter(field => !!columnsLookup[field] && columnsLookup[field].groupable));","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { passFilterLogic } from '@mui/x-data-grid-pro/internals';\nimport { gridRowGroupingSanitizedModelSelector } from './gridRowGroupingSelector';\nexport const GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD = '__row_group_by_columns_group__';\nexport const ROW_GROUPING_STRATEGY = 'grouping-columns';\nexport const getRowGroupingFieldFromGroupingCriteria = groupingCriteria => {\n  if (groupingCriteria === null) {\n    return GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD;\n  }\n  return `__row_group_by_columns_group_${groupingCriteria}__`;\n};\nexport const getRowGroupingCriteriaFromGroupingField = groupingColDefField => {\n  const match = groupingColDefField.match(/^__row_group_by_columns_group_(.*)__$/);\n  if (!match) {\n    return null;\n  }\n  return match[1];\n};\nexport const isGroupingColumn = field => field === GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD || getRowGroupingCriteriaFromGroupingField(field) !== null;\n/**\n * When filtering a group, we only want to filter according to the items related to this grouping column.\n */\nconst shouldApplyFilterItemOnGroup = (columnField, node) => {\n  if (columnField === GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD) {\n    return true;\n  }\n  const groupingCriteriaField = getRowGroupingCriteriaFromGroupingField(columnField);\n  return groupingCriteriaField === node.groupingField;\n};\n\n/**\n * A leaf is visible if it passed the filter\n * A group is visible if all the following criteria are met:\n * - One of its children is passing the filter\n * - It is passing the filter\n */\nexport const filterRowTreeFromGroupingColumns = params => {\n  const {\n    apiRef,\n    rowTree,\n    isRowMatchingFilters,\n    filterModel\n  } = params;\n  const filteredRowsLookup = {};\n  const filteredDescendantCountLookup = {};\n  const filterCache = {};\n  const filterTreeNode = (node, areAncestorsExpanded, ancestorsResults) => {\n    const filterResults = {\n      passingFilterItems: null,\n      passingQuickFilterValues: null\n    };\n    let isPassingFiltering = false;\n    if (isRowMatchingFilters && node.type !== 'footer') {\n      const shouldApplyItem = node.type === 'group' && node.isAutoGenerated ? columnField => shouldApplyFilterItemOnGroup(columnField, node) : undefined;\n      const row = apiRef.current.getRow(node.id);\n      isRowMatchingFilters(row, shouldApplyItem, filterResults);\n    } else {\n      isPassingFiltering = true;\n    }\n    let filteredDescendantCount = 0;\n    if (node.type === 'group') {\n      node.children.forEach(childId => {\n        const childNode = rowTree[childId];\n        const childSubTreeSize = filterTreeNode(childNode, areAncestorsExpanded && !!node.childrenExpanded, [...ancestorsResults, filterResults]);\n        filteredDescendantCount += childSubTreeSize;\n      });\n    }\n    if (isPassingFiltering === false) {\n      if (node.type === 'group') {\n        // If node has children - it's passing if at least one child passes filters\n        isPassingFiltering = filteredDescendantCount > 0;\n      } else {\n        const allResults = [...ancestorsResults, filterResults];\n        isPassingFiltering = passFilterLogic(allResults.map(result => result.passingFilterItems), allResults.map(result => result.passingQuickFilterValues), filterModel, params.apiRef, filterCache);\n      }\n    }\n    filteredRowsLookup[node.id] = isPassingFiltering;\n    if (!isPassingFiltering) {\n      return 0;\n    }\n    filteredDescendantCountLookup[node.id] = filteredDescendantCount;\n    if (node.type !== 'group') {\n      return filteredDescendantCount + 1;\n    }\n    return filteredDescendantCount;\n  };\n  const nodes = Object.values(rowTree);\n  for (let i = 0; i < nodes.length; i += 1) {\n    const node = nodes[i];\n    if (node.depth === 0) {\n      filterTreeNode(node, true, []);\n    }\n  }\n  return {\n    filteredRowsLookup,\n    filteredDescendantCountLookup\n  };\n};\nexport const getColDefOverrides = (groupingColDefProp, fields) => {\n  if (typeof groupingColDefProp === 'function') {\n    return groupingColDefProp({\n      groupingName: ROW_GROUPING_STRATEGY,\n      fields\n    });\n  }\n  return groupingColDefProp;\n};\nexport const mergeStateWithRowGroupingModel = rowGroupingModel => state => _extends({}, state, {\n  rowGrouping: _extends({}, state.rowGrouping, {\n    model: rowGroupingModel\n  })\n});\nexport const setStrategyAvailability = (privateApiRef, disableRowGrouping) => {\n  let isAvailable;\n  if (disableRowGrouping) {\n    isAvailable = () => false;\n  } else {\n    isAvailable = () => {\n      const rowGroupingSanitizedModel = gridRowGroupingSanitizedModelSelector(privateApiRef);\n      return rowGroupingSanitizedModel.length > 0;\n    };\n  }\n  privateApiRef.current.setStrategyAvailability('rowTree', ROW_GROUPING_STRATEGY, isAvailable);\n};\nexport const getCellGroupingCriteria = ({\n  row,\n  id,\n  colDef,\n  groupingRule\n}) => {\n  let key;\n  if (groupingRule.groupingValueGetter) {\n    const groupingValueGetterParams = {\n      colDef,\n      field: groupingRule.field,\n      value: row[groupingRule.field],\n      id,\n      row,\n      rowNode: {\n        isAutoGenerated: false,\n        id\n      }\n    };\n    key = groupingRule.groupingValueGetter(groupingValueGetterParams);\n  } else {\n    key = row[groupingRule.field];\n  }\n  return {\n    key,\n    field: groupingRule.field\n  };\n};\nexport const getGroupingRules = ({\n  sanitizedRowGroupingModel,\n  columnsLookup\n}) => sanitizedRowGroupingModel.map(field => {\n  var _columnsLookup$field;\n  return {\n    field,\n    groupingValueGetter: (_columnsLookup$field = columnsLookup[field]) == null ? void 0 : _columnsLookup$field.groupingValueGetter\n  };\n});\n\n/**\n * Compares two sets of grouping rules to determine if they are equal or not.\n */\nexport const areGroupingRulesEqual = (newValue, previousValue) => {\n  if (previousValue.length !== newValue.length) {\n    return false;\n  }\n  return newValue.every((newRule, newRuleIndex) => {\n    const previousRule = previousValue[newRuleIndex];\n    if (previousRule.groupingValueGetter !== newRule.groupingValueGetter) {\n      return false;\n    }\n    if (previousRule.field !== newRule.field) {\n      return false;\n    }\n    return true;\n  });\n};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiMethod, gridColumnLookupSelector } from '@mui/x-data-grid-pro';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid-pro/internals';\nimport { gridRowGroupingModelSelector, gridRowGroupingSanitizedModelSelector } from './gridRowGroupingSelector';\nimport { getRowGroupingFieldFromGroupingCriteria, ROW_GROUPING_STRATEGY, isGroupingColumn, mergeStateWithRowGroupingModel, setStrategyAvailability, getGroupingRules, areGroupingRulesEqual } from './gridRowGroupingUtils';\nexport const rowGroupingStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$rowGroupingMod, _props$initialState;\n  apiRef.current.caches.rowGrouping = {\n    rulesOnLastRowTreeCreation: []\n  };\n  return _extends({}, state, {\n    rowGrouping: {\n      model: (_ref = (_props$rowGroupingMod = props.rowGroupingModel) != null ? _props$rowGroupingMod : (_props$initialState = props.initialState) == null || (_props$initialState = _props$initialState.rowGrouping) == null ? void 0 : _props$initialState.model) != null ? _ref : []\n    }\n  });\n};\n\n/**\n * @requires useGridColumns (state, method) - can be after, async only\n * @requires useGridRows (state, method) - can be after, async only\n * @requires useGridParamsApi (method) - can be after, async only\n */\nexport const useGridRowGrouping = (apiRef, props) => {\n  var _props$initialState3;\n  apiRef.current.registerControlState({\n    stateId: 'rowGrouping',\n    propModel: props.rowGroupingModel,\n    propOnChange: props.onRowGroupingModelChange,\n    stateSelector: gridRowGroupingModelSelector,\n    changeEvent: 'rowGroupingModelChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setRowGroupingModel = React.useCallback(model => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n    if (currentModel !== model) {\n      apiRef.current.setState(mergeStateWithRowGroupingModel(model));\n      setStrategyAvailability(apiRef, props.disableRowGrouping);\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, props.disableRowGrouping]);\n  const addRowGroupingCriteria = React.useCallback((field, groupingIndex) => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n    if (currentModel.includes(field)) {\n      return;\n    }\n    const cleanGroupingIndex = groupingIndex != null ? groupingIndex : currentModel.length;\n    const updatedModel = [...currentModel.slice(0, cleanGroupingIndex), field, ...currentModel.slice(cleanGroupingIndex)];\n    apiRef.current.setRowGroupingModel(updatedModel);\n  }, [apiRef]);\n  const removeRowGroupingCriteria = React.useCallback(field => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n    if (!currentModel.includes(field)) {\n      return;\n    }\n    apiRef.current.setRowGroupingModel(currentModel.filter(el => el !== field));\n  }, [apiRef]);\n  const setRowGroupingCriteriaIndex = React.useCallback((field, targetIndex) => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n    const currentTargetIndex = currentModel.indexOf(field);\n    if (currentTargetIndex === -1) {\n      return;\n    }\n    const updatedModel = [...currentModel];\n    updatedModel.splice(targetIndex, 0, updatedModel.splice(currentTargetIndex, 1)[0]);\n    apiRef.current.setRowGroupingModel(updatedModel);\n  }, [apiRef]);\n  const rowGroupingApi = {\n    setRowGroupingModel,\n    addRowGroupingCriteria,\n    removeRowGroupingCriteria,\n    setRowGroupingCriteriaIndex\n  };\n  useGridApiMethod(apiRef, rowGroupingApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addColumnMenuButtons = React.useCallback((columnMenuItems, colDef) => {\n    if (props.disableRowGrouping) {\n      return columnMenuItems;\n    }\n    if (isGroupingColumn(colDef.field) || colDef.groupable) {\n      return [...columnMenuItems, 'columnMenuGroupingItem'];\n    }\n    return columnMenuItems;\n  }, [props.disableRowGrouping]);\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2;\n    const rowGroupingModelToExport = gridRowGroupingModelSelector(apiRef);\n    const shouldExportRowGroupingModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.rowGroupingModel != null ||\n    // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null || (_props$initialState2 = _props$initialState2.rowGrouping) == null ? void 0 : _props$initialState2.model) != null ||\n    // Export if the model is not empty\n    Object.keys(rowGroupingModelToExport).length > 0;\n    if (!shouldExportRowGroupingModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      rowGrouping: {\n        model: rowGroupingModelToExport\n      }\n    });\n  }, [apiRef, props.rowGroupingModel, (_props$initialState3 = props.initialState) == null || (_props$initialState3 = _props$initialState3.rowGrouping) == null ? void 0 : _props$initialState3.model]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n    if (props.disableRowGrouping) {\n      return params;\n    }\n    const rowGroupingModel = (_context$stateToResto = context.stateToRestore.rowGrouping) == null ? void 0 : _context$stateToResto.model;\n    if (rowGroupingModel != null) {\n      apiRef.current.setState(mergeStateWithRowGroupingModel(rowGroupingModel));\n    }\n    return params;\n  }, [apiRef, props.disableRowGrouping]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuButtons);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n\n  /**\n   * EVENTS\n   */\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    if (isGroupingColumn(cellParams.field) && event.key === ' ' && !event.shiftKey) {\n      event.stopPropagation();\n      event.preventDefault();\n      if (params.rowNode.type !== 'group') {\n        return;\n      }\n      const isOnGroupingCell = props.rowGroupingColumnMode === 'single' || getRowGroupingFieldFromGroupingCriteria(params.rowNode.groupingField) === params.field;\n      if (!isOnGroupingCell) {\n        return;\n      }\n      apiRef.current.setRowChildrenExpansion(params.id, !params.rowNode.childrenExpanded);\n    }\n  }, [apiRef, props.rowGroupingColumnMode]);\n  const checkGroupingColumnsModelDiff = React.useCallback(() => {\n    const sanitizedRowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef);\n    const rulesOnLastRowTreeCreation = apiRef.current.caches.rowGrouping.rulesOnLastRowTreeCreation || [];\n    const groupingRules = getGroupingRules({\n      sanitizedRowGroupingModel,\n      columnsLookup: gridColumnLookupSelector(apiRef)\n    });\n    if (!areGroupingRulesEqual(rulesOnLastRowTreeCreation, groupingRules)) {\n      apiRef.current.caches.rowGrouping.rulesOnLastRowTreeCreation = groupingRules;\n      apiRef.current.requestPipeProcessorsApplication('hydrateColumns');\n      setStrategyAvailability(apiRef, props.disableRowGrouping);\n\n      // Refresh the row tree creation strategy processing\n      // TODO: Add a clean way to re-run a strategy processing without publishing a private event\n      if (apiRef.current.getActiveStrategy('rowTree') === ROW_GROUPING_STRATEGY) {\n        apiRef.current.publishEvent('activeStrategyProcessorChange', 'rowTreeCreation');\n      }\n    }\n  }, [apiRef, props.disableRowGrouping]);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'columnsChange', checkGroupingColumnsModelDiff);\n  useGridApiEventHandler(apiRef, 'rowGroupingModelChange', checkGroupingColumnsModelDiff);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (props.rowGroupingModel !== undefined) {\n      apiRef.current.setRowGroupingModel(props.rowGroupingModel);\n    }\n  }, [apiRef, props.rowGroupingModel]);\n};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { GridFooterCell } from './GridFooterCell';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction GridGroupingColumnFooterCell(props) {\n  const rootProps = useGridRootProps();\n  const sx = {\n    ml: 0\n  };\n  if (props.rowNode.parent == null) {\n    sx.ml = 0;\n  } else if (rootProps.rowGroupingColumnMode === 'multiple') {\n    sx.ml = 2;\n  } else {\n    sx.ml = theme => `calc(var(--DataGrid-cellOffsetMultiplier) * ${theme.spacing(props.rowNode.depth)})`;\n  }\n  return /*#__PURE__*/_jsx(GridFooterCell, _extends({\n    sx: sx\n  }, props));\n}\nexport { GridGroupingColumnFooterCell };","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport Box from '@mui/material/Box';\nimport { useGridSelector, gridFilteredDescendantCountLookupSelector, getDataGridUtilityClass } from '@mui/x-data-grid-pro';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['groupingCriteriaCell'],\n    toggle: ['groupingCriteriaCellToggle']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nexport function GridGroupingCriteriaCell(props) {\n  var _filteredDescendantCo, _rootProps$slotProps;\n  const {\n    id,\n    field,\n    rowNode,\n    hideDescendantCount,\n    formattedValue\n  } = props;\n  const rootProps = useGridRootProps();\n  const apiRef = useGridApiContext();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const filteredDescendantCountLookup = useGridSelector(apiRef, gridFilteredDescendantCountLookupSelector);\n  const filteredDescendantCount = (_filteredDescendantCo = filteredDescendantCountLookup[rowNode.id]) != null ? _filteredDescendantCo : 0;\n  const Icon = rowNode.childrenExpanded ? rootProps.slots.groupingCriteriaCollapseIcon : rootProps.slots.groupingCriteriaExpandIcon;\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      // We call event.stopPropagation to avoid unfolding the row and also scrolling to bottom\n      // TODO: Remove and add a check inside useGridKeyboardNavigation\n      event.stopPropagation();\n    }\n    apiRef.current.publishEvent('cellKeyDown', props, event);\n  };\n  const handleClick = event => {\n    apiRef.current.setRowChildrenExpansion(id, !rowNode.childrenExpanded);\n    apiRef.current.setCellFocus(id, field);\n    event.stopPropagation();\n  };\n  let cellContent;\n  const colDef = apiRef.current.getColumn(rowNode.groupingField);\n  if (typeof colDef.renderCell === 'function') {\n    cellContent = colDef.renderCell(props);\n  } else if (typeof formattedValue !== 'undefined') {\n    cellContent = /*#__PURE__*/_jsx(\"span\", {\n      children: formattedValue\n    });\n  } else {\n    cellContent = /*#__PURE__*/_jsx(\"span\", {\n      children: rowNode.groupingKey\n    });\n  }\n  return /*#__PURE__*/_jsxs(Box, {\n    className: classes.root,\n    sx: {\n      ml: rootProps.rowGroupingColumnMode === 'multiple' ? 0 : theme => `calc(var(--DataGrid-cellOffsetMultiplier) * ${theme.spacing(rowNode.depth)})`\n    },\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: classes.toggle,\n      children: filteredDescendantCount > 0 && /*#__PURE__*/_jsx(rootProps.slots.baseIconButton, _extends({\n        size: \"small\",\n        onClick: handleClick,\n        onKeyDown: handleKeyDown,\n        tabIndex: -1,\n        \"aria-label\": rowNode.childrenExpanded ? apiRef.current.getLocaleText('treeDataCollapse') : apiRef.current.getLocaleText('treeDataExpand')\n      }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseIconButton, {\n        children: /*#__PURE__*/_jsx(Icon, {\n          fontSize: \"inherit\"\n        })\n      }))\n    }), cellContent, !hideDescendantCount && filteredDescendantCount > 0 ? /*#__PURE__*/_jsxs(\"span\", {\n      style: {\n        whiteSpace: 'pre'\n      },\n      children: [\" (\", filteredDescendantCount, \")\"]\n    }) : null]\n  });\n}","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction GridGroupingColumnLeafCell(props) {\n  var _props$formattedValue;\n  const {\n    rowNode\n  } = props;\n  const rootProps = useGridRootProps();\n  return /*#__PURE__*/_jsx(Box, {\n    sx: {\n      ml: rootProps.rowGroupingColumnMode === 'multiple' ? 1 : theme => `calc(var(--DataGrid-cellOffsetMultiplier) * ${theme.spacing(rowNode.depth)})`\n    },\n    children: (_props$formattedValue = props.formattedValue) != null ? _props$formattedValue : props.value\n  });\n}\nexport { GridGroupingColumnLeafCell };","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"leafField\", \"mainGroupingCriteria\", \"hideDescendantCount\"],\n  _excluded2 = [\"leafField\", \"mainGroupingCriteria\", \"hideDescendantCount\"];\nimport * as React from 'react';\nimport { GRID_STRING_COL_DEF } from '@mui/x-data-grid-pro';\nimport { isSingleSelectColDef } from '@mui/x-data-grid-pro/internals';\nimport { GridGroupingColumnFooterCell } from '../../../components/GridGroupingColumnFooterCell';\nimport { GridGroupingCriteriaCell } from '../../../components/GridGroupingCriteriaCell';\nimport { GridGroupingColumnLeafCell } from '../../../components/GridGroupingColumnLeafCell';\nimport { getRowGroupingFieldFromGroupingCriteria, GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD } from './gridRowGroupingUtils';\nimport { gridRowGroupingSanitizedModelSelector } from './gridRowGroupingSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst GROUPING_COL_DEF_DEFAULT_PROPERTIES = _extends({}, GRID_STRING_COL_DEF, {\n  disableReorder: true\n});\nconst GROUPING_COL_DEF_FORCED_PROPERTIES = {\n  type: 'rowGroupByColumnsGroup',\n  editable: false,\n  groupable: false\n};\n\n/**\n * When sorting two cells with different grouping criteria, we consider that the cell with the grouping criteria coming first in the model should be displayed below.\n * This can occur when some rows don't have all the fields. In which case we want the rows with the missing field to be displayed above.\n * TODO: Make this index comparator depth invariant, the logic should not be inverted when sorting in the \"desc\" direction (but the current return format of `sortComparator` does not support this behavior).\n */\nconst groupingFieldIndexComparator = (v1, v2, cellParams1, cellParams2) => {\n  var _groupingField, _groupingField2;\n  const model = gridRowGroupingSanitizedModelSelector(cellParams1.api.state, cellParams1.api.instanceId);\n  const groupingField1 = (_groupingField = cellParams1.rowNode.groupingField) != null ? _groupingField : null;\n  const groupingField2 = (_groupingField2 = cellParams2.rowNode.groupingField) != null ? _groupingField2 : null;\n  if (groupingField1 === groupingField2) {\n    return 0;\n  }\n  if (groupingField1 == null) {\n    return -1;\n  }\n  if (groupingField2 == null) {\n    return 1;\n  }\n  if (model.indexOf(groupingField1) < model.indexOf(groupingField2)) {\n    return -1;\n  }\n  return 1;\n};\nconst getLeafProperties = leafColDef => {\n  var _leafColDef$headerNam;\n  return {\n    headerName: (_leafColDef$headerNam = leafColDef.headerName) != null ? _leafColDef$headerNam : leafColDef.field,\n    sortable: leafColDef.sortable,\n    filterable: leafColDef.filterable,\n    valueOptions: isSingleSelectColDef(leafColDef) ? leafColDef.valueOptions : undefined,\n    filterOperators: leafColDef.filterOperators,\n    sortComparator: (v1, v2, cellParams1, cellParams2) => {\n      // We only want to sort the leaves\n      if (cellParams1.rowNode.type === 'leaf' && cellParams2.rowNode.type === 'leaf') {\n        return leafColDef.sortComparator(v1, v2, cellParams1, cellParams2);\n      }\n      return groupingFieldIndexComparator(v1, v2, cellParams1, cellParams2);\n    }\n  };\n};\nconst getGroupingCriteriaProperties = (groupedByColDef, applyHeaderName) => {\n  const properties = {\n    sortable: groupedByColDef.sortable,\n    filterable: groupedByColDef.filterable,\n    valueOptions: isSingleSelectColDef(groupedByColDef) ? groupedByColDef.valueOptions : undefined,\n    sortComparator: (v1, v2, cellParams1, cellParams2) => {\n      // We only want to sort the groups of the current grouping criteria\n      if (cellParams1.rowNode.type === 'group' && cellParams1.rowNode.groupingField === groupedByColDef.field && cellParams2.rowNode.type === 'group' && cellParams2.rowNode.groupingField === groupedByColDef.field) {\n        return groupedByColDef.sortComparator(v1, v2, cellParams1, cellParams2);\n      }\n      return groupingFieldIndexComparator(v1, v2, cellParams1, cellParams2);\n    },\n    filterOperators: groupedByColDef.filterOperators\n  };\n  if (applyHeaderName) {\n    var _groupedByColDef$head;\n    properties.headerName = (_groupedByColDef$head = groupedByColDef.headerName) != null ? _groupedByColDef$head : groupedByColDef.field;\n  }\n  return properties;\n};\n/**\n * Creates the `GridColDef` for a grouping column that only takes care of a single grouping criteria\n */\nexport const createGroupingColDefForOneGroupingCriteria = ({\n  columnsLookup,\n  groupedByColDef,\n  groupingCriteria,\n  colDefOverride\n}) => {\n  var _groupedByColDef$widt, _leafColDef$width;\n  const _ref = colDefOverride != null ? colDefOverride : {},\n    {\n      leafField,\n      mainGroupingCriteria,\n      hideDescendantCount\n    } = _ref,\n    colDefOverrideProperties = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const leafColDef = leafField ? columnsLookup[leafField] : null;\n\n  // The properties that do not depend on the presence of a `leafColDef` and that can be overridden by `colDefOverride`\n  const commonProperties = {\n    width: Math.max(((_groupedByColDef$widt = groupedByColDef.width) != null ? _groupedByColDef$widt : GRID_STRING_COL_DEF.width) + 40, (_leafColDef$width = leafColDef == null ? void 0 : leafColDef.width) != null ? _leafColDef$width : 0),\n    renderCell: params => {\n      // Render footer\n      if (params.rowNode.type === 'footer' || params.rowNode.type === 'pinnedRow') {\n        return /*#__PURE__*/_jsx(GridGroupingColumnFooterCell, _extends({}, params));\n      }\n\n      // Render leaves\n      if (params.rowNode.type === 'leaf') {\n        if (leafColDef) {\n          const leafParams = _extends({}, params.api.getCellParams(params.id, leafField), {\n            api: params.api,\n            hasFocus: params.hasFocus\n          });\n          if (leafColDef.renderCell) {\n            return leafColDef.renderCell(leafParams);\n          }\n          return /*#__PURE__*/_jsx(GridGroupingColumnLeafCell, _extends({}, leafParams));\n        }\n        return '';\n      }\n\n      // Render current grouping criteria groups\n      if (params.rowNode.groupingField === groupingCriteria) {\n        return /*#__PURE__*/_jsx(GridGroupingCriteriaCell, _extends({}, params, {\n          hideDescendantCount: hideDescendantCount\n        }));\n      }\n      return '';\n    },\n    valueGetter: params => {\n      if (!params.rowNode || params.rowNode.type === 'footer' || params.rowNode.type === 'pinnedRow') {\n        return undefined;\n      }\n      if (params.rowNode.type === 'leaf') {\n        if (leafColDef) {\n          return params.api.getCellValue(params.id, leafField);\n        }\n        return undefined;\n      }\n      if (params.rowNode.groupingField === groupingCriteria) {\n        return params.rowNode.groupingKey;\n      }\n      return undefined;\n    }\n  };\n\n  // If we have a `mainGroupingCriteria` defined and matching the `groupingCriteria`\n  // Then we apply the sorting / filtering on the groups of this column's grouping criteria based on the properties of `groupedByColDef`.\n  // It can be useful to define a `leafField` for leaves rendering but still use the grouping criteria for the sorting / filtering\n  //\n  // If we have a `leafField` defined and matching an existing column\n  // Then we apply the sorting / filtering on the leaves based on the properties of `leavesColDef`\n  //\n  // By default, we apply the sorting / filtering on the groups of this column's grouping criteria based on the properties of `groupedColDef`.\n  let sourceProperties;\n  if (mainGroupingCriteria && mainGroupingCriteria === groupingCriteria) {\n    sourceProperties = getGroupingCriteriaProperties(groupedByColDef, true);\n  } else if (leafColDef) {\n    sourceProperties = getLeafProperties(leafColDef);\n  } else {\n    sourceProperties = getGroupingCriteriaProperties(groupedByColDef, true);\n  }\n\n  // The properties that can't be overridden with `colDefOverride`\n  const forcedProperties = _extends({\n    field: getRowGroupingFieldFromGroupingCriteria(groupingCriteria)\n  }, GROUPING_COL_DEF_FORCED_PROPERTIES);\n  return _extends({}, GROUPING_COL_DEF_DEFAULT_PROPERTIES, commonProperties, sourceProperties, colDefOverrideProperties, forcedProperties);\n};\n/**\n * Creates the `GridColDef` for a grouping column that takes care of all the grouping criteria\n */\nexport const createGroupingColDefForAllGroupingCriteria = ({\n  apiRef,\n  columnsLookup,\n  rowGroupingModel,\n  colDefOverride\n}) => {\n  var _leafColDef$width2;\n  const _ref2 = colDefOverride != null ? colDefOverride : {},\n    {\n      leafField,\n      mainGroupingCriteria,\n      hideDescendantCount\n    } = _ref2,\n    colDefOverrideProperties = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n  const leafColDef = leafField ? columnsLookup[leafField] : null;\n\n  // The properties that do not depend on the presence of a `leafColDef` and that can be overridden by `colDefOverride`\n  const commonProperties = {\n    headerName: apiRef.current.getLocaleText('groupingColumnHeaderName'),\n    width: Math.max(...rowGroupingModel.map(field => {\n      var _columnsLookup$field$;\n      return ((_columnsLookup$field$ = columnsLookup[field].width) != null ? _columnsLookup$field$ : GRID_STRING_COL_DEF.width) + 40;\n    }), (_leafColDef$width2 = leafColDef == null ? void 0 : leafColDef.width) != null ? _leafColDef$width2 : 0),\n    renderCell: params => {\n      // Render footer\n      if (params.rowNode.type === 'footer' || params.rowNode.type === 'pinnedRow') {\n        return /*#__PURE__*/_jsx(GridGroupingColumnFooterCell, _extends({}, params));\n      }\n\n      // Render the leaves\n      if (params.rowNode.type === 'leaf') {\n        if (leafColDef) {\n          const leafParams = _extends({}, params.api.getCellParams(params.id, leafField), {\n            api: params.api,\n            hasFocus: params.hasFocus\n          });\n          if (leafColDef.renderCell) {\n            return leafColDef.renderCell(leafParams);\n          }\n          return /*#__PURE__*/_jsx(GridGroupingColumnLeafCell, _extends({}, leafParams));\n        }\n        return '';\n      }\n\n      // Render the groups\n      return /*#__PURE__*/_jsx(GridGroupingCriteriaCell, _extends({}, params, {\n        hideDescendantCount: hideDescendantCount\n      }));\n    },\n    valueGetter: params => {\n      if (!params.rowNode || params.rowNode.type === 'footer' || params.rowNode.type === 'pinnedRow') {\n        return undefined;\n      }\n      if (params.rowNode.type === 'leaf') {\n        if (leafColDef) {\n          return params.api.getCellValue(params.id, leafField);\n        }\n        return undefined;\n      }\n      return params.rowNode.groupingKey;\n    }\n  };\n\n  // If we have a `mainGroupingCriteria` defined and matching one of the `orderedGroupedByFields`\n  // Then we apply the sorting / filtering on the groups of this column's grouping criteria based on the properties of `columnsLookup[mainGroupingCriteria]`.\n  // It can be useful to use another grouping criteria than the top level one for the sorting / filtering\n  //\n  // If we have a `leafField` defined and matching an existing column\n  // Then we apply the sorting / filtering on the leaves based on the properties of `leavesColDef`\n  //\n  // By default, we apply the sorting / filtering on the groups of the top level grouping criteria based on the properties of `columnsLookup[orderedGroupedByFields[0]]`.\n  let sourceProperties;\n  if (mainGroupingCriteria && rowGroupingModel.includes(mainGroupingCriteria)) {\n    sourceProperties = getGroupingCriteriaProperties(columnsLookup[mainGroupingCriteria], true);\n  } else if (leafColDef) {\n    sourceProperties = getLeafProperties(leafColDef);\n  } else {\n    sourceProperties = getGroupingCriteriaProperties(columnsLookup[rowGroupingModel[0]], rowGroupingModel.length === 1);\n  }\n\n  // The properties that can't be overridden with `colDefOverride`\n  const forcedProperties = _extends({\n    field: GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD\n  }, GROUPING_COL_DEF_FORCED_PROPERTIES);\n  return _extends({}, GROUPING_COL_DEF_DEFAULT_PROPERTIES, commonProperties, sourceProperties, colDefOverrideProperties, forcedProperties);\n};","import * as React from 'react';\nimport { gridColumnLookupSelector, gridRowTreeSelector, useFirstRender, GRID_CHECKBOX_SELECTION_FIELD } from '@mui/x-data-grid-pro';\nimport { useGridRegisterPipeProcessor, useGridRegisterStrategyProcessor, sortRowTree, createRowTree, updateRowTree, getVisibleRowsLookup } from '@mui/x-data-grid-pro/internals';\nimport { gridRowGroupingModelSelector, gridRowGroupingSanitizedModelSelector } from './gridRowGroupingSelector';\nimport { createGroupingColDefForAllGroupingCriteria, createGroupingColDefForOneGroupingCriteria } from './createGroupingColDef';\nimport { filterRowTreeFromGroupingColumns, getColDefOverrides, ROW_GROUPING_STRATEGY, isGroupingColumn, setStrategyAvailability, getCellGroupingCriteria, getGroupingRules } from './gridRowGroupingUtils';\nexport const useGridRowGroupingPreProcessors = (apiRef, props) => {\n  const getGroupingColDefs = React.useCallback(columnsState => {\n    if (props.disableRowGrouping) {\n      return [];\n    }\n    const groupingColDefProp = props.groupingColDef;\n\n    // We can't use `gridGroupingRowsSanitizedModelSelector` here because the new columns are not in the state yet\n    const rowGroupingModel = gridRowGroupingModelSelector(apiRef).filter(field => !!columnsState.lookup[field]);\n    if (rowGroupingModel.length === 0) {\n      return [];\n    }\n    switch (props.rowGroupingColumnMode) {\n      case 'single':\n        {\n          return [createGroupingColDefForAllGroupingCriteria({\n            apiRef,\n            rowGroupingModel,\n            colDefOverride: getColDefOverrides(groupingColDefProp, rowGroupingModel),\n            columnsLookup: columnsState.lookup\n          })];\n        }\n      case 'multiple':\n        {\n          return rowGroupingModel.map(groupingCriteria => createGroupingColDefForOneGroupingCriteria({\n            groupingCriteria,\n            colDefOverride: getColDefOverrides(groupingColDefProp, [groupingCriteria]),\n            groupedByColDef: columnsState.lookup[groupingCriteria],\n            columnsLookup: columnsState.lookup\n          }));\n        }\n      default:\n        {\n          return [];\n        }\n    }\n  }, [apiRef, props.groupingColDef, props.rowGroupingColumnMode, props.disableRowGrouping]);\n  const updateGroupingColumn = React.useCallback(columnsState => {\n    const groupingColDefs = getGroupingColDefs(columnsState);\n    let newColumnFields = [];\n    const newColumnsLookup = {};\n\n    // We only keep the non-grouping columns\n    columnsState.orderedFields.forEach(field => {\n      if (!isGroupingColumn(field)) {\n        newColumnFields.push(field);\n        newColumnsLookup[field] = columnsState.lookup[field];\n      }\n    });\n\n    // We add the grouping column\n    groupingColDefs.forEach(groupingColDef => {\n      const matchingGroupingColDef = columnsState.lookup[groupingColDef.field];\n      if (matchingGroupingColDef) {\n        groupingColDef.width = matchingGroupingColDef.width;\n        groupingColDef.flex = matchingGroupingColDef.flex;\n      }\n      newColumnsLookup[groupingColDef.field] = groupingColDef;\n    });\n    const startIndex = newColumnFields[0] === GRID_CHECKBOX_SELECTION_FIELD ? 1 : 0;\n    newColumnFields = [...newColumnFields.slice(0, startIndex), ...groupingColDefs.map(colDef => colDef.field), ...newColumnFields.slice(startIndex)];\n    columnsState.orderedFields = newColumnFields;\n    columnsState.lookup = newColumnsLookup;\n    return columnsState;\n  }, [getGroupingColDefs]);\n  const createRowTreeForRowGrouping = React.useCallback(params => {\n    const sanitizedRowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef);\n    const columnsLookup = gridColumnLookupSelector(apiRef);\n    const groupingRules = getGroupingRules({\n      sanitizedRowGroupingModel,\n      columnsLookup\n    });\n    apiRef.current.caches.rowGrouping.rulesOnLastRowTreeCreation = groupingRules;\n    const getRowTreeBuilderNode = rowId => {\n      const row = params.dataRowIdToModelLookup[rowId];\n      const parentPath = groupingRules.map(groupingRule => getCellGroupingCriteria({\n        row,\n        id: rowId,\n        groupingRule,\n        colDef: columnsLookup[groupingRule.field]\n      })).filter(cell => cell.key != null);\n      const leafGroupingCriteria = {\n        key: rowId.toString(),\n        field: null\n      };\n      return {\n        path: [...parentPath, leafGroupingCriteria],\n        id: rowId\n      };\n    };\n    if (params.updates.type === 'full') {\n      return createRowTree({\n        previousTree: params.previousTree,\n        nodes: params.updates.rows.map(getRowTreeBuilderNode),\n        defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n        isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n        groupingName: ROW_GROUPING_STRATEGY\n      });\n    }\n    return updateRowTree({\n      nodes: {\n        inserted: params.updates.actions.insert.map(getRowTreeBuilderNode),\n        modified: params.updates.actions.modify.map(getRowTreeBuilderNode),\n        removed: params.updates.actions.remove\n      },\n      previousTree: params.previousTree,\n      previousTreeDepth: params.previousTreeDepths,\n      defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n      isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n      groupingName: ROW_GROUPING_STRATEGY\n    });\n  }, [apiRef, props.defaultGroupingExpansionDepth, props.isGroupExpandedByDefault]);\n  const filterRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    return filterRowTreeFromGroupingColumns({\n      rowTree,\n      isRowMatchingFilters: params.isRowMatchingFilters,\n      filterModel: params.filterModel,\n      apiRef\n    });\n  }, [apiRef]);\n  const sortRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    return sortRowTree({\n      rowTree,\n      sortRowList: params.sortRowList,\n      disableChildrenSorting: false,\n      shouldRenderGroupBelowLeaves: true\n    });\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', updateGroupingColumn);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'rowTreeCreation', createRowTreeForRowGrouping);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'filtering', filterRows);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'sorting', sortRows);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'visibleRowsLookupCreation', getVisibleRowsLookup);\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    setStrategyAvailability(apiRef, props.disableRowGrouping);\n  });\n\n  /**\n   * EFFECTS\n   */\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (!isFirstRender.current) {\n      setStrategyAvailability(apiRef, props.disableRowGrouping);\n    } else {\n      isFirstRender.current = false;\n    }\n  }, [apiRef, props.disableRowGrouping]);\n};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_DATE_COL_DEF, GRID_DATETIME_COL_DEF } from '@mui/x-data-grid-pro';\nimport { buildWarning, isObject, isSingleSelectColDef } from '@mui/x-data-grid/internals';\nconst getExcelJs = async () => {\n  var _excelJsModule$defaul;\n  const excelJsModule = await import('exceljs');\n  return (_excelJsModule$defaul = excelJsModule.default) != null ? _excelJsModule$defaul : excelJsModule;\n};\nconst warnInvalidFormattedValue = buildWarning(['MUI: When the value of a field is an object or a `renderCell` is provided, the Excel export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\nconst getFormattedValueOptions = (colDef, valueOptions, api) => {\n  if (!colDef.valueOptions) {\n    return [];\n  }\n  let valueOptionsFormatted = valueOptions;\n  if (colDef.valueFormatter) {\n    valueOptionsFormatted = valueOptionsFormatted.map(option => {\n      if (typeof option === 'object') {\n        return option;\n      }\n      const params = {\n        field: colDef.field,\n        api,\n        value: option\n      };\n      return String(colDef.valueFormatter(params));\n    });\n  }\n  return valueOptionsFormatted.map(option => typeof option === 'object' ? option.label : option);\n};\nexport const serializeRow = (id, columns, api, defaultValueOptionsFormulae) => {\n  const row = {};\n  const dataValidation = {};\n  const mergedCells = [];\n  const firstCellParams = api.getCellParams(id, columns[0].field);\n  const outlineLevel = firstCellParams.rowNode.depth;\n\n  // `colSpan` is only calculated for rendered rows, so we need to calculate it during export for every row\n  api.calculateColSpan({\n    rowId: id,\n    minFirstColumn: 0,\n    maxLastColumn: columns.length,\n    columns\n  });\n  columns.forEach((column, colIndex) => {\n    const colSpanInfo = api.unstable_getCellColSpanInfo(id, colIndex);\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      return;\n    }\n    if (colSpanInfo && colSpanInfo.cellProps.colSpan > 1) {\n      mergedCells.push({\n        leftIndex: colIndex + 1,\n        rightIndex: colIndex + colSpanInfo.cellProps.colSpan\n      });\n    }\n    const cellParams = api.getCellParams(id, column.field);\n    switch (cellParams.colDef.type) {\n      case 'singleSelect':\n        {\n          const castColumn = cellParams.colDef;\n          if (typeof castColumn.valueOptions === 'function') {\n            // If value option depends on the row, set specific options to the cell\n            // This dataValidation is buggy with LibreOffice and does not allow to have coma\n            const valueOptions = castColumn.valueOptions({\n              id,\n              row,\n              field: cellParams.field\n            });\n            const formattedValueOptions = getFormattedValueOptions(castColumn, valueOptions, api);\n            dataValidation[castColumn.field] = {\n              type: 'list',\n              allowBlank: true,\n              formulae: [`\"${formattedValueOptions.map(x => x.toString().replaceAll(',', 'CHAR(44)')).join(',')}\"`]\n            };\n          } else {\n            const address = defaultValueOptionsFormulae[column.field].address;\n\n            // If value option is defined for the column, refer to another sheet\n            dataValidation[castColumn.field] = {\n              type: 'list',\n              allowBlank: true,\n              formulae: [address]\n            };\n          }\n          const formattedValue = api.getCellParams(id, castColumn.field).formattedValue;\n          if (process.env.NODE_ENV !== 'production') {\n            if (String(cellParams.formattedValue) === '[object Object]') {\n              warnInvalidFormattedValue();\n            }\n          }\n          if (isObject(formattedValue)) {\n            row[castColumn.field] = formattedValue == null ? void 0 : formattedValue.label;\n          } else {\n            row[castColumn.field] = formattedValue;\n          }\n          break;\n        }\n      case 'boolean':\n      case 'number':\n        row[column.field] = api.getCellParams(id, column.field).value;\n        break;\n      case 'date':\n      case 'dateTime':\n        {\n          // Excel does not do any timezone conversion, so we create a date using UTC instead of local timezone\n          // Solution from: https://github.com/exceljs/exceljs/issues/486#issuecomment-432557582\n          // About Date.UTC(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC#exemples\n          const value = api.getCellParams(id, column.field).value;\n          // value may be `undefined` in auto-generated grouping rows\n          if (!value) {\n            break;\n          }\n          const utcDate = new Date(Date.UTC(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds()));\n          row[column.field] = utcDate;\n          break;\n        }\n      case 'actions':\n        break;\n      default:\n        row[column.field] = api.getCellParams(id, column.field).formattedValue;\n        if (process.env.NODE_ENV !== 'production') {\n          if (String(cellParams.formattedValue) === '[object Object]') {\n            warnInvalidFormattedValue();\n          }\n        }\n        break;\n    }\n  });\n  return {\n    row,\n    dataValidation,\n    outlineLevel,\n    mergedCells\n  };\n};\nconst defaultColumnsStyles = {\n  [GRID_DATE_COL_DEF.type]: {\n    numFmt: 'dd.mm.yyyy'\n  },\n  [GRID_DATETIME_COL_DEF.type]: {\n    numFmt: 'dd.mm.yyyy hh:mm'\n  }\n};\nexport const serializeColumn = (column, columnsStyles) => {\n  var _column$headerName;\n  const {\n    field,\n    type\n  } = column;\n  return {\n    key: field,\n    headerText: (_column$headerName = column.headerName) != null ? _column$headerName : column.field,\n    // Excel width must stay between 0 and 255 (https://support.microsoft.com/en-us/office/change-the-column-width-and-row-height-72f5e3cc-994d-43e8-ae58-9774a0905f46)\n    // From the example of column width behavior (https://docs.microsoft.com/en-US/office/troubleshoot/excel/determine-column-widths#example-of-column-width-behavior)\n    // a value of 10 corresponds to 75px. This is an approximation, because column width depends on the font-size\n    width: Math.min(255, column.width ? column.width / 7.5 : 8.43),\n    style: _extends({}, type && (defaultColumnsStyles == null ? void 0 : defaultColumnsStyles[type]), columnsStyles == null ? void 0 : columnsStyles[field])\n  };\n};\nconst addColumnGroupingHeaders = (worksheet, columns, columnGroupPaths, columnGroupDetails) => {\n  const maxDepth = Math.max(...columns.map(({\n    key\n  }) => {\n    var _columnGroupPaths$key, _columnGroupPaths$key2;\n    return (_columnGroupPaths$key = (_columnGroupPaths$key2 = columnGroupPaths[key]) == null ? void 0 : _columnGroupPaths$key2.length) != null ? _columnGroupPaths$key : 0;\n  }));\n  if (maxDepth === 0) {\n    return;\n  }\n  for (let rowIndex = 0; rowIndex < maxDepth; rowIndex += 1) {\n    const row = columns.map(({\n      key\n    }) => {\n      const groupingPath = columnGroupPaths[key];\n      if (groupingPath.length <= rowIndex) {\n        return {\n          groupId: null,\n          parents: groupingPath\n        };\n      }\n      return _extends({}, columnGroupDetails[groupingPath[rowIndex]], {\n        parents: groupingPath.slice(0, rowIndex)\n      });\n    });\n    const newRow = worksheet.addRow(row.map(group => {\n      var _group$headerName;\n      return group.groupId === null ? null : (_group$headerName = group == null ? void 0 : group.headerName) != null ? _group$headerName : group.groupId;\n    }));\n\n    // use `rowCount`, since worksheet can have additional rows added in `exceljsPreProcess`\n    const lastRowIndex = newRow.worksheet.rowCount;\n    let leftIndex = 0;\n    let rightIndex = 1;\n    while (rightIndex < columns.length) {\n      const {\n        groupId: leftGroupId,\n        parents: leftParents\n      } = row[leftIndex];\n      const {\n        groupId: rightGroupId,\n        parents: rightParents\n      } = row[rightIndex];\n      const areInSameGroup = leftGroupId === rightGroupId && leftParents.length === rightParents.length && leftParents.every((leftParent, index) => rightParents[index] === leftParent);\n      if (areInSameGroup) {\n        rightIndex += 1;\n      } else {\n        if (rightIndex - leftIndex > 1) {\n          worksheet.mergeCells(lastRowIndex, leftIndex + 1, lastRowIndex, rightIndex);\n        }\n        leftIndex = rightIndex;\n        rightIndex += 1;\n      }\n    }\n    if (rightIndex - leftIndex > 1) {\n      worksheet.mergeCells(lastRowIndex, leftIndex + 1, lastRowIndex, rightIndex);\n    }\n  }\n};\nexport function serializeColumns(columns, styles) {\n  return columns.map(column => serializeColumn(column, styles));\n}\nexport async function getDataForValueOptionsSheet(columns, valueOptionsSheetName, api) {\n  const candidateColumns = columns.filter(column => isSingleSelectColDef(column) && Array.isArray(column.valueOptions));\n\n  // Creates a temp worksheet to obtain the column letters\n  const excelJS = await getExcelJs();\n  const workbook = new excelJS.Workbook();\n  const worksheet = workbook.addWorksheet('Sheet1');\n  worksheet.columns = candidateColumns.map(column => ({\n    key: column.field\n  }));\n  return candidateColumns.reduce((acc, column) => {\n    var _column$headerName2;\n    const singleSelectColumn = column;\n    const formattedValueOptions = getFormattedValueOptions(singleSelectColumn, singleSelectColumn.valueOptions, api);\n    const header = (_column$headerName2 = column.headerName) != null ? _column$headerName2 : column.field;\n    const values = [header, ...formattedValueOptions];\n    const letter = worksheet.getColumn(column.field).letter;\n    const address = `${valueOptionsSheetName}!$${letter}$2:$${letter}$${values.length}`;\n    acc[column.field] = {\n      values,\n      address\n    };\n    return acc;\n  }, {});\n}\nfunction addSerializedRowToWorksheet(serializedRow, worksheet) {\n  const {\n    row,\n    dataValidation,\n    outlineLevel,\n    mergedCells\n  } = serializedRow;\n  const newRow = worksheet.addRow(row);\n  Object.keys(dataValidation).forEach(field => {\n    newRow.getCell(field).dataValidation = _extends({}, dataValidation[field]);\n  });\n  if (outlineLevel) {\n    newRow.outlineLevel = outlineLevel;\n  }\n\n  // use `rowCount`, since worksheet can have additional rows added in `exceljsPreProcess`\n  const lastRowIndex = newRow.worksheet.rowCount;\n  mergedCells.forEach(mergedCell => {\n    worksheet.mergeCells(lastRowIndex, mergedCell.leftIndex, lastRowIndex, mergedCell.rightIndex);\n  });\n}\nasync function createValueOptionsSheetIfNeeded(valueOptionsData, sheetName, workbook) {\n  if (Object.keys(valueOptionsData).length === 0) {\n    return;\n  }\n  const valueOptionsWorksheet = workbook.addWorksheet(sheetName);\n  valueOptionsWorksheet.columns = Object.keys(valueOptionsData).map(key => ({\n    key\n  }));\n  Object.entries(valueOptionsData).forEach(([field, {\n    values\n  }]) => {\n    valueOptionsWorksheet.getColumn(field).values = values;\n  });\n}\nexport async function buildExcel(options, api) {\n  const {\n    columns,\n    rowIds,\n    includeHeaders,\n    includeColumnGroupsHeaders,\n    valueOptionsSheetName = 'Options',\n    exceljsPreProcess,\n    exceljsPostProcess,\n    columnsStyles = {}\n  } = options;\n  const excelJS = await getExcelJs();\n  const workbook = new excelJS.Workbook();\n  const worksheet = workbook.addWorksheet('Sheet1');\n  const serializedColumns = serializeColumns(columns, columnsStyles);\n  worksheet.columns = serializedColumns;\n  if (exceljsPreProcess) {\n    await exceljsPreProcess({\n      workbook,\n      worksheet\n    });\n  }\n  if (includeColumnGroupsHeaders) {\n    const columnGroupPaths = columns.reduce((acc, column) => {\n      acc[column.field] = api.unstable_getColumnGroupPath(column.field);\n      return acc;\n    }, {});\n    addColumnGroupingHeaders(worksheet, serializedColumns, columnGroupPaths, api.unstable_getAllGroupDetails());\n  }\n  if (includeHeaders) {\n    worksheet.addRow(columns.map(column => {\n      var _column$headerName3;\n      return (_column$headerName3 = column.headerName) != null ? _column$headerName3 : column.field;\n    }));\n  }\n  const valueOptionsData = await getDataForValueOptionsSheet(columns, valueOptionsSheetName, api);\n  createValueOptionsSheetIfNeeded(valueOptionsData, valueOptionsSheetName, workbook);\n  rowIds.forEach(id => {\n    const serializedRow = serializeRow(id, columns, api, valueOptionsData);\n    addSerializedRowToWorksheet(serializedRow, worksheet);\n  });\n  if (exceljsPostProcess) {\n    await exceljsPostProcess({\n      workbook,\n      worksheet\n    });\n  }\n  return workbook;\n}\nexport function setupExcelExportWebWorker(workerOptions = {}) {\n  // eslint-disable-next-line no-restricted-globals\n  addEventListener('message', async event => {\n    var _options$includeHeade;\n    const {\n      serializedColumns,\n      serializedRows,\n      options,\n      valueOptionsSheetName,\n      valueOptionsData,\n      columnGroupDetails,\n      columnGroupPaths\n    } = event.data;\n    const {\n      exceljsPostProcess,\n      exceljsPreProcess\n    } = workerOptions;\n    const excelJS = await getExcelJs();\n    const workbook = new excelJS.Workbook();\n    const worksheet = workbook.addWorksheet('Sheet1');\n    worksheet.columns = serializedColumns;\n    if (exceljsPreProcess) {\n      await exceljsPreProcess({\n        workbook,\n        worksheet\n      });\n    }\n    if (options.includeColumnGroupsHeaders) {\n      addColumnGroupingHeaders(worksheet, serializedColumns, columnGroupPaths, columnGroupDetails);\n    }\n    const includeHeaders = (_options$includeHeade = options.includeHeaders) != null ? _options$includeHeade : true;\n    if (includeHeaders) {\n      worksheet.addRow(serializedColumns.map(column => column.headerText));\n    }\n    createValueOptionsSheetIfNeeded(valueOptionsData, valueOptionsSheetName, workbook);\n    serializedRows.forEach(serializedRow => {\n      addSerializedRowToWorksheet(serializedRow, worksheet);\n    });\n    if (exceljsPostProcess) {\n      await exceljsPostProcess({\n        workbook,\n        worksheet\n      });\n    }\n    postMessage(await workbook.xlsx.writeBuffer());\n  });\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"hideMenu\", \"options\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport MenuItem from '@mui/material/MenuItem';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction GridExcelExportMenuItem(props) {\n  const apiRef = useGridApiContext();\n  const {\n      hideMenu,\n      options\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  return /*#__PURE__*/_jsx(MenuItem, _extends({\n    onClick: () => {\n      apiRef.current.exportDataAsExcel(options);\n      hideMenu == null || hideMenu();\n    }\n  }, other, {\n    children: apiRef.current.getLocaleText('toolbarExportExcel')\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridExcelExportMenuItem.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  hideMenu: PropTypes.func,\n  options: PropTypes.shape({\n    allColumns: PropTypes.bool,\n    columnsStyles: PropTypes.object,\n    disableToolbarButton: PropTypes.bool,\n    exceljsPostProcess: PropTypes.func,\n    exceljsPreProcess: PropTypes.func,\n    fields: PropTypes.arrayOf(PropTypes.string),\n    fileName: PropTypes.string,\n    getRowsToExport: PropTypes.func,\n    includeColumnGroupsHeaders: PropTypes.bool,\n    includeHeaders: PropTypes.bool,\n    valueOptionsSheetName: PropTypes.string,\n    worker: PropTypes.func\n  })\n} : void 0;\nexport { GridExcelExportMenuItem };","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"worker\", \"exceljsPostProcess\", \"exceljsPreProcess\", \"columnsStyles\", \"includeHeaders\", \"getRowsToExport\", \"valueOptionsSheetName\"];\nimport * as React from 'react';\nimport { useGridApiMethod, useGridLogger, useGridApiOptionHandler } from '@mui/x-data-grid';\nimport { useGridRegisterPipeProcessor, exportAs, getColumnsToExport, defaultGetRowsToExport } from '@mui/x-data-grid/internals';\nimport { buildExcel, getDataForValueOptionsSheet, serializeColumns, serializeRow } from './serializer/excelSerializer';\nimport { GridExcelExportMenuItem } from '../../../components';\n\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const useGridExcelExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridExcelExport');\n  const getDataAsExcel = React.useCallback((options = {}) => {\n    var _options$getRowsToExp, _options$includeHeade, _options$includeColum;\n    logger.debug(`Get data as excel`);\n    const getRowsToExport = (_options$getRowsToExp = options.getRowsToExport) != null ? _options$getRowsToExp : defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    return buildExcel({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      includeHeaders: (_options$includeHeade = options.includeHeaders) != null ? _options$includeHeade : true,\n      includeColumnGroupsHeaders: (_options$includeColum = options.includeColumnGroupsHeaders) != null ? _options$includeColum : true,\n      valueOptionsSheetName: (options == null ? void 0 : options.valueOptionsSheetName) || 'Options',\n      columnsStyles: options == null ? void 0 : options.columnsStyles,\n      exceljsPreProcess: options == null ? void 0 : options.exceljsPreProcess,\n      exceljsPostProcess: options == null ? void 0 : options.exceljsPostProcess\n    }, apiRef.current);\n  }, [logger, apiRef]);\n  const exportDataAsExcel = React.useCallback(async (options = {}) => {\n    const {\n        worker: workerFn,\n        exceljsPostProcess,\n        exceljsPreProcess,\n        getRowsToExport = defaultGetRowsToExport,\n        valueOptionsSheetName = 'Options'\n      } = options,\n      cloneableOptions = _objectWithoutPropertiesLoose(options, _excluded);\n    const sendExcelToUser = buffer => {\n      const blob = new Blob([buffer], {\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      });\n      exportAs(blob, 'xlsx', options == null ? void 0 : options.fileName);\n    };\n    if (!workerFn) {\n      apiRef.current.publishEvent('excelExportStateChange', 'pending');\n      const workbook = await getDataAsExcel(options);\n      if (workbook === null) {\n        return;\n      }\n      const content = await workbook.xlsx.writeBuffer();\n      apiRef.current.publishEvent('excelExportStateChange', 'finished');\n      sendExcelToUser(content);\n      return;\n    }\n    if (exceljsPostProcess && process.env.NODE_ENV !== 'production') {\n      console.warn([`MUI: The exceljsPostProcess option is not supported when a web worker is used.`, 'As alternative, pass the callback to the same option in setupExcelExportWebWorker.'].join('\\n'));\n    }\n    if (exceljsPreProcess && process.env.NODE_ENV !== 'production') {\n      console.warn([`MUI: The exceljsPreProcess option is not supported when a web worker is used.`, 'As alternative, pass the callback to the same option in setupExcelExportWebWorker.'].join('\\n'));\n    }\n    const worker = workerFn();\n    apiRef.current.publishEvent('excelExportStateChange', 'pending');\n    worker.onmessage = async event => {\n      sendExcelToUser(event.data);\n      apiRef.current.publishEvent('excelExportStateChange', 'finished');\n      worker.terminate();\n    };\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    const valueOptionsData = await getDataForValueOptionsSheet(exportedColumns, valueOptionsSheetName, apiRef.current);\n    const serializedColumns = serializeColumns(exportedColumns, options.columnsStyles || {});\n    const serializedRows = exportedRowIds.map(id => serializeRow(id, exportedColumns, apiRef.current, valueOptionsData));\n    const columnGroupPaths = exportedColumns.reduce((acc, column) => {\n      acc[column.field] = apiRef.current.unstable_getColumnGroupPath(column.field);\n      return acc;\n    }, {});\n    const message = {\n      serializedColumns,\n      serializedRows,\n      valueOptionsData,\n      columnGroupPaths,\n      columnGroupDetails: apiRef.current.unstable_getAllGroupDetails(),\n      options: cloneableOptions,\n      valueOptionsSheetName\n    };\n    worker.postMessage(message);\n  }, [apiRef, getDataAsExcel]);\n  const excelExportApi = {\n    getDataAsExcel,\n    exportDataAsExcel\n  };\n  useGridApiMethod(apiRef, excelExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$excelOptions;\n    if ((_options$excelOptions = options.excelOptions) != null && _options$excelOptions.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridExcelExportMenuItem, {\n        options: options.excelOptions\n      }),\n      componentName: 'excelExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n  useGridApiOptionHandler(apiRef, 'excelExportStateChange', props.onExcelExportStateChange);\n};","export const gridCellSelectionStateSelector = state => state.cellSelection;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument, useEventCallback } from '@mui/material/utils';\nimport { isNavigationKey, serializeCellValue, useGridRegisterPipeProcessor, useGridVisibleRows } from '@mui/x-data-grid-pro/internals';\nimport { useGridApiEventHandler, useGridApiMethod, GRID_ACTIONS_COLUMN_TYPE, GRID_CHECKBOX_SELECTION_COL_DEF, GRID_DETAIL_PANEL_TOGGLE_FIELD, gridRowsDataRowIdToIdLookupSelector, gridClasses, gridFocusCellSelector, GRID_REORDER_COL_DEF, useGridSelector, gridSortedRowIdsSelector } from '@mui/x-data-grid-pro';\nimport { gridCellSelectionStateSelector } from './gridCellSelectionSelector';\nexport const cellSelectionStateInitializer = (state, props) => {\n  var _props$unstable_cellS, _props$initialState;\n  return _extends({}, state, {\n    cellSelection: _extends({}, (_props$unstable_cellS = props.unstable_cellSelectionModel) != null ? _props$unstable_cellS : (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.cellSelection)\n  });\n};\nfunction isKeyboardEvent(event) {\n  return !!event.key;\n}\nconst AUTO_SCROLL_SENSITIVITY = 50; // The distance from the edge to start scrolling\nconst AUTO_SCROLL_SPEED = 20; // The speed to scroll once the mouse enters the sensitivity area\n\nexport const useGridCellSelection = (apiRef, props) => {\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const cellWithVirtualFocus = React.useRef();\n  const lastMouseDownCell = React.useRef();\n  const mousePosition = React.useRef(null);\n  const autoScrollRAF = React.useRef();\n  const sortedRowIds = useGridSelector(apiRef, gridSortedRowIdsSelector);\n  const ignoreValueFormatterProp = props.unstable_ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp == null ? void 0 : ignoreValueFormatterProp.clipboardExport : ignoreValueFormatterProp) || false;\n  const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;\n  apiRef.current.registerControlState({\n    stateId: 'cellSelection',\n    propModel: props.unstable_cellSelectionModel,\n    propOnChange: props.unstable_onCellSelectionModelChange,\n    stateSelector: gridCellSelectionStateSelector,\n    changeEvent: 'cellSelectionChange'\n  });\n  const runIfCellSelectionIsEnabled = callback => (...args) => {\n    if (props.unstable_cellSelection) {\n      callback(...args);\n    }\n  };\n  const isCellSelected = React.useCallback((id, field) => {\n    if (!props.unstable_cellSelection) {\n      return false;\n    }\n    const cellSelectionModel = gridCellSelectionStateSelector(apiRef.current.state);\n    return cellSelectionModel[id] ? !!cellSelectionModel[id][field] : false;\n  }, [apiRef, props.unstable_cellSelection]);\n  const getCellSelectionModel = React.useCallback(() => {\n    return gridCellSelectionStateSelector(apiRef.current.state);\n  }, [apiRef]);\n  const setCellSelectionModel = React.useCallback(newModel => {\n    if (!props.unstable_cellSelection) {\n      return;\n    }\n    apiRef.current.setState(prevState => _extends({}, prevState, {\n      cellSelection: newModel\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.unstable_cellSelection]);\n  const selectCellRange = React.useCallback((start, end, keepOtherSelected = false) => {\n    const startRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(start.id);\n    const startColumnIndex = apiRef.current.getColumnIndex(start.field);\n    const endRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(end.id);\n    const endColumnIndex = apiRef.current.getColumnIndex(end.field);\n    let finalStartRowIndex = startRowIndex;\n    let finalStartColumnIndex = startColumnIndex;\n    let finalEndRowIndex = endRowIndex;\n    let finalEndColumnIndex = endColumnIndex;\n    if (finalStartRowIndex > finalEndRowIndex) {\n      finalStartRowIndex = endRowIndex;\n      finalEndRowIndex = startRowIndex;\n    }\n    if (finalStartColumnIndex > finalEndColumnIndex) {\n      finalStartColumnIndex = endColumnIndex;\n      finalEndColumnIndex = startColumnIndex;\n    }\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    const rowsInRange = visibleRows.rows.slice(finalStartRowIndex, finalEndRowIndex + 1);\n    const columnsInRange = visibleColumns.slice(finalStartColumnIndex, finalEndColumnIndex + 1);\n    const newModel = keepOtherSelected ? apiRef.current.unstable_getCellSelectionModel() : {};\n    rowsInRange.forEach(row => {\n      if (!newModel[row.id]) {\n        newModel[row.id] = {};\n      }\n      columnsInRange.forEach(column => {\n        newModel[row.id][column.field] = true;\n      }, {});\n    });\n    apiRef.current.unstable_setCellSelectionModel(newModel);\n  }, [apiRef, visibleRows.rows]);\n  const getSelectedCellsAsArray = React.useCallback(() => {\n    const model = apiRef.current.unstable_getCellSelectionModel();\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n    return Object.entries(model).reduce((acc, [id, fields]) => [...acc, ...Object.entries(fields).reduce((acc2, [field, isSelected]) => {\n      return isSelected ? [...acc2, {\n        id: idToIdLookup[id],\n        field\n      }] : acc2;\n    }, [])], []);\n  }, [apiRef]);\n  const cellSelectionApi = {\n    unstable_isCellSelected: isCellSelected,\n    unstable_getCellSelectionModel: getCellSelectionModel,\n    unstable_setCellSelectionModel: setCellSelectionModel,\n    unstable_selectCellRange: selectCellRange,\n    unstable_getSelectedCellsAsArray: getSelectedCellsAsArray\n  };\n  useGridApiMethod(apiRef, cellSelectionApi, 'public');\n  const hasClickedValidCellForRangeSelection = React.useCallback(params => {\n    if (params.field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      return false;\n    }\n    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      return false;\n    }\n    const column = apiRef.current.getColumn(params.field);\n    if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n      return false;\n    }\n    return params.rowNode.type !== 'pinnedRow';\n  }, [apiRef]);\n  const handleMouseUp = useEventCallback(() => {\n    var _apiRef$current$rootE;\n    lastMouseDownCell.current = null;\n    (_apiRef$current$rootE = apiRef.current.rootElementRef) == null || (_apiRef$current$rootE = _apiRef$current$rootE.current) == null || _apiRef$current$rootE.classList.remove(gridClasses['root--disableUserSelection']);\n\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopAutoScroll();\n  });\n  const handleCellMouseDown = React.useCallback((params, event) => {\n    var _apiRef$current$rootE2, _apiRef$current$rootE3;\n    // Skip if the click comes from the right-button or, only on macOS, Ctrl is pressed\n    // Fix for https://github.com/mui/mui-x/pull/6567#issuecomment-1329155578\n    const isMacOs = window.navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n    if (event.button !== 0 || event.ctrlKey && isMacOs) {\n      return;\n    }\n    if (params.field === GRID_REORDER_COL_DEF.field) {\n      return;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (hasClickedValidCellForRangeSelection(params) && event.shiftKey && focusedCell) {\n      event.preventDefault();\n    }\n    lastMouseDownCell.current = {\n      id: params.id,\n      field: params.field\n    };\n    (_apiRef$current$rootE2 = apiRef.current.rootElementRef) == null || (_apiRef$current$rootE2 = _apiRef$current$rootE2.current) == null || _apiRef$current$rootE2.classList.add(gridClasses['root--disableUserSelection']);\n    const document = ownerDocument((_apiRef$current$rootE3 = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE3.current);\n    document.addEventListener('mouseup', handleMouseUp, {\n      once: true\n    });\n  }, [apiRef, handleMouseUp, hasClickedValidCellForRangeSelection]);\n  const stopAutoScroll = React.useCallback(() => {\n    if (autoScrollRAF.current) {\n      cancelAnimationFrame(autoScrollRAF.current);\n      autoScrollRAF.current = null;\n    }\n  }, []);\n  const handleCellFocusIn = React.useCallback(params => {\n    cellWithVirtualFocus.current = {\n      id: params.id,\n      field: params.field\n    };\n  }, []);\n  const startAutoScroll = React.useCallback(() => {\n    var _apiRef$current$virtu, _apiRef$current$virtu2;\n    if (autoScrollRAF.current) {\n      return;\n    }\n    if (!((_apiRef$current$virtu = apiRef.current.virtualScrollerRef) != null && _apiRef$current$virtu.current)) {\n      return;\n    }\n    const virtualScrollerRect = (_apiRef$current$virtu2 = apiRef.current.virtualScrollerRef) == null || (_apiRef$current$virtu2 = _apiRef$current$virtu2.current) == null ? void 0 : _apiRef$current$virtu2.getBoundingClientRect();\n    if (!virtualScrollerRect) {\n      return;\n    }\n    function autoScroll() {\n      var _apiRef$current$virtu3;\n      if (!mousePosition.current || !((_apiRef$current$virtu3 = apiRef.current.virtualScrollerRef) != null && _apiRef$current$virtu3.current)) {\n        return;\n      }\n      const {\n        x: mouseX,\n        y: mouseY\n      } = mousePosition.current;\n      const {\n        height,\n        width\n      } = virtualScrollerRect;\n      let deltaX = 0;\n      let deltaY = 0;\n      let factor = 0;\n      const dimensions = apiRef.current.getRootDimensions();\n      if (mouseY <= AUTO_SCROLL_SENSITIVITY && dimensions != null && dimensions.hasScrollY) {\n        // When scrolling up, the multiplier increases going closer to the top edge\n        factor = (AUTO_SCROLL_SENSITIVITY - mouseY) / -AUTO_SCROLL_SENSITIVITY;\n        deltaY = AUTO_SCROLL_SPEED;\n      } else if (mouseY >= height - AUTO_SCROLL_SENSITIVITY && dimensions != null && dimensions.hasScrollY) {\n        // When scrolling down, the multiplier increases going closer to the bottom edge\n        factor = (mouseY - (height - AUTO_SCROLL_SENSITIVITY)) / AUTO_SCROLL_SENSITIVITY;\n        deltaY = AUTO_SCROLL_SPEED;\n      } else if (mouseX <= AUTO_SCROLL_SENSITIVITY && dimensions != null && dimensions.hasScrollX) {\n        // When scrolling left, the multiplier increases going closer to the left edge\n        factor = (AUTO_SCROLL_SENSITIVITY - mouseX) / -AUTO_SCROLL_SENSITIVITY;\n        deltaX = AUTO_SCROLL_SPEED;\n      } else if (mouseX >= width - AUTO_SCROLL_SENSITIVITY && dimensions != null && dimensions.hasScrollX) {\n        // When scrolling right, the multiplier increases going closer to the right edge\n        factor = (mouseX - (width - AUTO_SCROLL_SENSITIVITY)) / AUTO_SCROLL_SENSITIVITY;\n        deltaX = AUTO_SCROLL_SPEED;\n      }\n      if (deltaX !== 0 || deltaY !== 0) {\n        const {\n          scrollLeft,\n          scrollTop\n        } = apiRef.current.virtualScrollerRef.current;\n        apiRef.current.scroll({\n          top: scrollTop + deltaY * factor,\n          left: scrollLeft + deltaX * factor\n        });\n      }\n      autoScrollRAF.current = requestAnimationFrame(autoScroll);\n    }\n    autoScroll();\n  }, [apiRef]);\n  const handleCellMouseOver = React.useCallback((params, event) => {\n    var _apiRef$current$virtu4;\n    if (!lastMouseDownCell.current) {\n      return;\n    }\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.unstable_selectCellRange(lastMouseDownCell.current, {\n      id,\n      field\n    }, event.ctrlKey || event.metaKey);\n    const virtualScrollerRect = (_apiRef$current$virtu4 = apiRef.current.virtualScrollerRef) == null || (_apiRef$current$virtu4 = _apiRef$current$virtu4.current) == null ? void 0 : _apiRef$current$virtu4.getBoundingClientRect();\n    if (!virtualScrollerRect) {\n      return;\n    }\n    const {\n      height,\n      width,\n      x,\n      y\n    } = virtualScrollerRect;\n    const mouseX = event.clientX - x;\n    const mouseY = event.clientY - y;\n    mousePosition.current = {\n      x: mouseX,\n      y: mouseY\n    };\n    const hasEnteredVerticalSensitivityArea = mouseY <= AUTO_SCROLL_SENSITIVITY || mouseY >= height - AUTO_SCROLL_SENSITIVITY;\n    const hasEnteredHorizontalSensitivityArea = mouseX <= AUTO_SCROLL_SENSITIVITY || mouseX >= width - AUTO_SCROLL_SENSITIVITY;\n    const hasEnteredSensitivityArea = hasEnteredVerticalSensitivityArea || hasEnteredHorizontalSensitivityArea;\n    if (hasEnteredSensitivityArea) {\n      // Mouse has entered the sensitity area for the first time\n      startAutoScroll();\n    } else {\n      // Mouse has left the sensitivity area while auto scroll is on\n      stopAutoScroll();\n    }\n  }, [apiRef, startAutoScroll, stopAutoScroll]);\n  const handleCellClick = useEventCallback((params, event) => {\n    const {\n      id,\n      field\n    } = params;\n    if (!hasClickedValidCellForRangeSelection(params)) {\n      return;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (event.shiftKey && focusedCell) {\n      apiRef.current.unstable_selectCellRange(focusedCell, {\n        id,\n        field\n      });\n      cellWithVirtualFocus.current = {\n        id,\n        field\n      };\n      return;\n    }\n    if (event.ctrlKey || event.metaKey) {\n      // Add the clicked cell to the selection\n      const prevModel = apiRef.current.unstable_getCellSelectionModel();\n      apiRef.current.unstable_setCellSelectionModel(_extends({}, prevModel, {\n        [id]: _extends({}, prevModel[id], {\n          [field]: !apiRef.current.unstable_isCellSelected(id, field)\n        })\n      }));\n    } else {\n      // Clear the selection and keep only the clicked cell selected\n      apiRef.current.unstable_setCellSelectionModel({\n        [id]: {\n          [field]: true\n        }\n      });\n    }\n  });\n  const handleCellKeyDown = useEventCallback((params, event) => {\n    if (!isNavigationKey(event.key) || !cellWithVirtualFocus.current) {\n      return;\n    }\n    if (!event.shiftKey) {\n      apiRef.current.unstable_setCellSelectionModel({});\n      return;\n    }\n    const {\n      current: otherCell\n    } = cellWithVirtualFocus;\n    let endRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(otherCell.id);\n    let endColumnIndex = apiRef.current.getColumnIndex(otherCell.field);\n    if (event.key === 'ArrowDown') {\n      endRowIndex += 1;\n    } else if (event.key === 'ArrowUp') {\n      endRowIndex -= 1;\n    } else if (event.key === 'ArrowRight') {\n      endColumnIndex += 1;\n    } else if (event.key === 'ArrowLeft') {\n      endColumnIndex -= 1;\n    }\n    if (endRowIndex < 0 || endRowIndex >= visibleRows.rows.length) {\n      return;\n    }\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    if (endColumnIndex < 0 || endColumnIndex >= visibleColumns.length) {\n      return;\n    }\n    cellWithVirtualFocus.current = {\n      id: visibleRows.rows[endRowIndex].id,\n      field: visibleColumns[endColumnIndex].field\n    };\n    apiRef.current.scrollToIndexes({\n      rowIndex: endRowIndex,\n      colIndex: endColumnIndex\n    });\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.unstable_selectCellRange({\n      id,\n      field\n    }, cellWithVirtualFocus.current);\n  });\n  useGridApiEventHandler(apiRef, 'cellClick', runIfCellSelectionIsEnabled(handleCellClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfCellSelectionIsEnabled(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfCellSelectionIsEnabled(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfCellSelectionIsEnabled(handleCellMouseDown));\n  useGridApiEventHandler(apiRef, 'cellMouseOver', runIfCellSelectionIsEnabled(handleCellMouseOver));\n  React.useEffect(() => {\n    if (props.unstable_cellSelectionModel) {\n      apiRef.current.unstable_setCellSelectionModel(props.unstable_cellSelectionModel);\n    }\n  }, [apiRef, props.unstable_cellSelectionModel]);\n  React.useEffect(() => {\n    var _apiRef$current$rootE4;\n    const rootRef = (_apiRef$current$rootE4 = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE4.current;\n    return () => {\n      stopAutoScroll();\n      const document = ownerDocument(rootRef);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [apiRef, handleMouseUp, stopAutoScroll]);\n  const checkIfCellIsSelected = React.useCallback((isSelected, {\n    id,\n    field\n  }) => {\n    return apiRef.current.unstable_isCellSelected(id, field);\n  }, [apiRef]);\n  const addClassesToCells = React.useCallback((classes, {\n    id,\n    field\n  }) => {\n    const newClasses = [...classes];\n    if (!visibleRows.range || !apiRef.current.unstable_isCellSelected(id, field)) {\n      return classes;\n    }\n    const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const columnIndex = apiRef.current.getColumnIndex(field);\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    if (rowIndex > 0) {\n      const {\n        id: previousRowId\n      } = visibleRows.rows[rowIndex - 1];\n      if (!apiRef.current.unstable_isCellSelected(previousRowId, field)) {\n        newClasses.push(gridClasses['cell--rangeTop']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeTop']);\n    }\n    if (rowIndex + visibleRows.range.firstRowIndex < visibleRows.range.lastRowIndex) {\n      const {\n        id: nextRowId\n      } = visibleRows.rows[rowIndex + 1];\n      if (!apiRef.current.unstable_isCellSelected(nextRowId, field)) {\n        newClasses.push(gridClasses['cell--rangeBottom']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeBottom']);\n    }\n    if (columnIndex > 0) {\n      const {\n        field: previousColumnField\n      } = visibleColumns[columnIndex - 1];\n      if (!apiRef.current.unstable_isCellSelected(id, previousColumnField)) {\n        newClasses.push(gridClasses['cell--rangeLeft']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeLeft']);\n    }\n    if (columnIndex < visibleColumns.length - 1) {\n      const {\n        field: nextColumnField\n      } = visibleColumns[columnIndex + 1];\n      if (!apiRef.current.unstable_isCellSelected(id, nextColumnField)) {\n        newClasses.push(gridClasses['cell--rangeRight']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeRight']);\n    }\n    return newClasses;\n  }, [apiRef, visibleRows.range, visibleRows.rows]);\n  const canUpdateFocus = React.useCallback((initialValue, {\n    event,\n    cell\n  }) => {\n    if (!cell || !props.unstable_cellSelection || !event.shiftKey) {\n      return initialValue;\n    }\n    if (isKeyboardEvent(event)) {\n      return isNavigationKey(event.key) ? false : initialValue;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (hasClickedValidCellForRangeSelection(cell) && focusedCell) {\n      return false;\n    }\n    return initialValue;\n  }, [apiRef, props.unstable_cellSelection, hasClickedValidCellForRangeSelection]);\n  const handleClipboardCopy = React.useCallback(value => {\n    if (apiRef.current.unstable_getSelectedCellsAsArray().length <= 1) {\n      return value;\n    }\n    const cellSelectionModel = apiRef.current.unstable_getCellSelectionModel();\n    const unsortedSelectedRowIds = Object.keys(cellSelectionModel);\n    const sortedSelectedRowIds = sortedRowIds.filter(id => unsortedSelectedRowIds.includes(`${id}`));\n    const copyData = sortedSelectedRowIds.reduce((acc, rowId) => {\n      const fieldsMap = cellSelectionModel[rowId];\n      const rowString = Object.keys(fieldsMap).reduce((acc2, field) => {\n        let cellData;\n        if (fieldsMap[field]) {\n          const cellParams = apiRef.current.getCellParams(rowId, field);\n          cellData = serializeCellValue(cellParams, {\n            delimiterCharacter: clipboardCopyCellDelimiter,\n            ignoreValueFormatter\n          });\n        } else {\n          cellData = '';\n        }\n        return acc2 === '' ? cellData : [acc2, cellData].join(clipboardCopyCellDelimiter);\n      }, '');\n      return acc === '' ? rowString : [acc, rowString].join('\\r\\n');\n    }, '');\n    return copyData;\n  }, [apiRef, ignoreValueFormatter, clipboardCopyCellDelimiter, sortedRowIds]);\n  useGridRegisterPipeProcessor(apiRef, 'isCellSelected', checkIfCellIsSelected);\n  useGridRegisterPipeProcessor(apiRef, 'cellClassName', addClassesToCells);\n  useGridRegisterPipeProcessor(apiRef, 'canUpdateFocus', canUpdateFocus);\n  useGridRegisterPipeProcessor(apiRef, 'clipboardCopy', handleClipboardCopy);\n};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GRID_CHECKBOX_SELECTION_FIELD, gridFocusCellSelector, gridVisibleColumnFieldsSelector, useGridApiOptionHandler, useGridApiEventHandler, gridPaginatedVisibleSortedGridRowIdsSelector, gridExpandedSortedRowIdsSelector } from '@mui/x-data-grid';\nimport { buildWarning, getRowIdFromRowModel, getActiveElement, useGridRegisterPipeProcessor, getPublicApiRef } from '@mui/x-data-grid/internals';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD, GRID_REORDER_COL_DEF } from '@mui/x-data-grid-pro';\nimport { unstable_debounce as debounce } from '@mui/utils';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#server-side-persistence.'], 'error');\nconst columnFieldsToExcludeFromPaste = [GRID_CHECKBOX_SELECTION_FIELD, GRID_REORDER_COL_DEF.field, GRID_DETAIL_PANEL_TOGGLE_FIELD];\n\n// Batches rows that are updated during clipboard paste to reduce `updateRows` calls\nfunction batchRowUpdates(func, wait) {\n  let rows = [];\n  const debounced = debounce(() => {\n    func(rows);\n    rows = [];\n  }, wait);\n  return row => {\n    rows.push(row);\n    debounced();\n  };\n}\nasync function getTextFromClipboard(rootEl) {\n  return new Promise(resolve => {\n    const focusedCell = getActiveElement(document);\n    const el = document.createElement('input');\n    el.style.width = '0px';\n    el.style.height = '0px';\n    el.style.border = 'none';\n    el.style.margin = '0';\n    el.style.padding = '0';\n    el.style.outline = 'none';\n    el.style.position = 'absolute';\n    el.style.top = '0';\n    el.style.left = '0';\n    const handlePasteEvent = event => {\n      var _event$clipboardData;\n      el.removeEventListener('paste', handlePasteEvent);\n      const text = (_event$clipboardData = event.clipboardData) == null ? void 0 : _event$clipboardData.getData('text/plain');\n      if (focusedCell instanceof HTMLElement) {\n        focusedCell.focus({\n          preventScroll: true\n        });\n      }\n      el.remove();\n      resolve(text || '');\n    };\n    el.addEventListener('paste', handlePasteEvent);\n    rootEl.appendChild(el);\n    el.focus({\n      preventScroll: true\n    });\n  });\n}\n\n// Keeps track of updated rows during clipboard paste\nclass CellValueUpdater {\n  constructor(options) {\n    this.rowsToUpdate = {};\n    this.updateRow = void 0;\n    this.options = void 0;\n    this.options = options;\n    this.updateRow = batchRowUpdates(options.apiRef.current.updateRows, 50);\n  }\n  updateCell({\n    rowId,\n    field,\n    pastedCellValue\n  }) {\n    if (pastedCellValue === undefined) {\n      return;\n    }\n    const {\n      apiRef,\n      getRowId\n    } = this.options;\n    const colDef = apiRef.current.getColumn(field);\n    if (!colDef || !colDef.editable) {\n      return;\n    }\n    const row = this.rowsToUpdate[rowId] || _extends({}, apiRef.current.getRow(rowId));\n    if (!row) {\n      return;\n    }\n    const cellParams = apiRef.current.getCellParams(rowId, field);\n    let parsedValue = pastedCellValue;\n    if (colDef.pastedValueParser) {\n      parsedValue = colDef.pastedValueParser(pastedCellValue, cellParams);\n    } else if (colDef.valueParser) {\n      parsedValue = colDef.valueParser(parsedValue, cellParams);\n    }\n    if (parsedValue === undefined) {\n      return;\n    }\n    let rowCopy = _extends({}, row);\n    if (typeof colDef.valueSetter === 'function') {\n      rowCopy = colDef.valueSetter({\n        value: parsedValue,\n        row: rowCopy\n      });\n    } else {\n      rowCopy[field] = parsedValue;\n    }\n    const newRowId = getRowIdFromRowModel(rowCopy, getRowId);\n    if (String(newRowId) !== String(rowId)) {\n      // We cannot update row id, so this cell value update should be ignored\n      return;\n    }\n    this.rowsToUpdate[rowId] = rowCopy;\n  }\n  applyUpdates() {\n    const {\n      apiRef,\n      processRowUpdate,\n      onProcessRowUpdateError\n    } = this.options;\n    const rowsToUpdate = this.rowsToUpdate;\n    const rowIdsToUpdate = Object.keys(rowsToUpdate);\n    if (rowIdsToUpdate.length === 0) {\n      apiRef.current.publishEvent('clipboardPasteEnd');\n      return;\n    }\n    const handleRowUpdate = async rowId => {\n      const newRow = rowsToUpdate[rowId];\n      if (typeof processRowUpdate === 'function') {\n        const handleError = errorThrown => {\n          if (onProcessRowUpdateError) {\n            onProcessRowUpdateError(errorThrown);\n          } else {\n            missingOnProcessRowUpdateErrorWarning();\n          }\n        };\n        try {\n          const oldRow = apiRef.current.getRow(rowId);\n          const finalRowUpdate = await processRowUpdate(newRow, oldRow);\n          this.updateRow(finalRowUpdate);\n        } catch (error) {\n          handleError(error);\n        }\n      } else {\n        this.updateRow(newRow);\n      }\n    };\n    const promises = rowIdsToUpdate.map(rowId => {\n      // Wrap in promise that always resolves to avoid Promise.all from stopping on first error.\n      // This is to avoid using `Promise.allSettled` that has worse browser support.\n      return new Promise(resolve => {\n        handleRowUpdate(rowId).then(resolve).catch(resolve);\n      });\n    });\n    Promise.all(promises).then(() => {\n      this.rowsToUpdate = {};\n      apiRef.current.publishEvent('clipboardPasteEnd');\n    });\n  }\n}\nfunction defaultPasteResolver({\n  pastedData,\n  apiRef,\n  updateCell,\n  pagination\n}) {\n  const isSingleValuePasted = pastedData.length === 1 && pastedData[0].length === 1;\n  const cellSelectionModel = apiRef.current.unstable_getCellSelectionModel();\n  if (cellSelectionModel && apiRef.current.unstable_getSelectedCellsAsArray().length > 1) {\n    Object.keys(cellSelectionModel).forEach((rowId, rowIndex) => {\n      const rowDataArr = pastedData[isSingleValuePasted ? 0 : rowIndex];\n      const hasRowData = isSingleValuePasted ? true : rowDataArr !== undefined;\n      if (!hasRowData) {\n        return;\n      }\n      Object.keys(cellSelectionModel[rowId]).forEach((field, colIndex) => {\n        const cellValue = isSingleValuePasted ? rowDataArr[0] : rowDataArr[colIndex];\n        updateCell({\n          rowId,\n          field,\n          pastedCellValue: cellValue\n        });\n      });\n    });\n    return;\n  }\n  const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef).filter(field => {\n    if (columnFieldsToExcludeFromPaste.includes(field)) {\n      return false;\n    }\n    return true;\n  });\n  const selectedRows = apiRef.current.getSelectedRows();\n  if (selectedRows.size > 0 && !isSingleValuePasted) {\n    // Multiple values are pasted starting from the first and top-most cell\n    const pastedRowsDataCount = pastedData.length;\n\n    // There's no guarantee that the selected rows are in the same order as the pasted rows\n    selectedRows.forEach((row, rowId) => {\n      let rowData;\n      if (pastedRowsDataCount === 1) {\n        // If only one row is pasted - paste it to all selected rows\n        rowData = pastedData[0];\n      } else {\n        rowData = pastedData.shift();\n      }\n      if (rowData === undefined) {\n        return;\n      }\n      rowData.forEach((newCellValue, cellIndex) => {\n        updateCell({\n          rowId,\n          field: visibleColumnFields[cellIndex],\n          pastedCellValue: newCellValue\n        });\n      });\n    });\n    return;\n  }\n  const selectedCell = gridFocusCellSelector(apiRef);\n  if (!selectedCell) {\n    return;\n  }\n  if (columnFieldsToExcludeFromPaste.includes(selectedCell.field)) {\n    return;\n  }\n  const selectedRowId = selectedCell.id;\n  const selectedRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(selectedRowId);\n  const visibleRowIds = pagination ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n  const selectedFieldIndex = visibleColumnFields.indexOf(selectedCell.field);\n  pastedData.forEach((rowData, index) => {\n    const rowId = visibleRowIds[selectedRowIndex + index];\n    if (typeof rowId === 'undefined') {\n      return;\n    }\n    for (let i = selectedFieldIndex; i < visibleColumnFields.length; i += 1) {\n      const field = visibleColumnFields[i];\n      const stringValue = rowData[i - selectedFieldIndex];\n      updateCell({\n        rowId,\n        field,\n        pastedCellValue: stringValue\n      });\n    }\n  });\n}\nfunction isPasteShortcut(event) {\n  return (event.ctrlKey || event.metaKey) && event.key === 'v';\n}\nexport const useGridClipboardImport = (apiRef, props) => {\n  var _ref, _props$experimentalFe, _apiRef$current$rootE;\n  const processRowUpdate = props.processRowUpdate;\n  const onProcessRowUpdateError = props.onProcessRowUpdateError;\n  const getRowId = props.getRowId;\n  const enableClipboardPaste = (_ref = !props.disableClipboardPaste && ((_props$experimentalFe = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe.clipboardPaste)) != null ? _ref : false;\n  const rootEl = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;\n  const splitClipboardPastedText = props.unstable_splitClipboardPastedText;\n  const handlePaste = React.useCallback(async (params, event) => {\n    if (!enableClipboardPaste) {\n      return;\n    }\n    if (!isPasteShortcut(event)) {\n      return;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (focusedCell !== null) {\n      const cellMode = apiRef.current.getCellMode(focusedCell.id, focusedCell.field);\n      if (cellMode === 'edit') {\n        // Do not paste data when the cell is in edit mode\n        return;\n      }\n    }\n    if (!rootEl) {\n      return;\n    }\n    const text = await getTextFromClipboard(rootEl);\n    if (!text) {\n      return;\n    }\n    const pastedData = splitClipboardPastedText(text);\n    if (!pastedData) {\n      return;\n    }\n    const cellUpdater = new CellValueUpdater({\n      apiRef,\n      processRowUpdate,\n      onProcessRowUpdateError,\n      getRowId\n    });\n    apiRef.current.publishEvent('clipboardPasteStart', {\n      data: pastedData\n    });\n    defaultPasteResolver({\n      pastedData,\n      apiRef: getPublicApiRef(apiRef),\n      updateCell: (...args) => {\n        cellUpdater.updateCell(...args);\n      },\n      pagination: props.pagination\n    });\n    cellUpdater.applyUpdates();\n  }, [apiRef, processRowUpdate, onProcessRowUpdateError, getRowId, enableClipboardPaste, rootEl, splitClipboardPastedText, props.pagination]);\n  const checkIfCanStartEditing = React.useCallback((initialValue, {\n    event\n  }) => {\n    if (isPasteShortcut(event) && enableClipboardPaste) {\n      // Do not enter cell edit mode on paste\n      return false;\n    }\n    return initialValue;\n  }, [enableClipboardPaste]);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handlePaste);\n  useGridApiOptionHandler(apiRef, 'clipboardPasteStart', props.onClipboardPasteStart);\n  useGridApiOptionHandler(apiRef, 'clipboardPasteEnd', props.onClipboardPasteEnd);\n  useGridRegisterPipeProcessor(apiRef, 'canStartEditing', checkIfCanStartEditing);\n};","import { useGridInitialization, useGridInitializeState, useGridClipboard, useGridColumnMenu, useGridColumns, columnsStateInitializer, useGridDensity, useGridCsvExport, useGridPrintExport, useGridFilter, filterStateInitializer, useGridFocus, useGridKeyboardNavigation, useGridPagination, paginationStateInitializer, useGridPreferencesPanel, useGridEditing, editingStateInitializer, useGridRows, useGridRowsPreProcessors, rowsStateInitializer, useGridRowsMeta, useGridParamsApi, useGridRowSelection, useGridSorting, sortingStateInitializer, useGridScroll, useGridEvents, useGridDimensions, useGridStatePersistence, useGridRowSelectionPreProcessors, columnMenuStateInitializer, densityStateInitializer, focusStateInitializer, preferencePanelStateInitializer, rowsMetaStateInitializer, rowSelectionStateInitializer, useGridColumnReorder, columnReorderStateInitializer, useGridColumnResize, columnResizeStateInitializer, useGridTreeData, useGridTreeDataPreProcessors, useGridColumnPinning, columnPinningStateInitializer, useGridColumnPinningPreProcessors, useGridDetailPanel, detailPanelStateInitializer, useGridDetailPanelPreProcessors, useGridInfiniteLoader, useGridColumnSpanning, useGridRowReorder, useGridRowReorderPreProcessors, useGridRowPinning, useGridRowPinningPreProcessors, rowPinningStateInitializer, useGridColumnGrouping, columnGroupsStateInitializer, useGridLazyLoader, useGridLazyLoaderPreProcessors, headerFilteringStateInitializer, useGridHeaderFiltering, virtualizationStateInitializer, useGridVirtualization } from '@mui/x-data-grid-pro/internals';\n// Premium-only features\nimport { useGridAggregation, aggregationStateInitializer } from '../hooks/features/aggregation/useGridAggregation';\nimport { useGridAggregationPreProcessors } from '../hooks/features/aggregation/useGridAggregationPreProcessors';\nimport { useGridRowGrouping, rowGroupingStateInitializer } from '../hooks/features/rowGrouping/useGridRowGrouping';\nimport { useGridRowGroupingPreProcessors } from '../hooks/features/rowGrouping/useGridRowGroupingPreProcessors';\nimport { useGridExcelExport } from '../hooks/features/export/useGridExcelExport';\nimport { cellSelectionStateInitializer, useGridCellSelection } from '../hooks/features/cellSelection/useGridCellSelection';\nimport { useGridClipboardImport } from '../hooks/features/clipboard/useGridClipboardImport';\nexport const useDataGridPremiumComponent = (inputApiRef, props) => {\n  const apiRef = useGridInitialization(inputApiRef, props);\n\n  /**\n   * Register all pre-processors called during state initialization here.\n   */\n  useGridRowSelectionPreProcessors(apiRef, props);\n  useGridRowReorderPreProcessors(apiRef, props);\n  useGridRowGroupingPreProcessors(apiRef, props);\n  useGridTreeDataPreProcessors(apiRef, props);\n  useGridLazyLoaderPreProcessors(apiRef, props);\n  useGridRowPinningPreProcessors(apiRef);\n  useGridAggregationPreProcessors(apiRef, props);\n  useGridDetailPanelPreProcessors(apiRef, props);\n  // The column pinning `hydrateColumns` pre-processor must be after every other `hydrateColumns` pre-processors\n  // Because it changes the order of the columns.\n  useGridColumnPinningPreProcessors(apiRef, props);\n  useGridRowsPreProcessors(apiRef);\n\n  /**\n   * Register all state initializers here.\n   */\n  useGridInitializeState(headerFilteringStateInitializer, apiRef, props);\n  useGridInitializeState(rowGroupingStateInitializer, apiRef, props);\n  useGridInitializeState(aggregationStateInitializer, apiRef, props);\n  useGridInitializeState(rowSelectionStateInitializer, apiRef, props);\n  useGridInitializeState(cellSelectionStateInitializer, apiRef, props);\n  useGridInitializeState(detailPanelStateInitializer, apiRef, props);\n  useGridInitializeState(columnPinningStateInitializer, apiRef, props);\n  useGridInitializeState(columnsStateInitializer, apiRef, props);\n  useGridInitializeState(rowPinningStateInitializer, apiRef, props);\n  useGridInitializeState(rowsStateInitializer, apiRef, props);\n  useGridInitializeState(editingStateInitializer, apiRef, props);\n  useGridInitializeState(focusStateInitializer, apiRef, props);\n  useGridInitializeState(sortingStateInitializer, apiRef, props);\n  useGridInitializeState(preferencePanelStateInitializer, apiRef, props);\n  useGridInitializeState(filterStateInitializer, apiRef, props);\n  useGridInitializeState(densityStateInitializer, apiRef, props);\n  useGridInitializeState(columnReorderStateInitializer, apiRef, props);\n  useGridInitializeState(columnResizeStateInitializer, apiRef, props);\n  useGridInitializeState(paginationStateInitializer, apiRef, props);\n  useGridInitializeState(rowsMetaStateInitializer, apiRef, props);\n  useGridInitializeState(columnMenuStateInitializer, apiRef, props);\n  useGridInitializeState(columnGroupsStateInitializer, apiRef, props);\n  useGridInitializeState(virtualizationStateInitializer, apiRef, props);\n  useGridRowGrouping(apiRef, props);\n  useGridHeaderFiltering(apiRef, props);\n  useGridTreeData(apiRef);\n  useGridAggregation(apiRef, props);\n  useGridKeyboardNavigation(apiRef, props);\n  useGridRowSelection(apiRef, props);\n  useGridCellSelection(apiRef, props);\n  useGridColumnPinning(apiRef, props);\n  useGridRowPinning(apiRef, props);\n  useGridColumns(apiRef, props);\n  useGridRows(apiRef, props);\n  useGridParamsApi(apiRef, props);\n  useGridDetailPanel(apiRef, props);\n  useGridColumnSpanning(apiRef);\n  useGridColumnGrouping(apiRef, props);\n  useGridClipboardImport(apiRef, props);\n  useGridEditing(apiRef, props);\n  useGridFocus(apiRef, props);\n  useGridPreferencesPanel(apiRef, props);\n  useGridFilter(apiRef, props);\n  useGridSorting(apiRef, props);\n  useGridDensity(apiRef, props);\n  useGridColumnReorder(apiRef, props);\n  useGridColumnResize(apiRef, props);\n  useGridPagination(apiRef, props);\n  useGridRowsMeta(apiRef, props);\n  useGridRowReorder(apiRef, props);\n  useGridScroll(apiRef, props);\n  useGridInfiniteLoader(apiRef, props);\n  useGridLazyLoader(apiRef, props);\n  useGridColumnMenu(apiRef);\n  useGridCsvExport(apiRef, props);\n  useGridPrintExport(apiRef, props);\n  useGridExcelExport(apiRef, props);\n  useGridClipboard(apiRef, props);\n  useGridDimensions(apiRef, props);\n  useGridEvents(apiRef, props);\n  useGridStatePersistence(apiRef);\n  useGridVirtualization(apiRef, props);\n  return apiRef;\n};","import { isNumber } from '@mui/x-data-grid-pro/internals';\nconst sumAgg = {\n  apply: ({\n    values\n  }) => {\n    let sum = 0;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (isNumber(value)) {\n        sum += value;\n      }\n    }\n    return sum;\n  },\n  columnTypes: ['number']\n};\nconst avgAgg = {\n  apply: ({\n    values\n  }) => {\n    if (values.length === 0) {\n      return null;\n    }\n    let sum = 0;\n    let valuesCount = 0;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (isNumber(value)) {\n        valuesCount += 1;\n        sum += value;\n      }\n    }\n    return sum / valuesCount;\n  },\n  columnTypes: ['number']\n};\nconst minAgg = {\n  apply: ({\n    values\n  }) => {\n    if (values.length === 0) {\n      return null;\n    }\n    let min = +Infinity;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (value != null && value < min) {\n        min = value;\n      }\n    }\n    return min;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst maxAgg = {\n  apply: ({\n    values\n  }) => {\n    if (values.length === 0) {\n      return null;\n    }\n    let max = -Infinity;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (value != null && value > max) {\n        max = value;\n      }\n    }\n    return max;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst sizeAgg = {\n  apply: ({\n    values\n  }) => {\n    return values.filter(value => typeof value !== 'undefined').length;\n  },\n  valueFormatter: params => {\n    if (params.value == null || !isNumber(params.value)) {\n      return params.value;\n    }\n    return params.value.toLocaleString();\n  },\n  hasCellUnit: false\n};\nexport const GRID_AGGREGATION_FUNCTIONS = {\n  sum: sumAgg,\n  avg: avgAgg,\n  min: minAgg,\n  max: maxAgg,\n  size: sizeAgg\n};","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport MenuItem from '@mui/material/MenuItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport { useGridSelector, gridColumnLookupSelector } from '@mui/x-data-grid-pro';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { gridRowGroupingSanitizedModelSelector } from '../hooks/features/rowGrouping/gridRowGroupingSelector';\nimport { getRowGroupingCriteriaFromGroupingField, GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD, isGroupingColumn } from '../hooks/features/rowGrouping/gridRowGroupingUtils';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction GridColumnMenuRowGroupItem(props) {\n  const {\n    colDef,\n    onClick\n  } = props;\n  const apiRef = useGridApiContext();\n  const rowGroupingModel = useGridSelector(apiRef, gridRowGroupingSanitizedModelSelector);\n  const columnsLookup = useGridSelector(apiRef, gridColumnLookupSelector);\n  const rootProps = useGridRootProps();\n  const renderUnGroupingMenuItem = field => {\n    var _columnsLookup$field$;\n    const ungroupColumn = event => {\n      apiRef.current.removeRowGroupingCriteria(field);\n      onClick(event);\n    };\n    const name = (_columnsLookup$field$ = columnsLookup[field].headerName) != null ? _columnsLookup$field$ : field;\n    return /*#__PURE__*/_jsxs(MenuItem, {\n      onClick: ungroupColumn,\n      children: [/*#__PURE__*/_jsx(ListItemIcon, {\n        children: /*#__PURE__*/_jsx(rootProps.slots.columnMenuUngroupIcon, {\n          fontSize: \"small\"\n        })\n      }), /*#__PURE__*/_jsx(ListItemText, {\n        children: apiRef.current.getLocaleText('unGroupColumn')(name)\n      })]\n    }, field);\n  };\n  if (!colDef || !isGroupingColumn(colDef.field)) {\n    return null;\n  }\n  if (colDef.field === GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD) {\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: rowGroupingModel.map(renderUnGroupingMenuItem)\n    });\n  }\n  return renderUnGroupingMenuItem(getRowGroupingCriteriaFromGroupingField(colDef.field));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridColumnMenuRowGroupItem.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  colDef: PropTypes.object.isRequired,\n  onClick: PropTypes.func.isRequired\n} : void 0;\nexport { GridColumnMenuRowGroupItem };","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport MenuItem from '@mui/material/MenuItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport { gridColumnLookupSelector, useGridSelector } from '@mui/x-data-grid-pro';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { gridRowGroupingSanitizedModelSelector } from '../hooks/features/rowGrouping/gridRowGroupingSelector';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction GridColumnMenuRowUngroupItem(props) {\n  var _columnsLookup$colDef;\n  const {\n    colDef,\n    onClick\n  } = props;\n  const apiRef = useGridApiContext();\n  const rowGroupingModel = useGridSelector(apiRef, gridRowGroupingSanitizedModelSelector);\n  const columnsLookup = useGridSelector(apiRef, gridColumnLookupSelector);\n  const rootProps = useGridRootProps();\n  if (!colDef.groupable) {\n    return null;\n  }\n  const ungroupColumn = event => {\n    apiRef.current.removeRowGroupingCriteria(colDef.field);\n    onClick(event);\n  };\n  const groupColumn = event => {\n    apiRef.current.addRowGroupingCriteria(colDef.field);\n    onClick(event);\n  };\n  const name = (_columnsLookup$colDef = columnsLookup[colDef.field].headerName) != null ? _columnsLookup$colDef : colDef.field;\n  if (rowGroupingModel.includes(colDef.field)) {\n    return /*#__PURE__*/_jsxs(MenuItem, {\n      onClick: ungroupColumn,\n      children: [/*#__PURE__*/_jsx(ListItemIcon, {\n        children: /*#__PURE__*/_jsx(rootProps.slots.columnMenuUngroupIcon, {\n          fontSize: \"small\"\n        })\n      }), /*#__PURE__*/_jsx(ListItemText, {\n        children: apiRef.current.getLocaleText('unGroupColumn')(name)\n      })]\n    });\n  }\n  return /*#__PURE__*/_jsxs(MenuItem, {\n    onClick: groupColumn,\n    children: [/*#__PURE__*/_jsx(ListItemIcon, {\n      children: /*#__PURE__*/_jsx(rootProps.slots.columnMenuGroupIcon, {\n        fontSize: \"small\"\n      })\n    }), /*#__PURE__*/_jsx(ListItemText, {\n      children: apiRef.current.getLocaleText('groupColumn')(name)\n    })]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? GridColumnMenuRowUngroupItem.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  colDef: PropTypes.object.isRequired,\n  onClick: PropTypes.func.isRequired\n} : void 0;\nexport { GridColumnMenuRowUngroupItem };","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GridGenericColumnMenu, GRID_COLUMN_MENU_SLOTS, GRID_COLUMN_MENU_SLOT_PROPS } from '@mui/x-data-grid-pro';\nimport { GridColumnMenuAggregationItem } from './GridColumnMenuAggregationItem';\nimport { isGroupingColumn } from '../hooks/features/rowGrouping';\nimport { GridColumnMenuRowGroupItem } from './GridColumnMenuRowGroupItem';\nimport { GridColumnMenuRowUngroupItem } from './GridColumnMenuRowUngroupItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function GridColumnMenuGroupingItem(props) {\n  const {\n    colDef\n  } = props;\n  if (isGroupingColumn(colDef.field)) {\n    return /*#__PURE__*/_jsx(GridColumnMenuRowGroupItem, _extends({}, props));\n  }\n  if (colDef.groupable) {\n    return /*#__PURE__*/_jsx(GridColumnMenuRowUngroupItem, _extends({}, props));\n  }\n  return null;\n}\nexport const GRID_COLUMN_MENU_SLOTS_PREMIUM = _extends({}, GRID_COLUMN_MENU_SLOTS, {\n  columnMenuAggregationItem: GridColumnMenuAggregationItem,\n  columnMenuGroupingItem: GridColumnMenuGroupingItem\n});\nexport const GRID_COLUMN_MENU_SLOT_PROPS_PREMIUM = _extends({}, GRID_COLUMN_MENU_SLOT_PROPS, {\n  columnMenuAggregationItem: {\n    displayOrder: 23\n  },\n  columnMenuGroupingItem: {\n    displayOrder: 27\n  }\n});\nconst GridPremiumColumnMenu = /*#__PURE__*/React.forwardRef(function GridPremiumColumnMenuSimple(props, ref) {\n  return /*#__PURE__*/_jsx(GridGenericColumnMenu, _extends({\n    ref: ref\n  }, props, {\n    defaultSlots: GRID_COLUMN_MENU_SLOTS_PREMIUM,\n    defaultSlotProps: GRID_COLUMN_MENU_SLOT_PROPS_PREMIUM\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridPremiumColumnMenu.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  colDef: PropTypes.object.isRequired,\n  hideMenu: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired\n} : void 0;\nexport { GridPremiumColumnMenu };","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useGridSelector } from '@mui/x-data-grid-pro';\nimport MenuItem from '@mui/material/MenuItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport { unstable_useId as useId } from '@mui/utils';\nimport Select from '@mui/material/Select';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { canColumnHaveAggregationFunction, getAggregationFunctionLabel, getAvailableAggregationFunctions } from '../hooks/features/aggregation/gridAggregationUtils';\nimport { gridAggregationModelSelector } from '../hooks/features/aggregation/gridAggregationSelectors';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction GridColumnMenuAggregationItem(props) {\n  const {\n    colDef\n  } = props;\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const id = useId();\n  const aggregationModel = useGridSelector(apiRef, gridAggregationModelSelector);\n  const availableAggregationFunctions = React.useMemo(() => getAvailableAggregationFunctions({\n    aggregationFunctions: rootProps.aggregationFunctions,\n    colDef\n  }), [colDef, rootProps.aggregationFunctions]);\n  const selectedAggregationRule = React.useMemo(() => {\n    if (!colDef || !aggregationModel[colDef.field]) {\n      return '';\n    }\n    const aggregationFunctionName = aggregationModel[colDef.field];\n    if (canColumnHaveAggregationFunction({\n      colDef,\n      aggregationFunctionName,\n      aggregationFunction: rootProps.aggregationFunctions[aggregationFunctionName]\n    })) {\n      return aggregationFunctionName;\n    }\n    return '';\n  }, [rootProps.aggregationFunctions, aggregationModel, colDef]);\n  const handleAggregationItemChange = event => {\n    var _event$target;\n    const newAggregationItem = ((_event$target = event.target) == null ? void 0 : _event$target.value) || undefined;\n    const currentModel = gridAggregationModelSelector(apiRef);\n    const _colDef$field = colDef.field,\n      otherColumnItems = _objectWithoutPropertiesLoose(currentModel, [_colDef$field].map(_toPropertyKey));\n    const newModel = newAggregationItem == null ? otherColumnItems : _extends({}, otherColumnItems, {\n      [colDef == null ? void 0 : colDef.field]: newAggregationItem\n    });\n    apiRef.current.setAggregationModel(newModel);\n    apiRef.current.hideColumnMenu();\n  };\n  const label = apiRef.current.getLocaleText('aggregationMenuItemHeader');\n  return /*#__PURE__*/_jsxs(MenuItem, {\n    disableRipple: true,\n    children: [/*#__PURE__*/_jsx(ListItemIcon, {\n      children: /*#__PURE__*/_jsx(rootProps.slots.columnMenuAggregationIcon, {\n        fontSize: \"small\"\n      })\n    }), /*#__PURE__*/_jsx(ListItemText, {\n      children: /*#__PURE__*/_jsxs(FormControl, {\n        size: \"small\",\n        fullWidth: true,\n        sx: {\n          minWidth: 150\n        },\n        children: [/*#__PURE__*/_jsx(InputLabel, {\n          id: `${id}-label`,\n          children: label\n        }), /*#__PURE__*/_jsxs(Select, {\n          labelId: `${id}-label`,\n          id: `${id}-input`,\n          value: selectedAggregationRule,\n          label: label,\n          color: \"primary\",\n          onChange: handleAggregationItemChange,\n          onBlur: e => e.stopPropagation(),\n          fullWidth: true,\n          children: [/*#__PURE__*/_jsx(MenuItem, {\n            value: \"\",\n            children: \"...\"\n          }), availableAggregationFunctions.map(aggFunc => /*#__PURE__*/_jsx(MenuItem, {\n            value: aggFunc,\n            children: getAggregationFunctionLabel({\n              apiRef,\n              aggregationRule: {\n                aggregationFunctionName: aggFunc,\n                aggregationFunction: rootProps.aggregationFunctions[aggFunc]\n              }\n            })\n          }, aggFunc))]\n        })]\n      })\n    })]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? GridColumnMenuAggregationItem.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  colDef: PropTypes.object.isRequired,\n  onClick: PropTypes.func.isRequired\n} : void 0;\nexport { GridColumnMenuAggregationItem };","import * as React from 'react';\nimport { createSvgIcon } from '@mui/material/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const GridWorkspacesIcon = createSvgIcon( /*#__PURE__*/_jsx(\"g\", {\n  children: /*#__PURE__*/_jsx(\"path\", {\n    d: \"M6,13c-2.2,0-4,1.8-4,4s1.8,4,4,4s4-1.8,4-4S8.2,13,6,13z M12,3C9.8,3,8,4.8,8,7s1.8,4,4,4s4-1.8,4-4S14.2,3,12,3z M18,13 c-2.2,0-4,1.8-4,4s1.8,4,4,4s4-1.8,4-4S20.2,13,18,13z\"\n  })\n}), 'Workspaces');\nexport const GridGroupWorkIcon = createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM8 17.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5zM9.5 8c0-1.38 1.12-2.5 2.5-2.5s2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5S9.5 9.38 9.5 8zm6.5 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\"\n}), 'GroupWork');\nexport const GridFunctionsIcon = createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M18 4H6v2l6.5 6L6 18v2h12v-3h-7l5-5-5-5h7z\"\n}), 'Functions');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GridWorkspacesIcon, GridGroupWorkIcon, GridFunctionsIcon } from './icons';\nconst iconsSlots = {\n  ColumnMenuUngroupIcon: GridWorkspacesIcon,\n  ColumnMenuGroupIcon: GridGroupWorkIcon,\n  ColumnMenuAggregationIcon: GridFunctionsIcon\n};\nconst materialSlots = _extends({}, iconsSlots);\nexport default materialSlots;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { DATA_GRID_PRO_DEFAULT_SLOTS_COMPONENTS } from '@mui/x-data-grid-pro/internals';\nimport { GridPremiumColumnMenu } from '../components/GridPremiumColumnMenu';\nimport materialSlots from '../material';\nexport const DATA_GRID_PREMIUM_DEFAULT_SLOTS_COMPONENTS = _extends({}, DATA_GRID_PRO_DEFAULT_SLOTS_COMPONENTS, materialSlots, {\n  ColumnMenu: GridPremiumColumnMenu\n});","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useThemeProps } from '@mui/material/styles';\nimport { DATA_GRID_PRO_PROPS_DEFAULT_VALUES, GRID_DEFAULT_LOCALE_TEXT } from '@mui/x-data-grid-pro';\nimport { computeSlots, useProps, uncapitalizeObjectKeys } from '@mui/x-data-grid-pro/internals';\nimport { GRID_AGGREGATION_FUNCTIONS } from '../hooks/features/aggregation';\nimport { DATA_GRID_PREMIUM_DEFAULT_SLOTS_COMPONENTS } from '../constants/dataGridPremiumDefaultSlotsComponents';\n\n/**\n * The default values of `DataGridPremiumPropsWithDefaultValue` to inject in the props of DataGridPremium.\n */\nexport const DATA_GRID_PREMIUM_PROPS_DEFAULT_VALUES = _extends({}, DATA_GRID_PRO_PROPS_DEFAULT_VALUES, {\n  unstable_cellSelection: false,\n  disableAggregation: false,\n  disableRowGrouping: false,\n  rowGroupingColumnMode: 'single',\n  aggregationFunctions: GRID_AGGREGATION_FUNCTIONS,\n  aggregationRowsScope: 'filtered',\n  getAggregationPosition: groupNode => groupNode.depth === -1 ? 'footer' : 'inline',\n  disableClipboardPaste: false,\n  unstable_splitClipboardPastedText: pastedText => {\n    // Excel on Windows adds an empty line break at the end of the copied text.\n    // See https://github.com/mui/mui-x/issues/9103\n    const text = pastedText.replace(/\\r?\\n$/, '');\n    return text.split(/\\r\\n|\\n|\\r/).map(row => row.split('\\t'));\n  }\n});\nconst defaultSlots = uncapitalizeObjectKeys(DATA_GRID_PREMIUM_DEFAULT_SLOTS_COMPONENTS);\nexport const useDataGridPremiumProps = inProps => {\n  const [components, componentsProps, themedProps] = useProps(useThemeProps({\n    props: inProps,\n    name: 'MuiDataGrid'\n  }));\n  const localeText = React.useMemo(() => _extends({}, GRID_DEFAULT_LOCALE_TEXT, themedProps.localeText), [themedProps.localeText]);\n  const slots = React.useMemo(() => computeSlots({\n    defaultSlots,\n    components,\n    slots: themedProps.slots\n  }), [components, themedProps.slots]);\n  return React.useMemo(() => {\n    var _themedProps$slotProp;\n    return _extends({}, DATA_GRID_PREMIUM_PROPS_DEFAULT_VALUES, themedProps, {\n      slotProps: (_themedProps$slotProp = themedProps.slotProps) != null ? _themedProps$slotProp : componentsProps,\n      localeText,\n      slots,\n      signature: 'DataGridPremium'\n    });\n  }, [themedProps, componentsProps, localeText, slots]);\n};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useLicenseVerifier, Watermark } from '@mui/x-license-pro';\nimport { GridBody, GridFooterPlaceholder, GridHeader, GridRoot, GridContextProvider, useGridSelector, gridPinnedColumnsSelector } from '@mui/x-data-grid-pro';\nimport { DataGridProVirtualScroller } from '@mui/x-data-grid-pro/internals';\nimport { useDataGridPremiumComponent } from './useDataGridPremiumComponent';\nimport { useDataGridPremiumProps } from './useDataGridPremiumProps';\nimport { getReleaseInfo } from '../utils/releaseInfo';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst releaseInfo = getReleaseInfo();\nconst DataGridPremiumRaw = /*#__PURE__*/React.forwardRef(function DataGridPremium(inProps, ref) {\n  const props = useDataGridPremiumProps(inProps);\n  const privateApiRef = useDataGridPremiumComponent(props.apiRef, props);\n  useLicenseVerifier('x-data-grid-premium', releaseInfo);\n  const pinnedColumns = useGridSelector(privateApiRef, gridPinnedColumnsSelector);\n  return /*#__PURE__*/_jsx(GridContextProvider, {\n    privateApiRef: privateApiRef,\n    props: props,\n    children: /*#__PURE__*/_jsxs(GridRoot, _extends({\n      className: props.className,\n      style: props.style,\n      sx: props.sx,\n      ref: ref\n    }, props.forwardedProps, {\n      children: [/*#__PURE__*/_jsx(GridHeader, {}), /*#__PURE__*/_jsx(GridBody, {\n        VirtualScrollerComponent: DataGridProVirtualScroller,\n        ColumnHeadersProps: {\n          pinnedColumns\n        },\n        children: /*#__PURE__*/_jsx(Watermark, {\n          packageName: \"x-data-grid-premium\",\n          releaseInfo: releaseInfo\n        })\n      }), /*#__PURE__*/_jsx(GridFooterPlaceholder, {})]\n    }))\n  });\n});\n/**\n * Demos:\n * - [DataGridPremium](https://mui.com/x/react-data-grid/demo/)\n *\n * API:\n * - [DataGridPremium API](https://mui.com/x/api/data-grid/data-grid-premium/)\n */\nexport const DataGridPremium = /*#__PURE__*/React.memo(DataGridPremiumRaw);\nprocess.env.NODE_ENV !== \"production\" ? DataGridPremiumRaw.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * Aggregation functions available on the grid.\n   * @default GRID_AGGREGATION_FUNCTIONS\n   */\n  aggregationFunctions: PropTypes.object,\n  /**\n   * Set the aggregation model of the grid.\n   */\n  aggregationModel: PropTypes.object,\n  /**\n   * Rows used to generate the aggregated value.\n   * If `filtered`, the aggregated values are generated using only the rows currently passing the filtering process.\n   * If `all`, the aggregated values are generated using all the rows.\n   * @default \"filtered\"\n   */\n  aggregationRowsScope: PropTypes.oneOf(['all', 'filtered']),\n  /**\n   * The ref object that allows grid manipulation. Can be instantiated with `useGridApiRef()`.\n   */\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }),\n  /**\n   * The label of the Data Grid.\n   */\n  'aria-label': PropTypes.string,\n  /**\n   * The id of the element containing a label for the Data Grid.\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\n   * If `true`, the Data Grid height is dynamic and follow the number of rows in the Data Grid.\n   * @default false\n   */\n  autoHeight: PropTypes.bool,\n  /**\n   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.\n   * @default false\n   */\n  autoPageSize: PropTypes.bool,\n  /**\n   * If `true`, columns are autosized after the datagrid is mounted.\n   * @default false\n   */\n  autosizeOnMount: PropTypes.bool,\n  /**\n   * The options for autosize when user-initiated.\n   */\n  autosizeOptions: PropTypes.shape({\n    columns: PropTypes.arrayOf(PropTypes.string),\n    expand: PropTypes.bool,\n    includeHeaders: PropTypes.bool,\n    includeOutliers: PropTypes.bool,\n    outliersFactor: PropTypes.number\n  }),\n  /**\n   * Controls the modes of the cells.\n   */\n  cellModesModel: PropTypes.object,\n  /**\n   * If `true`, the Data Grid will display an extra column with checkboxes for selecting rows.\n   * @default false\n   */\n  checkboxSelection: PropTypes.bool,\n  /**\n   * If `true`, the \"Select All\" header checkbox selects only the rows on the current page. To be used in combination with `checkboxSelection`.\n   * It only works if the pagination is enabled.\n   * @default false\n   */\n  checkboxSelectionVisibleOnly: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The character used to separate cell values when copying to the clipboard.\n   * @default '\\t'\n   */\n  clipboardCopyCellDelimiter: PropTypes.string,\n  /**\n   * Number of extra columns to be rendered before/after the visible slice.\n   * @default 3\n   */\n  columnBuffer: PropTypes.number,\n  columnGroupingModel: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * Sets the height in pixel of the column headers in the Data Grid.\n   * @default 56\n   */\n  columnHeaderHeight: PropTypes.number,\n  /**\n   * Set of columns of type [[GridColDef[]]].\n   */\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  /**\n   * Number of rows from the `columnBuffer` that can be visible before a new slice is rendered.\n   * @default 3\n   */\n  columnThreshold: PropTypes.number,\n  /**\n   * Set the column visibility model of the Data Grid.\n   * If defined, the Data Grid will ignore the `hide` property in [[GridColDef]].\n   */\n  columnVisibilityModel: PropTypes.object,\n  /**\n   * Overridable components.\n   * @deprecated Use the `slots` prop instead.\n   */\n  components: PropTypes.object,\n  /**\n   * Overridable components props dynamically passed to the component at rendering.\n   * @deprecated Use the `slotProps` prop instead.\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * If above 0, the row children will be expanded up to this depth.\n   * If equal to -1, all the row children will be expanded.\n   * @default 0\n   */\n  defaultGroupingExpansionDepth: PropTypes.number,\n  /**\n   * Set the density of the Data Grid.\n   * @default \"standard\"\n   */\n  density: PropTypes.oneOf(['comfortable', 'compact', 'standard']),\n  /**\n   * The row ids to show the detail panel.\n   */\n  detailPanelExpandedRowIds: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired),\n  /**\n   * If `true`, aggregation is disabled.\n   * @default false\n   */\n  disableAggregation: PropTypes.bool,\n  /**\n   * If `true`, column autosizing on header separator double-click is disabled.\n   * @default false\n   */\n  disableAutosize: PropTypes.bool,\n  /**\n   * If `true`, the filtering will only be applied to the top level rows when grouping rows with the `treeData` prop.\n   * @default false\n   */\n  disableChildrenFiltering: PropTypes.bool,\n  /**\n   * If `true`, the sorting will only be applied to the top level rows when grouping rows with the `treeData` prop.\n   * @default false\n   */\n  disableChildrenSorting: PropTypes.bool,\n  /**\n   * If `true`, the clipboard paste is disabled.\n   * @default false\n   */\n  disableClipboardPaste: PropTypes.bool,\n  /**\n   * If `true`, column filters are disabled.\n   * @default false\n   */\n  disableColumnFilter: PropTypes.bool,\n  /**\n   * If `true`, the column menu is disabled.\n   * @default false\n   */\n  disableColumnMenu: PropTypes.bool,\n  /**\n   * If `true`, the column pinning is disabled.\n   * @default false\n   */\n  disableColumnPinning: PropTypes.bool,\n  /**\n   * If `true`, reordering columns is disabled.\n   * @default false\n   */\n  disableColumnReorder: PropTypes.bool,\n  /**\n   * If `true`, resizing columns is disabled.\n   * @default false\n   */\n  disableColumnResize: PropTypes.bool,\n  /**\n   * If `true`, hiding/showing columns is disabled.\n   * @default false\n   */\n  disableColumnSelector: PropTypes.bool,\n  /**\n   * If `true`, the density selector is disabled.\n   * @default false\n   */\n  disableDensitySelector: PropTypes.bool,\n  /**\n   * If `true`, `eval()` is not used for performance optimization.\n   * @default false\n   */\n  disableEval: PropTypes.bool,\n  /**\n   * If `true`, filtering with multiple columns is disabled.\n   * @default false\n   */\n  disableMultipleColumnsFiltering: PropTypes.bool,\n  /**\n   * If `true`, sorting with multiple columns is disabled.\n   * @default false\n   */\n  disableMultipleColumnsSorting: PropTypes.bool,\n  /**\n   * If `true`, multiple selection using the Ctrl or CMD key is disabled.\n   * @default false\n   */\n  disableMultipleRowSelection: PropTypes.bool,\n  /**\n   * If `true`, the row grouping is disabled.\n   * @default false\n   */\n  disableRowGrouping: PropTypes.bool,\n  /**\n   * If `true`, the selection on click on a row or cell is disabled.\n   * @default false\n   */\n  disableRowSelectionOnClick: PropTypes.bool,\n  /**\n   * If `true`, the virtualization is disabled.\n   * @default false\n   */\n  disableVirtualization: PropTypes.bool,\n  /**\n   * Controls whether to use the cell or row editing.\n   * @default \"cell\"\n   */\n  editMode: PropTypes.oneOf(['cell', 'row']),\n  /**\n   * Unstable features, breaking changes might be introduced.\n   * For each feature, if the flag is not explicitly set to `true`, then the feature is fully disabled, and neither property nor method calls will have any effect.\n   */\n  experimentalFeatures: PropTypes.shape({\n    ariaV7: PropTypes.bool,\n    clipboardPaste: PropTypes.bool,\n    columnGrouping: PropTypes.bool,\n    lazyLoading: PropTypes.bool,\n    warnIfFocusStateIsNotSynced: PropTypes.bool\n  }),\n  /**\n   * The milliseconds delay to wait after a keystroke before triggering filtering.\n   * @default 150\n   */\n  filterDebounceMs: PropTypes.number,\n  /**\n   * Filtering can be processed on the server or client-side.\n   * Set it to 'server' if you would like to handle filtering on the server-side.\n   * @default \"client\"\n   */\n  filterMode: PropTypes.oneOf(['client', 'server']),\n  /**\n   * Set the filter model of the Data Grid.\n   */\n  filterModel: PropTypes.shape({\n    items: PropTypes.arrayOf(PropTypes.shape({\n      field: PropTypes.string.isRequired,\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      operator: PropTypes.string.isRequired,\n      value: PropTypes.any\n    })).isRequired,\n    logicOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterExcludeHiddenColumns: PropTypes.bool,\n    quickFilterLogicOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterValues: PropTypes.array\n  }),\n  /**\n   * Forwarded props for the Data Grid root element.\n   * @ignore - do not document.\n   */\n  forwardedProps: PropTypes.object,\n  /**\n   * Determines the position of an aggregated value.\n   * @param {GridGroupNode} groupNode The current group.\n   * @returns {GridAggregationPosition | null} Position of the aggregated value (if `null`, the group isn't aggregated).\n   * @default `(groupNode) => groupNode == null ? 'footer' : 'inline'`\n   */\n  getAggregationPosition: PropTypes.func,\n  /**\n   * Function that applies CSS classes dynamically on cells.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {string} The CSS class to apply to the cell.\n   */\n  getCellClassName: PropTypes.func,\n  /**\n   * Function that returns the element to render in row detail.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {React.JSX.Element} The row detail element.\n   */\n  getDetailPanelContent: PropTypes.func,\n  /**\n   * Function that returns the height of the row detail panel.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {number | string} The height in pixels or \"auto\" to use the content height.\n   * @default \"() => 500\"\n   */\n  getDetailPanelHeight: PropTypes.func,\n  /**\n   * Function that returns the estimated height for a row.\n   * Only works if dynamic row height is used.\n   * Once the row height is measured this value is discarded.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.\n   */\n  getEstimatedRowHeight: PropTypes.func,\n  /**\n   * Function that applies CSS classes dynamically on rows.\n   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].\n   * @returns {string} The CSS class to apply to the row.\n   */\n  getRowClassName: PropTypes.func,\n  /**\n   * Function that sets the row height per row.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If \"auto\" then the row height is calculated based on the content.\n   */\n  getRowHeight: PropTypes.func,\n  /**\n   * Return the id of a given [[GridRowModel]].\n   */\n  getRowId: PropTypes.func,\n  /**\n   * Function that allows to specify the spacing between rows.\n   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].\n   * @returns {GridRowSpacing} The row spacing values.\n   */\n  getRowSpacing: PropTypes.func,\n  /**\n   * Determines the path of a row in the tree data.\n   * For instance, a row with the path [\"A\", \"B\"] is the child of the row with the path [\"A\"].\n   * Note that all paths must contain at least one element.\n   * @template R\n   * @param {R} row The row from which we want the path.\n   * @returns {string[]} The path to the row.\n   */\n  getTreeDataPath: PropTypes.func,\n  /**\n   * The grouping column used by the tree data.\n   */\n  groupingColDef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  /**\n   * If `true`, the footer component is hidden.\n   * @default false\n   */\n  hideFooter: PropTypes.bool,\n  /**\n   * If `true`, the pagination component in the footer is hidden.\n   * @default false\n   */\n  hideFooterPagination: PropTypes.bool,\n  /**\n   * If `true`, the row count in the footer is hidden.\n   * It has no effect if the pagination is enabled.\n   * @default false\n   */\n  hideFooterRowCount: PropTypes.bool,\n  /**\n   * If `true`, the selected row count in the footer is hidden.\n   * @default false\n   */\n  hideFooterSelectedRowCount: PropTypes.bool,\n  /**\n   * If `true`, the diacritics (accents) are ignored when filtering or quick filtering.\n   * E.g. when filter value is `cafe`, the rows with `café` will be visible.\n   * @default false\n   */\n  ignoreDiacritics: PropTypes.bool,\n  /**\n   * The initial state of the DataGridPremium.\n   * The data in it is set in the state on initialization but isn't controlled.\n   * If one of the data in `initialState` is also being controlled, then the control state wins.\n   */\n  initialState: PropTypes.object,\n  /**\n   * Callback fired when a cell is rendered, returns true if the cell is editable.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {boolean} A boolean indicating if the cell is editable.\n   */\n  isCellEditable: PropTypes.func,\n  /**\n   * Determines if a group should be expanded after its creation.\n   * This prop takes priority over the `defaultGroupingExpansionDepth` prop.\n   * @param {GridGroupNode} node The node of the group to test.\n   * @returns {boolean} A boolean indicating if the group is expanded.\n   */\n  isGroupExpandedByDefault: PropTypes.func,\n  /**\n   * Determines if a row can be selected.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {boolean} A boolean indicating if the cell is selectable.\n   */\n  isRowSelectable: PropTypes.func,\n  /**\n   * If `true`, moving the mouse pointer outside the grid before releasing the mouse button\n   * in a column re-order action will not cause the column to jump back to its original position.\n   * @default false\n   */\n  keepColumnPositionIfDraggedOutside: PropTypes.bool,\n  /**\n   * If `true`, the selection model will retain selected rows that do not exist.\n   * Useful when using server side pagination and row selections need to be retained\n   * when changing pages.\n   * @default false\n   */\n  keepNonExistentRowsSelected: PropTypes.bool,\n  /**\n   * If `true`, a  loading overlay is displayed.\n   */\n  loading: PropTypes.bool,\n  /**\n   * Set the locale text of the Data Grid.\n   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/v6.19.4/packages/grid/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Pass a custom logger in the components that implements the [[Logger]] interface.\n   * @default console\n   */\n  logger: PropTypes.shape({\n    debug: PropTypes.func.isRequired,\n    error: PropTypes.func.isRequired,\n    info: PropTypes.func.isRequired,\n    warn: PropTypes.func.isRequired\n  }),\n  /**\n   * Allows to pass the logging level or false to turn off logging.\n   * @default \"error\" (\"warn\" in dev mode)\n   */\n  logLevel: PropTypes.oneOf(['debug', 'error', 'info', 'warn', false]),\n  /**\n   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).\n   */\n  nonce: PropTypes.string,\n  /**\n   * Callback fired when the row grouping model changes.\n   * @param {GridAggregationModel} model The aggregated columns.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onAggregationModelChange: PropTypes.func,\n  /**\n   * Callback fired when any cell is clicked.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellClick: PropTypes.func,\n  /**\n   * Callback fired when a double click event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellDoubleClick: PropTypes.func,\n  /**\n   * Callback fired when the cell turns to edit mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStart: PropTypes.func,\n  /**\n   * Callback fired when the cell turns to view mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStop: PropTypes.func,\n  /**\n   * Callback fired when a keydown event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellKeyDown: PropTypes.func,\n  /**\n   * Callback fired when the `cellModesModel` prop changes.\n   * @param {GridCellModesModel} cellModesModel Object containing which cells are in \"edit\" mode.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellModesModelChange: PropTypes.func,\n  /**\n   * Callback called when the data is copied to the clipboard.\n   * @param {string} data The data copied to the clipboard.\n   */\n  onClipboardCopy: PropTypes.func,\n  /**\n   * Callback fired when the clipboard paste operation ends.\n   */\n  onClipboardPasteEnd: PropTypes.func,\n  /**\n   * Callback fired when the clipboard paste operation starts.\n   */\n  onClipboardPasteStart: PropTypes.func,\n  /**\n   * Callback fired when a click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderClick: PropTypes.func,\n  /**\n   * Callback fired when a double click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderDoubleClick: PropTypes.func,\n  /**\n   * Callback fired when a mouse enter event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderEnter: PropTypes.func,\n  /**\n   * Callback fired when a mouse leave event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderLeave: PropTypes.func,\n  /**\n   * Callback fired when a mouseout event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOut: PropTypes.func,\n  /**\n   * Callback fired when a mouseover event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOver: PropTypes.func,\n  /**\n   * Callback fired when a column is reordered.\n   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnOrderChange: PropTypes.func,\n  /**\n   * Callback fired while a column is being resized.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnResize: PropTypes.func,\n  /**\n   * Callback fired when the column visibility model changes.\n   * @param {GridColumnVisibilityModel} model The new model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnVisibilityModelChange: PropTypes.func,\n  /**\n   * Callback fired when the width of a column is changed.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnWidthChange: PropTypes.func,\n  /**\n   * Callback fired when the detail panel of a row is opened or closed.\n   * @param {GridRowId[]} ids The ids of the rows which have the detail panel open.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onDetailPanelExpandedRowIdsChange: PropTypes.func,\n  /**\n   * Callback fired when the state of the Excel export changes.\n   * @param {string} inProgress Indicates if the task is in progress.\n   */\n  onExcelExportStateChange: PropTypes.func,\n  /**\n   * Callback fired when rowCount is set and the next batch of virtualized rows is rendered.\n   * @param {GridFetchRowsParams} params With all properties from [[GridFetchRowsParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onFetchRows: PropTypes.func,\n  /**\n   * Callback fired when the Filter model changes before the filters are applied.\n   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onFilterModelChange: PropTypes.func,\n  /**\n   * Callback fired when the menu is closed.\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onMenuClose: PropTypes.func,\n  /**\n   * Callback fired when the menu is opened.\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onMenuOpen: PropTypes.func,\n  /**\n   * Callback fired when the pagination model has changed.\n   * @param {GridPaginationModel} model Updated pagination model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPaginationModelChange: PropTypes.func,\n  /**\n   * Callback fired when the pinned columns have changed.\n   * @param {GridPinnedColumns} pinnedColumns The changed pinned columns.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPinnedColumnsChange: PropTypes.func,\n  /**\n   * Callback fired when the preferences panel is closed.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelClose: PropTypes.func,\n  /**\n   * Callback fired when the preferences panel is opened.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelOpen: PropTypes.func,\n  /**\n   * Callback called when `processRowUpdate` throws an error or rejects.\n   * @param {any} error The error thrown.\n   */\n  onProcessRowUpdateError: PropTypes.func,\n  /**\n   * Callback fired when the Data Grid is resized.\n   * @param {ElementSize} containerSize With all properties from [[ElementSize]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onResize: PropTypes.func,\n  /**\n   * Callback fired when a row is clicked.\n   * Not called if the target clicked is an interactive element added by the built-in columns.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowClick: PropTypes.func,\n  /**\n   * Callback fired when a double click event comes from a row container element.\n   * @param {GridRowParams} params With all properties from [[RowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowDoubleClick: PropTypes.func,\n  /**\n   * Callback fired when the row changes are committed.\n   * @param {GridRowId} id The row id.\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditCommit: PropTypes.func,\n  /**\n   * Callback fired when the row turns to edit mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStart: PropTypes.func,\n  /**\n   * Callback fired when the row turns to view mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStop: PropTypes.func,\n  /**\n   * Callback fired when the row grouping model changes.\n   * @param {GridRowGroupingModel} model Columns used as grouping criteria.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowGroupingModelChange: PropTypes.func,\n  /**\n   * Callback fired when the `rowModesModel` prop changes.\n   * @param {GridRowModesModel} rowModesModel Object containing which rows are in \"edit\" mode.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowModesModelChange: PropTypes.func,\n  /**\n   * Callback fired when a row is being reordered.\n   * @param {GridRowOrderChangeParams} params With all properties from [[GridRowOrderChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowOrderChange: PropTypes.func,\n  /**\n   * Callback fired when the selection state of one or multiple rows changes.\n   * @param {GridRowSelectionModel} rowSelectionModel With all the row ids [[GridSelectionModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowSelectionModelChange: PropTypes.func,\n  /**\n   * Callback fired when scrolling to the bottom of the grid viewport.\n   * @param {GridRowScrollEndParams} params With all properties from [[GridRowScrollEndParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowsScrollEnd: PropTypes.func,\n  /**\n   * Callback fired when the sort model changes before a column is sorted.\n   * @param {GridSortModel} model With all properties from [[GridSortModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSortModelChange: PropTypes.func,\n  /**\n   * Callback fired when the state of the Data Grid is updated.\n   * @param {GridState} state The new state.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @ignore - do not document.\n   */\n  onStateChange: PropTypes.func,\n  /**\n   * Select the pageSize dynamically using the component UI.\n   * @default [25, 50, 100]\n   */\n  pageSizeOptions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired\n  })]).isRequired),\n  /**\n   * If `true`, pagination is enabled.\n   * @default false\n   */\n  pagination: PropTypes.bool,\n  /**\n   * Pagination can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle the pagination on the client-side.\n   * Set it to 'server' if you would like to handle the pagination on the server-side.\n   * @default \"client\"\n   */\n  paginationMode: PropTypes.oneOf(['client', 'server']),\n  /**\n   * The pagination model of type [[GridPaginationModel]] which refers to current `page` and `pageSize`.\n   */\n  paginationModel: PropTypes.shape({\n    page: PropTypes.number.isRequired,\n    pageSize: PropTypes.number.isRequired\n  }),\n  /**\n   * The column fields to display pinned to left or right.\n   */\n  pinnedColumns: PropTypes.shape({\n    left: PropTypes.arrayOf(PropTypes.string),\n    right: PropTypes.arrayOf(PropTypes.string)\n  }),\n  /**\n   * Rows data to pin on top or bottom.\n   */\n  pinnedRows: PropTypes.shape({\n    bottom: PropTypes.arrayOf(PropTypes.object),\n    top: PropTypes.arrayOf(PropTypes.object)\n  }),\n  /**\n   * Callback called before updating a row with new values in the row and cell editing.\n   * @template R\n   * @param {R} newRow Row object with the new values.\n   * @param {R} oldRow Row object with the old values.\n   * @returns {Promise<R> | R} The final values to update the row.\n   */\n  processRowUpdate: PropTypes.func,\n  /**\n   * Number of extra rows to be rendered before/after the visible slice.\n   * @default 3\n   */\n  rowBuffer: PropTypes.number,\n  /**\n   * Set the total number of rows, if it is different from the length of the value `rows` prop.\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n   */\n  rowCount: PropTypes.number,\n  /**\n   * If `single`, all the columns that are grouped are represented in the same grid column.\n   * If `multiple`, each column that is grouped is represented in its own grid column.\n   * @default 'single'\n   */\n  rowGroupingColumnMode: PropTypes.oneOf(['multiple', 'single']),\n  /**\n   * Set the row grouping model of the grid.\n   */\n  rowGroupingModel: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Sets the height in pixel of a row in the Data Grid.\n   * @default 52\n   */\n  rowHeight: PropTypes.number,\n  /**\n   * Controls the modes of the rows.\n   */\n  rowModesModel: PropTypes.object,\n  /**\n   * The milliseconds delay to wait after measuring the row height before recalculating row positions.\n   * Setting it to a lower value could be useful when using dynamic row height,\n   * but might reduce performance when displaying a large number of rows.\n   * @default 166\n   */\n  rowPositionsDebounceMs: PropTypes.number,\n  /**\n   * If `true`, the reordering of rows is enabled.\n   * @default false\n   */\n  rowReordering: PropTypes.bool,\n  /**\n   * Set of rows of type [[GridRowsProp]].\n   */\n  rows: PropTypes.arrayOf(PropTypes.object).isRequired,\n  /**\n   * If `false`, the row selection mode is disabled.\n   * @default true\n   */\n  rowSelection: PropTypes.bool,\n  /**\n   * Sets the row selection model of the Data Grid.\n   */\n  rowSelectionModel: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired), PropTypes.number, PropTypes.string]),\n  /**\n   * Loading rows can be processed on the server or client-side.\n   * Set it to 'client' if you would like enable infnite loading.\n   * Set it to 'server' if you would like to enable lazy loading.\n   * * @default \"client\"\n   */\n  rowsLoadingMode: PropTypes.oneOf(['client', 'server']),\n  /**\n   * Sets the type of space between rows added by `getRowSpacing`.\n   * @default \"margin\"\n   */\n  rowSpacingType: PropTypes.oneOf(['border', 'margin']),\n  /**\n   * Number of rows from the `rowBuffer` that can be visible before a new slice is rendered.\n   * @default 3\n   */\n  rowThreshold: PropTypes.number,\n  /**\n   * Override the height/width of the Data Grid inner scrollbar.\n   */\n  scrollbarSize: PropTypes.number,\n  /**\n   * Set the area in `px` at the bottom of the grid viewport where onRowsScrollEnd is called.\n   * @default 80\n   */\n  scrollEndThreshold: PropTypes.number,\n  /**\n   * If `true`, the vertical borders of the cells are displayed.\n   * @default false\n   */\n  showCellVerticalBorder: PropTypes.bool,\n  /**\n   * If `true`, the right border of the column headers are displayed.\n   * @default false\n   */\n  showColumnVerticalBorder: PropTypes.bool,\n  /**\n   * Overridable components props dynamically passed to the component at rendering.\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable components.\n   */\n  slots: PropTypes.object,\n  /**\n   * Sorting can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle sorting on the client-side.\n   * Set it to 'server' if you would like to handle sorting on the server-side.\n   * @default \"client\"\n   */\n  sortingMode: PropTypes.oneOf(['client', 'server']),\n  /**\n   * The order of the sorting sequence.\n   * @default ['asc', 'desc', null]\n   */\n  sortingOrder: PropTypes.arrayOf(PropTypes.oneOf(['asc', 'desc'])),\n  /**\n   * Set the sort model of the Data Grid.\n   */\n  sortModel: PropTypes.arrayOf(PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    sort: PropTypes.oneOf(['asc', 'desc'])\n  })),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * If positive, the Data Grid will throttle updates coming from `apiRef.current.updateRows` and `apiRef.current.setRows`.\n   * It can be useful if you have a high update rate but do not want to do heavy work like filtering / sorting or rendering on each  individual update.\n   * @default 0\n   */\n  throttleRowsMs: PropTypes.number,\n  /**\n   * If `true`, the rows will be gathered in a tree structure according to the `getTreeDataPath` prop.\n   * @default false\n   */\n  treeData: PropTypes.bool,\n  /**\n   * If `true`, the cell selection mode is enabled.\n   * @default false\n   */\n  unstable_cellSelection: PropTypes.bool,\n  /**\n   * Set the cell selection model of the grid.\n   */\n  unstable_cellSelectionModel: PropTypes.object,\n  /**\n   * If `true`, enables the data grid filtering on header feature.\n   * @default false\n   */\n  unstable_headerFilters: PropTypes.bool,\n  /**\n   * If `true`, the Data Grid will not use `valueFormatter` when exporting to CSV or copying to clipboard.\n   * If an object is provided, you can choose to ignore the `valueFormatter` for CSV export or clipboard export.\n   * @default false\n   */\n  unstable_ignoreValueFormatterDuringExport: PropTypes.oneOfType([PropTypes.shape({\n    clipboardExport: PropTypes.bool,\n    csvExport: PropTypes.bool\n  }), PropTypes.bool]),\n  /**\n   * Callback fired when the selection state of one or multiple cells changes.\n   * @param {GridCellSelectionModel} cellSelectionModel Object in the shape of [[GridCellSelectionModel]] containing the selected cells.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  unstable_onCellSelectionModelChange: PropTypes.func,\n  /**\n   * The function is used to split the pasted text into rows and cells.\n   * @param {string} text The text pasted from the clipboard.\n   * @returns {string[][] | null} A 2D array of strings. The first dimension is the rows, the second dimension is the columns.\n   * @default `(pastedText) => { const text = pastedText.replace(/\\r?\\n$/, ''); return text.split(/\\r\\n|\\n|\\r/).map((row) => row.split('\\t')); }`\n   */\n  unstable_splitClipboardPastedText: PropTypes.func\n} : void 0;","import { ponyfillGlobal } from '@mui/utils';\nexport const getReleaseInfo = () => {\n  const releaseInfo = \"MTcwOTM1NTYwMDAwMA==\";\n  if (process.env.NODE_ENV !== 'production') {\n    // A simple hack to set the value in the test environment (has no build step).\n    // eslint-disable-next-line no-useless-concat\n    if (releaseInfo === '__RELEASE' + '_INFO__') {\n      // eslint-disable-next-line no-underscore-dangle\n      return ponyfillGlobal.__MUI_RELEASE_INFO__;\n    }\n  }\n  return releaseInfo;\n};","import { useGridApiContext as useCommunityGridApiContext } from '@mui/x-data-grid';\nexport const useGridApiContext = useCommunityGridApiContext;","import * as React from 'react';\n/**\n * Hook that instantiate a [[GridApiRef]].\n */\nexport const useGridApiRef = () => React.useRef({});","import { useGridApiRef as useCommunityGridApiRef } from '@mui/x-data-grid';\nexport const useGridApiRef = useCommunityGridApiRef;","import { useGridRootProps as useCommunityGridRootProps } from '@mui/x-data-grid-pro';\nexport const useGridRootProps = useCommunityGridRootProps;"],"names":["getAlertUtilityClass","slot","generateUtilityClass","generateUtilityClasses","createSvgIcon","_jsx","d","_excluded","useThemeProps","createUseThemeProps","AlertRoot","styled","Paper","name","overridesResolver","props","styles","ownerState","root","variant","concat","capitalize","color","severity","_ref","theme","getColor","palette","mode","darken","lighten","getBackgroundColor","_extends","typography","body2","backgroundColor","display","padding","variants","Object","entries","filter","_ref2","value","main","light","map","_ref3","colorSeverity","style","vars","Alert","alertClasses","icon","_ref4","_ref5","border","_ref6","dark","_ref7","fontWeight","fontWeightMedium","getContrastText","AlertIcon","marginRight","fontSize","opacity","AlertMessage","message","minWidth","overflow","AlertAction","action","alignItems","marginLeft","defaultIconMapping","success","SuccessOutlinedIcon","warning","ReportProblemOutlinedIcon","error","ErrorOutlineIcon","info","InfoOutlinedIcon","React","inProps","ref","children","className","closeText","components","componentsProps","iconMapping","onClose","role","slotProps","slots","other","_objectWithoutPropertiesLoose","classes","composeClasses","useUtilityClasses","externalForwardedProps","closeButton","CloseButton","closeIcon","CloseIcon","CloseButtonSlot","closeButtonProps","useSlot","elementType","IconButton","CloseIconSlot","closeIconProps","_jsxs","elevation","clsx","size","title","onClick","_excluded2","_excluded3","parameters","initialElementType","getSlotOwnerState","internalForwardedProps","useSlotPropsParams","component","rootComponent","undefined","resolvedComponentsProps","resolveComponentProps","_mergeSlotProps","mergeSlotProps","externalSlotProps","slotComponent","internalRef","mergedProps","useForkRef","slotOwnerState","finalOwnerState","LeafComponent","appendOwnerState","as","keys","forEach","propName","gridAggregationStateSelector","state","aggregation","gridAggregationModelSelector","createSelector","aggregationState","model","gridAggregationLookupSelector","lookup","getAggregationFooterRowIdFromGroupId","groupId","canColumnHaveAggregationFunction","colDef","aggregationFunctionName","aggregationFunction","aggregable","availableAggregationFunctions","includes","columnTypes","type","getAvailableAggregationFunctions","aggregationFunctions","mergeStateWithAggregationModel","aggregationModel","getAggregationRules","columnsLookup","aggregationRules","field","columnItem","addFooterRows","groupingParams","apiRef","getAggregationPosition","hasAggregationRule","newGroupingParams","tree","treeDepths","updateGroupFooter","groupNode","id","GRID_ROOT_GROUP_ID","rowId","addPinnedRow","rowModel","GRID_ID_AUTOGENERATED","position","isAutoGenerated","updateRootGroupFooter","footerId","removeNodeFromTree","node","footerNode","parent","depth","insertNodeInTree","updateChildGroupFooter","childId","childNode","areAggregationRulesEqual","previousValue","newValue","previousFields","newFields","isDeepEqual","every","previousRule","newRule","getAggregationFunctionLabel","aggregationRule","label","current","getLocaleText","e","getAggregationCellValue","aggregationRowsScope","filteredRowsLookup","gridFilteredRowsLookupSelector","rowIds","getRowGroupChildren","values","getRowNode","getCellValue","row","getRow","push","apply","createAggregationLookup","gridColumnLookupSelector","aggregatedFields","length","aggregationLookup","rowTree","gridRowTreeSelector","createGroupAggregationLookup","i","groupAggregationLookup","j","aggregatedField","columnAggregationRules","getGroupAggregatedValue","aggregationStateInitializer","_props$aggregationMod","_props$initialState","caches","rulesOnLastColumnHydration","rulesOnLastRowHydration","initialState","GridFooterCellRoot","_","footerCell","primary","getDataGridUtilityClass","GridFooterCell","formattedValue","useGridRootProps","GridAggregationHeaderRoot","aggregationColumnHeader","flexDirection","gridClasses","GridAggregationFunctionLabel","aggregationColumnHeaderLabel","caption","lineHeight","bottom","textTransform","GridAggregationHeader","_colDef$headerName","renderHeader","params","useGridApiContext","rootProps","headerAlign","aggregationLabel","GridColumnHeaderTitle","headerName","description","columnWidth","computedWidth","getAggregationValueWrappedValueGetter","valueGetter","getCellAggregationResult","cellAggregationResult","_cellAggregationResul","getAggregationValueWrappedValueFormatter","valueFormatter","getAggregationValueWrappedRenderCell","renderCell","_aggregationFunction$","aggregationMeta","hasCellUnit","getWrappedFilterOperators","filterOperators","operator","baseGetApplyFilterFn","getApplyFilterFn","baseGetApplyFilterFnV7","getApplyFilterFnV7","filterItem","filterFn","isInternalFilter","tagInternalFilter","column","api","getRowId","getWrappedRenderHeader","useGridAggregationPreProcessors","updateAggregatedColumns","columnsState","disableAggregation","orderedFields","shouldHaveAggregationValue","haveAggregationColumnValue","_ref8","aggregationWrappedProperties","unwrappedColumn","_ref9","originalValue","wrappedValue","unwrapColumnFromAggregation","_rowNode$parent","_gridAggregationLooku","cellAggregationPosition","rowNode","toString","startsWith","aggregationResult","didWrapSomeProperty","wrappedColumn","wrapColumnProperty","property","wrapper","wrappedProperty","wrapColumnWithAggregationValue","addGroupFooterRows","addColumnMenuButtons","columnMenuItems","stateExportPreProcessing","prevState","aggregationModelToExport","stateRestorePreProcessing","context","_context$stateToResto","stateToRestore","setState","useGridRegisterPipeProcessor","gridRowGroupingModelSelector","rowGrouping","gridRowGroupingSanitizedModelSelector","createSelectorMemoized","groupable","GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD","ROW_GROUPING_STRATEGY","getRowGroupingFieldFromGroupingCriteria","groupingCriteria","getRowGroupingCriteriaFromGroupingField","groupingColDefField","match","isGroupingColumn","filterRowTreeFromGroupingColumns","isRowMatchingFilters","filterModel","filteredDescendantCountLookup","filterCache","filterTreeNode","areAncestorsExpanded","ancestorsResults","filterResults","passingFilterItems","passingQuickFilterValues","isPassingFiltering","shouldApplyItem","columnField","shouldApplyFilterItemOnGroup","groupingField","filteredDescendantCount","childSubTreeSize","childrenExpanded","allResults","passFilterLogic","result","nodes","getColDefOverrides","groupingColDefProp","fields","groupingName","mergeStateWithRowGroupingModel","rowGroupingModel","setStrategyAvailability","privateApiRef","disableRowGrouping","isAvailable","getGroupingRules","sanitizedRowGroupingModel","_columnsLookup$field","groupingValueGetter","rowGroupingStateInitializer","_props$rowGroupingMod","rulesOnLastRowTreeCreation","GridGroupingColumnFooterCell","sx","ml","rowGroupingColumnMode","spacing","GridGroupingCriteriaCell","_filteredDescendantCo","_rootProps$slotProps","hideDescendantCount","toggle","useGridSelector","gridFilteredDescendantCountLookupSelector","Icon","groupingCriteriaCollapseIcon","groupingCriteriaExpandIcon","cellContent","getColumn","groupingKey","Box","baseIconButton","event","setRowChildrenExpansion","setCellFocus","stopPropagation","onKeyDown","key","publishEvent","tabIndex","whiteSpace","GridGroupingColumnLeafCell","_props$formattedValue","GROUPING_COL_DEF_DEFAULT_PROPERTIES","GRID_STRING_COL_DEF","disableReorder","GROUPING_COL_DEF_FORCED_PROPERTIES","editable","groupingFieldIndexComparator","v1","v2","cellParams1","cellParams2","_groupingField","_groupingField2","instanceId","groupingField1","groupingField2","indexOf","getLeafProperties","leafColDef","_leafColDef$headerNam","sortable","filterable","valueOptions","isSingleSelectColDef","sortComparator","getGroupingCriteriaProperties","groupedByColDef","applyHeaderName","properties","_groupedByColDef$head","createGroupingColDefForAllGroupingCriteria","colDefOverride","_leafColDef$width2","leafField","mainGroupingCriteria","colDefOverrideProperties","commonProperties","width","Math","max","_columnsLookup$field$","leafParams","getCellParams","hasFocus","sourceProperties","forcedProperties","useGridRowGroupingPreProcessors","getGroupingColDefs","groupingColDef","_groupedByColDef$widt","_leafColDef$width","createGroupingColDefForOneGroupingCriteria","updateGroupingColumn","groupingColDefs","newColumnFields","newColumnsLookup","matchingGroupingColDef","flex","startIndex","GRID_CHECKBOX_SELECTION_FIELD","slice","createRowTreeForRowGrouping","groupingRules","getRowTreeBuilderNode","dataRowIdToModelLookup","parentPath","groupingRule","groupingValueGetterParams","getCellGroupingCriteria","cell","path","updates","createRowTree","previousTree","rows","defaultGroupingExpansionDepth","isGroupExpandedByDefault","updateRowTree","inserted","actions","insert","modified","modify","removed","remove","previousTreeDepth","previousTreeDepths","filterRows","sortRows","sortRowTree","sortRowList","disableChildrenSorting","shouldRenderGroupBelowLeaves","useGridRegisterStrategyProcessor","getVisibleRowsLookup","useFirstRender","isFirstRender","getExcelJs","async","_excelJsModule$defaul","excelJsModule","default","getFormattedValueOptions","buildWarning","valueOptionsFormatted","option","String","serializeRow","columns","defaultValueOptionsFormulae","dataValidation","mergedCells","outlineLevel","calculateColSpan","minFirstColumn","maxLastColumn","colIndex","colSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","cellProps","colSpan","leftIndex","rightIndex","cellParams","castColumn","formattedValueOptions","allowBlank","formulae","x","replaceAll","join","address","process","isObject","utcDate","Date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","defaultColumnsStyles","GRID_DATE_COL_DEF","numFmt","GRID_DATETIME_COL_DEF","serializeColumn","columnsStyles","_column$headerName","headerText","min","addColumnGroupingHeaders","worksheet","columnGroupPaths","columnGroupDetails","maxDepth","_columnGroupPaths$key","_columnGroupPaths$key2","rowIndex","groupingPath","parents","lastRowIndex","addRow","group","_group$headerName","rowCount","leftGroupId","leftParents","rightGroupId","rightParents","leftParent","index","mergeCells","serializeColumns","getDataForValueOptionsSheet","valueOptionsSheetName","candidateColumns","Array","isArray","Workbook","addWorksheet","reduce","acc","_column$headerName2","letter","addSerializedRowToWorksheet","serializedRow","newRow","getCell","mergedCell","createValueOptionsSheetIfNeeded","valueOptionsData","sheetName","workbook","valueOptionsWorksheet","GridExcelExportMenuItem","hideMenu","options","MenuItem","exportDataAsExcel","useGridExcelExport","logger","useGridLogger","getDataAsExcel","arguments","_options$getRowsToExp","_options$includeHeade","_options$includeColum","debug","exportedRowIds","getRowsToExport","defaultGetRowsToExport","includeHeaders","includeColumnGroupsHeaders","exceljsPreProcess","exceljsPostProcess","serializedColumns","unstable_getColumnGroupPath","unstable_getAllGroupDetails","_column$headerName3","buildExcel","getColumnsToExport","worker","workerFn","cloneableOptions","sendExcelToUser","buffer","blob","Blob","exportAs","fileName","content","xlsx","writeBuffer","onmessage","data","terminate","exportedColumns","serializedRows","postMessage","excelExportApi","useGridApiMethod","addExportMenuButtons","initialValue","_options$excelOptions","excelOptions","disableToolbarButton","componentName","useGridApiOptionHandler","onExcelExportStateChange","gridCellSelectionStateSelector","cellSelection","cellSelectionStateInitializer","_props$unstable_cellS","unstable_cellSelectionModel","AUTO_SCROLL_SENSITIVITY","missingOnProcessRowUpdateErrorWarning","columnFieldsToExcludeFromPaste","GRID_REORDER_COL_DEF","GRID_DETAIL_PANEL_TOGGLE_FIELD","CellValueUpdater","constructor","this","rowsToUpdate","updateRow","func","wait","debounced","debounce","batchRowUpdates","updateRows","updateCell","pastedCellValue","parsedValue","pastedValueParser","valueParser","rowCopy","valueSetter","newRowId","getRowIdFromRowModel","applyUpdates","processRowUpdate","onProcessRowUpdateError","rowIdsToUpdate","handleRowUpdate","handleError","errorThrown","oldRow","finalRowUpdate","promises","Promise","resolve","then","catch","all","isPasteShortcut","ctrlKey","metaKey","useGridClipboardImport","_props$experimentalFe","_apiRef$current$rootE","enableClipboardPaste","disableClipboardPaste","experimentalFeatures","clipboardPaste","rootEl","rootElementRef","splitClipboardPastedText","unstable_splitClipboardPastedText","handlePaste","focusedCell","gridFocusCellSelector","getCellMode","text","getActiveElement","document","el","createElement","height","margin","outline","top","left","handlePasteEvent","_event$clipboardData","removeEventListener","clipboardData","getData","HTMLElement","focus","preventScroll","addEventListener","appendChild","getTextFromClipboard","pastedData","cellUpdater","pagination","isSingleValuePasted","cellSelectionModel","unstable_getCellSelectionModel","unstable_getSelectedCellsAsArray","rowDataArr","cellValue","visibleColumnFields","gridVisibleColumnFieldsSelector","selectedRows","getSelectedRows","pastedRowsDataCount","rowData","shift","newCellValue","cellIndex","selectedCell","selectedRowId","selectedRowIndex","getRowIndexRelativeToVisibleRows","visibleRowIds","gridPaginatedVisibleSortedGridRowIdsSelector","gridExpandedSortedRowIdsSelector","selectedFieldIndex","stringValue","defaultPasteResolver","getPublicApiRef","checkIfCanStartEditing","useGridApiEventHandler","onClipboardPasteStart","onClipboardPasteEnd","useDataGridPremiumComponent","inputApiRef","useGridInitialization","useGridRowSelectionPreProcessors","useGridRowReorderPreProcessors","useGridTreeDataPreProcessors","useGridLazyLoaderPreProcessors","useGridRowPinningPreProcessors","useGridDetailPanelPreProcessors","useGridColumnPinningPreProcessors","useGridRowsPreProcessors","useGridInitializeState","headerFilteringStateInitializer","rowSelectionStateInitializer","detailPanelStateInitializer","columnPinningStateInitializer","columnsStateInitializer","rowPinningStateInitializer","rowsStateInitializer","editingStateInitializer","focusStateInitializer","sortingStateInitializer","preferencePanelStateInitializer","filterStateInitializer","densityStateInitializer","columnReorderStateInitializer","columnResizeStateInitializer","paginationStateInitializer","rowsMetaStateInitializer","columnMenuStateInitializer","columnGroupsStateInitializer","virtualizationStateInitializer","useGridRowGrouping","_props$initialState3","registerControlState","stateId","propModel","propOnChange","onRowGroupingModelChange","stateSelector","changeEvent","rowGroupingApi","setRowGroupingModel","forceUpdate","addRowGroupingCriteria","groupingIndex","currentModel","cleanGroupingIndex","updatedModel","removeRowGroupingCriteria","setRowGroupingCriteriaIndex","targetIndex","currentTargetIndex","splice","_props$initialState2","rowGroupingModelToExport","exportOnlyDirtyModels","handleCellKeyDown","shiftKey","preventDefault","checkGroupingColumnsModelDiff","areGroupingRulesEqual","newRuleIndex","requestPipeProcessorsApplication","getActiveStrategy","useGridHeaderFiltering","useGridTreeData","useGridAggregation","onAggregationModelChange","setAggregationModel","applyAggregation","aggregationApi","checkAggregationRulesDiff","useGridKeyboardNavigation","useGridRowSelection","useGridCellSelection","visibleRows","useGridVisibleRows","cellWithVirtualFocus","lastMouseDownCell","mousePosition","autoScrollRAF","sortedRowIds","gridSortedRowIdsSelector","ignoreValueFormatterProp","unstable_ignoreValueFormatterDuringExport","ignoreValueFormatter","clipboardExport","clipboardCopyCellDelimiter","unstable_onCellSelectionModelChange","runIfCellSelectionIsEnabled","callback","unstable_cellSelection","cellSelectionApi","unstable_isCellSelected","unstable_setCellSelectionModel","newModel","unstable_selectCellRange","start","end","keepOtherSelected","startRowIndex","startColumnIndex","getColumnIndex","endRowIndex","endColumnIndex","finalStartRowIndex","finalStartColumnIndex","finalEndRowIndex","finalEndColumnIndex","visibleColumns","getVisibleColumns","rowsInRange","columnsInRange","idToIdLookup","gridRowsDataRowIdToIdLookupSelector","acc2","isSelected","hasClickedValidCellForRangeSelection","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","handleMouseUp","useEventCallback","classList","stopAutoScroll","handleCellMouseDown","_apiRef$current$rootE2","_apiRef$current$rootE3","isMacOs","window","navigator","platform","toUpperCase","button","add","ownerDocument","once","cancelAnimationFrame","handleCellFocusIn","startAutoScroll","_apiRef$current$virtu","_apiRef$current$virtu2","virtualScrollerRef","virtualScrollerRect","getBoundingClientRect","autoScroll","_apiRef$current$virtu3","mouseX","y","mouseY","deltaX","deltaY","factor","dimensions","getRootDimensions","hasScrollY","hasScrollX","scrollLeft","scrollTop","scroll","requestAnimationFrame","handleCellMouseOver","_apiRef$current$virtu4","clientX","clientY","handleCellClick","prevModel","isNavigationKey","otherCell","scrollToIndexes","_apiRef$current$rootE4","rootRef","checkIfCellIsSelected","addClassesToCells","newClasses","range","columnIndex","previousRowId","firstRowIndex","nextRowId","previousColumnField","nextColumnField","canUpdateFocus","isKeyboardEvent","handleClipboardCopy","unsortedSelectedRowIds","fieldsMap","rowString","cellData","serializeCellValue","delimiterCharacter","useGridColumnPinning","useGridRowPinning","useGridColumns","useGridRows","useGridParamsApi","useGridDetailPanel","useGridColumnSpanning","useGridColumnGrouping","useGridEditing","useGridFocus","useGridPreferencesPanel","useGridFilter","useGridSorting","useGridDensity","useGridColumnReorder","useGridColumnResize","useGridPagination","useGridRowsMeta","useGridRowReorder","useGridScroll","useGridInfiniteLoader","useGridLazyLoader","useGridColumnMenu","useGridCsvExport","useGridPrintExport","useGridClipboard","useGridDimensions","useGridEvents","useGridStatePersistence","useGridVirtualization","GRID_AGGREGATION_FUNCTIONS","sum","isNumber","avg","valuesCount","Infinity","toLocaleString","GridColumnMenuRowGroupItem","renderUnGroupingMenuItem","ListItemIcon","columnMenuUngroupIcon","ListItemText","GridColumnMenuRowUngroupItem","_columnsLookup$colDef","ungroupColumn","columnMenuGroupIcon","GRID_COLUMN_MENU_SLOTS_PREMIUM","GRID_COLUMN_MENU_SLOTS","columnMenuAggregationItem","useId","selectedAggregationRule","disableRipple","columnMenuAggregationIcon","FormControl","fullWidth","InputLabel","Select","labelId","onChange","_event$target","newAggregationItem","target","_colDef$field","otherColumnItems","_toPropertyKey","hideColumnMenu","onBlur","aggFunc","columnMenuGroupingItem","GRID_COLUMN_MENU_SLOT_PROPS_PREMIUM","GRID_COLUMN_MENU_SLOT_PROPS","displayOrder","GridPremiumColumnMenu","GridGenericColumnMenu","defaultSlots","defaultSlotProps","iconsSlots","ColumnMenuUngroupIcon","ColumnMenuGroupIcon","ColumnMenuAggregationIcon","DATA_GRID_PREMIUM_DEFAULT_SLOTS_COMPONENTS","DATA_GRID_PRO_DEFAULT_SLOTS_COMPONENTS","materialSlots","ColumnMenu","DATA_GRID_PREMIUM_PROPS_DEFAULT_VALUES","DATA_GRID_PRO_PROPS_DEFAULT_VALUES","pastedText","replace","split","uncapitalizeObjectKeys","releaseInfo","DataGridPremiumRaw","themedProps","useProps","localeText","GRID_DEFAULT_LOCALE_TEXT","computeSlots","_themedProps$slotProp","signature","useDataGridPremiumProps","useLicenseVerifier","pinnedColumns","gridPinnedColumnsSelector","GridContextProvider","GridRoot","forwardedProps","GridHeader","GridBody","VirtualScrollerComponent","DataGridProVirtualScroller","ColumnHeadersProps","Watermark","packageName","GridFooterPlaceholder","DataGridPremium","useCommunityGridApiContext","useGridApiRef","useCommunityGridRootProps"],"sourceRoot":""}