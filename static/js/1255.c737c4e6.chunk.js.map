{"version":3,"file":"static/js/1255.c737c4e6.chunk.js","mappings":"2LAiBaA,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,OAC3BC,EAAAA,QAAAA,IAAA,WACmB,CAAED,YAAAA,IAClBE,KAAKC,EAAAA,eACLC,MAAMC,EAAAA,cAJkB,C,mQCXhBJ,EAAcK,EAAAA,GAAAA,OAAa,CACtCC,QAAQ,2BAKVN,EAAYO,aAAaC,QAAQC,KAC/B,SAACC,GAGC,OADAA,EAAOC,QAASC,cAAhB,kBAA0CC,EAAAA,EAAAA,OAAkB,IACrDH,CACR,IACD,SAACI,GAAD,OAAWC,QAAQC,OAAOF,EAA1B,IAGF,YAQO,IAAMG,EAAe,SAACC,GAAD,OAC1BA,EAAIC,SACY,MAAfD,EAAIC,QAAiC,MAAfD,EAAIC,QAAiC,MAAfD,EAAIC,OAFvB,EAKfC,EAAa,SAACF,GAAD,OACxBD,EAAaC,GAAOA,EAAIG,KAAKC,OAASC,QAAQC,KAAKN,EAAIO,WAD/B,EAIbvB,EAAgB,SAACgB,GAAD,OAC3BD,EAAaC,GAAOA,EAAIG,KAAKC,OAAOI,QAAUH,QAAQC,KAAKN,EAAIO,WADpC,EAIhBE,EAAgBJ,QAAQK,IAGxBxB,EAAgBmB,QAAQT,K","sources":["modules/logo/services/api.ts","modules/logo/services/axios.ts"],"sourcesContent":["/**\n * List of all REST API used in this module.\n */\nimport apiInstance, {\n  ICancelTokenProps,\n  returnSuccess,\n  returnWarning,\n} from \"./axios\";\n\n// The following API functions use an initialized instance of Axios\n// @see axios.ts\n// @param cancelToken is optional and can be used to interrupt api call.\n\n/**\n * Get all files/folders in a directory\n * @returns Array of file objects\n */\nexport const sampleRestApi = ({ cancelToken }: ICancelTokenProps) =>\n  apiInstance\n    .get(`endpoint`, { cancelToken })\n    .then(returnSuccess)\n    .catch(returnWarning);\n","// Axios is used for managing REST API calls\n// Axios Documentation: https://github.com/axios/axios\nimport { getAuthToken, axios, CancelToken } from \"@faharmony/service\";\n\n// Base API\n// Axios instance initialized with common information like baseURL and headers.\nexport const apiInstance = axios.create({\n  baseURL: `/services/service-name`,\n});\n\n// Interceptor to add current authentication bearer token\n// Comment this if no bearer token is required.\napiInstance.interceptors.request.use(\n  (config) => {\n    // Read token from in-memory.\n    config.headers!.Authorization = `Bearer ${getAuthToken() || \"\"}`;\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport default apiInstance;\n\n///////////////////////////\n\n/**\n * Return functions for API call\n */\n// Return whether request was successful or not.\nexport const returnStatus = (res: any): boolean =>\n  res.status &&\n  (res.status === 200 || res.status === 201 || res.status === 204);\n\n// Returns JSON data if found, else undefined.\nexport const returnJSON = (res: any) =>\n  returnStatus(res) ? res.data.result : console.warn(res.statusText);\n\n// Returns Boolean: True if success\nexport const returnSuccess = (res: any): boolean =>\n  returnStatus(res) ? res.data.result.success : console.warn(res.statusText);\n\n// Display return data in console\nexport const displayResult = console.dir;\n\n// Warning for API catch\nexport const returnWarning = console.error;\n\n/**\n * TypeDefinitions for API props\n */\n\n/**\n * Base interface for all API.\n * Extend it to create your own interfaces.\n */\nexport interface ICancelTokenProps {\n  cancelToken?: CancelToken;\n}\n"],"names":["sampleRestApi","cancelToken","apiInstance","then","returnSuccess","catch","returnWarning","axios","baseURL","interceptors","request","use","config","headers","Authorization","getAuthToken","error","Promise","reject","returnStatus","res","status","returnJSON","data","result","console","warn","statusText","success","displayResult","dir"],"sourceRoot":""}