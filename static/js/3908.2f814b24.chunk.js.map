{"version":3,"file":"static/js/3908.2f814b24.chunk.js","mappings":"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","sources":["../../node_modules/highcharts/indicators/indicators-all.src.js","../../node_modules/highcharts/modules/full-screen.src.js","../../node_modules/highcharts/modules/stock.src.js"],"sourcesContent":["/**\n * @license Highstock JS v9.3.3 (2022-02-01)\n *\n * All technical indicators for Highcharts Stock\n *\n * (c) 2010-2021 Pawel Fus\n *\n * License: www.highcharts.com/license\n */\n'use strict';\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/indicators/indicators-all', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n        }\n    }\n    _registerModule(_modules, 'Stock/Indicators/SMA/SMAComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var Series = SeriesRegistry.series,\n            ohlcProto = SeriesRegistry.seriesTypes.ohlc.prototype;\n        var addEvent = U.addEvent,\n            extend = U.extend;\n\n    });\n    _registerModule(_modules, 'Stock/Indicators/SMA/SMAIndicator.js', [_modules['Core/Chart/Chart.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (Chart, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var LineSeries = SeriesRegistry.seriesTypes.line;\n        var addEvent = U.addEvent,\n            error = U.error,\n            extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge,\n            pick = U.pick,\n            splat = U.splat;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The SMA series type.\n         *\n         * @private\n         */\n        var SMAIndicator = /** @class */ (function (_super) {\n                __extends(SMAIndicator, _super);\n            function SMAIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.dataEventsToUnbind = void 0;\n                _this.linkedParent = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            SMAIndicator.prototype.destroy = function () {\n                this.dataEventsToUnbind.forEach(function (unbinder) {\n                    unbinder();\n                });\n                _super.prototype.destroy.apply(this, arguments);\n            };\n            /**\n             * @private\n             */\n            SMAIndicator.prototype.getName = function () {\n                var name = this.name,\n                    params = [];\n                if (!name) {\n                    (this.nameComponents || []).forEach(function (component, index) {\n                        params.push(this.options.params[component] +\n                            pick(this.nameSuffixes[index], ''));\n                    }, this);\n                    name = (this.nameBase || this.type.toUpperCase()) +\n                        (this.nameComponents ? ' (' + params.join(', ') + ')' : '');\n                }\n                return name;\n            };\n            /**\n             * @private\n             */\n            SMAIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal.length,\n                    range = 0,\n                    sum = 0,\n                    SMA = [],\n                    xData = [],\n                    yData = [],\n                    index = -1,\n                    i,\n                    SMAPoint;\n                if (xVal.length < period) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    index = params.index ? params.index : 0;\n                }\n                // Accumulate first N-points\n                while (range < period - 1) {\n                    sum += index < 0 ? yVal[range] : yVal[range][index];\n                    range++;\n                }\n                // Calculate value one-by-one for each period in visible data\n                for (i = range; i < yValLen; i++) {\n                    sum += index < 0 ? yVal[i] : yVal[i][index];\n                    SMAPoint = [xVal[i], sum / period];\n                    SMA.push(SMAPoint);\n                    xData.push(SMAPoint[0]);\n                    yData.push(SMAPoint[1]);\n                    sum -= (index < 0 ?\n                        yVal[i - range] :\n                        yVal[i - range][index]);\n                }\n                return {\n                    values: SMA,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * @private\n             */\n            SMAIndicator.prototype.init = function (chart, options) {\n                var indicator = this;\n                _super.prototype.init.call(indicator, chart, options);\n                // Only after series are linked indicator can be processed.\n                var linkedSeriesUnbiner = addEvent(Chart, 'afterLinkSeries',\n                    function () {\n                        var hasEvents = !!indicator.dataEventsToUnbind.length;\n                    if (indicator.linkedParent) {\n                        if (!hasEvents) {\n                            // No matter which indicator, always recalculate after\n                            // updating the data.\n                            indicator.dataEventsToUnbind.push(addEvent(indicator.linkedParent, 'updatedData', function () {\n                                indicator.recalculateValues();\n                            }));\n                            // Some indicators (like VBP) requires an additional\n                            // event (afterSetExtremes) to properly show the data.\n                            if (indicator.calculateOn.xAxis) {\n                                indicator.dataEventsToUnbind.push(addEvent(indicator.linkedParent.xAxis, indicator.calculateOn.xAxis, function () {\n                                    indicator.recalculateValues();\n                                }));\n                            }\n                        }\n                        // Most indicators are being calculated on chart's init.\n                        if (indicator.calculateOn.chart === 'init') {\n                            if (!indicator.processedYData) {\n                                indicator.recalculateValues();\n                            }\n                        }\n                        else if (!hasEvents) {\n                            // Some indicators (like VBP) has to recalculate their\n                            // values after other chart's events (render).\n                            var unbinder_1 = addEvent(indicator.chart,\n                                indicator.calculateOn.chart,\n                                function () {\n                                    indicator.recalculateValues();\n                                // Call this just once.\n                                unbinder_1();\n                            });\n                        }\n                    }\n                    else {\n                        return error('Series ' +\n                            indicator.options.linkedTo +\n                            ' not found! Check `linkedTo`.', false, chart);\n                    }\n                }, {\n                    order: 0\n                });\n                // Make sure we find series which is a base for an indicator\n                // chart.linkSeries();\n                indicator.dataEventsToUnbind = [];\n                indicator.eventsToUnbind.push(linkedSeriesUnbiner);\n            };\n            /**\n             * @private\n             */\n            SMAIndicator.prototype.recalculateValues = function () {\n                var indicator = this,\n                    oldData = indicator.points || [],\n                    oldDataLength = (indicator.xData || []).length,\n                    processedData = (indicator.getValues(indicator.linkedParent,\n                    indicator.options.params) || {\n                        values: [],\n                        xData: [],\n                        yData: []\n                    }),\n                    croppedDataValues = [],\n                    overwriteData = true,\n                    oldFirstPointIndex,\n                    oldLastPointIndex,\n                    croppedData,\n                    min,\n                    max,\n                    i;\n                // We need to update points to reflect changes in all,\n                // x and y's, values. However, do it only for non-grouped\n                // data - grouping does it for us (#8572)\n                if (oldDataLength &&\n                    !indicator.hasGroupedData &&\n                    indicator.visible &&\n                    indicator.points) {\n                    // When data is cropped update only avaliable points (#9493)\n                    if (indicator.cropped) {\n                        if (indicator.xAxis) {\n                            min = indicator.xAxis.min;\n                            max = indicator.xAxis.max;\n                        }\n                        croppedData = indicator.cropData(processedData.xData, processedData.yData, min, max);\n                        for (i = 0; i < croppedData.xData.length; i++) {\n                            // (#10774)\n                            croppedDataValues.push([\n                                croppedData.xData[i]\n                            ].concat(splat(croppedData.yData[i])));\n                        }\n                        oldFirstPointIndex = processedData.xData.indexOf(indicator.xData[0]);\n                        oldLastPointIndex = processedData.xData.indexOf(indicator.xData[indicator.xData.length - 1]);\n                        // Check if indicator points should be shifted (#8572)\n                        if (oldFirstPointIndex === -1 &&\n                            oldLastPointIndex === processedData.xData.length - 2) {\n                            if (croppedDataValues[0][0] === oldData[0].x) {\n                                croppedDataValues.shift();\n                            }\n                        }\n                        indicator.updateData(croppedDataValues);\n                        // Omit addPoint() and removePoint() cases\n                    }\n                    else if (processedData.xData.length !== oldDataLength - 1 &&\n                        processedData.xData.length !== oldDataLength + 1) {\n                        overwriteData = false;\n                        indicator.updateData(processedData.values);\n                    }\n                }\n                if (overwriteData) {\n                    indicator.xData = processedData.xData;\n                    indicator.yData = processedData.yData;\n                    indicator.options.data = processedData.values;\n                }\n                // Removal of processedXData property is required because on\n                // first translate processedXData array is empty\n                if (indicator.calculateOn.xAxis && indicator.processedXData) {\n                    delete indicator.processedXData;\n                    indicator.isDirty = true;\n                    indicator.redraw();\n                }\n                indicator.isDirtyData = false;\n            };\n            /**\n             * @private\n             */\n            SMAIndicator.prototype.processData = function () {\n                var series = this,\n                    compareToMain = series.options.compareToMain,\n                    linkedParent = series.linkedParent;\n                _super.prototype.processData.apply(series, arguments);\n                if (series.dataModify &&\n                    linkedParent &&\n                    linkedParent.dataModify &&\n                    linkedParent.dataModify.compareValue &&\n                    compareToMain) {\n                    series.dataModify.compareValue =\n                        linkedParent.dataModify.compareValue;\n                }\n                return;\n            };\n            /**\n             * The parameter allows setting line series type and use OHLC indicators.\n             * Data in OHLC format is required.\n             *\n             * @sample {highstock} stock/indicators/use-ohlc-data\n             *         Use OHLC data format to plot line chart\n             *\n             * @type      {boolean}\n             * @product   highstock\n             * @apioption plotOptions.line.useOhlcData\n             */\n            /**\n             * Simple moving average indicator (SMA). This series requires `linkedTo`\n             * option to be set.\n             *\n             * @sample stock/indicators/sma\n             *         Simple moving average indicator\n             *\n             * @extends      plotOptions.line\n             * @since        6.0.0\n             * @excluding    allAreas, colorAxis, dragDrop, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking, useOhlcData\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @optionparent plotOptions.sma\n             */\n            SMAIndicator.defaultOptions = merge(LineSeries.defaultOptions, {\n                /**\n                 * The name of the series as shown in the legend, tooltip etc. If not\n                 * set, it will be based on a technical indicator type and default\n                 * params.\n                 *\n                 * @type {string}\n                 */\n                name: void 0,\n                tooltip: {\n                    /**\n                     * Number of decimals in indicator series.\n                     */\n                    valueDecimals: 4\n                },\n                /**\n                 * The main series ID that indicator will be based on. Required for this\n                 * indicator.\n                 *\n                 * @type {string}\n                 */\n                linkedTo: void 0,\n                /**\n                 * Whether to compare indicator to the main series values\n                 * or indicator values.\n                 *\n                 * @sample {highstock} stock/plotoptions/series-comparetomain/\n                 *         Difference between comparing SMA values to the main series\n                 *         and its own values.\n                 *\n                 * @type {boolean}\n                 */\n                compareToMain: false,\n                /**\n                 * Paramters used in calculation of regression series' points.\n                 */\n                params: {\n                    /**\n                     * The point index which indicator calculations will base. For\n                     * example using OHLC data, index=2 means the indicator will be\n                     * calculated using Low values.\n                     */\n                    index: 3,\n                    /**\n                     * The base period for indicator calculations. This is the number of\n                     * data points which are taken into account for the indicator\n                     * calculations.\n                     */\n                    period: 14\n                }\n            });\n            return SMAIndicator;\n        }(LineSeries));\n        extend(SMAIndicator.prototype, {\n            calculateOn: {\n                chart: 'init'\n            },\n            hasDerivedData: true,\n            nameComponents: ['period'],\n            nameSuffixes: [],\n            useCommonDataGrouping: true\n        });\n        SeriesRegistry.registerSeriesType('sma', SMAIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `SMA` series. If the [type](#series.sma.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.sma\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL, useOhlcData\n         * @requires  stock/indicators/indicators\n         * @apioption series.sma\n         */\n        ''; // adds doclet above to the transpiled file\n\n        return SMAIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/EMA/EMAIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var correctFloat = U.correctFloat,\n            isArray = U.isArray,\n            merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The EMA series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ema\n         *\n         * @augments Highcharts.Series\n         */\n        var EMAIndicator = /** @class */ (function (_super) {\n                __extends(EMAIndicator, _super);\n            function EMAIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            EMAIndicator.prototype.accumulatePeriodPoints = function (period, index, yVal) {\n                var sum = 0,\n                    i = 0,\n                    y = 0;\n                while (i < period) {\n                    y = index < 0 ? yVal[i] : yVal[i][index];\n                    sum = sum + y;\n                    i++;\n                }\n                return sum;\n            };\n            EMAIndicator.prototype.calculateEma = function (xVal, yVal, i, EMApercent, calEMA, index, SMA) {\n                var x = xVal[i - 1],\n                    yValue = index < 0 ?\n                        yVal[i - 1] :\n                        yVal[i - 1][index],\n                    y;\n                y = typeof calEMA === 'undefined' ?\n                    SMA : correctFloat((yValue * EMApercent) +\n                    (calEMA * (1 - EMApercent)));\n                return [x, y];\n            };\n            EMAIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    EMApercent = 2 / (period + 1),\n                    sum = 0,\n                    EMA = [],\n                    xData = [],\n                    yData = [],\n                    index = -1,\n                    SMA = 0,\n                    calEMA,\n                    EMAPoint,\n                    i;\n                // Check period, if bigger than points length, skip\n                if (yValLen < period) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    index = params.index ? params.index : 0;\n                }\n                // Accumulate first N-points\n                sum = this.accumulatePeriodPoints(period, index, yVal);\n                // first point\n                SMA = sum / period;\n                // Calculate value one-by-one for each period in visible data\n                for (i = period; i < yValLen + 1; i++) {\n                    EMAPoint = this.calculateEma(xVal, yVal, i, EMApercent, calEMA, index, SMA);\n                    EMA.push(EMAPoint);\n                    xData.push(EMAPoint[0]);\n                    yData.push(EMAPoint[1]);\n                    calEMA = EMAPoint[1];\n                }\n                return {\n                    values: EMA,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Exponential moving average indicator (EMA). This series requires the\n             * `linkedTo` option to be set.\n             *\n             * @sample stock/indicators/ema\n             * Exponential moving average indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @optionparent plotOptions.ema\n             */\n            EMAIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    /**\n                     * The point index which indicator calculations will base. For\n                     * example using OHLC data, index=2 means the indicator will be\n                     * calculated using Low values.\n                     *\n                     * By default index value used to be set to 0. Since\n                     * Highcharts Stock 7 by default index is set to 3\n                     * which means that the ema indicator will be\n                     * calculated using Close values.\n                     */\n                    index: 3,\n                    period: 9 // @merge 14 in v6.2\n                }\n            });\n            return EMAIndicator;\n        }(SMAIndicator));\n        SeriesRegistry.registerSeriesType('ema', EMAIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `EMA` series. If the [type](#series.ema.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ema\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @apioption series.ema\n         */\n        ''; // adds doclet above to the transpiled file\n\n        return EMAIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/AD/ADIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var error = U.error,\n            extend = U.extend,\n            merge = U.merge;\n        /**\n         * The AD series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ad\n         *\n         * @augments Highcharts.Series\n         */\n        var ADIndicator = /** @class */ (function (_super) {\n                __extends(ADIndicator, _super);\n            function ADIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            ADIndicator.populateAverage = function (xVal, yVal, yValVolume, i, _period) {\n                var high = yVal[i][1],\n                    low = yVal[i][2],\n                    close = yVal[i][3],\n                    volume = yValVolume[i],\n                    adY = close === high && close === low || high === low ?\n                        0 :\n                        ((2 * close - low - high) / (high - low)) * volume,\n                    adX = xVal[i];\n                return [adX, adY];\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            ADIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    volumeSeriesID = params.volumeSeriesID,\n                    volumeSeries = series.chart.get(volumeSeriesID),\n                    yValVolume = volumeSeries && volumeSeries.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    AD = [],\n                    xData = [],\n                    yData = [],\n                    len,\n                    i,\n                    ADPoint;\n                if (xVal.length <= period &&\n                    yValLen &&\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                if (!volumeSeries) {\n                    error('Series ' +\n                        volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, series.chart);\n                    return;\n                }\n                // i = period <-- skip first N-points\n                // Calculate value one-by-one for each period in visible data\n                for (i = period; i < yValLen; i++) {\n                    len = AD.length;\n                    ADPoint = ADIndicator.populateAverage(xVal, yVal, yValVolume, i, period);\n                    if (len > 0) {\n                        ADPoint[1] += AD[len - 1][1];\n                    }\n                    AD.push(ADPoint);\n                    xData.push(ADPoint[0]);\n                    yData.push(ADPoint[1]);\n                }\n                return {\n                    values: AD,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Accumulation Distribution (AD). This series requires `linkedTo` option to\n             * be set.\n             *\n             * @sample stock/indicators/accumulation-distribution\n             *         Accumulation/Distribution indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/accumulation-distribution\n             * @optionparent plotOptions.ad\n             */\n            ADIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    /**\n                     * The id of volume series which is mandatory.\n                     * For example using OHLC data, volumeSeriesID='volume' means\n                     * the indicator will be calculated using OHLC and volume values.\n                     *\n                     * @since 6.0.0\n                     */\n                    volumeSeriesID: 'volume'\n                }\n            });\n            return ADIndicator;\n        }(SMAIndicator));\n        extend(ADIndicator.prototype, {\n            nameComponents: false,\n            nameBase: 'Accumulation/Distribution'\n        });\n        SeriesRegistry.registerSeriesType('ad', ADIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `AD` series. If the [type](#series.ad.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ad\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/accumulation-distribution\n         * @apioption series.ad\n         */\n        ''; // add doclet above to transpiled file\n\n        return ADIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/AO/AOIndicator.js', [_modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (H, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var noop = H.noop;\n        var _a = SeriesRegistry.seriesTypes,\n            SMAIndicator = _a.sma,\n            ColumnSeries = _a.column;\n        var extend = U.extend,\n            merge = U.merge,\n            correctFloat = U.correctFloat,\n            isArray = U.isArray;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The AO series type\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ao\n         *\n         * @augments Highcharts.Series\n         */\n        var AOIndicator = /** @class */ (function (_super) {\n                __extends(AOIndicator, _super);\n            function AOIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /**\n                 *\n                 * Properties\n                 *\n                 */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /**\n             *\n             * Functions\n             *\n             */\n            AOIndicator.prototype.drawGraph = function () {\n                var indicator = this,\n                    options = indicator.options,\n                    points = indicator.points,\n                    userColor = indicator.userOptions.color,\n                    positiveColor = options.greaterBarColor,\n                    negativeColor = options.lowerBarColor,\n                    firstPoint = points[0],\n                    i;\n                if (!userColor && firstPoint) {\n                    firstPoint.color = positiveColor;\n                    for (i = 1; i < points.length; i++) {\n                        if (points[i].y > points[i - 1].y) {\n                            points[i].color = positiveColor;\n                        }\n                        else if (points[i].y < points[i - 1].y) {\n                            points[i].color = negativeColor;\n                        }\n                        else {\n                            points[i].color = points[i - 1].color;\n                        }\n                    }\n                }\n            };\n            AOIndicator.prototype.getValues = function (series) {\n                var shortPeriod = 5,\n                    longPeriod = 34,\n                    xVal = series.xData || [],\n                    yVal = series.yData || [],\n                    yValLen = yVal.length,\n                    AO = [], // 0- date, 1- Awesome Oscillator\n                    xData = [],\n                    yData = [],\n                    high = 1,\n                    low = 2,\n                    shortSum = 0,\n                    longSum = 0,\n                    shortSMA, // Shorter Period SMA\n                    longSMA, // Longer Period SMA\n                    awesome,\n                    shortLastIndex,\n                    longLastIndex,\n                    price,\n                    i,\n                    j;\n                if (xVal.length <= longPeriod ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                for (i = 0; i < longPeriod - 1; i++) {\n                    price = (yVal[i][high] + yVal[i][low]) / 2;\n                    if (i >= longPeriod - shortPeriod) {\n                        shortSum = correctFloat(shortSum + price);\n                    }\n                    longSum = correctFloat(longSum + price);\n                }\n                for (j = longPeriod - 1; j < yValLen; j++) {\n                    price = (yVal[j][high] + yVal[j][low]) / 2;\n                    shortSum = correctFloat(shortSum + price);\n                    longSum = correctFloat(longSum + price);\n                    shortSMA = shortSum / shortPeriod;\n                    longSMA = longSum / longPeriod;\n                    awesome = correctFloat(shortSMA - longSMA);\n                    AO.push([xVal[j], awesome]);\n                    xData.push(xVal[j]);\n                    yData.push(awesome);\n                    shortLastIndex = j + 1 - shortPeriod;\n                    longLastIndex = j + 1 - longPeriod;\n                    shortSum = correctFloat(shortSum -\n                        (yVal[shortLastIndex][high] +\n                            yVal[shortLastIndex][low]) / 2);\n                    longSum = correctFloat(longSum -\n                        (yVal[longLastIndex][high] +\n                            yVal[longLastIndex][low]) / 2);\n                }\n                return {\n                    values: AO,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Awesome Oscillator. This series requires the `linkedTo` option to\n             * be set and should be loaded after the `stock/indicators/indicators.js`\n             *\n             * @sample {highstock} stock/indicators/ao\n             *         Awesome\n             *\n             * @extends      plotOptions.sma\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n             *               params, pointInterval, pointIntervalUnit, pointPlacement,\n             *               pointRange, pointStart, showInNavigator, stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/ao\n             * @optionparent plotOptions.ao\n             */\n            AOIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    // Index and period are unchangeable, do not inherit (#15362)\n                    index: void 0,\n                    period: void 0\n                },\n                /**\n                 * Color of the Awesome oscillator series bar that is greater than the\n                 * previous one. Note that if a `color` is defined, the `color`\n                 * takes precedence and the `greaterBarColor` is ignored.\n                 *\n                 * @sample {highstock} stock/indicators/ao/\n                 *         greaterBarColor\n                 *\n                 * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @since 7.0.0\n                 */\n                greaterBarColor: \"#06b535\" /* positiveColor */,\n                /**\n                 * Color of the Awesome oscillator series bar that is lower than the\n                 * previous one. Note that if a `color` is defined, the `color`\n                 * takes precedence and the `lowerBarColor` is ignored.\n                 *\n                 * @sample {highstock} stock/indicators/ao/\n                 *         lowerBarColor\n                 *\n                 * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @since 7.0.0\n                 */\n                lowerBarColor: \"#f21313\" /* negativeColor */,\n                threshold: 0,\n                groupPadding: 0.2,\n                pointPadding: 0.2,\n                crisp: false,\n                states: {\n                    hover: {\n                        halo: {\n                            size: 0\n                        }\n                    }\n                }\n            });\n            return AOIndicator;\n        }(SMAIndicator));\n        extend(AOIndicator.prototype, {\n            nameBase: 'AO',\n            nameComponents: false,\n            // Columns support:\n            markerAttribs: noop,\n            getColumnMetrics: ColumnSeries.prototype.getColumnMetrics,\n            crispCol: ColumnSeries.prototype.crispCol,\n            translate: ColumnSeries.prototype.translate,\n            drawPoints: ColumnSeries.prototype.drawPoints\n        });\n        SeriesRegistry.registerSeriesType('ao', AOIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * An `AO` series. If the [type](#series.ao.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ao\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/ao\n         * @apioption series.ao\n         */\n        ''; // for including the above in the doclets\n\n        return AOIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/MultipleLinesComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2021 Wojciech Chmiel\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var defined = U.defined,\n            error = U.error,\n            merge = U.merge;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Composition useful for all indicators that have more than one line. Compose\n         * it with your implementation where you will provide the `getValues` method\n         * appropriate to your indicator and `pointArrayMap`, `pointValKey`,\n         * `linesApiNames` properties. Notice that `pointArrayMap` should be consistent\n         * with the amount of lines calculated in the `getValues` method.\n         *\n         * @private\n         * @mixin multipleLinesMixin\n         */\n        var MultipleLinesComposition;\n        (function (MultipleLinesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            var composedClasses = [];\n            /**\n             * Additional lines DOCS names. Elements of linesApiNames array should\n             * be consistent with DOCS line names defined in your implementation.\n             * Notice that linesApiNames should have decreased amount of elements\n             * relative to pointArrayMap (without pointValKey).\n             *\n             * @private\n             * @name multipleLinesMixin.linesApiNames\n             * @type {Array<string>}\n             */\n            var linesApiNames = ['bottomLine'];\n            /**\n             * Lines ids. Required to plot appropriate amount of lines.\n             * Notice that pointArrayMap should have more elements than\n             * linesApiNames, because it contains main line and additional lines ids.\n             * Also it should be consistent with amount of lines calculated in\n             * getValues method from your implementation.\n             *\n             * @private\n             * @name multipleLinesMixin.pointArrayMap\n             * @type {Array<string>}\n             */\n            var pointArrayMap = ['top', 'bottom'];\n            /**\n             * Names of the lines, bewteen which the area should be plotted.\n             * If the drawing of the area should\n             * be disabled for some indicators, leave this option as an empty array.\n             * Names should be the same as the names in the pointArrayMap.\n             * @private\n             * @name multipleLinesMixin.areaLinesNames\n             * @type {Array<string>}\n             */\n            var areaLinesNames = ['top'];\n            /**\n             * Main line id.\n             *\n             * @private\n             * @name multipleLinesMixin.pointValKey\n             * @type {string}\n             */\n            var pointValKey = 'top';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(IndicatorClass) {\n                if (composedClasses.indexOf(IndicatorClass) === -1) {\n                    composedClasses.push(IndicatorClass);\n                    var proto = IndicatorClass.prototype;\n                    proto.linesApiNames = (proto.linesApiNames ||\n                        linesApiNames.slice());\n                    proto.pointArrayMap = (proto.pointArrayMap ||\n                        pointArrayMap.slice());\n                    proto.pointValKey = (proto.pointValKey ||\n                        pointValKey);\n                    proto.areaLinesNames = (proto.areaLinesNames ||\n                        areaLinesNames.slice());\n                    proto.drawGraph = drawGraph;\n                    proto.getGraphPath = getGraphPath;\n                    proto.toYData = toYData;\n                    proto.translate = translate;\n                    proto.getTranslatedLinesNames = getTranslatedLinesNames;\n                }\n                return IndicatorClass;\n            }\n            MultipleLinesComposition.compose = compose;\n            /**\n             * Create the path based on points provided as argument.\n             * If indicator.nextPoints option is defined, create the areaFill.\n             *\n             * @param points Points on which the path should be created\n             */\n            function getGraphPath(points) {\n                var indicator = this;\n                var areaPath,\n                    path = [],\n                    higherAreaPath = [];\n                points = points || this.points;\n                // Render Span\n                if (indicator.fillGraph && indicator.nextPoints) {\n                    areaPath = SMAIndicator.prototype.getGraphPath.call(indicator, indicator.nextPoints);\n                    if (areaPath && areaPath.length) {\n                        areaPath[0][0] = 'L';\n                        path = SMAIndicator.prototype.getGraphPath.call(indicator, points);\n                        higherAreaPath = areaPath.slice(0, path.length);\n                        // Reverse points, so that the areaFill will start from the end:\n                        for (var i = higherAreaPath.length - 1; i >= 0; i--) {\n                            path.push(higherAreaPath[i]);\n                        }\n                    }\n                }\n                else {\n                    path = SMAIndicator.prototype.getGraphPath.apply(indicator, arguments);\n                }\n                return path;\n            }\n            /**\n             * Draw main and additional lines.\n             *\n             * @private\n             * @function multipleLinesMixin.drawGraph\n             */\n            function drawGraph() {\n                var indicator = this,\n                    pointValKey = indicator.pointValKey,\n                    linesApiNames = indicator.linesApiNames,\n                    areaLinesNames = indicator.areaLinesNames,\n                    mainLinePoints = indicator.points,\n                    mainLineOptions = indicator.options,\n                    mainLinePath = indicator.graph,\n                    gappedExtend = {\n                        options: {\n                            gapSize: mainLineOptions.gapSize\n                        }\n                    }, \n                    // additional lines point place holders:\n                    secondaryLines = [],\n                    secondaryLinesNames = indicator.getTranslatedLinesNames(pointValKey);\n                var pointsLength = mainLinePoints.length,\n                    point;\n                // Generate points for additional lines:\n                secondaryLinesNames.forEach(function (plotLine, index) {\n                    // create additional lines point place holders\n                    secondaryLines[index] = [];\n                    while (pointsLength--) {\n                        point = mainLinePoints[pointsLength];\n                        secondaryLines[index].push({\n                            x: point.x,\n                            plotX: point.plotX,\n                            plotY: point[plotLine],\n                            isNull: !defined(point[plotLine])\n                        });\n                    }\n                    pointsLength = mainLinePoints.length;\n                });\n                // Modify options and generate area fill:\n                if (this.userOptions.fillColor && areaLinesNames.length) {\n                    var index = secondaryLinesNames.indexOf(getLineName(areaLinesNames[0])),\n                        secondLinePoints = secondaryLines[index],\n                        firstLinePoints = areaLinesNames.length === 1 ?\n                            mainLinePoints :\n                            secondaryLines[secondaryLinesNames.indexOf(getLineName(areaLinesNames[1]))],\n                        originalColor = indicator.color;\n                    indicator.points = firstLinePoints;\n                    indicator.nextPoints = secondLinePoints;\n                    indicator.color = this.userOptions.fillColor;\n                    indicator.options = merge(mainLinePoints, gappedExtend);\n                    indicator.graph = indicator.area;\n                    indicator.fillGraph = true;\n                    SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(indicator);\n                    indicator.area = indicator.graph;\n                    // Clean temporary properties:\n                    delete indicator.nextPoints;\n                    delete indicator.fillGraph;\n                    indicator.color = originalColor;\n                }\n                // Modify options and generate additional lines:\n                linesApiNames.forEach(function (lineName, i) {\n                    if (secondaryLines[i]) {\n                        indicator.points = secondaryLines[i];\n                        if (mainLineOptions[lineName]) {\n                            indicator.options = merge(mainLineOptions[lineName].styles, gappedExtend);\n                        }\n                        else {\n                            error('Error: \"There is no ' + lineName +\n                                ' in DOCS options declared. Check if linesApiNames' +\n                                ' are consistent with your DOCS line names.\"' +\n                                ' at mixin/multiple-line.js:34');\n                        }\n                        indicator.graph = indicator['graph' + lineName];\n                        SMAIndicator.prototype.drawGraph.call(indicator);\n                        // Now save lines:\n                        indicator['graph' + lineName] = indicator.graph;\n                    }\n                    else {\n                        error('Error: \"' + lineName + ' doesn\\'t have equivalent ' +\n                            'in pointArrayMap. To many elements in linesApiNames ' +\n                            'relative to pointArrayMap.\"');\n                    }\n                });\n                // Restore options and draw a main line:\n                indicator.points = mainLinePoints;\n                indicator.options = mainLineOptions;\n                indicator.graph = mainLinePath;\n                SMAIndicator.prototype.drawGraph.call(indicator);\n            }\n            /**\n             * Create translatedLines Collection based on pointArrayMap.\n             *\n             * @private\n             * @function multipleLinesMixin.getTranslatedLinesNames\n             * @param {string} [excludedValue]\n             *        Main line id\n             * @return {Array<string>}\n             *         Returns translated lines names without excluded value.\n             */\n            function getTranslatedLinesNames(excludedValue) {\n                var translatedLines = [];\n                (this.pointArrayMap || []).forEach(function (propertyName) {\n                    if (propertyName !== excludedValue) {\n                        translatedLines.push(getLineName(propertyName));\n                    }\n                });\n                return translatedLines;\n            }\n            /**\n             * Generate the API name of the line\n             * @param propertyName name of the line\n             */\n            function getLineName(propertyName) {\n                return ('plot' +\n                    propertyName.charAt(0).toUpperCase() +\n                    propertyName.slice(1));\n            }\n            /**\n             * @private\n             * @function multipleLinesMixin.toYData\n             * @param {Highcharts.Point} point\n             *        Indicator point\n             * @return {Array<number>}\n             *         Returns point Y value for all lines\n             */\n            function toYData(point) {\n                var pointColl = [];\n                (this.pointArrayMap || []).forEach(function (propertyName) {\n                    pointColl.push(point[propertyName]);\n                });\n                return pointColl;\n            }\n            /**\n             * Add lines plot pixel values.\n             *\n             * @private\n             * @function multipleLinesMixin.translate\n             */\n            function translate() {\n                var indicator = this,\n                    pointArrayMap = indicator.pointArrayMap;\n                var LinesNames = [],\n                    value;\n                LinesNames = indicator.getTranslatedLinesNames();\n                SMAIndicator.prototype.translate.apply(indicator, arguments);\n                indicator.points.forEach(function (point) {\n                    pointArrayMap.forEach(function (propertyName, i) {\n                        value = point[propertyName];\n                        // If the modifier, like for example compare exists,\n                        // modified the original value by that method, #15867.\n                        if (indicator.dataModify) {\n                            value = indicator.dataModify.modifyValue(value);\n                        }\n                        if (value !== null) {\n                            point[LinesNames[i]] = indicator.yAxis.toPixels(value, true);\n                        }\n                    });\n                });\n            }\n        })(MultipleLinesComposition || (MultipleLinesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MultipleLinesComposition;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Aroon/AroonIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var extend = U.extend,\n            merge = U.merge,\n            pick = U.pick;\n        /* eslint-disable valid-jsdoc */\n        // Utils\n        // Index of element with extreme value from array (min or max)\n        /**\n         * @private\n         */\n        function getExtremeIndexInArray(arr, extreme) {\n            var extremeValue = arr[0],\n                valueIndex = 0,\n                i;\n            for (i = 1; i < arr.length; i++) {\n                if (extreme === 'max' && arr[i] >= extremeValue ||\n                    extreme === 'min' && arr[i] <= extremeValue) {\n                    extremeValue = arr[i];\n                    valueIndex = i;\n                }\n            }\n            return valueIndex;\n        }\n        /* eslint-enable valid-jsdoc */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Aroon series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.aroon\n         *\n         * @augments Highcharts.Series\n         */\n        var AroonIndicator = /** @class */ (function (_super) {\n                __extends(AroonIndicator, _super);\n            function AroonIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            AroonIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0, \n                    // 0- date, 1- Aroon Up, 2- Aroon Down\n                    AR = [],\n                    xData = [],\n                    yData = [],\n                    slicedY,\n                    low = 2,\n                    high = 1,\n                    aroonUp,\n                    aroonDown,\n                    xLow,\n                    xHigh,\n                    i;\n                // For a N-period, we start from N-1 point, to calculate Nth point\n                // That is why we later need to comprehend slice() elements list\n                // with (+1)\n                for (i = period - 1; i < yValLen; i++) {\n                    slicedY = yVal.slice(i - period + 1, i + 2);\n                    xLow = getExtremeIndexInArray(slicedY.map(function (elem) {\n                        return pick(elem[low], elem);\n                    }), 'min');\n                    xHigh = getExtremeIndexInArray(slicedY.map(function (elem) {\n                        return pick(elem[high], elem);\n                    }), 'max');\n                    aroonUp = (xHigh / period) * 100;\n                    aroonDown = (xLow / period) * 100;\n                    if (xVal[i + 1]) {\n                        AR.push([xVal[i + 1], aroonUp, aroonDown]);\n                        xData.push(xVal[i + 1]);\n                        yData.push([aroonUp, aroonDown]);\n                    }\n                }\n                return {\n                    values: AR,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Aroon. This series requires the `linkedTo` option to be\n             * set and should be loaded after the `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/aroon\n             *         Aroon\n             *\n             * @extends      plotOptions.sma\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/aroon\n             * @optionparent plotOptions.aroon\n             */\n            AroonIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Paramters used in calculation of aroon series points.\n                 *\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    period: 25\n                },\n                marker: {\n                    enabled: false\n                },\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b><br/>Aroon Up: {point.y}<br/>Aroon Down: {point.aroonDown}<br/>'\n                },\n                /**\n                 * aroonDown line options.\n                 */\n                aroonDown: {\n                    /**\n                     * Styles for an aroonDown line.\n                     */\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line. If not set, it's inherited from\n                         * [plotOptions.aroon.color](#plotOptions.aroon.color).\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return AroonIndicator;\n        }(SMAIndicator));\n        extend(AroonIndicator.prototype, {\n            areaLinesNames: [],\n            linesApiNames: ['aroonDown'],\n            nameBase: 'Aroon',\n            pointArrayMap: ['y', 'aroonDown'],\n            pointValKey: 'y'\n        });\n        MultipleLinesComposition.compose(AroonIndicator);\n        SeriesRegistry.registerSeriesType('aroon', AroonIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A Aroon indicator. If the [type](#series.aroon.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.aroon\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/aroon\n         * @apioption series.aroon\n         */\n        ''; // to avoid removal of the above jsdoc\n\n        return AroonIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/AroonOscillator/AroonOscillatorIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var AroonIndicator = SeriesRegistry.seriesTypes.aroon;\n        var extend = U.extend,\n            merge = U.merge;\n        var AROON = SeriesRegistry.seriesTypes.aroon;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Aroon Oscillator series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.aroonoscillator\n         *\n         * @augments Highcharts.Series\n         */\n        var AroonOscillatorIndicator = /** @class */ (function (_super) {\n                __extends(AroonOscillatorIndicator, _super);\n            function AroonOscillatorIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            AroonOscillatorIndicator.prototype.getValues = function (series, params) {\n                // 0- date, 1- Aroon Oscillator\n                var ARO = [],\n                    xData = [],\n                    yData = [],\n                    aroon,\n                    aroonUp,\n                    aroonDown,\n                    oscillator,\n                    i;\n                aroon = AROON.prototype.getValues.call(this, series, params);\n                for (i = 0; i < aroon.yData.length; i++) {\n                    aroonUp = aroon.yData[i][0];\n                    aroonDown = aroon.yData[i][1];\n                    oscillator = aroonUp - aroonDown;\n                    ARO.push([aroon.xData[i], oscillator]);\n                    xData.push(aroon.xData[i]);\n                    yData.push(oscillator);\n                }\n                return {\n                    values: ARO,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Aroon Oscillator. This series requires the `linkedTo` option to be set\n             * and should be loaded after the `stock/indicators/indicators.js` and\n             * `stock/indicators/aroon.js`.\n             *\n             * @sample {highstock} stock/indicators/aroon-oscillator\n             *         Aroon Oscillator\n             *\n             * @extends      plotOptions.aroon\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, aroonDown, colorAxis, compare, compareBase,\n             *               joinBy, keys, navigatorOptions, pointInterval,\n             *               pointIntervalUnit, pointPlacement, pointRange, pointStart,\n             *               showInNavigator, stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/aroon\n             * @requires     stock/indicators/aroon-oscillator\n             * @optionparent plotOptions.aroonoscillator\n             */\n            AroonOscillatorIndicator.defaultOptions = merge(AroonIndicator.defaultOptions, {\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b>: {point.y}'\n                }\n            });\n            return AroonOscillatorIndicator;\n        }(AroonIndicator));\n        extend(AroonOscillatorIndicator.prototype, {\n            nameBase: 'Aroon Oscillator',\n            linesApiNames: [],\n            pointArrayMap: ['y'],\n            pointValKey: 'y'\n        });\n        MultipleLinesComposition.compose(AroonIndicator);\n        SeriesRegistry.registerSeriesType('aroonoscillator', AroonOscillatorIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * An `Aroon Oscillator` series. If the [type](#series.aroonoscillator.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.aroonoscillator\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, aroonDown, colorAxis, compare, compareBase, dataParser,\n         *            dataURL, joinBy, keys, navigatorOptions, pointInterval,\n         *            pointIntervalUnit, pointPlacement, pointRange, pointStart,\n         *            showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/aroon\n         * @requires  stock/indicators/aroon-oscillator\n         * @apioption series.aroonoscillator\n         */\n        ''; // adds doclet above to the transpiled file\n\n        return AroonOscillatorIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/ATR/ATRIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var isArray = U.isArray,\n            merge = U.merge;\n        /* eslint-disable valid-jsdoc */\n        // Utils:\n        /**\n         * @private\n         */\n        function accumulateAverage(points, xVal, yVal, i) {\n            var xValue = xVal[i],\n                yValue = yVal[i];\n            points.push([xValue, yValue]);\n        }\n        /**\n         * @private\n         */\n        function getTR(currentPoint, prevPoint) {\n            var pointY = currentPoint, prevY = prevPoint, HL = pointY[1] - pointY[2], HCp = typeof prevY === 'undefined' ? 0 : Math.abs(pointY[1] - prevY[3]), LCp = typeof prevY === 'undefined' ? 0 : Math.abs(pointY[2] - prevY[3]), TR = Math.max(HL, HCp, LCp);\n            return TR;\n        }\n        /**\n         * @private\n         */\n        function populateAverage(points, xVal, yVal, i, period, prevATR) {\n            var x = xVal[i - 1],\n                TR = getTR(yVal[i - 1],\n                yVal[i - 2]),\n                y;\n            y = (((prevATR * (period - 1)) + TR) / period);\n            return [x, y];\n        }\n        /* eslint-enable valid-jsdoc */\n        /* *\n         *\n         * Class\n         *\n         * */\n        /**\n         * The ATR series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.atr\n         *\n         * @augments Highcharts.Series\n         */\n        var ATRIndicator = /** @class */ (function (_super) {\n                __extends(ATRIndicator, _super);\n            function ATRIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            ATRIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    xValue = xVal[0],\n                    yValue = yVal[0],\n                    range = 1,\n                    prevATR = 0,\n                    TR = 0,\n                    ATR = [],\n                    xData = [],\n                    yData = [],\n                    point,\n                    i,\n                    points;\n                points = [[xValue, yValue]];\n                if ((xVal.length <= period) ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                for (i = 1; i <= yValLen; i++) {\n                    accumulateAverage(points, xVal, yVal, i);\n                    if (period < range) {\n                        point = populateAverage(points, xVal, yVal, i, period, prevATR);\n                        prevATR = point[1];\n                        ATR.push(point);\n                        xData.push(point[0]);\n                        yData.push(point[1]);\n                    }\n                    else if (period === range) {\n                        prevATR = TR / (i - 1);\n                        ATR.push([xVal[i - 1], prevATR]);\n                        xData.push(xVal[i - 1]);\n                        yData.push(prevATR);\n                        range++;\n                    }\n                    else {\n                        TR += getTR(yVal[i - 1], yVal[i - 2]);\n                        range++;\n                    }\n                }\n                return {\n                    values: ATR,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Average true range indicator (ATR). This series requires `linkedTo`\n             * option to be set.\n             *\n             * @sample stock/indicators/atr\n             *         ATR indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/atr\n             * @optionparent plotOptions.atr\n             */\n            ATRIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0 // unused index, do not inherit (#15362)\n                }\n            });\n            return ATRIndicator;\n        }(SMAIndicator));\n        SeriesRegistry.registerSeriesType('atr', ATRIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `ATR` series. If the [type](#series.atr.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.atr\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/atr\n         * @apioption series.atr\n         */\n        ''; // to include the above in the js output\n\n        return ATRIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/BB/BBIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /**\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* eslint-disable valid-jsdoc */\n        // Utils:\n        /**\n         * @private\n         */\n        function getStandardDeviation(arr, index, isOHLC, mean) {\n            var variance = 0,\n                arrLen = arr.length,\n                std = 0,\n                i = 0,\n                value;\n            for (; i < arrLen; i++) {\n                value = (isOHLC ? arr[i][index] : arr[i]) - mean;\n                variance += value * value;\n            }\n            variance = variance / (arrLen - 1);\n            std = Math.sqrt(variance);\n            return std;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Bollinger Bands series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.bb\n         *\n         * @augments Highcharts.Series\n         */\n        var BBIndicator = /** @class */ (function (_super) {\n                __extends(BBIndicator, _super);\n            function BBIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            BBIndicator.prototype.init = function () {\n                SeriesRegistry.seriesTypes.sma.prototype.init.apply(this, arguments);\n                // Set default color for lines:\n                this.options = merge({\n                    topLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    },\n                    bottomLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    }\n                }, this.options);\n            };\n            BBIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    standardDeviation = params.standardDeviation,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0, \n                    // 0- date, 1-middle line, 2-top line, 3-bottom line\n                    BB = [], \n                    // middle line, top line and bottom line\n                    ML,\n                    TL,\n                    BL,\n                    date,\n                    xData = [],\n                    yData = [],\n                    slicedX,\n                    slicedY,\n                    stdDev,\n                    isOHLC,\n                    point,\n                    i;\n                if (xVal.length < period) {\n                    return;\n                }\n                isOHLC = isArray(yVal[0]);\n                for (i = period; i <= yValLen; i++) {\n                    slicedX = xVal.slice(i - period, i);\n                    slicedY = yVal.slice(i - period, i);\n                    point = SeriesRegistry.seriesTypes.sma.prototype.getValues.call(this, {\n                        xData: slicedX,\n                        yData: slicedY\n                    }, params);\n                    date = point.xData[0];\n                    ML = point.yData[0];\n                    stdDev = getStandardDeviation(slicedY, params.index, isOHLC, ML);\n                    TL = ML + standardDeviation * stdDev;\n                    BL = ML - standardDeviation * stdDev;\n                    BB.push([date, TL, ML, BL]);\n                    xData.push(date);\n                    yData.push([TL, ML, BL]);\n                }\n                return {\n                    values: BB,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Bollinger bands (BB). This series requires the `linkedTo` option to be\n             * set and should be loaded after the `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/bollinger-bands\n             *         Bollinger bands\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/bollinger-bands\n             * @optionparent plotOptions.bb\n             */\n            BBIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Option for fill color between lines in Bollinger Bands Indicator.\n                 *\n                 * @sample {highstock} stock/indicators/indicator-area-fill\n                 *      Background fill between lines.\n                 *\n                 * @type      {Highcharts.Color}\n                 * @since 9.3.2\n                 * @apioption plotOptions.bb.fillColor\n                 *\n                 */\n                params: {\n                    period: 20,\n                    /**\n                     * Standard deviation for top and bottom bands.\n                     */\n                    standardDeviation: 2,\n                    index: 3\n                },\n                /**\n                 * Bottom line options.\n                 */\n                bottomLine: {\n                    /**\n                     * Styles for a bottom line.\n                     */\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line. If not set, it's inherited from\n                         * [plotOptions.bb.color](#plotOptions.bb.color).\n                         *\n                         * @type  {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * Top line options.\n                 *\n                 * @extends plotOptions.bb.bottomLine\n                 */\n                topLine: {\n                    styles: {\n                        lineWidth: 1,\n                        /**\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b><br/>Top: {point.top}<br/>Middle: {point.middle}<br/>Bottom: {point.bottom}<br/>'\n                },\n                marker: {\n                    enabled: false\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return BBIndicator;\n        }(SMAIndicator));\n        extend(BBIndicator.prototype, {\n            areaLinesNames: ['top', 'bottom'],\n            pointArrayMap: ['top', 'middle', 'bottom'],\n            pointValKey: 'middle',\n            nameComponents: ['period', 'standardDeviation'],\n            linesApiNames: ['topLine', 'bottomLine']\n        });\n        MultipleLinesComposition.compose(BBIndicator);\n        SeriesRegistry.registerSeriesType('bb', BBIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A bollinger bands indicator. If the [type](#series.bb.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.bb\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/bollinger-bands\n         * @apioption series.bb\n         */\n        ''; // to include the above in the js output\n\n        return BBIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/CCI/CCIIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var isArray = U.isArray,\n            merge = U.merge;\n        /* eslint-disable valid-jsdoc */\n        // Utils:\n        /**\n         * @private\n         */\n        function sumArray(array) {\n            return array.reduce(function (prev, cur) {\n                return prev + cur;\n            }, 0);\n        }\n        /**\n         * @private\n         */\n        function meanDeviation(arr, sma) {\n            var len = arr.length,\n                sum = 0,\n                i;\n            for (i = 0; i < len; i++) {\n                sum += Math.abs(sma - (arr[i]));\n            }\n            return sum;\n        }\n        /* eslint-enable valid-jsdoc */\n        /* *\n         *\n         * Class\n         *\n         * */\n        /**\n         * The CCI series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.cci\n         *\n         * @augments Highcharts.Series\n         */\n        var CCIIndicator = /** @class */ (function (_super) {\n                __extends(CCIIndicator, _super);\n            function CCIIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            CCIIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    TP = [],\n                    periodTP = [],\n                    range = 1,\n                    CCI = [],\n                    xData = [],\n                    yData = [],\n                    CCIPoint,\n                    p,\n                    len,\n                    smaTP,\n                    TPtemp,\n                    meanDev,\n                    i;\n                // CCI requires close value\n                if (xVal.length <= period ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                // accumulate first N-points\n                while (range < period) {\n                    p = yVal[range - 1];\n                    TP.push((p[1] + p[2] + p[3]) / 3);\n                    range++;\n                }\n                for (i = period; i <= yValLen; i++) {\n                    p = yVal[i - 1];\n                    TPtemp = (p[1] + p[2] + p[3]) / 3;\n                    len = TP.push(TPtemp);\n                    periodTP = TP.slice(len - period);\n                    smaTP = sumArray(periodTP) / period;\n                    meanDev = meanDeviation(periodTP, smaTP) / period;\n                    CCIPoint = ((TPtemp - smaTP) / (0.015 * meanDev));\n                    CCI.push([xVal[i - 1], CCIPoint]);\n                    xData.push(xVal[i - 1]);\n                    yData.push(CCIPoint);\n                }\n                return {\n                    values: CCI,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Commodity Channel Index (CCI). This series requires `linkedTo` option to\n             * be set.\n             *\n             * @sample stock/indicators/cci\n             *         CCI indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/cci\n             * @optionparent plotOptions.cci\n             */\n            CCIIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0 // unused index, do not inherit (#15362)\n                }\n            });\n            return CCIIndicator;\n        }(SMAIndicator));\n        SeriesRegistry.registerSeriesType('cci', CCIIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `CCI` series. If the [type](#series.cci.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.cci\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/cci\n         * @apioption series.cci\n         */\n        ''; // to include the above in the js output\n\n        return CCIIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/CMF/CMFIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Highsoft AS\n         *\n         *  Author: Sebastian Domas\n         *\n         *  Chaikin Money Flow indicator for Highcharts Stock\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var merge = U.merge;\n        /**\n         * The CMF series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.cmf\n         *\n         * @augments Highcharts.Series\n         */\n        var CMFIndicator = /** @class */ (function (_super) {\n                __extends(CMFIndicator, _super);\n            function CMFIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                _this.volumeSeries = void 0;\n                _this.linkedParent = void 0;\n                _this.yData = void 0;\n                _this.nameBase = 'Chaikin Money Flow';\n                return _this;\n            }\n            /**\n             * Checks if the series and volumeSeries are accessible, number of\n             * points.x is longer than period, is series has OHLC data\n             * @private\n             * @param {Highcharts.CMFIndicator} this indicator to use.\n             * @return {boolean} True if series is valid and can be computed,\n             * otherwise false.\n             */\n            CMFIndicator.prototype.isValid = function () {\n                var chart = this.chart,\n                    options = this.options,\n                    series = this.linkedParent,\n                    volumeSeries = (this.volumeSeries ||\n                        (this.volumeSeries =\n                            chart.get(options.params.volumeSeriesID))),\n                    isSeriesOHLC = (series &&\n                        series.yData &&\n                        series.yData[0].length === 4);\n                /**\n                 * @private\n                 * @param {Highcharts.Series} serie to check length validity on.\n                 * @return {boolean|undefined} true if length is valid.\n                 */\n                function isLengthValid(serie) {\n                    return serie.xData &&\n                        serie.xData.length >= options.params.period;\n                }\n                return !!(series &&\n                    volumeSeries &&\n                    isLengthValid(series) &&\n                    isLengthValid(volumeSeries) && isSeriesOHLC);\n            };\n            /**\n             * Returns indicator's data.\n             * @private\n             * @param {Highcharts.CMFIndicator} this indicator to use.\n             * @param {Highcharts.Series} series to calculate values from\n             * @param {Highcharts.CMFIndicatorParamsOptions} params to pass\n             * @return {boolean|Highcharts.IndicatorNullableValuesObject} Returns false if the\n             * indicator is not valid, otherwise returns Values object.\n             */\n            CMFIndicator.prototype.getValues = function (series, params) {\n                if (!this.isValid()) {\n                    return;\n                }\n                return this.getMoneyFlow(series.xData, series.yData, this.volumeSeries.yData, params.period);\n            };\n            /**\n             * @private\n             *\n             * @param {Array<number>} xData\n             * x timestamp values\n             *\n             * @param {Array<number>} seriesYData\n             * yData of basic series\n             *\n             * @param {Array<number>} volumeSeriesYData\n             * yData of volume series\n             *\n             * @param {number} period\n             * indicator's param\n             *\n             * @return {Highcharts.IndicatorNullableValuesObject}\n             * object containing computed money flow data\n             */\n            CMFIndicator.prototype.getMoneyFlow = function (xData, seriesYData, volumeSeriesYData, period) {\n                var len = seriesYData.length,\n                    moneyFlowVolume = [],\n                    sumVolume = 0,\n                    sumMoneyFlowVolume = 0,\n                    moneyFlowXData = [],\n                    moneyFlowYData = [],\n                    values = [],\n                    i,\n                    point,\n                    nullIndex = -1;\n                /**\n                 * Calculates money flow volume, changes i, nullIndex vars from\n                 * upper scope!\n                 *\n                 * @private\n                 *\n                 * @param {Array<number>} ohlc\n                 * OHLC point\n                 *\n                 * @param {number} volume\n                 * Volume point's y value\n                 *\n                 * @return {number|null}\n                 * Volume * moneyFlowMultiplier\n                 */\n                function getMoneyFlowVolume(ohlc, volume) {\n                    var high = ohlc[1],\n                        low = ohlc[2],\n                        close = ohlc[3],\n                        isValid = volume !== null &&\n                            high !== null &&\n                            low !== null &&\n                            close !== null &&\n                            high !== low;\n                    /**\n                     * @private\n                     * @param {number} h\n                     * High value\n                     * @param {number} l\n                     * Low value\n                     * @param {number} c\n                     * Close value\n                     * @return {number}\n                     * Calculated multiplier for the point\n                     */\n                    function getMoneyFlowMultiplier(h, l, c) {\n                        return ((c - l) - (h - c)) / (h - l);\n                    }\n                    return isValid ?\n                        getMoneyFlowMultiplier(high, low, close) * volume :\n                        ((nullIndex = i), null);\n                }\n                if (period > 0 && period <= len) {\n                    for (i = 0; i < period; i++) {\n                        moneyFlowVolume[i] = getMoneyFlowVolume(seriesYData[i], volumeSeriesYData[i]);\n                        sumVolume += volumeSeriesYData[i];\n                        sumMoneyFlowVolume += moneyFlowVolume[i];\n                    }\n                    moneyFlowXData.push(xData[i - 1]);\n                    moneyFlowYData.push(i - nullIndex >= period && sumVolume !== 0 ?\n                        sumMoneyFlowVolume / sumVolume :\n                        null);\n                    values.push([moneyFlowXData[0], moneyFlowYData[0]]);\n                    for (; i < len; i++) {\n                        moneyFlowVolume[i] = getMoneyFlowVolume(seriesYData[i], volumeSeriesYData[i]);\n                        sumVolume -= volumeSeriesYData[i - period];\n                        sumVolume += volumeSeriesYData[i];\n                        sumMoneyFlowVolume -= moneyFlowVolume[i - period];\n                        sumMoneyFlowVolume += moneyFlowVolume[i];\n                        point = [\n                            xData[i],\n                            i - nullIndex >= period ?\n                                sumMoneyFlowVolume / sumVolume :\n                                null\n                        ];\n                        moneyFlowXData.push(point[0]);\n                        moneyFlowYData.push(point[1]);\n                        values.push([point[0], point[1]]);\n                    }\n                }\n                return {\n                    values: values,\n                    xData: moneyFlowXData,\n                    yData: moneyFlowYData\n                };\n            };\n            /**\n             * Chaikin Money Flow indicator (cmf).\n             *\n             * @sample stock/indicators/cmf/\n             *         Chaikin Money Flow indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @excluding    animationLimit\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/cmf\n             * @optionparent plotOptions.cmf\n             */\n            CMFIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    /**\n                     * The id of another series to use its data as volume data for the\n                     * indiator calculation.\n                     */\n                    volumeSeriesID: 'volume'\n                }\n            });\n            return CMFIndicator;\n        }(SMAIndicator));\n        SeriesRegistry.registerSeriesType('cmf', CMFIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `CMF` series. If the [type](#series.cmf.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.cmf\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/cmf\n         * @apioption series.cmf\n         */\n        ''; // adds doclet above to the transpiled file\n\n        return CMFIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/DMI/DMIIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *  (c) 2010-2021 Rafal Sebestjanski\n         *\n         *  Directional Movement Index (DMI) indicator for Highcharts Stock\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var correctFloat = U.correctFloat,\n            extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Directional Movement Index (DMI) series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.dmi\n         *\n         * @augments Highcharts.Series\n         */\n        var DMIIndicator = /** @class */ (function (_super) {\n                __extends(DMIIndicator, _super);\n            function DMIIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.options = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            DMIIndicator.prototype.calculateDM = function (yVal, i, isPositiveDM) {\n                var currentHigh = yVal[i][1],\n                    currentLow = yVal[i][2],\n                    previousHigh = yVal[i - 1][1],\n                    previousLow = yVal[i - 1][2];\n                var DM;\n                if (currentHigh - previousHigh > previousLow - currentLow) {\n                    // for +DM\n                    DM = isPositiveDM ? Math.max(currentHigh - previousHigh, 0) : 0;\n                }\n                else {\n                    // for -DM\n                    DM = !isPositiveDM ? Math.max(previousLow - currentLow, 0) : 0;\n                }\n                return correctFloat(DM);\n            };\n            DMIIndicator.prototype.calculateDI = function (smoothedDM, tr) {\n                return smoothedDM / tr * 100;\n            };\n            DMIIndicator.prototype.calculateDX = function (plusDI, minusDI) {\n                return correctFloat(Math.abs(plusDI - minusDI) / Math.abs(plusDI + minusDI) * 100);\n            };\n            DMIIndicator.prototype.smoothValues = function (accumulatedValues, currentValue, period) {\n                return correctFloat(accumulatedValues - accumulatedValues / period + currentValue);\n            };\n            DMIIndicator.prototype.getTR = function (currentPoint, prevPoint) {\n                return correctFloat(Math.max(\n                // currentHigh - currentLow\n                currentPoint[1] - currentPoint[2], \n                // currentHigh - previousClose\n                !prevPoint ? 0 : Math.abs(currentPoint[1] - prevPoint[3]), \n                // currentLow - previousClose\n                !prevPoint ? 0 : Math.abs(currentPoint[2] - prevPoint[3])));\n            };\n            DMIIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    DMI = [],\n                    xData = [],\n                    yData = [];\n                if (\n                // Check period, if bigger than points length, skip\n                (xVal.length <= period) ||\n                    // Only ohlc data is valid\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                var prevSmoothedPlusDM = 0,\n                    prevSmoothedMinusDM = 0,\n                    prevSmoothedTR = 0,\n                    i;\n                for (i = 1; i < yValLen; i++) {\n                    var smoothedPlusDM = void 0,\n                        smoothedMinusDM = void 0,\n                        smoothedTR = void 0,\n                        plusDM = void 0, // +DM\n                        minusDM = void 0, // -DM\n                        TR = void 0,\n                        plusDI = void 0, // +DI\n                        minusDI = void 0, // -DI\n                        DX = void 0;\n                    if (i <= period) {\n                        plusDM = this.calculateDM(yVal, i, true);\n                        minusDM = this.calculateDM(yVal, i);\n                        TR = this.getTR(yVal[i], yVal[i - 1]);\n                        // Accumulate first period values to smooth them later\n                        prevSmoothedPlusDM += plusDM;\n                        prevSmoothedMinusDM += minusDM;\n                        prevSmoothedTR += TR;\n                        // Get all values for the first point\n                        if (i === period) {\n                            plusDI = this.calculateDI(prevSmoothedPlusDM, prevSmoothedTR);\n                            minusDI = this.calculateDI(prevSmoothedMinusDM, prevSmoothedTR);\n                            DX = this.calculateDX(prevSmoothedPlusDM, prevSmoothedMinusDM);\n                            DMI.push([xVal[i], DX, plusDI, minusDI]);\n                            xData.push(xVal[i]);\n                            yData.push([DX, plusDI, minusDI]);\n                        }\n                    }\n                    else {\n                        // Calculate current values\n                        plusDM = this.calculateDM(yVal, i, true);\n                        minusDM = this.calculateDM(yVal, i);\n                        TR = this.getTR(yVal[i], yVal[i - 1]);\n                        // Smooth +DM, -DM and TR\n                        smoothedPlusDM = this.smoothValues(prevSmoothedPlusDM, plusDM, period);\n                        smoothedMinusDM = this.smoothValues(prevSmoothedMinusDM, minusDM, period);\n                        smoothedTR = this.smoothValues(prevSmoothedTR, TR, period);\n                        // Save current smoothed values for the next step\n                        prevSmoothedPlusDM = smoothedPlusDM;\n                        prevSmoothedMinusDM = smoothedMinusDM;\n                        prevSmoothedTR = smoothedTR;\n                        // Get all next points (except the first one calculated above)\n                        plusDI = this.calculateDI(prevSmoothedPlusDM, prevSmoothedTR);\n                        minusDI = this.calculateDI(prevSmoothedMinusDM, prevSmoothedTR);\n                        DX = this.calculateDX(prevSmoothedPlusDM, prevSmoothedMinusDM);\n                        DMI.push([xVal[i], DX, plusDI, minusDI]);\n                        xData.push(xVal[i]);\n                        yData.push([DX, plusDI, minusDI]);\n                    }\n                }\n                return {\n                    values: DMI,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Directional Movement Index (DMI).\n             * This series requires the `linkedTo` option to be set and should\n             * be loaded after the `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/dmi\n             *         DMI indicator\n             *\n             * @extends      plotOptions.sma\n             * @since 9.1.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n             *               pointInterval, pointIntervalUnit, pointPlacement,\n             *               pointRange, pointStart, showInNavigator, stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/dmi\n             * @optionparent plotOptions.dmi\n             */\n            DMIIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0 // unused index, do not inherit (#15362)\n                },\n                marker: {\n                    enabled: false\n                },\n                tooltip: {\n                    pointFormat: '<span style=\"color: {point.color}\">' +\n                        '\\u25CF</span><b> {series.name}</b><br/>' +\n                        '<span style=\"color: {point.color}\">DX</span>: {point.y}<br/>' +\n                        '<span style=\"color: ' +\n                        '{point.series.options.plusDILine.styles.lineColor}\">' +\n                        '+DI</span>: {point.plusDI}<br/>' +\n                        '<span style=\"color: ' +\n                        '{point.series.options.minusDILine.styles.lineColor}\">' +\n                        '-DI</span>: {point.minusDI}<br/>'\n                },\n                /**\n                 * +DI line options.\n                 */\n                plusDILine: {\n                    /**\n                     * Styles for the +DI line.\n                     */\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: \"#06b535\" /* positiveColor */ // green-ish\n                    }\n                },\n                /**\n                 * -DI line options.\n                 */\n                minusDILine: {\n                    /**\n                     * Styles for the -DI line.\n                     */\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: \"#f21313\" /* negativeColor */ // red-ish\n                    }\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return DMIIndicator;\n        }(SMAIndicator));\n        extend(DMIIndicator.prototype, {\n            areaLinesNames: [],\n            nameBase: 'DMI',\n            linesApiNames: ['plusDILine', 'minusDILine'],\n            pointArrayMap: ['y', 'plusDI', 'minusDI'],\n            parallelArrays: ['x', 'y', 'plusDI', 'minusDI'],\n            pointValKey: 'y'\n        });\n        MultipleLinesComposition.compose(DMIIndicator);\n        SeriesRegistry.registerSeriesType('dmi', DMIIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * The Directional Movement Index (DMI) indicator series.\n         * If the [type](#series.dmi.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.dmi\n         * @since 9.1.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis,  dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/dmi\n         * @apioption series.dmi\n         */\n        ''; // to include the above in the js output\n\n        return DMIIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/DPO/DPOIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var extend = U.extend,\n            merge = U.merge,\n            correctFloat = U.correctFloat,\n            pick = U.pick;\n        /* eslint-disable valid-jsdoc */\n        // Utils:\n        /**\n         * @private\n         */\n        function accumulatePoints(sum, yVal, i, index, subtract) {\n            var price = pick(yVal[i][index],\n                yVal[i]);\n            if (subtract) {\n                return correctFloat(sum - price);\n            }\n            return correctFloat(sum + price);\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The DPO series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.dpo\n         *\n         * @augments Highcharts.Series\n         */\n        var DPOIndicator = /** @class */ (function (_super) {\n                __extends(DPOIndicator, _super);\n            function DPOIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                *\n                *   Properties\n                *\n                * */\n                _this.options = void 0;\n                _this.data = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @lends Highcharts.Series#\n             */\n            DPOIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    index = params.index,\n                    offset = Math.floor(period / 2 + 1),\n                    range = period + offset,\n                    xVal = series.xData || [],\n                    yVal = series.yData || [],\n                    yValLen = yVal.length, \n                    // 0- date, 1- Detrended Price Oscillator\n                    DPO = [],\n                    xData = [],\n                    yData = [],\n                    sum = 0,\n                    oscillator,\n                    periodIndex,\n                    rangeIndex,\n                    price,\n                    i,\n                    j;\n                if (xVal.length <= range) {\n                    return;\n                }\n                // Accumulate first N-points for SMA\n                for (i = 0; i < period - 1; i++) {\n                    sum = accumulatePoints(sum, yVal, i, index);\n                }\n                // Detrended Price Oscillator formula:\n                // DPO = Price - Simple moving average [from (n / 2 + 1) days ago]\n                for (j = 0; j <= yValLen - range; j++) {\n                    periodIndex = j + period - 1;\n                    rangeIndex = j + range - 1;\n                    // adding the last period point\n                    sum = accumulatePoints(sum, yVal, periodIndex, index);\n                    price = pick(yVal[rangeIndex][index], yVal[rangeIndex]);\n                    oscillator = price - sum / period;\n                    // substracting the first period point\n                    sum = accumulatePoints(sum, yVal, j, index, true);\n                    DPO.push([xVal[rangeIndex], oscillator]);\n                    xData.push(xVal[rangeIndex]);\n                    yData.push(oscillator);\n                }\n                return {\n                    values: DPO,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Detrended Price Oscillator. This series requires the `linkedTo` option to\n             * be set and should be loaded after the `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/dpo\n             *         Detrended Price Oscillator\n             *\n             * @extends      plotOptions.sma\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/dpo\n             * @optionparent plotOptions.dpo\n             */\n            DPOIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Parameters used in calculation of Detrended Price Oscillator series\n                 * points.\n                 */\n                params: {\n                    index: 0,\n                    /**\n                     * Period for Detrended Price Oscillator\n                     */\n                    period: 21\n                }\n            });\n            return DPOIndicator;\n        }(SMAIndicator));\n        extend(DPOIndicator.prototype, {\n            nameBase: 'DPO'\n        });\n        SeriesRegistry.registerSeriesType('dpo', DPOIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A Detrended Price Oscillator. If the [type](#series.dpo.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.dpo\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/dpo\n         * @apioption series.dpo\n         */\n        ''; // to include the above in the js output'\n\n        return DPOIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Chaikin/ChaikinIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var _a = SeriesRegistry.seriesTypes,\n            AD = _a.ad,\n            EMAIndicator = _a.ema;\n        var correctFloat = U.correctFloat,\n            extend = U.extend,\n            merge = U.merge,\n            error = U.error;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Chaikin series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.chaikin\n         *\n         * @augments Highcharts.Series\n         */\n        var ChaikinIndicator = /** @class */ (function (_super) {\n                __extends(ChaikinIndicator, _super);\n            function ChaikinIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            ChaikinIndicator.prototype.getValues = function (series, params) {\n                var periods = params.periods,\n                    period = params.period, \n                    // Accumulation Distribution Line data\n                    ADL, \n                    // 0- date, 1- Chaikin Oscillator\n                    CHA = [],\n                    xData = [],\n                    yData = [],\n                    periodsOffset, \n                    // Shorter Period EMA\n                    SPE, \n                    // Longer Period EMA\n                    LPE,\n                    oscillator,\n                    i;\n                // Check if periods are correct\n                if (periods.length !== 2 || periods[1] <= periods[0]) {\n                    error('Error: \"Chaikin requires two periods. Notice, first ' +\n                        'period should be lower than the second one.\"');\n                    return;\n                }\n                ADL = AD.prototype.getValues.call(this, series, {\n                    volumeSeriesID: params.volumeSeriesID,\n                    period: period\n                });\n                // Check if adl is calculated properly, if not skip\n                if (!ADL) {\n                    return;\n                }\n                SPE = EMAIndicator.prototype.getValues.call(this, ADL, {\n                    period: periods[0]\n                });\n                LPE = EMAIndicator.prototype.getValues.call(this, ADL, {\n                    period: periods[1]\n                });\n                // Check if ema is calculated properly, if not skip\n                if (!SPE || !LPE) {\n                    return;\n                }\n                periodsOffset = periods[1] - periods[0];\n                for (i = 0; i < LPE.yData.length; i++) {\n                    oscillator = correctFloat(SPE.yData[i + periodsOffset] -\n                        LPE.yData[i]);\n                    CHA.push([LPE.xData[i], oscillator]);\n                    xData.push(LPE.xData[i]);\n                    yData.push(oscillator);\n                }\n                return {\n                    values: CHA,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Chaikin Oscillator. This series requires the `linkedTo` option to\n             * be set and should be loaded after the `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/chaikin\n             *         Chaikin Oscillator\n             *\n             * @extends      plotOptions.ema\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n             *               pointInterval, pointIntervalUnit, pointPlacement,\n             *               pointRange, pointStart, showInNavigator, stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/chaikin\n             * @optionparent plotOptions.chaikin\n             */\n            ChaikinIndicator.defaultOptions = merge(EMAIndicator.defaultOptions, {\n                /**\n                 * Paramters used in calculation of Chaikin Oscillator\n                 * series points.\n                 *\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    /**\n                     * The id of volume series which is mandatory.\n                     * For example using OHLC data, volumeSeriesID='volume' means\n                     * the indicator will be calculated using OHLC and volume values.\n                     */\n                    volumeSeriesID: 'volume',\n                    /**\n                     * Parameter used indirectly for calculating the `AD` indicator.\n                     * Decides about the number of data points that are taken\n                     * into account for the indicator calculations.\n                     */\n                    period: 9,\n                    /**\n                     * Periods for Chaikin Oscillator calculations.\n                     *\n                     * @type    {Array<number>}\n                     * @default [3, 10]\n                     */\n                    periods: [3, 10]\n                }\n            });\n            return ChaikinIndicator;\n        }(EMAIndicator));\n        extend(ChaikinIndicator.prototype, {\n            nameBase: 'Chaikin Osc',\n            nameComponents: ['periods']\n        });\n        SeriesRegistry.registerSeriesType('chaikin', ChaikinIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `Chaikin Oscillator` series. If the [type](#series.chaikin.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.chaikin\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, stacking, showInNavigator\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/chaikin\n         * @apioption series.chaikin\n         */\n        ''; // to include the above in the js output\n\n        return ChaikinIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/CMO/CMOIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var isNumber = U.isNumber,\n            merge = U.merge;\n        /* eslint-enable require-jsdoc */\n        /**\n         * The CMO series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.cmo\n         *\n         * @augments Highcharts.Series\n         */\n        var CMOIndicator = /** @class */ (function (_super) {\n                __extends(CMOIndicator, _super);\n            function CMOIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            CMOIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    CMO = [],\n                    xData = [],\n                    yData = [];\n                var i,\n                    index = params.index,\n                    values;\n                if (xVal.length < period) {\n                    return;\n                }\n                if (isNumber(yVal[0])) {\n                    values = yVal;\n                }\n                else {\n                    // In case of the situation, where the series type has data length\n                    // shorter then 4 (HLC, range), this ensures that we are not trying\n                    // to reach the index out of bounds\n                    index = Math.min(index, yVal[0].length - 1);\n                    values = yVal.map(function (value) { return value[index]; });\n                }\n                var firstAddedSum = 0,\n                    sumOfHigherValues = 0,\n                    sumOfLowerValues = 0,\n                    y;\n                // Calculate first point, check if the first value\n                // was added to sum of higher/lower values, and what was the value.\n                for (var j = period; j > 0; j--) {\n                    if (values[j] > values[j - 1]) {\n                        sumOfHigherValues += values[j] - values[j - 1];\n                    }\n                    else if (values[j] < values[j - 1]) {\n                        sumOfLowerValues += values[j - 1] - values[j];\n                    }\n                }\n                // You might devide by 0 if all values are equal,\n                // so return 0 in this case.\n                y =\n                    sumOfHigherValues + sumOfLowerValues > 0 ?\n                        (100 * (sumOfHigherValues - sumOfLowerValues)) /\n                            (sumOfHigherValues + sumOfLowerValues) :\n                        0;\n                xData.push(xVal[period]);\n                yData.push(y);\n                CMO.push([xVal[period], y]);\n                for (i = period + 1; i < yValLen; i++) {\n                    firstAddedSum = Math.abs(values[i - period - 1] - values[i - period]);\n                    if (values[i] > values[i - 1]) {\n                        sumOfHigherValues += values[i] - values[i - 1];\n                    }\n                    else if (values[i] < values[i - 1]) {\n                        sumOfLowerValues += values[i - 1] - values[i];\n                    }\n                    // Check, to which sum was the first value added to,\n                    // and substract this value from given sum.\n                    if (values[i - period] > values[i - period - 1]) {\n                        sumOfHigherValues -= firstAddedSum;\n                    }\n                    else {\n                        sumOfLowerValues -= firstAddedSum;\n                    }\n                    // Same as above.\n                    y =\n                        sumOfHigherValues + sumOfLowerValues > 0 ?\n                            (100 * (sumOfHigherValues - sumOfLowerValues)) /\n                                (sumOfHigherValues + sumOfLowerValues) :\n                            0;\n                    xData.push(xVal[i]);\n                    yData.push(y);\n                    CMO.push([xVal[i], y]);\n                }\n                return {\n                    values: CMO,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Chande Momentum Oscilator (CMO) technical indicator. This series\n             * requires the `linkedTo` option to be set and should be loaded after\n             * the `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/cmo\n             *         CMO indicator\n             *\n             * @extends      plotOptions.sma\n             * @since 9.1.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/cmo\n             * @optionparent plotOptions.cmo\n             */\n            CMOIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    period: 20,\n                    index: 3\n                }\n            });\n            return CMOIndicator;\n        }(SMAIndicator));\n        SeriesRegistry.registerSeriesType('cmo', CMOIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `CMO` series. If the [type](#series.cmo.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.cmo\n         * @since 9.1.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/cmo\n         * @apioption series.cmo\n         */\n        (''); // to include the above in the js output\n\n        return CMOIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/DEMA/DEMAIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var EMAIndicator = SeriesRegistry.seriesTypes.ema;\n        var correctFloat = U.correctFloat,\n            isArray = U.isArray,\n            merge = U.merge;\n        /**\n         * The DEMA series Type\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.dema\n         *\n         * @augments Highcharts.Series\n         */\n        var DEMAIndicator = /** @class */ (function (_super) {\n                __extends(DEMAIndicator, _super);\n            function DEMAIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.EMApercent = void 0;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            DEMAIndicator.prototype.getEMA = function (yVal, prevEMA, SMA, index, i, xVal) {\n                return EMAIndicator.prototype.calculateEma(xVal || [], yVal, typeof i === 'undefined' ? 1 : i, this.EMApercent, prevEMA, typeof index === 'undefined' ? -1 : index, SMA);\n            };\n            DEMAIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    doubledPeriod = 2 * period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    index = -1,\n                    accumulatePeriodPoints = 0,\n                    SMA = 0,\n                    DEMA = [],\n                    xDataDema = [],\n                    yDataDema = [],\n                    EMA = 0, \n                    // EMA(EMA)\n                    EMAlevel2, \n                    // EMA of previous point\n                    prevEMA,\n                    prevEMAlevel2, \n                    // EMA values array\n                    EMAvalues = [],\n                    i,\n                    DEMAPoint;\n                this.EMApercent = (2 / (period + 1));\n                // Check period, if bigger than EMA points length, skip\n                if (yValLen < 2 * period - 1) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    index = params.index ? params.index : 0;\n                }\n                // Accumulate first N-points\n                accumulatePeriodPoints =\n                    EMAIndicator.prototype.accumulatePeriodPoints(period, index, yVal);\n                // first point\n                SMA = accumulatePeriodPoints / period;\n                accumulatePeriodPoints = 0;\n                // Calculate value one-by-one for each period in visible data\n                for (i = period; i < yValLen + 2; i++) {\n                    if (i < yValLen + 1) {\n                        EMA = this.getEMA(yVal, prevEMA, SMA, index, i)[1];\n                        EMAvalues.push(EMA);\n                    }\n                    prevEMA = EMA;\n                    // Summing first period points for EMA(EMA)\n                    if (i < doubledPeriod) {\n                        accumulatePeriodPoints += EMA;\n                    }\n                    else {\n                        // Calculate DEMA\n                        // First DEMA point\n                        if (i === doubledPeriod) {\n                            SMA = accumulatePeriodPoints / period;\n                        }\n                        EMA = EMAvalues[i - period - 1];\n                        EMAlevel2 = this.getEMA([EMA], prevEMAlevel2, SMA)[1];\n                        DEMAPoint = [\n                            xVal[i - 2],\n                            correctFloat(2 * EMA - EMAlevel2)\n                        ];\n                        DEMA.push(DEMAPoint);\n                        xDataDema.push(DEMAPoint[0]);\n                        yDataDema.push(DEMAPoint[1]);\n                        prevEMAlevel2 = EMAlevel2;\n                    }\n                }\n                return {\n                    values: DEMA,\n                    xData: xDataDema,\n                    yData: yDataDema\n                };\n            };\n            /**\n             * Double exponential moving average (DEMA) indicator. This series requires\n             * `linkedTo` option to be set and should be loaded after the\n             * `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/dema\n             *         DEMA indicator\n             *\n             * @extends      plotOptions.ema\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/dema\n             * @optionparent plotOptions.dema\n             */\n            DEMAIndicator.defaultOptions = merge(EMAIndicator.defaultOptions);\n            return DEMAIndicator;\n        }(EMAIndicator));\n        SeriesRegistry.registerSeriesType('dema', DEMAIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `DEMA` series. If the [type](#series.dema.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.dema\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/dema\n         * @apioption series.dema\n         */\n        ''; // adds doclet above to the transpiled file\n\n        return DEMAIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/TEMA/TEMAIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var EMAIndicator = SeriesRegistry.seriesTypes.ema;\n        var correctFloat = U.correctFloat,\n            isArray = U.isArray,\n            merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The TEMA series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.tema\n         *\n         * @augments Highcharts.Series\n         */\n        var TEMAIndicator = /** @class */ (function (_super) {\n                __extends(TEMAIndicator, _super);\n            function TEMAIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.EMApercent = void 0;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            TEMAIndicator.prototype.getEMA = function (yVal, prevEMA, SMA, index, i, xVal) {\n                return EMAIndicator.prototype.calculateEma(xVal || [], yVal, typeof i === 'undefined' ? 1 : i, this.EMApercent, prevEMA, typeof index === 'undefined' ? -1 : index, SMA);\n            };\n            TEMAIndicator.prototype.getTemaPoint = function (xVal, tripledPeriod, EMAlevels, i) {\n                var TEMAPoint = [\n                        xVal[i - 3],\n                        correctFloat(3 * EMAlevels.level1 -\n                            3 * EMAlevels.level2 + EMAlevels.level3)\n                    ];\n                return TEMAPoint;\n            };\n            TEMAIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    doubledPeriod = 2 * period,\n                    tripledPeriod = 3 * period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    index = -1,\n                    accumulatePeriodPoints = 0,\n                    SMA = 0,\n                    TEMA = [],\n                    xDataTema = [],\n                    yDataTema = [], \n                    // EMA of previous point\n                    prevEMA,\n                    prevEMAlevel2, \n                    // EMA values array\n                    EMAvalues = [],\n                    EMAlevel2values = [],\n                    i,\n                    TEMAPoint, \n                    // This object contains all EMA EMAlevels calculated like below\n                    // EMA = level1\n                    // EMA(EMA) = level2,\n                    // EMA(EMA(EMA)) = level3,\n                    EMAlevels = {};\n                this.EMApercent = (2 / (period + 1));\n                // Check period, if bigger than EMA points length, skip\n                if (yValLen < 3 * period - 2) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    index = params.index ? params.index : 0;\n                }\n                // Accumulate first N-points\n                accumulatePeriodPoints =\n                    EMAIndicator.prototype.accumulatePeriodPoints(period, index, yVal);\n                // first point\n                SMA = accumulatePeriodPoints / period;\n                accumulatePeriodPoints = 0;\n                // Calculate value one-by-one for each period in visible data\n                for (i = period; i < yValLen + 3; i++) {\n                    if (i < yValLen + 1) {\n                        EMAlevels.level1 = this.getEMA(yVal, prevEMA, SMA, index, i)[1];\n                        EMAvalues.push(EMAlevels.level1);\n                    }\n                    prevEMA = EMAlevels.level1;\n                    // Summing first period points for ema(ema)\n                    if (i < doubledPeriod) {\n                        accumulatePeriodPoints += EMAlevels.level1;\n                    }\n                    else {\n                        // Calculate dema\n                        // First dema point\n                        if (i === doubledPeriod) {\n                            SMA = accumulatePeriodPoints / period;\n                            accumulatePeriodPoints = 0;\n                        }\n                        EMAlevels.level1 = EMAvalues[i - period - 1];\n                        EMAlevels.level2 = this.getEMA([EMAlevels.level1], prevEMAlevel2, SMA)[1];\n                        EMAlevel2values.push(EMAlevels.level2);\n                        prevEMAlevel2 = EMAlevels.level2;\n                        // Summing first period points for ema(ema(ema))\n                        if (i < tripledPeriod) {\n                            accumulatePeriodPoints += EMAlevels.level2;\n                        }\n                        else {\n                            // Calculate tema\n                            // First tema point\n                            if (i === tripledPeriod) {\n                                SMA = accumulatePeriodPoints / period;\n                            }\n                            if (i === yValLen + 1) {\n                                // Calculate the last ema and emaEMA points\n                                EMAlevels.level1 = EMAvalues[i - period - 1];\n                                EMAlevels.level2 = this.getEMA([EMAlevels.level1], prevEMAlevel2, SMA)[1];\n                                EMAlevel2values.push(EMAlevels.level2);\n                            }\n                            EMAlevels.level1 = EMAvalues[i - period - 2];\n                            EMAlevels.level2 = EMAlevel2values[i - 2 * period - 1];\n                            EMAlevels.level3 = this.getEMA([EMAlevels.level2], EMAlevels.prevLevel3, SMA)[1];\n                            TEMAPoint = this.getTemaPoint(xVal, tripledPeriod, EMAlevels, i);\n                            // Make sure that point exists (for TRIX oscillator)\n                            if (TEMAPoint) {\n                                TEMA.push(TEMAPoint);\n                                xDataTema.push(TEMAPoint[0]);\n                                yDataTema.push(TEMAPoint[1]);\n                            }\n                            EMAlevels.prevLevel3 = EMAlevels.level3;\n                        }\n                    }\n                }\n                return {\n                    values: TEMA,\n                    xData: xDataTema,\n                    yData: yDataTema\n                };\n            };\n            /**\n             * Triple exponential moving average (TEMA) indicator. This series requires\n             * `linkedTo` option to be set and should be loaded after the\n             * `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/tema\n             *         TEMA indicator\n             *\n             * @extends      plotOptions.ema\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/tema\n             * @optionparent plotOptions.tema\n             */\n            TEMAIndicator.defaultOptions = merge(EMAIndicator.defaultOptions);\n            return TEMAIndicator;\n        }(EMAIndicator));\n        SeriesRegistry.registerSeriesType('tema', TEMAIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `TEMA` series. If the [type](#series.tema.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.tema\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/tema\n         * @apioption series.tema\n         */\n        ''; // to include the above in the js output\n\n        return TEMAIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/TRIX/TRIXIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var TEMAIndicator = SeriesRegistry.seriesTypes.tema;\n        var correctFloat = U.correctFloat,\n            merge = U.merge;\n        /**\n         * The TRIX series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.trix\n         *\n         * @augments Highcharts.Series\n         */\n        var TRIXIndicator = /** @class */ (function (_super) {\n                __extends(TRIXIndicator, _super);\n            function TRIXIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            // TRIX is calculated using TEMA so we just extend getTemaPoint method.\n            TRIXIndicator.prototype.getTemaPoint = function (xVal, tripledPeriod, EMAlevels, i) {\n                if (i > tripledPeriod) {\n                    return [\n                        xVal[i - 3],\n                        EMAlevels.prevLevel3 !== 0 ?\n                            correctFloat(EMAlevels.level3 - EMAlevels.prevLevel3) /\n                                EMAlevels.prevLevel3 * 100 : null\n                    ];\n                }\n            };\n            /**\n             * Triple exponential average (TRIX) oscillator. This series requires\n             * `linkedTo` option to be set.\n             *\n             * @sample {highstock} stock/indicators/trix\n             * TRIX indicator\n             *\n             * @extends      plotOptions.tema\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/tema\n             * @requires     stock/indicators/trix\n             * @optionparent plotOptions.trix\n             */\n            TRIXIndicator.defaultOptions = merge(TEMAIndicator.defaultOptions);\n            return TRIXIndicator;\n        }(TEMAIndicator));\n        SeriesRegistry.registerSeriesType('trix', TRIXIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `TRIX` series. If the [type](#series.trix.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.trix\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/tema\n         * @apioption series.trix\n         */\n        ''; // to include the above in the js output\n\n        return TRIXIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/APO/APOIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var EMAIndicator = SeriesRegistry.seriesTypes.ema;\n        var extend = U.extend,\n            merge = U.merge,\n            error = U.error;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The APO series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.apo\n         *\n         * @augments Highcharts.Series\n         */\n        var APOIndicator = /** @class */ (function (_super) {\n                __extends(APOIndicator, _super);\n            function APOIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            APOIndicator.prototype.getValues = function (series, params) {\n                var periods = params.periods,\n                    index = params.index, \n                    // 0- date, 1- Absolute price oscillator\n                    APO = [],\n                    xData = [],\n                    yData = [],\n                    periodsOffset, \n                    // Shorter Period EMA\n                    SPE, \n                    // Longer Period EMA\n                    LPE,\n                    oscillator,\n                    i;\n                // Check if periods are correct\n                if (periods.length !== 2 || periods[1] <= periods[0]) {\n                    error('Error: \"APO requires two periods. Notice, first period ' +\n                        'should be lower than the second one.\"');\n                    return;\n                }\n                SPE = EMAIndicator.prototype.getValues.call(this, series, {\n                    index: index,\n                    period: periods[0]\n                });\n                LPE = EMAIndicator.prototype.getValues.call(this, series, {\n                    index: index,\n                    period: periods[1]\n                });\n                // Check if ema is calculated properly, if not skip\n                if (!SPE || !LPE) {\n                    return;\n                }\n                periodsOffset = periods[1] - periods[0];\n                for (i = 0; i < LPE.yData.length; i++) {\n                    oscillator = (SPE.yData[i + periodsOffset] -\n                        LPE.yData[i]);\n                    APO.push([LPE.xData[i], oscillator]);\n                    xData.push(LPE.xData[i]);\n                    yData.push(oscillator);\n                }\n                return {\n                    values: APO,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Absolute Price Oscillator. This series requires the `linkedTo` option to\n             * be set and should be loaded after the `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/apo\n             *         Absolute Price Oscillator\n             *\n             * @extends      plotOptions.ema\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n             *               pointInterval, pointIntervalUnit, pointPlacement,\n             *               pointRange, pointStart, showInNavigator, stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/apo\n             * @optionparent plotOptions.apo\n             */\n            APOIndicator.defaultOptions = merge(EMAIndicator.defaultOptions, {\n                /**\n                 * Paramters used in calculation of Absolute Price Oscillator\n                 * series points.\n                 *\n                 * @excluding period\n                 */\n                params: {\n                    period: void 0,\n                    /**\n                     * Periods for Absolute Price Oscillator calculations.\n                     *\n                     * @type    {Array<number>}\n                     * @default [10, 20]\n                     * @since   7.0.0\n                     */\n                    periods: [10, 20]\n                }\n            });\n            return APOIndicator;\n        }(EMAIndicator));\n        extend(APOIndicator.prototype, {\n            nameBase: 'APO',\n            nameComponents: ['periods']\n        });\n        SeriesRegistry.registerSeriesType('apo', APOIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * An `Absolute Price Oscillator` series. If the [type](#series.apo.type) option\n         * is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.apo\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/apo\n         * @apioption series.apo\n         */\n        ''; // to include the above in the js output\n\n        return APOIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/IKH/IKHIndicator.js', [_modules['Core/Color/Color.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (Color, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var color = Color.parse;\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var defined = U.defined,\n            extend = U.extend,\n            isArray = U.isArray,\n            isNumber = U.isNumber,\n            merge = U.merge,\n            objectEach = U.objectEach;\n        /* eslint-disable require-jsdoc */\n        // Utils:\n        function maxHigh(arr) {\n            return arr.reduce(function (max, res) {\n                return Math.max(max, res[1]);\n            }, -Infinity);\n        }\n        function minLow(arr) {\n            return arr.reduce(function (min, res) {\n                return Math.min(min, res[2]);\n            }, Infinity);\n        }\n        function highlowLevel(arr) {\n            return {\n                high: maxHigh(arr),\n                low: minLow(arr)\n            };\n        }\n        function getClosestPointRange(axis) {\n            var closestDataRange,\n                loopLength,\n                distance,\n                xData,\n                i;\n            axis.series.forEach(function (series) {\n                if (series.xData) {\n                    xData = series.xData;\n                    loopLength = series.xIncrement ? 1 : xData.length - 1;\n                    for (i = loopLength; i > 0; i--) {\n                        distance = xData[i] - xData[i - 1];\n                        if (typeof closestDataRange === 'undefined' ||\n                            distance < closestDataRange) {\n                            closestDataRange = distance;\n                        }\n                    }\n                }\n            });\n            return closestDataRange;\n        }\n        // Check two lines intersection (line a1-a2 and b1-b2)\n        // Source: https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection\n        function checkLineIntersection(a1, a2, b1, b2) {\n            if (a1 && a2 && b1 && b2) {\n                var saX = a2.plotX - a1.plotX, // Auxiliary section a2-a1 X\n                    saY = a2.plotY - a1.plotY, // Auxiliary section a2-a1 Y\n                    sbX = b2.plotX - b1.plotX, // Auxiliary section b2-b1 X\n                    sbY = b2.plotY - b1.plotY, // Auxiliary section b2-b1 Y\n                    sabX = a1.plotX - b1.plotX, // Auxiliary section a1-b1 X\n                    sabY = a1.plotY - b1.plotY, // Auxiliary section a1-b1 Y\n                    // First degree Bézier parameters\n                    u = void 0,\n                    t = void 0;\n                u = (-saY * sabX + saX * sabY) / (-sbX * saY + saX * sbY);\n                t = (sbX * sabY - sbY * sabX) / (-sbX * saY + saX * sbY);\n                if (u >= 0 && u <= 1 && t >= 0 && t <= 1) {\n                    return {\n                        plotX: a1.plotX + t * saX,\n                        plotY: a1.plotY + t * saY\n                    };\n                }\n            }\n            return false;\n        }\n        // Parameter opt (indicator options object) include indicator, points,\n        // nextPoints, color, options, gappedExtend and graph properties\n        function drawSenkouSpan(opt) {\n            var indicator = opt.indicator;\n            indicator.points = opt.points;\n            indicator.nextPoints = opt.nextPoints;\n            indicator.color = opt.color;\n            indicator.options = merge(opt.options.senkouSpan.styles, opt.gap);\n            indicator.graph = opt.graph;\n            indicator.fillGraph = true;\n            SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(indicator);\n        }\n        // Data integrity in Ichimoku is different than default 'averages':\n        // Point: [undefined, value, value, ...] is correct\n        // Point: [undefined, undefined, undefined, ...] is incorrect\n        H.approximations['ichimoku-averages'] = function () {\n            var ret = [],\n                isEmptyRange;\n            [].forEach.call(arguments, function (arr, i) {\n                ret.push(H.approximations.average(arr));\n                isEmptyRange = !isEmptyRange && typeof ret[i] === 'undefined';\n            });\n            // Return undefined when first elem. is undefined and let\n            // sum method handle null (#7377)\n            return isEmptyRange ? void 0 : ret;\n        };\n        /* eslint-enable require-jsdoc */\n        /**\n         * The IKH series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ikh\n         *\n         * @augments Highcharts.Series\n         */\n        /* *\n        *\n        * Class\n        *\n        * */\n        var IKHIndicator = /** @class */ (function (_super) {\n                __extends(IKHIndicator, _super);\n            function IKHIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                *\n                *  Properties\n                *\n                * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                _this.graphCollection = void 0;\n                _this.graphsenkouSpan = void 0;\n                _this.ikhMap = void 0;\n                _this.nextPoints = void 0;\n                return _this;\n            }\n            /* *\n            *\n            * Functions\n            *\n            * */\n            IKHIndicator.prototype.init = function () {\n                SeriesRegistry.seriesTypes.sma.prototype.init.apply(this, arguments);\n                // Set default color for lines:\n                this.options = merge({\n                    tenkanLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    },\n                    kijunLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    },\n                    chikouLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    },\n                    senkouSpanA: {\n                        styles: {\n                            lineColor: this.color,\n                            fill: color(this.color).setOpacity(0.5).get()\n                        }\n                    },\n                    senkouSpanB: {\n                        styles: {\n                            lineColor: this.color,\n                            fill: color(this.color).setOpacity(0.5).get()\n                        }\n                    },\n                    senkouSpan: {\n                        styles: {\n                            fill: color(this.color).setOpacity(0.2).get()\n                        }\n                    }\n                }, this.options);\n            };\n            IKHIndicator.prototype.toYData = function (point) {\n                return [\n                    point.tenkanSen,\n                    point.kijunSen,\n                    point.chikouSpan,\n                    point.senkouSpanA,\n                    point.senkouSpanB\n                ];\n            };\n            IKHIndicator.prototype.translate = function () {\n                var indicator = this;\n                SeriesRegistry.seriesTypes.sma.prototype.translate.apply(indicator);\n                indicator.points.forEach(function (point) {\n                    indicator.pointArrayMap.forEach(function (key) {\n                        var pointValue = point[key];\n                        if (isNumber(pointValue)) {\n                            point['plot' + key] = indicator.yAxis.toPixels(pointValue, true);\n                            // Add extra parameters for support tooltip in moved\n                            // lines\n                            point.plotY = point['plot' + key];\n                            point.tooltipPos = [\n                                point.plotX,\n                                point['plot' + key]\n                            ];\n                            point.isNull = false;\n                        }\n                    });\n                });\n            };\n            IKHIndicator.prototype.drawGraph = function () {\n                var indicator = this,\n                    mainLinePoints = indicator.points,\n                    pointsLength = mainLinePoints.length,\n                    mainLineOptions = indicator.options,\n                    mainLinePath = indicator.graph,\n                    mainColor = indicator.color,\n                    gappedExtend = {\n                        options: {\n                            gapSize: mainLineOptions.gapSize\n                        }\n                    },\n                    pointArrayMapLength = indicator.pointArrayMap.length,\n                    allIchimokuPoints = [\n                        [],\n                        [],\n                        [],\n                        [],\n                        [],\n                        []\n                    ],\n                    ikhMap = {\n                        tenkanLine: allIchimokuPoints[0],\n                        kijunLine: allIchimokuPoints[1],\n                        chikouLine: allIchimokuPoints[2],\n                        senkouSpanA: allIchimokuPoints[3],\n                        senkouSpanB: allIchimokuPoints[4],\n                        senkouSpan: allIchimokuPoints[5]\n                    },\n                    intersectIndexColl = [],\n                    senkouSpanOptions = indicator\n                        .options.senkouSpan,\n                    color = senkouSpanOptions.color ||\n                        senkouSpanOptions.styles.fill,\n                    negativeColor = senkouSpanOptions.negativeColor, \n                    // Points to create color and negativeColor senkouSpan\n                    points = [\n                        [],\n                        [] // Points negative color\n                    ], \n                    // For span, we need an access to the next points, used in\n                    // getGraphPath()\n                    nextPoints = [\n                        [],\n                        [] // NextPoints negative color\n                    ],\n                    lineIndex = 0,\n                    position,\n                    point,\n                    i,\n                    startIntersect,\n                    endIntersect,\n                    sectionPoints,\n                    sectionNextPoints,\n                    pointsPlotYSum,\n                    nextPointsPlotYSum,\n                    senkouSpanTempColor,\n                    concatArrIndex,\n                    j,\n                    k;\n                indicator.ikhMap = ikhMap;\n                // Generate points for all lines and spans lines:\n                while (pointsLength--) {\n                    point = mainLinePoints[pointsLength];\n                    for (i = 0; i < pointArrayMapLength; i++) {\n                        position = indicator.pointArrayMap[i];\n                        if (defined(point[position])) {\n                            allIchimokuPoints[i].push({\n                                plotX: point.plotX,\n                                plotY: point['plot' + position],\n                                isNull: false\n                            });\n                        }\n                    }\n                    if (negativeColor && pointsLength !== mainLinePoints.length - 1) {\n                        // Check if lines intersect\n                        var index = ikhMap.senkouSpanB.length - 1,\n                            intersect = checkLineIntersection(ikhMap.senkouSpanA[index - 1],\n                            ikhMap.senkouSpanA[index],\n                            ikhMap.senkouSpanB[index - 1],\n                            ikhMap.senkouSpanB[index]),\n                            intersectPointObj = {\n                                plotX: intersect.plotX,\n                                plotY: intersect.plotY,\n                                isNull: false,\n                                intersectPoint: true\n                            };\n                        if (intersect) {\n                            // Add intersect point to ichimoku points collection\n                            // Create senkouSpan sections\n                            ikhMap.senkouSpanA.splice(index, 0, intersectPointObj);\n                            ikhMap.senkouSpanB.splice(index, 0, intersectPointObj);\n                            intersectIndexColl.push(index);\n                        }\n                    }\n                }\n                // Modify options and generate lines:\n                objectEach(ikhMap, function (values, lineName) {\n                    if (mainLineOptions[lineName] &&\n                        lineName !== 'senkouSpan') {\n                        // First line is rendered by default option\n                        indicator.points = allIchimokuPoints[lineIndex];\n                        indicator.options = merge(mainLineOptions[lineName].styles, gappedExtend);\n                        indicator.graph = indicator['graph' + lineName];\n                        indicator.fillGraph = false;\n                        indicator.color = mainColor;\n                        SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(indicator);\n                        // Now save line\n                        indicator['graph' + lineName] = indicator.graph;\n                    }\n                    lineIndex++;\n                });\n                // Generate senkouSpan area:\n                // If graphColection exist then remove svg\n                // element and indicator property\n                if (indicator.graphCollection) {\n                    indicator.graphCollection.forEach(function (graphName) {\n                        indicator[graphName].destroy();\n                        delete indicator[graphName];\n                    });\n                }\n                // Clean grapCollection or initialize it\n                indicator.graphCollection = [];\n                // When user set negativeColor property\n                if (negativeColor && ikhMap.senkouSpanA[0] && ikhMap.senkouSpanB[0]) {\n                    // Add first and last point to senkouSpan area sections\n                    intersectIndexColl.unshift(0);\n                    intersectIndexColl.push(ikhMap.senkouSpanA.length - 1);\n                    // Populate points and nextPoints arrays\n                    for (j = 0; j < intersectIndexColl.length - 1; j++) {\n                        startIntersect = intersectIndexColl[j];\n                        endIntersect = intersectIndexColl[j + 1];\n                        sectionPoints = ikhMap.senkouSpanB.slice(startIntersect, endIntersect + 1);\n                        sectionNextPoints = ikhMap.senkouSpanA.slice(startIntersect, endIntersect + 1);\n                        // Add points to color or negativeColor arrays\n                        // Check the middle point (if exist)\n                        if (Math.floor(sectionPoints.length / 2) >= 1) {\n                            var x = Math.floor(sectionPoints.length / 2);\n                            // When middle points has equal values\n                            // Compare all ponints plotY value sum\n                            if (sectionPoints[x].plotY === sectionNextPoints[x].plotY) {\n                                pointsPlotYSum = 0;\n                                nextPointsPlotYSum = 0;\n                                for (k = 0; k < sectionPoints.length; k++) {\n                                    pointsPlotYSum += sectionPoints[k].plotY;\n                                    nextPointsPlotYSum += sectionNextPoints[k].plotY;\n                                }\n                                concatArrIndex =\n                                    pointsPlotYSum > nextPointsPlotYSum ? 0 : 1;\n                                points[concatArrIndex] = points[concatArrIndex].concat(sectionPoints);\n                                nextPoints[concatArrIndex] = nextPoints[concatArrIndex].concat(sectionNextPoints);\n                            }\n                            else {\n                                // Compare middle point of the section\n                                concatArrIndex = (sectionPoints[x].plotY > sectionNextPoints[x].plotY) ? 0 : 1;\n                                points[concatArrIndex] = points[concatArrIndex].concat(sectionPoints);\n                                nextPoints[concatArrIndex] = nextPoints[concatArrIndex].concat(sectionNextPoints);\n                            }\n                        }\n                        else {\n                            // Compare first point of the section\n                            concatArrIndex = (sectionPoints[0].plotY > sectionNextPoints[0].plotY) ? 0 : 1;\n                            points[concatArrIndex] = points[concatArrIndex].concat(sectionPoints);\n                            nextPoints[concatArrIndex] = nextPoints[concatArrIndex].concat(sectionNextPoints);\n                        }\n                    }\n                    // Render color and negativeColor paths\n                    ['graphsenkouSpanColor', 'graphsenkouSpanNegativeColor'].forEach(function (areaName, i) {\n                        if (points[i].length && nextPoints[i].length) {\n                            senkouSpanTempColor = i === 0 ? color : negativeColor;\n                            drawSenkouSpan({\n                                indicator: indicator,\n                                points: points[i],\n                                nextPoints: nextPoints[i],\n                                color: senkouSpanTempColor,\n                                options: mainLineOptions,\n                                gap: gappedExtend,\n                                graph: indicator[areaName]\n                            });\n                            // Now save line\n                            indicator[areaName] = indicator.graph;\n                            indicator.graphCollection.push(areaName);\n                        }\n                    });\n                }\n                else {\n                    // When user set only senkouSpan style.fill property\n                    drawSenkouSpan({\n                        indicator: indicator,\n                        points: ikhMap.senkouSpanB,\n                        nextPoints: ikhMap.senkouSpanA,\n                        color: color,\n                        options: mainLineOptions,\n                        gap: gappedExtend,\n                        graph: indicator.graphsenkouSpan\n                    });\n                    // Now save line\n                    indicator.graphsenkouSpan = indicator.graph;\n                }\n                // Clean temporary properties:\n                delete indicator.nextPoints;\n                delete indicator.fillGraph;\n                // Restore options and draw the Tenkan line:\n                indicator.points = mainLinePoints;\n                indicator.options = mainLineOptions;\n                indicator.graph = mainLinePath;\n                indicator.color = mainColor;\n            };\n            IKHIndicator.prototype.getGraphPath = function (points) {\n                var indicator = this,\n                    path = [],\n                    spanA,\n                    spanAarr = [];\n                points = points || this.points;\n                // Render Senkou Span\n                if (indicator.fillGraph && indicator.nextPoints) {\n                    spanA = SeriesRegistry.seriesTypes.sma.prototype.getGraphPath.call(indicator, \n                    // Reverse points, so Senkou Span A will start from the end:\n                    indicator.nextPoints);\n                    if (spanA && spanA.length) {\n                        spanA[0][0] = 'L';\n                        path = SeriesRegistry.seriesTypes.sma.prototype.getGraphPath\n                            .call(indicator, points);\n                        spanAarr = spanA.slice(0, path.length);\n                        for (var i = spanAarr.length - 1; i >= 0; i--) {\n                            path.push(spanAarr[i]);\n                        }\n                    }\n                }\n                else {\n                    path = SeriesRegistry.seriesTypes.sma.prototype.getGraphPath\n                        .apply(indicator, arguments);\n                }\n                return path;\n            };\n            IKHIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    periodTenkan = params.periodTenkan,\n                    periodSenkouSpanB = params.periodSenkouSpanB,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    xAxis = series.xAxis,\n                    yValLen = (yVal && yVal.length) || 0,\n                    closestPointRange = getClosestPointRange(xAxis),\n                    IKH = [],\n                    xData = [],\n                    dateStart,\n                    date,\n                    slicedTSY,\n                    slicedKSY,\n                    slicedSSBY,\n                    pointTS,\n                    pointKS,\n                    pointSSB,\n                    i,\n                    TS,\n                    KS,\n                    CS,\n                    SSA,\n                    SSB;\n                // Ikh requires close value\n                if (xVal.length <= period ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                // Add timestamps at the beginning\n                dateStart = xVal[0] - period * closestPointRange;\n                for (i = 0; i < period; i++) {\n                    xData.push(dateStart + i * closestPointRange);\n                }\n                for (i = 0; i < yValLen; i++) {\n                    // Tenkan Sen\n                    if (i >= periodTenkan) {\n                        slicedTSY = yVal.slice(i - periodTenkan, i);\n                        pointTS = highlowLevel(slicedTSY);\n                        TS = (pointTS.high + pointTS.low) / 2;\n                    }\n                    if (i >= period) {\n                        slicedKSY = yVal.slice(i - period, i);\n                        pointKS = highlowLevel(slicedKSY);\n                        KS = (pointKS.high + pointKS.low) / 2;\n                        SSA = (TS + KS) / 2;\n                    }\n                    if (i >= periodSenkouSpanB) {\n                        slicedSSBY = yVal.slice(i - periodSenkouSpanB, i);\n                        pointSSB = highlowLevel(slicedSSBY);\n                        SSB = (pointSSB.high + pointSSB.low) / 2;\n                    }\n                    CS = yVal[i][3];\n                    date = xVal[i];\n                    if (typeof IKH[i] === 'undefined') {\n                        IKH[i] = [];\n                    }\n                    if (typeof IKH[i + period] === 'undefined') {\n                        IKH[i + period] = [];\n                    }\n                    IKH[i + period][0] = TS;\n                    IKH[i + period][1] = KS;\n                    IKH[i + period][2] = void 0;\n                    IKH[i][2] = CS;\n                    if (i <= period) {\n                        IKH[i + period][3] = void 0;\n                        IKH[i + period][4] = void 0;\n                    }\n                    if (typeof IKH[i + 2 * period] === 'undefined') {\n                        IKH[i + 2 * period] = [];\n                    }\n                    IKH[i + 2 * period][3] = SSA;\n                    IKH[i + 2 * period][4] = SSB;\n                    xData.push(date);\n                }\n                // Add timestamps for further points\n                for (i = 1; i <= period; i++) {\n                    xData.push(date + i * closestPointRange);\n                }\n                return {\n                    values: IKH,\n                    xData: xData,\n                    yData: IKH\n                };\n            };\n            /**\n             * Ichimoku Kinko Hyo (IKH). This series requires `linkedTo` option to be\n             * set.\n             *\n             * @sample stock/indicators/ichimoku-kinko-hyo\n             *         Ichimoku Kinko Hyo indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/ichimoku-kinko-hyo\n             * @optionparent plotOptions.ikh\n             */\n            IKHIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    period: 26,\n                    /**\n                     * The base period for Tenkan calculations.\n                     */\n                    periodTenkan: 9,\n                    /**\n                     * The base period for Senkou Span B calculations\n                     */\n                    periodSenkouSpanB: 52\n                },\n                marker: {\n                    enabled: false\n                },\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> <b> {series.name}</b><br/>' +\n                        'TENKAN SEN: {point.tenkanSen:.3f}<br/>' +\n                        'KIJUN SEN: {point.kijunSen:.3f}<br/>' +\n                        'CHIKOU SPAN: {point.chikouSpan:.3f}<br/>' +\n                        'SENKOU SPAN A: {point.senkouSpanA:.3f}<br/>' +\n                        'SENKOU SPAN B: {point.senkouSpanB:.3f}<br/>'\n                },\n                /**\n                 * The styles for Tenkan line\n                 */\n                tenkanLine: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * The styles for Kijun line\n                 */\n                kijunLine: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * The styles for Chikou line\n                 */\n                chikouLine: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * The styles for Senkou Span A line\n                 */\n                senkouSpanA: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * The styles for Senkou Span B line\n                 */\n                senkouSpanB: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * The styles for area between Senkou Span A and B.\n                 */\n                senkouSpan: {\n                    /**\n                     * Color of the area between Senkou Span A and B,\n                     * when Senkou Span A is above Senkou Span B. Note that if\n                     * a `style.fill` is defined, the `color` takes precedence and\n                     * the `style.fill` is ignored.\n                     *\n                     * @see [senkouSpan.styles.fill](#series.ikh.senkouSpan.styles.fill)\n                     *\n                     * @sample stock/indicators/ichimoku-kinko-hyo\n                     *         Ichimoku Kinko Hyo color\n                     *\n                     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since     7.0.0\n                     * @apioption plotOptions.ikh.senkouSpan.color\n                     */\n                    /**\n                     * Color of the area between Senkou Span A and B,\n                     * when Senkou Span A is under Senkou Span B.\n                     *\n                     * @sample stock/indicators/ikh-negative-color\n                     *         Ichimoku Kinko Hyo negativeColor\n                     *\n                     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since     7.0.0\n                     * @apioption plotOptions.ikh.senkouSpan.negativeColor\n                     */\n                    styles: {\n                        /**\n                         * Color of the area between Senkou Span A and B.\n                         *\n                         * @deprecated\n                         * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                         */\n                        fill: 'rgba(255, 0, 0, 0.5)'\n                    }\n                },\n                dataGrouping: {\n                    approximation: 'ichimoku-averages'\n                }\n            });\n            return IKHIndicator;\n        }(SMAIndicator));\n        extend(IKHIndicator.prototype, {\n            pointArrayMap: [\n                'tenkanSen',\n                'kijunSen',\n                'chikouSpan',\n                'senkouSpanA',\n                'senkouSpanB'\n            ],\n            pointValKey: 'tenkanSen',\n            nameComponents: ['periodSenkouSpanB', 'period', 'periodTenkan']\n        });\n        SeriesRegistry.registerSeriesType('ikh', IKHIndicator);\n        /**\n         * A `IKH` series. If the [type](#series.ikh.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ikh\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/ichimoku-kinko-hyo\n         * @apioption series.ikh\n         */\n        (''); // add doclet above to transpiled file\n\n        return IKHIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/KeltnerChannels/KeltnerChannelsIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var correctFloat = U.correctFloat,\n            extend = U.extend,\n            merge = U.merge;\n        /**\n         * The Keltner Channels series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.keltnerchannels\n         *\n         * @augments Highcharts.Series\n         */\n        var KeltnerChannelsIndicator = /** @class */ (function (_super) {\n                __extends(KeltnerChannelsIndicator, _super);\n            function KeltnerChannelsIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            KeltnerChannelsIndicator.prototype.init = function () {\n                SeriesRegistry.seriesTypes.sma.prototype.init.apply(this, arguments);\n                // Set default color for lines:\n                this.options = merge({\n                    topLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    },\n                    bottomLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    }\n                }, this.options);\n            };\n            KeltnerChannelsIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    periodATR = params.periodATR,\n                    multiplierATR = params.multiplierATR,\n                    index = params.index,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0, \n                    // Keltner Channels array structure:\n                    // 0-date, 1-top line, 2-middle line, 3-bottom line\n                    KC = [], \n                    // middle line, top line and bottom lineI\n                    ML,\n                    TL,\n                    BL,\n                    date,\n                    seriesEMA = SeriesRegistry.seriesTypes.ema.prototype.getValues(series, {\n                        period: period,\n                        index: index\n                    }),\n                    seriesATR = SeriesRegistry.seriesTypes.atr.prototype.getValues(series, {\n                        period: periodATR\n                    }),\n                    pointEMA,\n                    pointATR,\n                    xData = [],\n                    yData = [],\n                    i;\n                if (yValLen < period) {\n                    return;\n                }\n                for (i = period; i <= yValLen; i++) {\n                    pointEMA = seriesEMA.values[i - period];\n                    pointATR = seriesATR.values[i - periodATR];\n                    date = pointEMA[0];\n                    TL = correctFloat(pointEMA[1] + (multiplierATR * pointATR[1]));\n                    BL = correctFloat(pointEMA[1] - (multiplierATR * pointATR[1]));\n                    ML = pointEMA[1];\n                    KC.push([date, TL, ML, BL]);\n                    xData.push(date);\n                    yData.push([TL, ML, BL]);\n                }\n                return {\n                    values: KC,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Keltner Channels. This series requires the `linkedTo` option to be set\n             * and should be loaded after the `stock/indicators/indicators.js`,\n             * `stock/indicators/atr.js`, and `stock/ema/.js`.\n             *\n             * @sample {highstock} stock/indicators/keltner-channels\n             *         Keltner Channels\n             *\n             * @extends      plotOptions.sma\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart,showInNavigator,\n             *               stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/keltner-channels\n             * @optionparent plotOptions.keltnerchannels\n             */\n            KeltnerChannelsIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Option for fill color between lines in Keltner Channels Indicator.\n                 *\n                 * @sample {highstock} stock/indicators/indicator-area-fill\n                 *      Background fill between lines.\n                 *\n                 * @type {Highcharts.Color}\n                 * @since 9.3.2\n                 * @apioption plotOptions.keltnerchannels.fillColor\n                 *\n                 */\n                params: {\n                    /**\n                     * The point index which indicator calculations will base. For\n                     * example using OHLC data, index=2 means the indicator will be\n                     * calculated using Low values.\n                     */\n                    index: 0,\n                    period: 20,\n                    /**\n                     * The ATR period.\n                     */\n                    periodATR: 10,\n                    /**\n                     * The ATR multiplier.\n                     */\n                    multiplierATR: 2\n                },\n                /**\n                 * Bottom line options.\n                 *\n                 */\n                bottomLine: {\n                    /**\n                     * Styles for a bottom line.\n                     *\n                     */\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line. If not set, it's inherited from\n                         * `plotOptions.keltnerchannels.color`\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * Top line options.\n                 *\n                 * @extends plotOptions.keltnerchannels.bottomLine\n                 */\n                topLine: {\n                    styles: {\n                        lineWidth: 1,\n                        lineColor: void 0\n                    }\n                },\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b><br/>Upper Channel: {point.top}<br/>EMA({series.options.params.period}): {point.middle}<br/>Lower Channel: {point.bottom}<br/>'\n                },\n                marker: {\n                    enabled: false\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                },\n                lineWidth: 1\n            });\n            return KeltnerChannelsIndicator;\n        }(SMAIndicator));\n        extend(KeltnerChannelsIndicator.prototype, {\n            nameBase: 'Keltner Channels',\n            areaLinesNames: ['top', 'bottom'],\n            nameComponents: ['period', 'periodATR', 'multiplierATR'],\n            linesApiNames: ['topLine', 'bottomLine'],\n            pointArrayMap: ['top', 'middle', 'bottom'],\n            pointValKey: 'middle'\n        });\n        MultipleLinesComposition.compose(KeltnerChannelsIndicator);\n        SeriesRegistry.registerSeriesType('keltnerchannels', KeltnerChannelsIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A Keltner Channels indicator. If the [type](#series.keltnerchannels.type)\n         * option is not specified, it is inherited from[chart.type](#chart.type).\n         *\n         * @extends      series,plotOptions.keltnerchannels\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *               joinBy, keys, navigatorOptions, pointInterval,\n         *               pointIntervalUnit, pointPlacement, pointRange, pointStart,\n         *               stacking, showInNavigator\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/keltner-channels\n         * @apioption    series.keltnerchannels\n         */\n        ''; // to include the above in the js output\n\n        return KeltnerChannelsIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Klinger/KlingerIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var _a = SeriesRegistry.seriesTypes,\n            SMAIndicator = _a.sma,\n            EMAIndicator = _a.ema;\n        var correctFloat = U.correctFloat,\n            error = U.error,\n            extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge;\n        /**\n         * The Klinger oscillator series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.klinger\n         *\n         * @augments Highcharts.Series\n         */\n        var KlingerIndicator = /** @class */ (function (_super) {\n                __extends(KlingerIndicator, _super);\n            function KlingerIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                _this.volumeSeries = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            KlingerIndicator.prototype.calculateTrend = function (yVal, i) {\n                var isUpward = yVal[i][1] + yVal[i][2] + yVal[i][3] >\n                        yVal[i - 1][1] + yVal[i - 1][2] + yVal[i - 1][3];\n                return isUpward ? 1 : -1;\n            };\n            // Checks if the series and volumeSeries are accessible, number of\n            // points.x is longer than period, is series has OHLC data\n            KlingerIndicator.prototype.isValidData = function (firstYVal) {\n                var chart = this.chart,\n                    options = this.options,\n                    series = this.linkedParent,\n                    isSeriesOHLC = isArray(firstYVal) &&\n                        firstYVal.length === 4,\n                    volumeSeries = this.volumeSeries ||\n                        (this.volumeSeries =\n                            chart.get(options.params.volumeSeriesID));\n                if (!volumeSeries) {\n                    error('Series ' +\n                        options.params.volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, series.chart);\n                }\n                var isLengthValid = [series,\n                    volumeSeries].every(function (series) {\n                        return series && series.xData && series.xData.length >=\n                            options.params.slowAvgPeriod;\n                });\n                return !!(isLengthValid && isSeriesOHLC);\n            };\n            KlingerIndicator.prototype.getCM = function (previousCM, DM, trend, previousTrend, prevoiusDM) {\n                return correctFloat(DM + (trend === previousTrend ? previousCM : prevoiusDM));\n            };\n            KlingerIndicator.prototype.getDM = function (high, low) {\n                return correctFloat(high - low);\n            };\n            KlingerIndicator.prototype.getVolumeForce = function (yVal) {\n                var volumeForce = [];\n                var CM = 0, // cumulative measurement\n                    DM, // daily measurement\n                    force,\n                    i = 1, // start from second point\n                    previousCM = 0,\n                    previousDM = yVal[0][1] - yVal[0][2], // initial DM\n                    previousTrend = 0,\n                    trend;\n                for (i; i < yVal.length; i++) {\n                    trend = this.calculateTrend(yVal, i);\n                    DM = this.getDM(yVal[i][1], yVal[i][2]);\n                    // For the first iteration when the previousTrend doesn't exist,\n                    // previousCM doesn't exist either, but it doesn't matter becouse\n                    // it's filltered out in the getCM method in else statement,\n                    // (in this iteration, previousCM can be raplaced with the DM).\n                    CM = this.getCM(previousCM, DM, trend, previousTrend, previousDM);\n                    force = this.volumeSeries.yData[i] *\n                        trend * Math.abs(2 * ((DM / CM) - 1)) * 100;\n                    volumeForce.push([force]);\n                    // Before next iteration, assign the current as the previous.\n                    previousTrend = trend;\n                    previousCM = CM;\n                    previousDM = DM;\n                }\n                return volumeForce;\n            };\n            KlingerIndicator.prototype.getEMA = function (yVal, prevEMA, SMA, EMApercent, index, i, xVal) {\n                return EMAIndicator.prototype.calculateEma(xVal || [], yVal, typeof i === 'undefined' ? 1 : i, EMApercent, prevEMA, typeof index === 'undefined' ? -1 : index, SMA);\n            };\n            KlingerIndicator.prototype.getSMA = function (period, index, values) {\n                return EMAIndicator.prototype\n                    .accumulatePeriodPoints(period, index, values) / period;\n            };\n            KlingerIndicator.prototype.getValues = function (series, params) {\n                var Klinger = [],\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    xData = [],\n                    yData = [],\n                    calcSingal = [];\n                var KO,\n                    i = 0,\n                    fastEMA = 0,\n                    slowEMA, \n                    // signalEMA: number|undefined = void 0,\n                    previousFastEMA = void 0,\n                    previousSlowEMA = void 0,\n                    signal = null;\n                // If the necessary conditions are not fulfilled, don't proceed.\n                if (!this.isValidData(yVal[0])) {\n                    return;\n                }\n                // Calculate the Volume Force array.\n                var volumeForce = this.getVolumeForce(yVal);\n                // Calculate SMA for the first points.\n                var SMAFast = this.getSMA(params.fastAvgPeriod, 0,\n                    volumeForce),\n                    SMASlow = this.getSMA(params.slowAvgPeriod, 0,\n                    volumeForce);\n                // Calculate EMApercent for the first points.\n                var fastEMApercent = 2 / (params.fastAvgPeriod + 1),\n                    slowEMApercent = 2 / (params.slowAvgPeriod + 1);\n                // Calculate KO\n                for (i; i < yVal.length; i++) {\n                    // Get EMA for fast period.\n                    if (i >= params.fastAvgPeriod) {\n                        fastEMA = this.getEMA(volumeForce, previousFastEMA, SMAFast, fastEMApercent, 0, i, xVal)[1];\n                        previousFastEMA = fastEMA;\n                    }\n                    // Get EMA for slow period.\n                    if (i >= params.slowAvgPeriod) {\n                        slowEMA = this.getEMA(volumeForce, previousSlowEMA, SMASlow, slowEMApercent, 0, i, xVal)[1];\n                        previousSlowEMA = slowEMA;\n                        KO = correctFloat(fastEMA - slowEMA);\n                        calcSingal.push(KO);\n                        // Calculate signal SMA\n                        if (calcSingal.length >= params.signalPeriod) {\n                            signal = calcSingal.slice(-params.signalPeriod)\n                                .reduce(function (prev, curr) {\n                                return prev + curr;\n                            }) / params.signalPeriod;\n                        }\n                        Klinger.push([xVal[i], KO, signal]);\n                        xData.push(xVal[i]);\n                        yData.push([KO, signal]);\n                    }\n                }\n                return {\n                    values: Klinger,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Klinger oscillator. This series requires the `linkedTo` option to be set\n             * and should be loaded after the `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/klinger\n             *         Klinger oscillator\n             *\n             * @extends      plotOptions.sma\n             * @since 9.1.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/klinger\n             * @optionparent plotOptions.klinger\n             */\n            KlingerIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Paramters used in calculation of Klinger Oscillator.\n                 *\n                 * @excluding index, period\n                 */\n                params: {\n                    /**\n                     * The fast period for indicator calculations.\n                     */\n                    fastAvgPeriod: 34,\n                    /**\n                     * The slow period for indicator calculations.\n                     */\n                    slowAvgPeriod: 55,\n                    /**\n                     * The base period for signal calculations.\n                     */\n                    signalPeriod: 13,\n                    /**\n                     * The id of another series to use its data as volume data for the\n                     * indiator calculation.\n                     */\n                    volumeSeriesID: 'volume'\n                },\n                signalLine: {\n                    /**\n                     * Styles for a signal line.\n                     */\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line. If not set, it's inherited from\n                         * [plotOptions.klinger.color\n                         * ](#plotOptions.klinger.color).\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: '#ff0000'\n                    }\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                },\n                tooltip: {\n                    pointFormat: '<span style=\"color: {point.color}\">\\u25CF</span>' +\n                        '<b> {series.name}</b><br/>' +\n                        '<span style=\"color: {point.color}\">Klinger</span>: ' +\n                        '{point.y}<br/>' +\n                        '<span style=\"color: ' +\n                        '{point.series.options.signalLine.styles.lineColor}\">' +\n                        'Signal</span>' +\n                        ': {point.signal}<br/>'\n                }\n            });\n            return KlingerIndicator;\n        }(SMAIndicator));\n        extend(KlingerIndicator.prototype, {\n            areaLinesNames: [],\n            linesApiNames: ['signalLine'],\n            nameBase: 'Klinger',\n            nameComponents: ['fastAvgPeriod', 'slowAvgPeriod'],\n            pointArrayMap: ['y', 'signal'],\n            parallelArrays: ['x', 'y', 'signal'],\n            pointValKey: 'y'\n        });\n        MultipleLinesComposition.compose(KlingerIndicator);\n        SeriesRegistry.registerSeriesType('klinger', KlingerIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A Klinger oscillator. If the [type](#series.klinger.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.klinger\n         * @since 9.1.0\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/klinger\n         * @apioption series.klinger\n         */\n        ''; // to include the above in the js output\n\n        return KlingerIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/MACD/MACDIndicator.js', [_modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (H, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var noop = H.noop;\n        var _a = SeriesRegistry.seriesTypes,\n            SMAIndicator = _a.sma,\n            ColumnSeries = _a.column;\n        var extend = U.extend,\n            correctFloat = U.correctFloat,\n            defined = U.defined,\n            merge = U.merge;\n        /**\n         *\n         * Class\n         *\n         */\n        /**\n         * The MACD series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.macd\n         *\n         * @augments Highcharts.Series\n         */\n        var MACDIndicator = /** @class */ (function (_super) {\n                __extends(MACDIndicator, _super);\n            function MACDIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /**\n                 *\n                 * Properties\n                 *\n                 */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                _this.currentLineZone = void 0;\n                _this.graphmacd = void 0;\n                _this.graphsignal = void 0;\n                _this.macdZones = void 0;\n                _this.signalZones = void 0;\n                return _this;\n            }\n            /**\n             *\n             * Functions\n             *\n             */\n            MACDIndicator.prototype.init = function () {\n                SeriesRegistry.seriesTypes.sma.prototype.init.apply(this, arguments);\n                // Check whether series is initialized. It may be not initialized,\n                // when any of required indicators is missing.\n                if (this.options) {\n                    // Set default color for a signal line and the histogram:\n                    this.options = merge({\n                        signalLine: {\n                            styles: {\n                                lineColor: this.color\n                            }\n                        },\n                        macdLine: {\n                            styles: {\n                                color: this.color\n                            }\n                        }\n                    }, this.options);\n                    // Zones have indexes automatically calculated, we need to\n                    // translate them to support multiple lines within one indicator\n                    this.macdZones = {\n                        zones: this.options.macdLine.zones,\n                        startIndex: 0\n                    };\n                    this.signalZones = {\n                        zones: this.macdZones.zones.concat(this.options.signalLine.zones),\n                        startIndex: this.macdZones.zones.length\n                    };\n                    this.resetZones = true;\n                }\n            };\n            MACDIndicator.prototype.toYData = function (point) {\n                return [point.y, point.signal, point.MACD];\n            };\n            MACDIndicator.prototype.translate = function () {\n                var indicator = this, plotNames = ['plotSignal', 'plotMACD'];\n                H.seriesTypes.column.prototype.translate.apply(indicator);\n                indicator.points.forEach(function (point) {\n                    [point.signal, point.MACD].forEach(function (value, i) {\n                        if (value !== null) {\n                            point[plotNames[i]] =\n                                indicator.yAxis.toPixels(value, true);\n                        }\n                    });\n                });\n            };\n            MACDIndicator.prototype.destroy = function () {\n                // this.graph is null due to removing two times the same SVG element\n                this.graph = null;\n                this.graphmacd = this.graphmacd && this.graphmacd.destroy();\n                this.graphsignal = this.graphsignal && this.graphsignal.destroy();\n                SeriesRegistry.seriesTypes.sma.prototype.destroy.apply(this, arguments);\n            };\n            MACDIndicator.prototype.drawGraph = function () {\n                var indicator = this,\n                    mainLinePoints = indicator.points,\n                    pointsLength = mainLinePoints.length,\n                    mainLineOptions = indicator.options,\n                    histogramZones = indicator.zones,\n                    gappedExtend = {\n                        options: {\n                            gapSize: mainLineOptions.gapSize\n                        }\n                    },\n                    otherSignals = [[],\n                    []],\n                    point;\n                // Generate points for top and bottom lines:\n                while (pointsLength--) {\n                    point = mainLinePoints[pointsLength];\n                    if (defined(point.plotMACD)) {\n                        otherSignals[0].push({\n                            plotX: point.plotX,\n                            plotY: point.plotMACD,\n                            isNull: !defined(point.plotMACD)\n                        });\n                    }\n                    if (defined(point.plotSignal)) {\n                        otherSignals[1].push({\n                            plotX: point.plotX,\n                            plotY: point.plotSignal,\n                            isNull: !defined(point.plotMACD)\n                        });\n                    }\n                }\n                // Modify options and generate smoothing line:\n                ['macd', 'signal'].forEach(function (lineName, i) {\n                    indicator.points = otherSignals[i];\n                    indicator.options = merge(mainLineOptions[lineName + 'Line'].styles, gappedExtend);\n                    indicator.graph = indicator['graph' + lineName];\n                    // Zones extension:\n                    indicator.currentLineZone = lineName + 'Zones';\n                    indicator.zones =\n                        indicator[indicator.currentLineZone].zones;\n                    SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(indicator);\n                    indicator['graph' + lineName] = indicator.graph;\n                });\n                // Restore options:\n                indicator.points = mainLinePoints;\n                indicator.options = mainLineOptions;\n                indicator.zones = histogramZones;\n                indicator.currentLineZone = null;\n                // indicator.graph = null;\n            };\n            MACDIndicator.prototype.getZonesGraphs = function (props) {\n                var allZones = _super.prototype.getZonesGraphs.call(this,\n                    props),\n                    currentZones = allZones;\n                if (this.currentLineZone) {\n                    currentZones = allZones.splice(this[this.currentLineZone].startIndex + 1);\n                    if (!currentZones.length) {\n                        // Line has no zones, return basic graph \"zone\"\n                        currentZones = [props[0]];\n                    }\n                    else {\n                        // Add back basic prop:\n                        currentZones.splice(0, 0, props[0]);\n                    }\n                }\n                return currentZones;\n            };\n            MACDIndicator.prototype.applyZones = function () {\n                // Histogram zones are handled by drawPoints method\n                // Here we need to apply zones for all lines\n                var histogramZones = this.zones;\n                // signalZones.zones contains all zones:\n                this.zones = this.signalZones.zones;\n                SeriesRegistry.seriesTypes.sma.prototype.applyZones.call(this);\n                // applyZones hides only main series.graph, hide macd line manually\n                if (this.graphmacd && this.options.macdLine.zones.length) {\n                    this.graphmacd.hide();\n                }\n                this.zones = histogramZones;\n            };\n            MACDIndicator.prototype.getValues = function (series, params) {\n                var indexToShift = (params.longPeriod - params.shortPeriod), // #14197\n                    j = 0,\n                    MACD = [],\n                    xMACD = [],\n                    yMACD = [],\n                    signalLine = [],\n                    shortEMA,\n                    longEMA,\n                    i;\n                if (series.xData.length <\n                    params.longPeriod + params.signalPeriod) {\n                    return;\n                }\n                // Calculating the short and long EMA used when calculating the MACD\n                shortEMA = SeriesRegistry.seriesTypes.ema.prototype.getValues(series, {\n                    period: params.shortPeriod,\n                    index: params.index\n                });\n                longEMA = SeriesRegistry.seriesTypes.ema.prototype.getValues(series, {\n                    period: params.longPeriod,\n                    index: params.index\n                });\n                shortEMA = shortEMA.values;\n                longEMA = longEMA.values;\n                // Subtract each Y value from the EMA's and create the new dataset\n                // (MACD)\n                for (i = 0; i <= shortEMA.length; i++) {\n                    if (defined(longEMA[i]) &&\n                        defined(longEMA[i][1]) &&\n                        defined(shortEMA[i + indexToShift]) &&\n                        defined(shortEMA[i + indexToShift][0])) {\n                        MACD.push([\n                            shortEMA[i + indexToShift][0],\n                            0,\n                            null,\n                            shortEMA[i + indexToShift][1] -\n                                longEMA[i][1]\n                        ]);\n                    }\n                }\n                // Set the Y and X data of the MACD. This is used in calculating the\n                // signal line.\n                for (i = 0; i < MACD.length; i++) {\n                    xMACD.push(MACD[i][0]);\n                    yMACD.push([0, null, MACD[i][3]]);\n                }\n                // Setting the signalline (Signal Line: X-day EMA of MACD line).\n                signalLine = SeriesRegistry.seriesTypes.ema.prototype.getValues({\n                    xData: xMACD,\n                    yData: yMACD\n                }, {\n                    period: params.signalPeriod,\n                    index: 2\n                });\n                signalLine = signalLine.values;\n                // Setting the MACD Histogram. In comparison to the loop with pure\n                // MACD this loop uses MACD x value not xData.\n                for (i = 0; i < MACD.length; i++) {\n                    // detect the first point\n                    if (MACD[i][0] >= signalLine[0][0]) {\n                        MACD[i][2] = signalLine[j][1];\n                        yMACD[i] = [0, signalLine[j][1], MACD[i][3]];\n                        if (MACD[i][3] === null) {\n                            MACD[i][1] = 0;\n                            yMACD[i][0] = 0;\n                        }\n                        else {\n                            MACD[i][1] = correctFloat(MACD[i][3] -\n                                signalLine[j][1]);\n                            yMACD[i][0] = correctFloat(MACD[i][3] -\n                                signalLine[j][1]);\n                        }\n                        j++;\n                    }\n                }\n                return {\n                    values: MACD,\n                    xData: xMACD,\n                    yData: yMACD\n                };\n            };\n            /**\n             * Moving Average Convergence Divergence (MACD). This series requires\n             * `linkedTo` option to be set and should be loaded after the\n             * `stock/indicators/indicators.js`.\n             *\n             * @sample stock/indicators/macd\n             *         MACD indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/macd\n             * @optionparent plotOptions.macd\n             */\n            MACDIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    /**\n                     * The short period for indicator calculations.\n                     */\n                    shortPeriod: 12,\n                    /**\n                     * The long period for indicator calculations.\n                     */\n                    longPeriod: 26,\n                    /**\n                     * The base period for signal calculations.\n                     */\n                    signalPeriod: 9,\n                    period: 26\n                },\n                /**\n                 * The styles for signal line\n                 */\n                signalLine: {\n                    /**\n                     * @sample stock/indicators/macd-zones\n                     *         Zones in MACD\n                     *\n                     * @extends plotOptions.macd.zones\n                     */\n                    zones: [],\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type  {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * The styles for macd line\n                 */\n                macdLine: {\n                    /**\n                     * @sample stock/indicators/macd-zones\n                     *         Zones in MACD\n                     *\n                     * @extends plotOptions.macd.zones\n                     */\n                    zones: [],\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type  {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * @type {number|null}\n                 */\n                threshold: 0,\n                groupPadding: 0.1,\n                pointPadding: 0.1,\n                crisp: false,\n                states: {\n                    hover: {\n                        halo: {\n                            size: 0\n                        }\n                    }\n                },\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> <b> {series.name}</b><br/>' +\n                        'Value: {point.MACD}<br/>' +\n                        'Signal: {point.signal}<br/>' +\n                        'Histogram: {point.y}<br/>'\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                },\n                minPointLength: 0\n            });\n            return MACDIndicator;\n        }(SMAIndicator));\n        extend(MACDIndicator.prototype, {\n            nameComponents: ['longPeriod', 'shortPeriod', 'signalPeriod'],\n            // \"y\" value is treated as Histogram data\n            pointArrayMap: ['y', 'signal', 'MACD'],\n            parallelArrays: ['x', 'y', 'signal', 'MACD'],\n            pointValKey: 'y',\n            // Columns support:\n            markerAttribs: noop,\n            getColumnMetrics: H.seriesTypes.column.prototype.getColumnMetrics,\n            crispCol: H.seriesTypes.column.prototype.crispCol,\n            drawPoints: H.seriesTypes.column.prototype.drawPoints\n        });\n        SeriesRegistry.registerSeriesType('macd', MACDIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `MACD` series. If the [type](#series.macd.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.macd\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/macd\n         * @apioption series.macd\n         */\n        ''; // to include the above in the js output\n\n        return MACDIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/MFI/MFIIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  Money Flow Index indicator for Highcharts Stock\n         *\n         *  (c) 2010-2021 Grzegorz Blachliński\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var extend = U.extend,\n            merge = U.merge,\n            error = U.error,\n            isArray = U.isArray;\n        /* eslint-disable require-jsdoc */\n        // Utils:\n        function sumArray(array) {\n            return array.reduce(function (prev, cur) {\n                return prev + cur;\n            });\n        }\n        function toFixed(a, n) {\n            return parseFloat(a.toFixed(n));\n        }\n        function calculateTypicalPrice(point) {\n            return (point[1] + point[2] + point[3]) / 3;\n        }\n        function calculateRawMoneyFlow(typicalPrice, volume) {\n            return typicalPrice * volume;\n        }\n        /* eslint-enable require-jsdoc */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The MFI series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.mfi\n         *\n         * @augments Highcharts.Series\n         */\n        var MFIIndicator = /** @class */ (function (_super) {\n                __extends(MFIIndicator, _super);\n            function MFIIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                *\n                *  Properties\n                *\n                * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            MFIIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    decimals = params.decimals, \n                    // MFI starts calculations from the second point\n                    // Cause we need to calculate change between two points\n                    range = 1,\n                    volumeSeries = series.chart.get(params.volumeSeriesID),\n                    yValVolume = (volumeSeries && volumeSeries.yData),\n                    MFI = [],\n                    isUp = false,\n                    xData = [],\n                    yData = [],\n                    positiveMoneyFlow = [],\n                    negativeMoneyFlow = [],\n                    newTypicalPrice,\n                    oldTypicalPrice,\n                    rawMoneyFlow,\n                    negativeMoneyFlowSum,\n                    positiveMoneyFlowSum,\n                    moneyFlowRatio,\n                    MFIPoint,\n                    i;\n                if (!volumeSeries) {\n                    error('Series ' +\n                        params.volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, series.chart);\n                    return;\n                }\n                // MFI requires high low and close values\n                if ((xVal.length <= period) || !isArray(yVal[0]) ||\n                    yVal[0].length !== 4 ||\n                    !yValVolume) {\n                    return;\n                }\n                // Calculate first typical price\n                newTypicalPrice = calculateTypicalPrice(yVal[range]);\n                // Accumulate first N-points\n                while (range < period + 1) {\n                    // Calculate if up or down\n                    oldTypicalPrice = newTypicalPrice;\n                    newTypicalPrice = calculateTypicalPrice(yVal[range]);\n                    isUp = newTypicalPrice >= oldTypicalPrice;\n                    // Calculate raw money flow\n                    rawMoneyFlow = calculateRawMoneyFlow(newTypicalPrice, yValVolume[range]);\n                    // Add to array\n                    positiveMoneyFlow.push(isUp ? rawMoneyFlow : 0);\n                    negativeMoneyFlow.push(isUp ? 0 : rawMoneyFlow);\n                    range++;\n                }\n                for (i = range - 1; i < yValLen; i++) {\n                    if (i > range - 1) {\n                        // Remove first point from array\n                        positiveMoneyFlow.shift();\n                        negativeMoneyFlow.shift();\n                        // Calculate if up or down\n                        oldTypicalPrice = newTypicalPrice;\n                        newTypicalPrice = calculateTypicalPrice(yVal[i]);\n                        isUp = newTypicalPrice > oldTypicalPrice;\n                        // Calculate raw money flow\n                        rawMoneyFlow = calculateRawMoneyFlow(newTypicalPrice, yValVolume[i]);\n                        // Add to array\n                        positiveMoneyFlow.push(isUp ? rawMoneyFlow : 0);\n                        negativeMoneyFlow.push(isUp ? 0 : rawMoneyFlow);\n                    }\n                    // Calculate sum of negative and positive money flow:\n                    negativeMoneyFlowSum = sumArray(negativeMoneyFlow);\n                    positiveMoneyFlowSum = sumArray(positiveMoneyFlow);\n                    moneyFlowRatio = positiveMoneyFlowSum / negativeMoneyFlowSum;\n                    MFIPoint = toFixed(100 - (100 / (1 + moneyFlowRatio)), decimals);\n                    MFI.push([xVal[i], MFIPoint]);\n                    xData.push(xVal[i]);\n                    yData.push(MFIPoint);\n                }\n                return {\n                    values: MFI,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Money Flow Index. This series requires `linkedTo` option to be set and\n             * should be loaded after the `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/mfi\n             *         Money Flow Index Indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/mfi\n             * @optionparent plotOptions.mfi\n             */\n            MFIIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    /**\n                     * The id of volume series which is mandatory.\n                     * For example using OHLC data, volumeSeriesID='volume' means\n                     * the indicator will be calculated using OHLC and volume values.\n                     */\n                    volumeSeriesID: 'volume',\n                    /**\n                     * Number of maximum decimals that are used in MFI calculations.\n                     */\n                    decimals: 4\n                }\n            });\n            return MFIIndicator;\n        }(SMAIndicator));\n        extend(MFIIndicator.prototype, {\n            nameBase: 'Money Flow Index'\n        });\n        SeriesRegistry.registerSeriesType('mfi', MFIIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `MFI` series. If the [type](#series.mfi.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.mfi\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/mfi\n         * @apioption series.mfi\n         */\n        ''; // to include the above in the js output\n\n        return MFIIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Momentum/MomentumIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge;\n        /* eslint-disable require-jsdoc */\n        function populateAverage(xVal, yVal, i, period, index) {\n            var mmY = yVal[i - 1][index] - yVal[i - period - 1][index],\n                mmX = xVal[i - 1];\n            return [mmX, mmY];\n        }\n        /* eslint-enable require-jsdoc */\n        /**\n         * The Momentum series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.momentum\n         *\n         * @augments Highcharts.Series\n         */\n        var MomentumIndicator = /** @class */ (function (_super) {\n                __extends(MomentumIndicator, _super);\n            function MomentumIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            MomentumIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    index = params.index,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    yValue = yVal[0],\n                    MM = [],\n                    xData = [],\n                    yData = [],\n                    i,\n                    MMPoint;\n                if (xVal.length <= period) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    yValue = yVal[0][index];\n                }\n                else {\n                    return;\n                }\n                // Calculate value one-by-one for each period in visible data\n                for (i = (period + 1); i < yValLen; i++) {\n                    MMPoint = populateAverage(xVal, yVal, i, period, index);\n                    MM.push(MMPoint);\n                    xData.push(MMPoint[0]);\n                    yData.push(MMPoint[1]);\n                }\n                MMPoint = populateAverage(xVal, yVal, i, period, index);\n                MM.push(MMPoint);\n                xData.push(MMPoint[0]);\n                yData.push(MMPoint[1]);\n                return {\n                    values: MM,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Momentum. This series requires `linkedTo` option to be set.\n             *\n             * @sample stock/indicators/momentum\n             *         Momentum indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/momentum\n             * @optionparent plotOptions.momentum\n             */\n            MomentumIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    index: 3\n                }\n            });\n            return MomentumIndicator;\n        }(SMAIndicator));\n        extend(MomentumIndicator.prototype, {\n            nameBase: 'Momentum'\n        });\n        SeriesRegistry.registerSeriesType('momentum', MomentumIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `Momentum` series. If the [type](#series.momentum.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.momentum\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/momentum\n         * @apioption series.momentum\n         */\n        ''; // to include the above in the js output\n\n        return MomentumIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/NATR/NATRIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var ATRIndicator = SeriesRegistry.seriesTypes.atr;\n        var merge = U.merge,\n            extend = U.extend;\n        /**\n         * The NATR series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.natr\n         *\n         * @augments Highcharts.Series\n         */\n        var NATRIndicator = /** @class */ (function (_super) {\n                __extends(NATRIndicator, _super);\n            function NATRIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /**\n                 * @lends Highcharts.Series#\n                 */\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            NATRIndicator.prototype.getValues = function (series, params) {\n                var atrData = (ATRIndicator.prototype.getValues.apply(this,\n                    arguments)),\n                    atrLength = atrData.values.length,\n                    period = params.period - 1,\n                    yVal = series.yData,\n                    i = 0;\n                if (!atrData) {\n                    return;\n                }\n                for (; i < atrLength; i++) {\n                    atrData.yData[i] = (atrData.values[i][1] / yVal[period][3] * 100);\n                    atrData.values[i][1] = atrData.yData[i];\n                    period++;\n                }\n                return atrData;\n            };\n            /**\n             * Normalized average true range indicator (NATR). This series requires\n             * `linkedTo` option to be set and should be loaded after the\n             * `stock/indicators/indicators.js` and `stock/indicators/atr.js`.\n             *\n             * @sample {highstock} stock/indicators/natr\n             *         NATR indicator\n             *\n             * @extends      plotOptions.atr\n             * @since        7.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/natr\n             * @optionparent plotOptions.natr\n             */\n            NATRIndicator.defaultOptions = merge(ATRIndicator.defaultOptions, {\n                tooltip: {\n                    valueSuffix: '%'\n                }\n            });\n            return NATRIndicator;\n        }(ATRIndicator));\n        SeriesRegistry.registerSeriesType('natr', NATRIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `NATR` series. If the [type](#series.natr.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.natr\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/atr\n         * @requires  stock/indicators/natr\n         * @apioption series.natr\n         */\n        ''; // to include the above in the js output'\n\n        return NATRIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/OBV/OBVIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var isNumber = U.isNumber,\n            error = U.error,\n            extend = U.extend,\n            merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The OBV series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.obv\n         *\n         * @augments Highcharts.Series\n         */\n        var OBVIndicator = /** @class */ (function (_super) {\n                __extends(OBVIndicator, _super);\n            function OBVIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            OBVIndicator.prototype.getValues = function (series, params) {\n                var volumeSeries = series.chart.get(params.volumeSeriesID),\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    OBV = [],\n                    xData = [],\n                    yData = [],\n                    hasOHLC = !isNumber(yVal[0]);\n                var OBVPoint = [],\n                    i = 1,\n                    previousOBV = 0,\n                    curentOBV = 0,\n                    previousClose = 0,\n                    curentClose = 0,\n                    volume;\n                // Checks if volume series exists.\n                if (volumeSeries) {\n                    volume = volumeSeries.yData;\n                    // Add first point and get close value.\n                    OBVPoint = [xVal[0], previousOBV];\n                    previousClose = hasOHLC ?\n                        yVal[0][3] : yVal[0];\n                    OBV.push(OBVPoint);\n                    xData.push(xVal[0]);\n                    yData.push(OBVPoint[1]);\n                    for (i; i < yVal.length; i++) {\n                        curentClose = hasOHLC ?\n                            yVal[i][3] : yVal[i];\n                        if (curentClose > previousClose) { // up\n                            curentOBV = previousOBV + volume[i];\n                        }\n                        else if (curentClose === previousClose) { // constant\n                            curentOBV = previousOBV;\n                        }\n                        else { // down\n                            curentOBV = previousOBV - volume[i];\n                        }\n                        // Add point.\n                        OBVPoint = [xVal[i], curentOBV];\n                        // Assign current as previous for next iteration.\n                        previousOBV = curentOBV;\n                        previousClose = curentClose;\n                        OBV.push(OBVPoint);\n                        xData.push(xVal[i]);\n                        yData.push(OBVPoint[1]);\n                    }\n                }\n                else {\n                    error('Series ' +\n                        params.volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, series.chart);\n                    return;\n                }\n                return {\n                    values: OBV,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * On-Balance Volume (OBV) technical indicator. This series\n             * requires the `linkedTo` option to be set and should be loaded after\n             * the `stock/indicators/indicators.js` file. Through the `volumeSeriesID`\n             * there also should be linked the volume series.\n             *\n             * @sample stock/indicators/obv\n             *         OBV indicator\n             *\n             * @extends      plotOptions.sma\n             * @since 9.1.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/obv\n             * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n             *               pointInterval, pointIntervalUnit, pointPlacement,\n             *               pointRange, pointStart, showInNavigator, stacking\n             * @optionparent plotOptions.obv\n             */\n            OBVIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                marker: {\n                    enabled: false\n                },\n                /**\n                 * @excluding index, period\n                 */\n                params: {\n                    // Index and period are unchangeable, do not inherit (#15362)\n                    index: void 0,\n                    period: void 0,\n                    /**\n                     * The id of another series to use its data as volume data for the\n                     * indiator calculation.\n                     */\n                    volumeSeriesID: 'volume'\n                },\n                tooltip: {\n                    valueDecimals: 0\n                }\n            });\n            return OBVIndicator;\n        }(SMAIndicator));\n        extend(OBVIndicator.prototype, {\n            nameComponents: void 0\n        });\n        SeriesRegistry.registerSeriesType('obv', OBVIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `OBV` series. If the [type](#series.obv.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.obv\n         * @since 9.1.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/obv\n         * @apioption series.obv\n         */\n        ''; // to include the above in the js output\n\n        return OBVIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/PivotPoints/PivotPointsPoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         */\n        function destroyExtraLabels(point, functionName) {\n            var props = point.series.pointArrayMap,\n                prop,\n                i = props.length;\n            SeriesRegistry.seriesTypes.sma.prototype.pointClass.prototype[functionName].call(point);\n            while (i--) {\n                prop = 'dataLabel' + props[i];\n                // S4 dataLabel could be removed by parent method:\n                if (point[prop] && point[prop].element) {\n                    point[prop].destroy();\n                }\n                point[prop] = null;\n            }\n        }\n        /* eslint-enable valid-jsdoc */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var PivotPointsPoint = /** @class */ (function (_super) {\n                __extends(PivotPointsPoint, _super);\n            function PivotPointsPoint() {\n                /**\n                 *\n                 * Properties\n                 *\n                 */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.P = void 0;\n                _this.pivotLine = void 0;\n                _this.series = void 0;\n                return _this;\n            }\n            /**\n              *\n              * Functions\n              *\n              */\n            PivotPointsPoint.prototype.destroyElements = function () {\n                destroyExtraLabels(this, 'destroyElements');\n            };\n            // This method is called when removing points, e.g. series.update()\n            PivotPointsPoint.prototype.destroy = function () {\n                destroyExtraLabels(this, 'destroyElements');\n            };\n            return PivotPointsPoint;\n        }(SMAIndicator.prototype.pointClass));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PivotPointsPoint;\n    });\n    _registerModule(_modules, 'Stock/Indicators/PivotPoints/PivotPointsIndicator.js', [_modules['Stock/Indicators/PivotPoints/PivotPointsPoint.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (PivotPointsPoint, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var merge = U.merge,\n            extend = U.extend,\n            defined = U.defined,\n            isArray = U.isArray;\n        /**\n         *\n         *  Class\n         *\n         **/\n        /**\n         * The Pivot Points series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.pivotpoints\n         *\n         * @augments Highcharts.Series\n         */\n        var PivotPointsIndicator = /** @class */ (function (_super) {\n                __extends(PivotPointsIndicator, _super);\n            function PivotPointsIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /**\n                 *\n                 * Properties\n                 *\n                 */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                _this.endPoint = void 0;\n                _this.plotEndPoint = void 0;\n                return _this;\n            }\n            /**\n             *\n             * Functions\n             *\n             */\n            PivotPointsIndicator.prototype.toYData = function (point) {\n                return [point.P]; // The rest should not affect extremes\n            };\n            PivotPointsIndicator.prototype.translate = function () {\n                var indicator = this;\n                SeriesRegistry.seriesTypes.sma.prototype.translate.apply(indicator);\n                indicator.points.forEach(function (point) {\n                    indicator.pointArrayMap.forEach(function (value) {\n                        if (defined(point[value])) {\n                            point['plot' + value] = (indicator.yAxis.toPixels(point[value], true));\n                        }\n                    });\n                });\n                // Pivot points are rendered as horizontal lines\n                // And last point start not from the next one (as it's the last one)\n                // But from the approximated last position in a given range\n                indicator.plotEndPoint = indicator.xAxis.toPixels(indicator.endPoint, true);\n            };\n            PivotPointsIndicator.prototype.getGraphPath = function (points) {\n                var indicator = this,\n                    pointsLength = points.length,\n                    allPivotPoints = ([[],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []]),\n                    path = [],\n                    endPoint = indicator.plotEndPoint,\n                    pointArrayMapLength = indicator.pointArrayMap.length,\n                    position,\n                    point,\n                    i;\n                while (pointsLength--) {\n                    point = points[pointsLength];\n                    for (i = 0; i < pointArrayMapLength; i++) {\n                        position = indicator.pointArrayMap[i];\n                        if (defined(point[position])) {\n                            allPivotPoints[i].push({\n                                // Start left:\n                                plotX: point.plotX,\n                                plotY: point['plot' + position],\n                                isNull: false\n                            }, {\n                                // Go to right:\n                                plotX: endPoint,\n                                plotY: point['plot' + position],\n                                isNull: false\n                            }, {\n                                // And add null points in path to generate breaks:\n                                plotX: endPoint,\n                                plotY: null,\n                                isNull: true\n                            });\n                        }\n                    }\n                    endPoint = point.plotX;\n                }\n                allPivotPoints.forEach(function (pivotPoints) {\n                    path = path.concat(SeriesRegistry.seriesTypes.sma.prototype.getGraphPath.call(indicator, pivotPoints));\n                });\n                return path;\n            };\n            // TODO: Rewrite this logic to use multiple datalabels\n            PivotPointsIndicator.prototype.drawDataLabels = function () {\n                var indicator = this,\n                    pointMapping = indicator.pointArrayMap,\n                    currentLabel,\n                    pointsLength,\n                    point,\n                    i;\n                if (indicator.options.dataLabels.enabled) {\n                    pointsLength = indicator.points.length;\n                    // For every Ressitance/Support group we need to render labels.\n                    // Add one more item, which will just store dataLabels from\n                    // previous iteration\n                    pointMapping.concat([false]).forEach(function (position, k) {\n                        i = pointsLength;\n                        while (i--) {\n                            point = indicator.points[i];\n                            if (!position) {\n                                // Store S4 dataLabel too:\n                                point['dataLabel' + pointMapping[k - 1]] =\n                                    point.dataLabel;\n                            }\n                            else {\n                                point.y = point[position];\n                                point.pivotLine = position;\n                                point.plotY = point['plot' + position];\n                                currentLabel = point['dataLabel' + position];\n                                // Store previous label\n                                if (k) {\n                                    point['dataLabel' + pointMapping[k - 1]] = point.dataLabel;\n                                }\n                                if (!point.dataLabels) {\n                                    point.dataLabels = [];\n                                }\n                                point.dataLabels[0] = point.dataLabel =\n                                    currentLabel =\n                                        currentLabel && currentLabel.element ?\n                                            currentLabel :\n                                            null;\n                            }\n                        }\n                        SeriesRegistry.seriesTypes.sma.prototype.drawDataLabels\n                            .apply(indicator, arguments);\n                    });\n                }\n            };\n            PivotPointsIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    placement = this[params.algorithm + 'Placement'], \n                    // 0- from, 1- to, 2- R1, 3- R2, 4- pivot, 5- S1 etc.\n                    PP = [],\n                    endTimestamp,\n                    xData = [],\n                    yData = [],\n                    slicedXLen,\n                    slicedX,\n                    slicedY,\n                    lastPP,\n                    pivot,\n                    avg,\n                    i;\n                // Pivot Points requires high, low and close values\n                if (xVal.length < period ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                for (i = period + 1; i <= yValLen + period; i += period) {\n                    slicedX = xVal.slice(i - period - 1, i);\n                    slicedY = yVal.slice(i - period - 1, i);\n                    slicedXLen = slicedX.length;\n                    endTimestamp = slicedX[slicedXLen - 1];\n                    pivot = this.getPivotAndHLC(slicedY);\n                    avg = placement(pivot);\n                    lastPP = PP.push([endTimestamp]\n                        .concat(avg));\n                    xData.push(endTimestamp);\n                    yData.push(PP[lastPP - 1].slice(1));\n                }\n                // We don't know exact position in ordinal axis\n                // So we use simple logic:\n                // Get first point in last range, calculate visible average range\n                // and multiply by period\n                this.endPoint = slicedX[0] + ((endTimestamp - slicedX[0]) /\n                    slicedXLen) * period;\n                return {\n                    values: PP,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            PivotPointsIndicator.prototype.getPivotAndHLC = function (values) {\n                var high = -Infinity,\n                    low = Infinity,\n                    close = values[values.length - 1][3],\n                    pivot;\n                values.forEach(function (p) {\n                    high = Math.max(high, p[1]);\n                    low = Math.min(low, p[2]);\n                });\n                pivot = (high + low + close) / 3;\n                return [pivot, high, low, close];\n            };\n            PivotPointsIndicator.prototype.standardPlacement = function (values) {\n                var diff = values[1] - values[2],\n                    avg = [\n                        null,\n                        null,\n                        values[0] + diff,\n                        values[0] * 2 - values[2],\n                        values[0],\n                        values[0] * 2 - values[1],\n                        values[0] - diff,\n                        null,\n                        null\n                    ];\n                return avg;\n            };\n            PivotPointsIndicator.prototype.camarillaPlacement = function (values) {\n                var diff = values[1] - values[2],\n                    avg = [\n                        values[3] + diff * 1.5,\n                        values[3] + diff * 1.25,\n                        values[3] + diff * 1.1666,\n                        values[3] + diff * 1.0833,\n                        values[0],\n                        values[3] - diff * 1.0833,\n                        values[3] - diff * 1.1666,\n                        values[3] - diff * 1.25,\n                        values[3] - diff * 1.5\n                    ];\n                return avg;\n            };\n            PivotPointsIndicator.prototype.fibonacciPlacement = function (values) {\n                var diff = values[1] - values[2],\n                    avg = [\n                        null,\n                        values[0] + diff,\n                        values[0] + diff * 0.618,\n                        values[0] + diff * 0.382,\n                        values[0],\n                        values[0] - diff * 0.382,\n                        values[0] - diff * 0.618,\n                        values[0] - diff,\n                        null\n                    ];\n                return avg;\n            };\n            /**\n             * Pivot points indicator. This series requires the `linkedTo` option to be\n             * set and should be loaded after `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/pivot-points\n             *         Pivot points\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/pivotpoints\n             * @optionparent plotOptions.pivotpoints\n             */\n            PivotPointsIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    period: 28,\n                    /**\n                     * Algorithm used to calculate ressistance and support lines based\n                     * on pivot points. Implemented algorithms: `'standard'`,\n                     * `'fibonacci'` and `'camarilla'`\n                     */\n                    algorithm: 'standard'\n                },\n                marker: {\n                    enabled: false\n                },\n                enableMouseTracking: false,\n                dataLabels: {\n                    enabled: true,\n                    format: '{point.pivotLine}'\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return PivotPointsIndicator;\n        }(SMAIndicator));\n        extend(PivotPointsIndicator.prototype, {\n            nameBase: 'Pivot Points',\n            pointArrayMap: ['R4', 'R3', 'R2', 'R1', 'P', 'S1', 'S2', 'S3', 'S4'],\n            pointValKey: 'P',\n            pointClass: PivotPointsPoint\n        });\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        SeriesRegistry.registerSeriesType('pivotpoints', PivotPointsIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A pivot points indicator. If the [type](#series.pivotpoints.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.pivotpoints\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/pivotpoints\n         * @apioption series.pivotpoints\n         */\n        ''; // to include the above in the js output'\n\n        return PivotPointsIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/PPO/PPOIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var EMAIndicator = SeriesRegistry.seriesTypes.ema;\n        var correctFloat = U.correctFloat,\n            extend = U.extend,\n            merge = U.merge,\n            error = U.error;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The PPO series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ppo\n         *\n         * @augments Highcharts.Series\n         */\n        var PPOIndicator = /** @class */ (function (_super) {\n                __extends(PPOIndicator, _super);\n            function PPOIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                *\n                *   Properties\n                *\n                * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            PPOIndicator.prototype.getValues = function (series, params) {\n                var periods = params.periods,\n                    index = params.index, \n                    // 0- date, 1- Percentage Price Oscillator\n                    PPO = [],\n                    xData = [],\n                    yData = [],\n                    periodsOffset, \n                    // Shorter Period EMA\n                    SPE, \n                    // Longer Period EMA\n                    LPE,\n                    oscillator,\n                    i;\n                // Check if periods are correct\n                if (periods.length !== 2 || periods[1] <= periods[0]) {\n                    error('Error: \"PPO requires two periods. Notice, first period ' +\n                        'should be lower than the second one.\"');\n                    return;\n                }\n                SPE = EMAIndicator.prototype.getValues.call(this, series, {\n                    index: index,\n                    period: periods[0]\n                });\n                LPE = EMAIndicator.prototype.getValues.call(this, series, {\n                    index: index,\n                    period: periods[1]\n                });\n                // Check if ema is calculated properly, if not skip\n                if (!SPE || !LPE) {\n                    return;\n                }\n                periodsOffset = periods[1] - periods[0];\n                for (i = 0; i < LPE.yData.length; i++) {\n                    oscillator = correctFloat((SPE.yData[i + periodsOffset] -\n                        LPE.yData[i]) /\n                        LPE.yData[i] *\n                        100);\n                    PPO.push([LPE.xData[i], oscillator]);\n                    xData.push(LPE.xData[i]);\n                    yData.push(oscillator);\n                }\n                return {\n                    values: PPO,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Percentage Price Oscillator. This series requires the\n             * `linkedTo` option to be set and should be loaded after the\n             * `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/ppo\n             *         Percentage Price Oscillator\n             *\n             * @extends      plotOptions.ema\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n             *               pointInterval, pointIntervalUnit, pointPlacement,\n             *               pointRange, pointStart, showInNavigator, stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/ppo\n             * @optionparent plotOptions.ppo\n             */\n            PPOIndicator.defaultOptions = merge(EMAIndicator.defaultOptions, {\n                /**\n                 * Paramters used in calculation of Percentage Price Oscillator series\n                 * points.\n                 *\n                 * @excluding period\n                 */\n                params: {\n                    period: void 0,\n                    /**\n                     * Periods for Percentage Price Oscillator calculations.\n                     *\n                     * @type    {Array<number>}\n                     * @default [12, 26]\n                     */\n                    periods: [12, 26]\n                }\n            });\n            return PPOIndicator;\n        }(EMAIndicator));\n        extend(PPOIndicator.prototype, {\n            nameBase: 'PPO',\n            nameComponents: ['periods']\n        });\n        SeriesRegistry.registerSeriesType('ppo', PPOIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `Percentage Price Oscillator` series. If the [type](#series.ppo.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ppo\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/ppo\n         * @apioption series.ppo\n         */\n        ''; // to include the above in the js output\n\n        return PPOIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/ArrayUtilities.js', [], function () {\n        /**\n         *\n         *  (c) 2010-2021 Pawel Fus & Daniel Studencki\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get extremes of array filled by OHLC data.\n         *\n         * @private\n         *\n         * @param {Array<Array<number>>} arr\n         * Array of OHLC points (arrays).\n         *\n         * @param {number} minIndex\n         * Index of \"low\" value in point array.\n         *\n         * @param {number} maxIndex\n         * Index of \"high\" value in point array.\n         *\n         * @return {Array<number,number>}\n         * Returns array with min and max value.\n         */\n        function getArrayExtremes(arr, minIndex, maxIndex) {\n            return arr.reduce(function (prev, target) { return [\n                Math.min(prev[0], target[minIndex]),\n                Math.max(prev[1], target[maxIndex])\n            ]; }, [Number.MAX_VALUE, -Number.MAX_VALUE]);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var ArrayUtilities = {\n                getArrayExtremes: getArrayExtremes\n            };\n\n        return ArrayUtilities;\n    });\n    _registerModule(_modules, 'Stock/Indicators/PC/PCIndicator.js', [_modules['Stock/Indicators/ArrayUtilities.js'], _modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Color/Palettes.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (AU, MultipleLinesComposition, Palettes, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var merge = U.merge,\n            extend = U.extend;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Price Channel series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.pc\n         *\n         * @augments Highcharts.Series\n         */\n        var PCIndicator = /** @class */ (function (_super) {\n                __extends(PCIndicator, _super);\n            function PCIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                *\n                *  Properties\n                *\n                * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            PCIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0, \n                    // 0- date, 1-top line, 2-middle line, 3-bottom line\n                    PC = [], \n                    // middle line, top line and bottom line\n                    ML,\n                    TL,\n                    BL,\n                    date,\n                    low = 2,\n                    high = 1,\n                    xData = [],\n                    yData = [],\n                    slicedY,\n                    extremes,\n                    i;\n                if (yValLen < period) {\n                    return;\n                }\n                for (i = period; i <= yValLen; i++) {\n                    date = xVal[i - 1];\n                    slicedY = yVal.slice(i - period, i);\n                    extremes = AU.getArrayExtremes(slicedY, low, high);\n                    TL = extremes[1];\n                    BL = extremes[0];\n                    ML = (TL + BL) / 2;\n                    PC.push([date, TL, ML, BL]);\n                    xData.push(date);\n                    yData.push([TL, ML, BL]);\n                }\n                return {\n                    values: PC,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Price channel (PC). This series requires the `linkedTo` option to be\n             * set and should be loaded after the `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/price-channel\n             *         Price Channel\n             *\n             * @extends      plotOptions.sma\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/price-channel\n             * @optionparent plotOptions.pc\n             */\n            PCIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Option for fill color between lines in Price channel Indicator.\n                 *\n                 * @sample {highstock} stock/indicators/indicator-area-fill\n                 *      background fill between lines\n                 *\n                 * @type {Highcharts.Color}\n                 * @apioption plotOptions.pc.fillColor\n                 *\n                 */\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    period: 20\n                },\n                lineWidth: 1,\n                topLine: {\n                    styles: {\n                        /**\n                         * Color of the top line. If not set, it's inherited from\n                         * [plotOptions.pc.color](#plotOptions.pc.color).\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: Palettes.colors[2],\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1\n                    }\n                },\n                bottomLine: {\n                    styles: {\n                        /**\n                         * Color of the bottom line. If not set, it's inherited from\n                         * [plotOptions.pc.color](#plotOptions.pc.color).\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: Palettes.colors[8],\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1\n                    }\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return PCIndicator;\n        }(SMAIndicator));\n        extend(PCIndicator.prototype, {\n            areaLinesNames: ['top', 'bottom'],\n            nameBase: 'Price Channel',\n            nameComponents: ['period'],\n            linesApiNames: ['topLine', 'bottomLine'],\n            pointArrayMap: ['top', 'middle', 'bottom'],\n            pointValKey: 'middle'\n        });\n        MultipleLinesComposition.compose(PCIndicator);\n        SeriesRegistry.registerSeriesType('pc', PCIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A Price channel indicator. If the [type](#series.pc.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends      series,plotOptions.pc\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *               joinBy, keys, navigatorOptions, pointInterval,\n         *               pointIntervalUnit, pointPlacement, pointRange, pointStart,\n         *               showInNavigator, stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/price-channel\n         * @apioption    series.pc\n         */\n        ''; // to include the above in the js output\n\n        return PCIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/PriceEnvelopes/PriceEnvelopesIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge;\n        /**\n         * The Price Envelopes series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.priceenvelopes\n         *\n         * @augments Highcharts.Series\n         */\n        var PriceEnvelopesIndicator = /** @class */ (function (_super) {\n                __extends(PriceEnvelopesIndicator, _super);\n            function PriceEnvelopesIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            PriceEnvelopesIndicator.prototype.init = function () {\n                SeriesRegistry.seriesTypes.sma.prototype.init.apply(this, arguments);\n                // Set default color for lines:\n                this.options = merge({\n                    topLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    },\n                    bottomLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    }\n                }, this.options);\n            };\n            PriceEnvelopesIndicator.prototype.toYData = function (point) {\n                return [point.top, point.middle, point.bottom];\n            };\n            PriceEnvelopesIndicator.prototype.translate = function () {\n                var indicator = this, translatedEnvelopes = ['plotTop', 'plotMiddle', 'plotBottom'];\n                SeriesRegistry.seriesTypes.sma.prototype.translate.apply(indicator);\n                indicator.points.forEach(function (point) {\n                    [point.top, point.middle, point.bottom].forEach(function (value, i) {\n                        if (value !== null) {\n                            point[translatedEnvelopes[i]] =\n                                indicator.yAxis.toPixels(value, true);\n                        }\n                    });\n                });\n            };\n            PriceEnvelopesIndicator.prototype.drawGraph = function () {\n                var indicator = this,\n                    middleLinePoints = indicator.points,\n                    pointsLength = middleLinePoints.length,\n                    middleLineOptions = (indicator.options),\n                    middleLinePath = indicator.graph,\n                    gappedExtend = {\n                        options: {\n                            gapSize: middleLineOptions.gapSize\n                        }\n                    },\n                    deviations = [[],\n                    []], // top and bottom point place holders\n                    point;\n                // Generate points for top and bottom lines:\n                while (pointsLength--) {\n                    point = middleLinePoints[pointsLength];\n                    deviations[0].push({\n                        plotX: point.plotX,\n                        plotY: point.plotTop,\n                        isNull: point.isNull\n                    });\n                    deviations[1].push({\n                        plotX: point.plotX,\n                        plotY: point.plotBottom,\n                        isNull: point.isNull\n                    });\n                }\n                // Modify options and generate lines:\n                ['topLine', 'bottomLine'].forEach(function (lineName, i) {\n                    indicator.points = deviations[i];\n                    indicator.options = merge(middleLineOptions[lineName].styles, gappedExtend);\n                    indicator.graph = indicator['graph' + lineName];\n                    SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(indicator);\n                    // Now save lines:\n                    indicator['graph' + lineName] = indicator.graph;\n                });\n                // Restore options and draw a middle line:\n                indicator.points = middleLinePoints;\n                indicator.options = middleLineOptions;\n                indicator.graph = middleLinePath;\n                SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(indicator);\n            };\n            PriceEnvelopesIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    topPercent = params.topBand,\n                    botPercent = params.bottomBand,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0, \n                    // 0- date, 1-top line, 2-middle line, 3-bottom line\n                    PE = [], \n                    // middle line, top line and bottom line\n                    ML,\n                    TL,\n                    BL,\n                    date,\n                    xData = [],\n                    yData = [],\n                    slicedX,\n                    slicedY,\n                    point,\n                    i;\n                // Price envelopes requires close value\n                if (xVal.length < period ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                for (i = period; i <= yValLen; i++) {\n                    slicedX = xVal.slice(i - period, i);\n                    slicedY = yVal.slice(i - period, i);\n                    point = SeriesRegistry.seriesTypes.sma.prototype.getValues.call(this, {\n                        xData: slicedX,\n                        yData: slicedY\n                    }, params);\n                    date = point.xData[0];\n                    ML = point.yData[0];\n                    TL = ML * (1 + topPercent);\n                    BL = ML * (1 - botPercent);\n                    PE.push([date, TL, ML, BL]);\n                    xData.push(date);\n                    yData.push([TL, ML, BL]);\n                }\n                return {\n                    values: PE,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Price envelopes indicator based on [SMA](#plotOptions.sma) calculations.\n             * This series requires the `linkedTo` option to be set and should be loaded\n             * after the `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/price-envelopes\n             *         Price envelopes\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/price-envelopes\n             * @optionparent plotOptions.priceenvelopes\n             */\n            PriceEnvelopesIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                marker: {\n                    enabled: false\n                },\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b><br/>Top: {point.top}<br/>Middle: {point.middle}<br/>Bottom: {point.bottom}<br/>'\n                },\n                params: {\n                    period: 20,\n                    /**\n                     * Percentage above the moving average that should be displayed.\n                     * 0.1 means 110%. Relative to the calculated value.\n                     */\n                    topBand: 0.1,\n                    /**\n                     * Percentage below the moving average that should be displayed.\n                     * 0.1 means 90%. Relative to the calculated value.\n                     */\n                    bottomBand: 0.1\n                },\n                /**\n                 * Bottom line options.\n                 */\n                bottomLine: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line. If not set, it's inherited from\n                         * [plotOptions.priceenvelopes.color](\n                         * #plotOptions.priceenvelopes.color).\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * Top line options.\n                 *\n                 * @extends plotOptions.priceenvelopes.bottomLine\n                 */\n                topLine: {\n                    styles: {\n                        lineWidth: 1\n                    }\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return PriceEnvelopesIndicator;\n        }(SMAIndicator));\n        extend(PriceEnvelopesIndicator.prototype, {\n            nameComponents: ['period', 'topBand', 'bottomBand'],\n            nameBase: 'Price envelopes',\n            pointArrayMap: ['top', 'middle', 'bottom'],\n            parallelArrays: ['x', 'y', 'top', 'bottom'],\n            pointValKey: 'middle'\n        });\n        SeriesRegistry.registerSeriesType('priceenvelopes', PriceEnvelopesIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A price envelopes indicator. If the [type](#series.priceenvelopes.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.priceenvelopes\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/price-envelopes\n         * @apioption series.priceenvelopes\n         */\n        ''; // to include the above in the js output\n\n        return PriceEnvelopesIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/PSAR/PSARIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  Parabolic SAR indicator for Highcharts Stock\n         *\n         *  (c) 2010-2021 Grzegorz Blachliński\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var merge = U.merge,\n            extend = U.extend;\n        /* eslint-disable require-jsdoc */\n        // Utils:\n        function toFixed(a, n) {\n            return parseFloat(a.toFixed(n));\n        }\n        function calculateDirection(previousDirection, low, high, PSAR) {\n            if ((previousDirection === 1 && low > PSAR) ||\n                (previousDirection === -1 && high > PSAR)) {\n                return 1;\n            }\n            return -1;\n        }\n        /* *\n         * Method for calculating acceleration factor\n         * dir - direction\n         * pDir - previous Direction\n         * eP - extreme point\n         * pEP - previous extreme point\n         * inc - increment for acceleration factor\n         * maxAcc - maximum acceleration factor\n         * initAcc - initial acceleration factor\n         */\n        function getAccelerationFactor(dir, pDir, eP, pEP, pAcc, inc, maxAcc, initAcc) {\n            if (dir === pDir) {\n                if (dir === 1 && (eP > pEP)) {\n                    return (pAcc === maxAcc) ? maxAcc : toFixed(pAcc + inc, 2);\n                }\n                if (dir === -1 && (eP < pEP)) {\n                    return (pAcc === maxAcc) ? maxAcc : toFixed(pAcc + inc, 2);\n                }\n                return pAcc;\n            }\n            return initAcc;\n        }\n        function getExtremePoint(high, low, previousDirection, previousExtremePoint) {\n            if (previousDirection === 1) {\n                return (high > previousExtremePoint) ? high : previousExtremePoint;\n            }\n            return (low < previousExtremePoint) ? low : previousExtremePoint;\n        }\n        function getEPMinusPSAR(EP, PSAR) {\n            return EP - PSAR;\n        }\n        function getAccelerationFactorMultiply(accelerationFactor, EPMinusSAR) {\n            return accelerationFactor * EPMinusSAR;\n        }\n        /* *\n         * Method for calculating PSAR\n         * pdir - previous direction\n         * sDir - second previous Direction\n         * PSAR - previous PSAR\n         * pACCMultiply - previous acceleration factor multiply\n         * sLow - second previous low\n         * pLow - previous low\n         * sHigh - second previous high\n         * pHigh - previous high\n         * pEP - previous extreme point\n         */\n        function getPSAR(pdir, sDir, PSAR, pACCMulti, sLow, pLow, pHigh, sHigh, pEP) {\n            if (pdir === sDir) {\n                if (pdir === 1) {\n                    return (PSAR + pACCMulti < Math.min(sLow, pLow)) ?\n                        PSAR + pACCMulti :\n                        Math.min(sLow, pLow);\n                }\n                return (PSAR + pACCMulti > Math.max(sHigh, pHigh)) ?\n                    PSAR + pACCMulti :\n                    Math.max(sHigh, pHigh);\n            }\n            return pEP;\n        }\n        /* eslint-enable require-jsdoc */\n        /* *\n         *\n         * Class\n         *\n         * */\n        /**\n         * The Parabolic SAR series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.psar\n         *\n         * @augments Highcharts.Series\n         */\n        var PSARIndicator = /** @class */ (function (_super) {\n                __extends(PSARIndicator, _super);\n            function PSARIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            PSARIndicator.prototype.getValues = function (series, params) {\n                var xVal = series.xData,\n                    yVal = series.yData, \n                    // Extreme point is the lowest low for falling and highest high\n                    // for rising psar - and we are starting with falling\n                    extremePoint = yVal[0][1],\n                    accelerationFactor = params.initialAccelerationFactor,\n                    maxAccelerationFactor = params.maxAccelerationFactor,\n                    increment = params.increment, \n                    // Set initial acc factor (for every new trend!)\n                    initialAccelerationFactor = params.initialAccelerationFactor,\n                    PSAR = yVal[0][2],\n                    decimals = params.decimals,\n                    index = params.index,\n                    PSARArr = [],\n                    xData = [],\n                    yData = [],\n                    previousDirection = 1,\n                    direction,\n                    EPMinusPSAR,\n                    accelerationFactorMultiply,\n                    newDirection,\n                    prevLow,\n                    prevPrevLow,\n                    prevHigh,\n                    prevPrevHigh,\n                    newExtremePoint,\n                    high,\n                    low,\n                    ind;\n                if (index >= yVal.length) {\n                    return;\n                }\n                for (ind = 0; ind < index; ind++) {\n                    extremePoint = Math.max(yVal[ind][1], extremePoint);\n                    PSAR = Math.min(yVal[ind][2], toFixed(PSAR, decimals));\n                }\n                direction = (yVal[ind][1] > PSAR) ? 1 : -1;\n                EPMinusPSAR = getEPMinusPSAR(extremePoint, PSAR);\n                accelerationFactor = params.initialAccelerationFactor;\n                accelerationFactorMultiply = getAccelerationFactorMultiply(accelerationFactor, EPMinusPSAR);\n                PSARArr.push([xVal[index], PSAR]);\n                xData.push(xVal[index]);\n                yData.push(toFixed(PSAR, decimals));\n                for (ind = index + 1; ind < yVal.length; ind++) {\n                    prevLow = yVal[ind - 1][2];\n                    prevPrevLow = yVal[ind - 2][2];\n                    prevHigh = yVal[ind - 1][1];\n                    prevPrevHigh = yVal[ind - 2][1];\n                    high = yVal[ind][1];\n                    low = yVal[ind][2];\n                    // Null points break PSAR\n                    if (prevPrevLow !== null &&\n                        prevPrevHigh !== null &&\n                        prevLow !== null &&\n                        prevHigh !== null &&\n                        high !== null &&\n                        low !== null) {\n                        PSAR = getPSAR(direction, previousDirection, PSAR, accelerationFactorMultiply, prevPrevLow, prevLow, prevHigh, prevPrevHigh, extremePoint);\n                        newExtremePoint = getExtremePoint(high, low, direction, extremePoint);\n                        newDirection = calculateDirection(previousDirection, low, high, PSAR);\n                        accelerationFactor = getAccelerationFactor(newDirection, direction, newExtremePoint, extremePoint, accelerationFactor, increment, maxAccelerationFactor, initialAccelerationFactor);\n                        EPMinusPSAR = getEPMinusPSAR(newExtremePoint, PSAR);\n                        accelerationFactorMultiply = getAccelerationFactorMultiply(accelerationFactor, EPMinusPSAR);\n                        PSARArr.push([xVal[ind], toFixed(PSAR, decimals)]);\n                        xData.push(xVal[ind]);\n                        yData.push(toFixed(PSAR, decimals));\n                        previousDirection = direction;\n                        direction = newDirection;\n                        extremePoint = newExtremePoint;\n                    }\n                }\n                return {\n                    values: PSARArr,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Parabolic SAR. This series requires `linkedTo`\n             * option to be set and should be loaded\n             * after `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/psar\n             *         Parabolic SAR Indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/psar\n             * @optionparent plotOptions.psar\n             */\n            PSARIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                lineWidth: 0,\n                marker: {\n                    enabled: true\n                },\n                states: {\n                    hover: {\n                        lineWidthPlus: 0\n                    }\n                },\n                /**\n                 * @excluding period\n                 */\n                params: {\n                    period: void 0,\n                    /**\n                     * The initial value for acceleration factor.\n                     * Acceleration factor is starting with this value\n                     * and increases by specified increment each time\n                     * the extreme point makes a new high.\n                     * AF can reach a maximum of maxAccelerationFactor,\n                     * no matter how long the uptrend extends.\n                     */\n                    initialAccelerationFactor: 0.02,\n                    /**\n                     * The Maximum value for acceleration factor.\n                     * AF can reach a maximum of maxAccelerationFactor,\n                     * no matter how long the uptrend extends.\n                     */\n                    maxAccelerationFactor: 0.2,\n                    /**\n                     * Acceleration factor increases by increment each time\n                     * the extreme point makes a new high.\n                     *\n                     * @since 6.0.0\n                     */\n                    increment: 0.02,\n                    /**\n                     * Index from which PSAR is starting calculation\n                     *\n                     * @since 6.0.0\n                     */\n                    index: 2,\n                    /**\n                     * Number of maximum decimals that are used in PSAR calculations.\n                     *\n                     * @since 6.0.0\n                     */\n                    decimals: 4\n                }\n            });\n            return PSARIndicator;\n        }(SMAIndicator));\n        extend(PSARIndicator.prototype, {\n            nameComponents: void 0\n        });\n        SeriesRegistry.registerSeriesType('psar', PSARIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `PSAR` series. If the [type](#series.psar.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.psar\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/psar\n         * @apioption series.psar\n         */\n        ''; // to include the above in the js output\n\n        return PSARIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/ROC/ROCIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Kacper Madej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var isArray = U.isArray,\n            merge = U.merge,\n            extend = U.extend;\n        /* eslint-disable require-jsdoc */\n        // Utils:\n        function populateAverage(xVal, yVal, i, period, index) {\n            /* Calculated as:\n\n               (Closing Price [today] - Closing Price [n days ago]) /\n                Closing Price [n days ago] * 100\n\n               Return y as null when avoiding division by zero */\n            var nDaysAgoY,\n                rocY;\n            if (index < 0) {\n                // y data given as an array of values\n                nDaysAgoY = yVal[i - period];\n                rocY = nDaysAgoY ?\n                    (yVal[i] - nDaysAgoY) / nDaysAgoY * 100 :\n                    null;\n            }\n            else {\n                // y data given as an array of arrays and the index should be used\n                nDaysAgoY = yVal[i - period][index];\n                rocY = nDaysAgoY ?\n                    (yVal[i][index] - nDaysAgoY) / nDaysAgoY * 100 :\n                    null;\n            }\n            return [xVal[i], rocY];\n        }\n        /* eslint-enable require-jsdoc */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The ROC series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.roc\n         *\n         * @augments Highcharts.Series\n         */\n        var ROCIndicator = /** @class */ (function (_super) {\n                __extends(ROCIndicator, _super);\n            function ROCIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            ROCIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    ROC = [],\n                    xData = [],\n                    yData = [],\n                    i,\n                    index = -1,\n                    ROCPoint;\n                // Period is used as a number of time periods ago, so we need more\n                // (at least 1 more) data than the period value\n                if (xVal.length <= period) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    index = params.index;\n                }\n                // i = period <-- skip first N-points\n                // Calculate value one-by-one for each period in visible data\n                for (i = period; i < yValLen; i++) {\n                    ROCPoint = populateAverage(xVal, yVal, i, period, index);\n                    ROC.push(ROCPoint);\n                    xData.push(ROCPoint[0]);\n                    yData.push(ROCPoint[1]);\n                }\n                return {\n                    values: ROC,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Rate of change indicator (ROC). The indicator value for each point\n             * is defined as:\n             *\n             * `(C - Cn) / Cn * 100`\n             *\n             * where: `C` is the close value of the point of the same x in the\n             * linked series and `Cn` is the close value of the point `n` periods\n             * ago. `n` is set through [period](#plotOptions.roc.params.period).\n             *\n             * This series requires `linkedTo` option to be set.\n             *\n             * @sample stock/indicators/roc\n             *         Rate of change indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/roc\n             * @optionparent plotOptions.roc\n             */\n            ROCIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    index: 3,\n                    period: 9\n                }\n            });\n            return ROCIndicator;\n        }(SMAIndicator));\n        extend(ROCIndicator.prototype, {\n            nameBase: 'Rate of Change'\n        });\n        SeriesRegistry.registerSeriesType('roc', ROCIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `ROC` series. If the [type](#series.wma.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * Rate of change indicator (ROC). The indicator value for each point\n         * is defined as:\n         *\n         * `(C - Cn) / Cn * 100`\n         *\n         * where: `C` is the close value of the point of the same x in the\n         * linked series and `Cn` is the close value of the point `n` periods\n         * ago. `n` is set through [period](#series.roc.params.period).\n         *\n         * This series requires `linkedTo` option to be set.\n         *\n         * @extends   series,plotOptions.roc\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/roc\n         * @apioption series.roc\n         */\n        ''; // to include the above in the js output\n\n        return ROCIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/RSI/RSIIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var isNumber = U.isNumber,\n            merge = U.merge;\n        /* eslint-disable require-jsdoc */\n        // Utils:\n        function toFixed(a, n) {\n            return parseFloat(a.toFixed(n));\n        }\n        /* eslint-enable require-jsdoc */\n        /**\n         * The RSI series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.rsi\n         *\n         * @augments Highcharts.Series\n         */\n        var RSIIndicator = /** @class */ (function (_super) {\n                __extends(RSIIndicator, _super);\n            function RSIIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            RSIIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    decimals = params.decimals, \n                    // RSI starts calculations from the second point\n                    // Cause we need to calculate change between two points\n                    range = 1,\n                    RSI = [],\n                    xData = [],\n                    yData = [],\n                    index = params.index,\n                    gain = 0,\n                    loss = 0,\n                    RSIPoint,\n                    change,\n                    avgGain,\n                    avgLoss,\n                    i,\n                    values;\n                if ((xVal.length < period)) {\n                    return;\n                }\n                if (isNumber(yVal[0])) {\n                    values = yVal;\n                }\n                else {\n                    // in case of the situation, where the series type has data length\n                    // longer then 4 (HLC, range), this ensures that we are not trying\n                    // to reach the index out of bounds\n                    index = Math.min(index, yVal[0].length - 1);\n                    values = yVal\n                        .map(function (value) { return value[index]; });\n                }\n                // Calculate changes for first N points\n                while (range < period) {\n                    change = toFixed(values[range] - values[range - 1], decimals);\n                    if (change > 0) {\n                        gain += change;\n                    }\n                    else {\n                        loss += Math.abs(change);\n                    }\n                    range++;\n                }\n                // Average for first n-1 points:\n                avgGain = toFixed(gain / (period - 1), decimals);\n                avgLoss = toFixed(loss / (period - 1), decimals);\n                for (i = range; i < yValLen; i++) {\n                    change = toFixed(values[i] - values[i - 1], decimals);\n                    if (change > 0) {\n                        gain = change;\n                        loss = 0;\n                    }\n                    else {\n                        gain = 0;\n                        loss = Math.abs(change);\n                    }\n                    // Calculate smoothed averages, RS, RSI values:\n                    avgGain = toFixed((avgGain * (period - 1) + gain) / period, decimals);\n                    avgLoss = toFixed((avgLoss * (period - 1) + loss) / period, decimals);\n                    // If average-loss is equal zero, then by definition RSI is set\n                    // to 100:\n                    if (avgLoss === 0) {\n                        RSIPoint = 100;\n                        // If average-gain is equal zero, then by definition RSI is set\n                        // to 0:\n                    }\n                    else if (avgGain === 0) {\n                        RSIPoint = 0;\n                    }\n                    else {\n                        RSIPoint = toFixed(100 - (100 / (1 + (avgGain / avgLoss))), decimals);\n                    }\n                    RSI.push([xVal[i], RSIPoint]);\n                    xData.push(xVal[i]);\n                    yData.push(RSIPoint);\n                }\n                return {\n                    values: RSI,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Relative strength index (RSI) technical indicator. This series\n             * requires the `linkedTo` option to be set and should be loaded after\n             * the `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/rsi\n             *         RSI indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/rsi\n             * @optionparent plotOptions.rsi\n             */\n            RSIIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    decimals: 4,\n                    index: 3\n                }\n            });\n            return RSIIndicator;\n        }(SMAIndicator));\n        SeriesRegistry.registerSeriesType('rsi', RSIIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `RSI` series. If the [type](#series.rsi.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.rsi\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/rsi\n         * @apioption series.rsi\n         */\n        ''; // to include the above in the js output\n\n        return RSIIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Stochastic/StochasticIndicator.js', [_modules['Stock/Indicators/ArrayUtilities.js'], _modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (AU, MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Stochastic series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.stochastic\n         *\n         * @augments Highcharts.Series\n         */\n        var StochasticIndicator = /** @class */ (function (_super) {\n                __extends(StochasticIndicator, _super);\n            function StochasticIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            StochasticIndicator.prototype.init = function () {\n                SeriesRegistry.seriesTypes.sma.prototype.init.apply(this, arguments);\n                // Set default color for lines:\n                this.options = merge({\n                    smoothedLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    }\n                }, this.options);\n            };\n            StochasticIndicator.prototype.getValues = function (series, params) {\n                var periodK = params.periods[0],\n                    periodD = params.periods[1],\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0, \n                    // 0- date, 1-%K, 2-%D\n                    SO = [],\n                    xData = [],\n                    yData = [],\n                    slicedY,\n                    close = 3,\n                    low = 2,\n                    high = 1,\n                    CL,\n                    HL,\n                    LL,\n                    K,\n                    D = null,\n                    points,\n                    extremes,\n                    i;\n                // Stochastic requires close value\n                if (yValLen < periodK ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                // For a N-period, we start from N-1 point, to calculate Nth point\n                // That is why we later need to comprehend slice() elements list\n                // with (+1)\n                for (i = periodK - 1; i < yValLen; i++) {\n                    slicedY = yVal.slice(i - periodK + 1, i + 1);\n                    // Calculate %K\n                    extremes = AU.getArrayExtremes(slicedY, low, high);\n                    LL = extremes[0]; // Lowest low in %K periods\n                    CL = yVal[i][close] - LL;\n                    HL = extremes[1] - LL;\n                    K = CL / HL * 100;\n                    xData.push(xVal[i]);\n                    yData.push([K, null]);\n                    // Calculate smoothed %D, which is SMA of %K\n                    if (i >= (periodK - 1) + (periodD - 1)) {\n                        points = SeriesRegistry.seriesTypes.sma.prototype.getValues\n                            .call(this, {\n                            xData: xData.slice(-periodD),\n                            yData: yData.slice(-periodD)\n                        }, {\n                            period: periodD\n                        });\n                        D = points.yData[0];\n                    }\n                    SO.push([xVal[i], K, D]);\n                    yData[yData.length - 1][1] = D;\n                }\n                return {\n                    values: SO,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Stochastic oscillator. This series requires the `linkedTo` option to be\n             * set and should be loaded after the `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/stochastic\n             *         Stochastic oscillator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n             *               pointInterval, pointIntervalUnit, pointPlacement,\n             *               pointRange, pointStart, showInNavigator, stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/stochastic\n             * @optionparent plotOptions.stochastic\n             */\n            StochasticIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index, period\n                 */\n                params: {\n                    // Index and period are unchangeable, do not inherit (#15362)\n                    index: void 0,\n                    period: void 0,\n                    /**\n                     * Periods for Stochastic oscillator: [%K, %D].\n                     *\n                     * @type    {Array<number,number>}\n                     * @default [14, 3]\n                     */\n                    periods: [14, 3]\n                },\n                marker: {\n                    enabled: false\n                },\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b><br/>%K: {point.y}<br/>%D: {point.smoothed}<br/>'\n                },\n                /**\n                 * Smoothed line options.\n                 */\n                smoothedLine: {\n                    /**\n                     * Styles for a smoothed line.\n                     */\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line. If not set, it's inherited from\n                         * [plotOptions.stochastic.color\n                         * ](#plotOptions.stochastic.color).\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return StochasticIndicator;\n        }(SMAIndicator));\n        extend(StochasticIndicator.prototype, {\n            areaLinesNames: [],\n            nameComponents: ['periods'],\n            nameBase: 'Stochastic',\n            pointArrayMap: ['y', 'smoothed'],\n            parallelArrays: ['x', 'y', 'smoothed'],\n            pointValKey: 'y',\n            linesApiNames: ['smoothedLine']\n        });\n        MultipleLinesComposition.compose(StochasticIndicator);\n        SeriesRegistry.registerSeriesType('stochastic', StochasticIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A Stochastic indicator. If the [type](#series.stochastic.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.stochastic\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis,  dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/stochastic\n         * @apioption series.stochastic\n         */\n        ''; // to include the above in the js output\n\n        return StochasticIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/SlowStochastic/SlowStochasticIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var StochasticIndicator = SeriesRegistry.seriesTypes.stochastic;\n        var seriesTypes = SeriesRegistry.seriesTypes;\n        var extend = U.extend,\n            merge = U.merge;\n        /**\n         * The Slow Stochastic series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.slowstochastic\n         *\n         * @augments Highcharts.Series\n         */\n        var SlowStochasticIndicator = /** @class */ (function (_super) {\n                __extends(SlowStochasticIndicator, _super);\n            function SlowStochasticIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            SlowStochasticIndicator.prototype.getValues = function (series, params) {\n                var periods = params.periods,\n                    fastValues = seriesTypes.stochastic.prototype.getValues.call(this,\n                    series,\n                    params),\n                    slowValues = {\n                        values: [],\n                        xData: [],\n                        yData: []\n                    };\n                var i = 0;\n                if (!fastValues) {\n                    return;\n                }\n                slowValues.xData = fastValues.xData.slice(periods[1] - 1);\n                var fastYData = fastValues.yData.slice(periods[1] - 1);\n                // Get SMA(%D)\n                var smoothedValues = seriesTypes.sma.prototype.getValues.call(this, {\n                        xData: slowValues.xData,\n                        yData: fastYData\n                    }, {\n                        index: 1,\n                        period: periods[2]\n                    });\n                if (!smoothedValues) {\n                    return;\n                }\n                var xDataLen = slowValues.xData.length;\n                // Format data\n                for (; i < xDataLen; i++) {\n                    slowValues.yData[i] = [\n                        fastYData[i][1],\n                        smoothedValues.yData[i - periods[2] + 1] || null\n                    ];\n                    slowValues.values[i] = [\n                        slowValues.xData[i],\n                        fastYData[i][1],\n                        smoothedValues.yData[i - periods[2] + 1] || null\n                    ];\n                }\n                return slowValues;\n            };\n            /**\n             * Slow Stochastic oscillator. This series requires the `linkedTo` option\n             * to be set and should be loaded after `stock/indicators/indicators.js`\n             * and `stock/indicators/stochastic.js` files.\n             *\n             * @sample stock/indicators/slow-stochastic\n             *         Slow Stochastic oscillator\n             *\n             * @extends      plotOptions.stochastic\n             * @since        8.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/stochastic\n             * @requires     stock/indicators/slowstochastic\n             * @optionparent plotOptions.slowstochastic\n             */\n            SlowStochasticIndicator.defaultOptions = merge(StochasticIndicator.defaultOptions, {\n                params: {\n                    /**\n                     * Periods for Slow Stochastic oscillator: [%K, %D, SMA(%D)].\n                     *\n                     * @type    {Array<number,number,number>}\n                     * @default [14, 3, 3]\n                     */\n                    periods: [14, 3, 3]\n                }\n            });\n            return SlowStochasticIndicator;\n        }(StochasticIndicator));\n        extend(SlowStochasticIndicator.prototype, {\n            nameBase: 'Slow Stochastic'\n        });\n        SeriesRegistry.registerSeriesType('slowstochastic', SlowStochasticIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A Slow Stochastic indicator. If the [type](#series.slowstochastic.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.slowstochastic\n         * @since     8.0.0\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/stochastic\n         * @requires  stock/indicators/slowstochastic\n         * @apioption series.slowstochastic\n         */\n        ''; // to include the above in the js output\n\n        return SlowStochasticIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Supertrend/SupertrendIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js'], _modules['Core/Chart/StockChart.js']], function (SeriesRegistry, U, StockChart) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var _a = SeriesRegistry.seriesTypes,\n            ATRIndicator = _a.atr,\n            SMAIndicator = _a.sma;\n        var addEvent = U.addEvent,\n            correctFloat = U.correctFloat,\n            isArray = U.isArray,\n            extend = U.extend,\n            merge = U.merge,\n            objectEach = U.objectEach;\n        /* eslint-disable require-jsdoc */\n        // Utils:\n        function createPointObj(mainSeries, index, close) {\n            return {\n                index: index,\n                close: mainSeries.yData[index][close],\n                x: mainSeries.xData[index]\n            };\n        }\n        /* eslint-enable require-jsdoc */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Supertrend series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.supertrend\n         *\n         * @augments Highcharts.Series\n         */\n        var SupertrendIndicator = /** @class */ (function (_super) {\n                __extends(SupertrendIndicator, _super);\n            function SupertrendIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.linkedParent = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            SupertrendIndicator.prototype.init = function () {\n                var options,\n                    parentOptions;\n                SMAIndicator.prototype.init.apply(this, arguments);\n                var indicator = this;\n                // Only after series are linked add some additional logic/properties.\n                var unbinder = addEvent(StockChart, 'afterLinkSeries',\n                    function () {\n                        // Protection for a case where the indicator is being updated,\n                        // for a brief moment the indicator is deleted.\n                        if (indicator.options) {\n                            var options_1 = indicator.options;\n                        parentOptions = indicator.linkedParent.options;\n                        // Indicator cropThreshold has to be equal linked series one\n                        // reduced by period due to points comparison in drawGraph\n                        // (#9787)\n                        options_1.cropThreshold = (parentOptions.cropThreshold -\n                            (options_1.params.period - 1));\n                    }\n                    unbinder();\n                }, {\n                    order: 1\n                });\n            };\n            SupertrendIndicator.prototype.drawGraph = function () {\n                var indicator = this,\n                    indicOptions = indicator.options, \n                    // Series that indicator is linked to\n                    mainSeries = indicator.linkedParent,\n                    mainLinePoints = (mainSeries ? mainSeries.points : []),\n                    indicPoints = indicator.points,\n                    indicPath = indicator.graph,\n                    indicPointsLen = indicPoints.length, \n                    // Points offset between lines\n                    tempOffset = mainLinePoints.length - indicPointsLen,\n                    offset = tempOffset > 0 ? tempOffset : 0, \n                    // @todo: fix when ichi-moku indicator is merged to master.\n                    gappedExtend = {\n                        options: {\n                            gapSize: indicOptions.gapSize\n                        }\n                    }, \n                    // Sorted supertrend points array\n                    groupedPoitns = {\n                        top: [],\n                        bottom: [],\n                        intersect: [] // Change trend line points\n                    }, \n                    // Options for trend lines\n                    supertrendLineOptions = {\n                        top: {\n                            styles: {\n                                lineWidth: indicOptions.lineWidth,\n                                lineColor: (indicOptions.fallingTrendColor ||\n                                    indicOptions.color),\n                                dashStyle: indicOptions.dashStyle\n                            }\n                        },\n                        bottom: {\n                            styles: {\n                                lineWidth: indicOptions.lineWidth,\n                                lineColor: (indicOptions.risingTrendColor ||\n                                    indicOptions.color),\n                                dashStyle: indicOptions.dashStyle\n                            }\n                        },\n                        intersect: indicOptions.changeTrendLine\n                    },\n                    close = 3, \n                    // Supertrend line point\n                    point, \n                    // Supertrend line next point (has smaller x pos than point)\n                    nextPoint, \n                    // Main series points\n                    mainPoint,\n                    nextMainPoint, \n                    // Used when supertrend and main points are shifted\n                    // relative to each other\n                    prevMainPoint,\n                    prevPrevMainPoint, \n                    // Used when particular point color is set\n                    pointColor, \n                    // Temporary points that fill groupedPoitns array\n                    newPoint,\n                    newNextPoint;\n                // Loop which sort supertrend points\n                while (indicPointsLen--) {\n                    point = indicPoints[indicPointsLen];\n                    nextPoint = indicPoints[indicPointsLen - 1];\n                    mainPoint = mainLinePoints[indicPointsLen - 1 + offset];\n                    nextMainPoint = mainLinePoints[indicPointsLen - 2 + offset];\n                    prevMainPoint = mainLinePoints[indicPointsLen + offset];\n                    prevPrevMainPoint = mainLinePoints[indicPointsLen + offset + 1];\n                    pointColor = point.options.color;\n                    newPoint = {\n                        x: point.x,\n                        plotX: point.plotX,\n                        plotY: point.plotY,\n                        isNull: false\n                    };\n                    // When mainPoint is the last one (left plot area edge)\n                    // but supertrend has additional one\n                    if (!nextMainPoint &&\n                        mainPoint && mainSeries.yData[mainPoint.index - 1]) {\n                        nextMainPoint = createPointObj(mainSeries, mainPoint.index - 1, close);\n                    }\n                    // When prevMainPoint is the last one (right plot area edge)\n                    // but supertrend has additional one (and points are shifted)\n                    if (!prevPrevMainPoint &&\n                        prevMainPoint && mainSeries.yData[prevMainPoint.index + 1]) {\n                        prevPrevMainPoint = createPointObj(mainSeries, prevMainPoint.index + 1, close);\n                    }\n                    // When points are shifted (right or left plot area edge)\n                    if (!mainPoint &&\n                        nextMainPoint && mainSeries.yData[nextMainPoint.index + 1]) {\n                        mainPoint = createPointObj(mainSeries, nextMainPoint.index + 1, close);\n                    }\n                    else if (!mainPoint &&\n                        prevMainPoint && mainSeries.yData[prevMainPoint.index - 1]) {\n                        mainPoint = createPointObj(mainSeries, prevMainPoint.index - 1, close);\n                    }\n                    // Check if points are shifted relative to each other\n                    if (point &&\n                        mainPoint &&\n                        prevMainPoint &&\n                        nextMainPoint &&\n                        point.x !== mainPoint.x) {\n                        if (point.x === prevMainPoint.x) {\n                            nextMainPoint = mainPoint;\n                            mainPoint = prevMainPoint;\n                        }\n                        else if (point.x === nextMainPoint.x) {\n                            mainPoint = nextMainPoint;\n                            nextMainPoint = {\n                                close: mainSeries.yData[mainPoint.index - 1][close],\n                                x: mainSeries.xData[mainPoint.index - 1]\n                            };\n                        }\n                        else if (prevPrevMainPoint && point.x === prevPrevMainPoint.x) {\n                            mainPoint = prevPrevMainPoint;\n                            nextMainPoint = prevMainPoint;\n                        }\n                    }\n                    if (nextPoint && nextMainPoint && mainPoint) {\n                        newNextPoint = {\n                            x: nextPoint.x,\n                            plotX: nextPoint.plotX,\n                            plotY: nextPoint.plotY,\n                            isNull: false\n                        };\n                        if (point.y >= mainPoint.close &&\n                            nextPoint.y >= nextMainPoint.close) {\n                            point.color = (pointColor || indicOptions.fallingTrendColor ||\n                                indicOptions.color);\n                            groupedPoitns.top.push(newPoint);\n                        }\n                        else if (point.y < mainPoint.close &&\n                            nextPoint.y < nextMainPoint.close) {\n                            point.color = (pointColor || indicOptions.risingTrendColor ||\n                                indicOptions.color);\n                            groupedPoitns.bottom.push(newPoint);\n                        }\n                        else {\n                            groupedPoitns.intersect.push(newPoint);\n                            groupedPoitns.intersect.push(newNextPoint);\n                            // Additional null point to make a gap in line\n                            groupedPoitns.intersect.push(merge(newNextPoint, {\n                                isNull: true\n                            }));\n                            if (point.y >= mainPoint.close &&\n                                nextPoint.y < nextMainPoint.close) {\n                                point.color = (pointColor || indicOptions.fallingTrendColor ||\n                                    indicOptions.color);\n                                nextPoint.color = (pointColor || indicOptions.risingTrendColor ||\n                                    indicOptions.color);\n                                groupedPoitns.top.push(newPoint);\n                                groupedPoitns.top.push(merge(newNextPoint, {\n                                    isNull: true\n                                }));\n                            }\n                            else if (point.y < mainPoint.close &&\n                                nextPoint.y >= nextMainPoint.close) {\n                                point.color = (pointColor || indicOptions.risingTrendColor ||\n                                    indicOptions.color);\n                                nextPoint.color = (pointColor || indicOptions.fallingTrendColor ||\n                                    indicOptions.color);\n                                groupedPoitns.bottom.push(newPoint);\n                                groupedPoitns.bottom.push(merge(newNextPoint, {\n                                    isNull: true\n                                }));\n                            }\n                        }\n                    }\n                    else if (mainPoint) {\n                        if (point.y >= mainPoint.close) {\n                            point.color = (pointColor || indicOptions.fallingTrendColor ||\n                                indicOptions.color);\n                            groupedPoitns.top.push(newPoint);\n                        }\n                        else {\n                            point.color = (pointColor || indicOptions.risingTrendColor ||\n                                indicOptions.color);\n                            groupedPoitns.bottom.push(newPoint);\n                        }\n                    }\n                }\n                // Generate lines:\n                objectEach(groupedPoitns, function (values, lineName) {\n                    indicator.points = values;\n                    indicator.options = merge(supertrendLineOptions[lineName].styles, gappedExtend);\n                    indicator.graph = indicator['graph' + lineName + 'Line'];\n                    SMAIndicator.prototype.drawGraph.call(indicator);\n                    // Now save line\n                    indicator['graph' + lineName + 'Line'] = indicator.graph;\n                });\n                // Restore options:\n                indicator.points = indicPoints;\n                indicator.options = indicOptions;\n                indicator.graph = indicPath;\n            };\n            // Supertrend (Multiplier, Period) Formula:\n            // BASIC UPPERBAND = (HIGH + LOW) / 2 + Multiplier * ATR(Period)\n            // BASIC LOWERBAND = (HIGH + LOW) / 2 - Multiplier * ATR(Period)\n            // FINAL UPPERBAND =\n            //     IF(\n            //      Current BASICUPPERBAND  < Previous FINAL UPPERBAND AND\n            //      Previous Close > Previous FINAL UPPERBAND\n            //     ) THEN (Current BASIC UPPERBAND)\n            //     ELSE (Previous FINALUPPERBAND)\n            // FINAL LOWERBAND =\n            //     IF(\n            //      Current BASIC LOWERBAND  > Previous FINAL LOWERBAND AND\n            //      Previous Close < Previous FINAL LOWERBAND\n            //     ) THEN (Current BASIC LOWERBAND)\n            //     ELSE (Previous FINAL LOWERBAND)\n            // SUPERTREND =\n            //     IF(\n            //      Previous Supertrend == Previous FINAL UPPERBAND AND\n            //      Current Close < Current FINAL UPPERBAND\n            //     ) THAN Current FINAL UPPERBAND\n            //     ELSE IF(\n            //      Previous Supertrend == Previous FINAL LOWERBAND AND\n            //      Current Close < Current FINAL LOWERBAND\n            //     ) THAN Current FINAL UPPERBAND\n            //     ELSE IF(\n            //      Previous Supertrend == Previous FINAL UPPERBAND AND\n            //      Current Close > Current FINAL UPPERBAND\n            //     ) THAN Current FINAL LOWERBAND\n            //     ELSE IF(\n            //      Previous Supertrend == Previous FINAL LOWERBAND AND\n            //      Current Close > Current FINAL LOWERBAND\n            //     ) THAN Current FINAL LOWERBAND\n            SupertrendIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    multiplier = params.multiplier,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    ATRData = [], \n                    // 0- date, 1- Supertrend indicator\n                    ST = [],\n                    xData = [],\n                    yData = [],\n                    close = 3,\n                    low = 2,\n                    high = 1,\n                    periodsOffset = (period === 0) ? 0 : period - 1,\n                    basicUp,\n                    basicDown,\n                    finalUp = [],\n                    finalDown = [],\n                    supertrend,\n                    prevFinalUp,\n                    prevFinalDown,\n                    prevST, // previous Supertrend\n                    prevY,\n                    y,\n                    i;\n                if ((xVal.length <= period) || !isArray(yVal[0]) ||\n                    yVal[0].length !== 4 || period < 0) {\n                    return;\n                }\n                ATRData = ATRIndicator.prototype.getValues.call(this, series, {\n                    period: period\n                }).yData;\n                for (i = 0; i < ATRData.length; i++) {\n                    y = yVal[periodsOffset + i];\n                    prevY = yVal[periodsOffset + i - 1] || [];\n                    prevFinalUp = finalUp[i - 1];\n                    prevFinalDown = finalDown[i - 1];\n                    prevST = yData[i - 1];\n                    if (i === 0) {\n                        prevFinalUp = prevFinalDown = prevST = 0;\n                    }\n                    basicUp = correctFloat((y[high] + y[low]) / 2 + multiplier * ATRData[i]);\n                    basicDown = correctFloat((y[high] + y[low]) / 2 - multiplier * ATRData[i]);\n                    if ((basicUp < prevFinalUp) ||\n                        (prevY[close] > prevFinalUp)) {\n                        finalUp[i] = basicUp;\n                    }\n                    else {\n                        finalUp[i] = prevFinalUp;\n                    }\n                    if ((basicDown > prevFinalDown) ||\n                        (prevY[close] < prevFinalDown)) {\n                        finalDown[i] = basicDown;\n                    }\n                    else {\n                        finalDown[i] = prevFinalDown;\n                    }\n                    if (prevST === prevFinalUp && y[close] < finalUp[i] ||\n                        prevST === prevFinalDown && y[close] < finalDown[i]) {\n                        supertrend = finalUp[i];\n                    }\n                    else if (prevST === prevFinalUp && y[close] > finalUp[i] ||\n                        prevST === prevFinalDown && y[close] > finalDown[i]) {\n                        supertrend = finalDown[i];\n                    }\n                    ST.push([xVal[periodsOffset + i], supertrend]);\n                    xData.push(xVal[periodsOffset + i]);\n                    yData.push(supertrend);\n                }\n                return {\n                    values: ST,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Supertrend indicator. This series requires the `linkedTo` option to be\n             * set and should be loaded after the `stock/indicators/indicators.js` and\n             * `stock/indicators/sma.js`.\n             *\n             * @sample {highstock} stock/indicators/supertrend\n             *         Supertrend indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, cropThreshold, negativeColor, colorAxis, joinBy,\n             *               keys, navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking, threshold\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/supertrend\n             * @optionparent plotOptions.supertrend\n             */\n            SupertrendIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Paramters used in calculation of Supertrend indicator series points.\n                 *\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    /**\n                     * Multiplier for Supertrend Indicator.\n                     */\n                    multiplier: 3,\n                    /**\n                     * The base period for indicator Supertrend Indicator calculations.\n                     * This is the number of data points which are taken into account\n                     * for the indicator calculations.\n                     */\n                    period: 10\n                },\n                /**\n                 * Color of the Supertrend series line that is beneath the main series.\n                 *\n                 * @sample {highstock} stock/indicators/supertrend/\n                 *         Example with risingTrendColor\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                risingTrendColor: \"#06b535\" /* positiveColor */,\n                /**\n                 * Color of the Supertrend series line that is above the main series.\n                 *\n                 * @sample {highstock} stock/indicators/supertrend/\n                 *         Example with fallingTrendColor\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                fallingTrendColor: \"#f21313\" /* negativeColor */,\n                /**\n                 * The styles for the Supertrend line that intersect main series.\n                 *\n                 * @sample {highstock} stock/indicators/supertrend/\n                 *         Example with changeTrendLine\n                 */\n                changeTrendLine: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: \"#333333\" /* neutralColor80 */,\n                        /**\n                         * The dash or dot style of the grid lines. For possible\n                         * values, see\n                         * [this demonstration](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-dashstyle-all/).\n                         *\n                         * @sample {highcharts} highcharts/yaxis/gridlinedashstyle/\n                         *         Long dashes\n                         * @sample {highstock} stock/xaxis/gridlinedashstyle/\n                         *         Long dashes\n                         *\n                         * @type  {Highcharts.DashStyleValue}\n                         * @since 7.0.0\n                         */\n                        dashStyle: 'LongDash'\n                    }\n                }\n            });\n            return SupertrendIndicator;\n        }(SMAIndicator));\n        extend(SupertrendIndicator.prototype, {\n            nameBase: 'Supertrend',\n            nameComponents: ['multiplier', 'period']\n        });\n        SeriesRegistry.registerSeriesType('supertrend', SupertrendIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `Supertrend indicator` series. If the [type](#series.supertrend.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.supertrend\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, cropThreshold, data, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, negativeColor, pointInterval,\n         *            pointIntervalUnit, pointPlacement, pointRange, pointStart,\n         *            showInNavigator, stacking, threshold\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/supertrend\n         * @apioption series.supertrend\n         */\n        ''; // to include the above in the js output\n\n        return SupertrendIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/VBP/VBPPoint.js', [_modules['Core/Series/Point.js'], _modules['Core/Series/SeriesRegistry.js']], function (Point, SeriesRegistry) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var VBPPoint = /** @class */ (function (_super) {\n                __extends(VBPPoint, _super);\n            function VBPPoint() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            // Required for destroying negative part of volume\n            VBPPoint.prototype.destroy = function () {\n                // @todo: this.negativeGraphic doesn't seem to be used anywhere\n                if (this.negativeGraphic) {\n                    this.negativeGraphic = this.negativeGraphic.destroy();\n                }\n                return Point.prototype.destroy.apply(this, arguments);\n            };\n            return VBPPoint;\n        }(SMAIndicator.prototype.pointClass));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return VBPPoint;\n    });\n    _registerModule(_modules, 'Stock/Indicators/VBP/VBPIndicator.js', [_modules['Stock/Indicators/VBP/VBPPoint.js'], _modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js'], _modules['Core/Chart/StockChart.js']], function (VBPPoint, A, H, SeriesRegistry, U, StockChart) {\n        /* *\n         *\n         *  (c) 2010-2021 Paweł Dalek\n         *\n         *  Volume By Price (VBP) indicator for Highcharts Stock\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var animObject = A.animObject;\n        var noop = H.noop;\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var addEvent = U.addEvent,\n            arrayMax = U.arrayMax,\n            arrayMin = U.arrayMin,\n            correctFloat = U.correctFloat,\n            defined = U.defined,\n            error = U.error,\n            extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge;\n        /* eslint-disable require-jsdoc */\n        // Utils\n        function arrayExtremesOHLC(data) {\n            var dataLength = data.length,\n                min = data[0][3],\n                max = min,\n                i = 1,\n                currentPoint;\n            for (; i < dataLength; i++) {\n                currentPoint = data[i][3];\n                if (currentPoint < min) {\n                    min = currentPoint;\n                }\n                if (currentPoint > max) {\n                    max = currentPoint;\n                }\n            }\n            return {\n                min: min,\n                max: max\n            };\n        }\n        /* eslint-enable require-jsdoc */\n        var abs = Math.abs,\n            columnPrototype = SeriesRegistry.seriesTypes.column.prototype;\n        /**\n         * The Volume By Price (VBP) series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.vbp\n         *\n         * @augments Highcharts.Series\n         */\n        var VBPIndicator = /** @class */ (function (_super) {\n                __extends(VBPIndicator, _super);\n            function VBPIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.data = void 0;\n                _this.negWidths = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                _this.posWidths = void 0;\n                _this.priceZones = void 0;\n                _this.rangeStep = void 0;\n                _this.volumeDataArray = void 0;\n                _this.zoneStarts = void 0;\n                _this.zoneLinesSVG = void 0;\n                return _this;\n            }\n            VBPIndicator.prototype.init = function (chart) {\n                var indicator = this,\n                    params,\n                    baseSeries,\n                    volumeSeries;\n                H.seriesTypes.sma.prototype.init.apply(indicator, arguments);\n                // Only after series are linked add some additional logic/properties.\n                var unbinder = addEvent(StockChart, 'afterLinkSeries',\n                    function () {\n                        // Protection for a case where the indicator is being updated,\n                        // for a brief moment the indicator is deleted.\n                        if (indicator.options) {\n                            params = indicator.options.params;\n                        baseSeries = indicator.linkedParent;\n                        volumeSeries = chart.get(params.volumeSeriesID);\n                        indicator.addCustomEvents(baseSeries, volumeSeries);\n                    }\n                    unbinder();\n                }, {\n                    order: 1\n                });\n                return indicator;\n            };\n            // Adds events related with removing series\n            VBPIndicator.prototype.addCustomEvents = function (baseSeries, volumeSeries) {\n                var indicator = this;\n                /* eslint-disable require-jsdoc */\n                function toEmptyIndicator() {\n                    indicator.chart.redraw();\n                    indicator.setData([]);\n                    indicator.zoneStarts = [];\n                    if (indicator.zoneLinesSVG) {\n                        indicator.zoneLinesSVG = indicator.zoneLinesSVG.destroy();\n                    }\n                }\n                /* eslint-enable require-jsdoc */\n                // If base series is deleted, indicator series data is filled with\n                // an empty array\n                indicator.dataEventsToUnbind.push(addEvent(baseSeries, 'remove', function () {\n                    toEmptyIndicator();\n                }));\n                // If volume series is deleted, indicator series data is filled with\n                // an empty array\n                if (volumeSeries) {\n                    indicator.dataEventsToUnbind.push(addEvent(volumeSeries, 'remove', function () {\n                        toEmptyIndicator();\n                    }));\n                }\n                return indicator;\n            };\n            // Initial animation\n            VBPIndicator.prototype.animate = function (init) {\n                var series = this,\n                    inverted = series.chart.inverted,\n                    group = series.group,\n                    attr = {},\n                    position;\n                if (!init && group) {\n                    position = inverted ? series.yAxis.top : series.xAxis.left;\n                    if (inverted) {\n                        group['forceAnimate:translateY'] = true;\n                        attr.translateY = position;\n                    }\n                    else {\n                        group['forceAnimate:translateX'] = true;\n                        attr.translateX = position;\n                    }\n                    group.animate(attr, extend(animObject(series.options.animation), {\n                        step: function (val, fx) {\n                            series.group.attr({\n                                scaleX: Math.max(0.001, fx.pos)\n                            });\n                        }\n                    }));\n                }\n            };\n            VBPIndicator.prototype.drawPoints = function () {\n                var indicator = this;\n                if (indicator.options.volumeDivision.enabled) {\n                    indicator.posNegVolume(true, true);\n                    columnPrototype.drawPoints.apply(indicator, arguments);\n                    indicator.posNegVolume(false, false);\n                }\n                columnPrototype.drawPoints.apply(indicator, arguments);\n            };\n            // Function responsible for dividing volume into positive and negative\n            VBPIndicator.prototype.posNegVolume = function (initVol, pos) {\n                var indicator = this, signOrder = pos ?\n                        ['positive', 'negative'] :\n                        ['negative', 'positive'], volumeDivision = indicator.options.volumeDivision, pointLength = indicator.points.length, posWidths = [], negWidths = [], i = 0, pointWidth, priceZone, wholeVol, point;\n                if (initVol) {\n                    indicator.posWidths = posWidths;\n                    indicator.negWidths = negWidths;\n                }\n                else {\n                    posWidths = indicator.posWidths;\n                    negWidths = indicator.negWidths;\n                }\n                for (; i < pointLength; i++) {\n                    point = indicator.points[i];\n                    point[signOrder[0] + 'Graphic'] = point.graphic;\n                    point.graphic = point[signOrder[1] + 'Graphic'];\n                    if (initVol) {\n                        pointWidth = point.shapeArgs.width;\n                        priceZone = indicator.priceZones[i];\n                        wholeVol = priceZone.wholeVolumeData;\n                        if (wholeVol) {\n                            posWidths.push(pointWidth / wholeVol * priceZone.positiveVolumeData);\n                            negWidths.push(pointWidth / wholeVol * priceZone.negativeVolumeData);\n                        }\n                        else {\n                            posWidths.push(0);\n                            negWidths.push(0);\n                        }\n                    }\n                    point.color = pos ?\n                        volumeDivision.styles.positiveColor :\n                        volumeDivision.styles.negativeColor;\n                    point.shapeArgs.width = pos ?\n                        indicator.posWidths[i] :\n                        indicator.negWidths[i];\n                    point.shapeArgs.x = pos ?\n                        point.shapeArgs.x :\n                        indicator.posWidths[i];\n                }\n            };\n            VBPIndicator.prototype.translate = function () {\n                var indicator = this,\n                    options = indicator.options,\n                    chart = indicator.chart,\n                    yAxis = indicator.yAxis,\n                    yAxisMin = yAxis.min,\n                    zoneLinesOptions = indicator.options.zoneLines,\n                    priceZones = (indicator.priceZones),\n                    yBarOffset = 0,\n                    indicatorPoints,\n                    volumeDataArray,\n                    maxVolume,\n                    primalBarWidth,\n                    barHeight,\n                    barHeightP,\n                    oldBarHeight,\n                    barWidth,\n                    pointPadding,\n                    chartPlotTop,\n                    barX,\n                    barY;\n                columnPrototype.translate.apply(indicator);\n                indicatorPoints = indicator.points;\n                // Do translate operation when points exist\n                if (indicatorPoints.length) {\n                    pointPadding = options.pointPadding < 0.5 ?\n                        options.pointPadding :\n                        0.1;\n                    volumeDataArray = indicator.volumeDataArray;\n                    maxVolume = arrayMax(volumeDataArray);\n                    primalBarWidth = chart.plotWidth / 2;\n                    chartPlotTop = chart.plotTop;\n                    barHeight = abs(yAxis.toPixels(yAxisMin) -\n                        yAxis.toPixels(yAxisMin + indicator.rangeStep));\n                    oldBarHeight = abs(yAxis.toPixels(yAxisMin) -\n                        yAxis.toPixels(yAxisMin + indicator.rangeStep));\n                    if (pointPadding) {\n                        barHeightP = abs(barHeight * (1 - 2 * pointPadding));\n                        yBarOffset = abs((barHeight - barHeightP) / 2);\n                        barHeight = abs(barHeightP);\n                    }\n                    indicatorPoints.forEach(function (point, index) {\n                        barX = point.barX = point.plotX = 0;\n                        barY = point.plotY = (yAxis.toPixels(priceZones[index].start) -\n                            chartPlotTop -\n                            (yAxis.reversed ?\n                                (barHeight - oldBarHeight) :\n                                barHeight) -\n                            yBarOffset);\n                        barWidth = correctFloat(primalBarWidth *\n                            priceZones[index].wholeVolumeData / maxVolume);\n                        point.pointWidth = barWidth;\n                        point.shapeArgs = indicator.crispCol.apply(// eslint-disable-line no-useless-call\n                        indicator, [barX, barY, barWidth, barHeight]);\n                        point.volumeNeg = priceZones[index].negativeVolumeData;\n                        point.volumePos = priceZones[index].positiveVolumeData;\n                        point.volumeAll = priceZones[index].wholeVolumeData;\n                    });\n                    if (zoneLinesOptions.enabled) {\n                        indicator.drawZones(chart, yAxis, indicator.zoneStarts, zoneLinesOptions.styles);\n                    }\n                }\n            };\n            VBPIndicator.prototype.getValues = function (series, params) {\n                var indicator = this,\n                    xValues = series.processedXData,\n                    yValues = series.processedYData,\n                    chart = indicator.chart,\n                    ranges = params.ranges,\n                    VBP = [],\n                    xData = [],\n                    yData = [],\n                    isOHLC,\n                    volumeSeries,\n                    priceZones;\n                // Checks if base series exists\n                if (!series.chart) {\n                    error('Base series not found! In case it has been removed, add ' +\n                        'a new one.', true, chart);\n                    return;\n                }\n                // Checks if volume series exists\n                if (!(volumeSeries = (chart.get(params.volumeSeriesID)))) {\n                    error('Series ' +\n                        params.volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, chart);\n                    return;\n                }\n                // Checks if series data fits the OHLC format\n                isOHLC = isArray(yValues[0]);\n                if (isOHLC && yValues[0].length !== 4) {\n                    error('Type of ' +\n                        series.name +\n                        ' series is different than line, OHLC or candlestick.', true, chart);\n                    return;\n                }\n                // Price zones contains all the information about the zones (index,\n                // start, end, volumes, etc.)\n                priceZones = indicator.priceZones = indicator.specifyZones(isOHLC, xValues, yValues, ranges, volumeSeries);\n                priceZones.forEach(function (zone, index) {\n                    VBP.push([zone.x, zone.end]);\n                    xData.push(VBP[index][0]);\n                    yData.push(VBP[index][1]);\n                });\n                return {\n                    values: VBP,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            // Specifing where each zone should start ans end\n            VBPIndicator.prototype.specifyZones = function (isOHLC, xValues, yValues, ranges, volumeSeries) {\n                var indicator = this,\n                    rangeExtremes = (isOHLC ? arrayExtremesOHLC(yValues) : false),\n                    lowRange = rangeExtremes ?\n                        rangeExtremes.min :\n                        arrayMin(yValues),\n                    highRange = rangeExtremes ?\n                        rangeExtremes.max :\n                        arrayMax(yValues),\n                    zoneStarts = indicator.zoneStarts = [],\n                    priceZones = [],\n                    i = 0,\n                    j = 1,\n                    rangeStep,\n                    zoneStartsLength;\n                // If the compare mode is set on the main series, change the VBP\n                // zones to fit new extremes, #16277.\n                var mainSeries = indicator.linkedParent;\n                if (!indicator.options.compareToMain &&\n                    mainSeries.dataModify) {\n                    lowRange = mainSeries.dataModify.modifyValue(lowRange);\n                    highRange = mainSeries.dataModify.modifyValue(highRange);\n                }\n                if (!defined(lowRange) || !defined(highRange)) {\n                    if (this.points.length) {\n                        this.setData([]);\n                        this.zoneStarts = [];\n                        if (this.zoneLinesSVG) {\n                            this.zoneLinesSVG = this.zoneLinesSVG.destroy();\n                        }\n                    }\n                    return [];\n                }\n                rangeStep = indicator.rangeStep =\n                    correctFloat(highRange - lowRange) / ranges;\n                zoneStarts.push(lowRange);\n                for (; i < ranges - 1; i++) {\n                    zoneStarts.push(correctFloat(zoneStarts[i] + rangeStep));\n                }\n                zoneStarts.push(highRange);\n                zoneStartsLength = zoneStarts.length;\n                //    Creating zones\n                for (; j < zoneStartsLength; j++) {\n                    priceZones.push({\n                        index: j - 1,\n                        x: xValues[0],\n                        start: zoneStarts[j - 1],\n                        end: zoneStarts[j]\n                    });\n                }\n                return indicator.volumePerZone(isOHLC, priceZones, volumeSeries, xValues, yValues);\n            };\n            // Calculating sum of volume values for a specific zone\n            VBPIndicator.prototype.volumePerZone = function (isOHLC, priceZones, volumeSeries, xValues, yValues) {\n                var indicator = this,\n                    volumeXData = volumeSeries.processedXData,\n                    volumeYData = volumeSeries.processedYData,\n                    lastZoneIndex = priceZones.length - 1,\n                    baseSeriesLength = yValues.length,\n                    volumeSeriesLength = volumeYData.length,\n                    previousValue,\n                    startFlag,\n                    endFlag,\n                    value,\n                    i;\n                // Checks if each point has a corresponding volume value\n                if (abs(baseSeriesLength - volumeSeriesLength)) {\n                    // If the first point don't have volume, add 0 value at the\n                    // beggining of the volume array\n                    if (xValues[0] !== volumeXData[0]) {\n                        volumeYData.unshift(0);\n                    }\n                    // If the last point don't have volume, add 0 value at the end\n                    // of the volume array\n                    if (xValues[baseSeriesLength - 1] !==\n                        volumeXData[volumeSeriesLength - 1]) {\n                        volumeYData.push(0);\n                    }\n                }\n                indicator.volumeDataArray = [];\n                priceZones.forEach(function (zone) {\n                    zone.wholeVolumeData = 0;\n                    zone.positiveVolumeData = 0;\n                    zone.negativeVolumeData = 0;\n                    for (i = 0; i < baseSeriesLength; i++) {\n                        startFlag = false;\n                        endFlag = false;\n                        value = isOHLC ? yValues[i][3] : yValues[i];\n                        previousValue = i ?\n                            (isOHLC ?\n                                yValues[i - 1][3] :\n                                yValues[i - 1]) :\n                            value;\n                        // If the compare mode is set on the main series,\n                        // change the VBP zones to fit new extremes, #16277.\n                        var mainSeries = indicator.linkedParent;\n                        if (!indicator.options.compareToMain &&\n                            mainSeries.dataModify) {\n                            value = mainSeries.dataModify.modifyValue(value);\n                            previousValue = mainSeries.dataModify\n                                .modifyValue(previousValue);\n                        }\n                        // Checks if this is the point with the\n                        // lowest close value and if so, adds it calculations\n                        if (value <= zone.start && zone.index === 0) {\n                            startFlag = true;\n                        }\n                        // Checks if this is the point with the highest\n                        // close value and if so, adds it calculations\n                        if (value >= zone.end && zone.index === lastZoneIndex) {\n                            endFlag = true;\n                        }\n                        if ((value > zone.start || startFlag) &&\n                            (value < zone.end || endFlag)) {\n                            zone.wholeVolumeData += volumeYData[i];\n                            if (previousValue > value) {\n                                zone.negativeVolumeData += volumeYData[i];\n                            }\n                            else {\n                                zone.positiveVolumeData += volumeYData[i];\n                            }\n                        }\n                    }\n                    indicator.volumeDataArray.push(zone.wholeVolumeData);\n                });\n                return priceZones;\n            };\n            // Function responsoble for drawing additional lines indicating zones\n            VBPIndicator.prototype.drawZones = function (chart, yAxis, zonesValues, zonesStyles) {\n                var indicator = this,\n                    renderer = chart.renderer,\n                    zoneLinesSVG = indicator.zoneLinesSVG,\n                    zoneLinesPath = [],\n                    leftLinePos = 0,\n                    rightLinePos = chart.plotWidth,\n                    verticalOffset = chart.plotTop,\n                    verticalLinePos;\n                zonesValues.forEach(function (value) {\n                    verticalLinePos = yAxis.toPixels(value) - verticalOffset;\n                    zoneLinesPath = zoneLinesPath.concat(chart.renderer.crispLine([[\n                            'M',\n                            leftLinePos,\n                            verticalLinePos\n                        ], [\n                            'L',\n                            rightLinePos,\n                            verticalLinePos\n                        ]], zonesStyles.lineWidth));\n                });\n                // Create zone lines one path or update it while animating\n                if (zoneLinesSVG) {\n                    zoneLinesSVG.animate({\n                        d: zoneLinesPath\n                    });\n                }\n                else {\n                    zoneLinesSVG = indicator.zoneLinesSVG =\n                        renderer.path(zoneLinesPath).attr({\n                            'stroke-width': zonesStyles.lineWidth,\n                            'stroke': zonesStyles.color,\n                            'dashstyle': zonesStyles.dashStyle,\n                            'zIndex': indicator.group.zIndex + 0.1\n                        })\n                            .add(indicator.group);\n                }\n            };\n            /**\n             * Volume By Price indicator.\n             *\n             * This series requires `linkedTo` option to be set.\n             *\n             * @sample stock/indicators/volume-by-price\n             *         Volume By Price indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/volume-by-price\n             * @optionparent plotOptions.vbp\n             */\n            VBPIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index, period\n                 */\n                params: {\n                    // Index and period are unchangeable, do not inherit (#15362)\n                    index: void 0,\n                    period: void 0,\n                    /**\n                     * The number of price zones.\n                     */\n                    ranges: 12,\n                    /**\n                     * The id of volume series which is mandatory. For example using\n                     * OHLC data, volumeSeriesID='volume' means the indicator will be\n                     * calculated using OHLC and volume values.\n                     */\n                    volumeSeriesID: 'volume'\n                },\n                /**\n                 * The styles for lines which determine price zones.\n                 */\n                zoneLines: {\n                    /**\n                     * Enable/disable zone lines.\n                     */\n                    enabled: true,\n                    /**\n                     * Specify the style of zone lines.\n                     *\n                     * @type    {Highcharts.CSSObject}\n                     * @default {\"color\": \"#0A9AC9\", \"dashStyle\": \"LongDash\", \"lineWidth\": 1}\n                     */\n                    styles: {\n                        /** @ignore-option */\n                        color: '#0A9AC9',\n                        /** @ignore-option */\n                        dashStyle: 'LongDash',\n                        /** @ignore-option */\n                        lineWidth: 1\n                    }\n                },\n                /**\n                 * The styles for bars when volume is divided into positive/negative.\n                 */\n                volumeDivision: {\n                    /**\n                     * Option to control if volume is divided.\n                     */\n                    enabled: true,\n                    styles: {\n                        /**\n                         * Color of positive volume bars.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        positiveColor: 'rgba(144, 237, 125, 0.8)',\n                        /**\n                         * Color of negative volume bars.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        negativeColor: 'rgba(244, 91, 91, 0.8)'\n                    }\n                },\n                // To enable series animation; must be animationLimit > pointCount\n                animationLimit: 1000,\n                enableMouseTracking: false,\n                pointPadding: 0,\n                zIndex: -1,\n                crisp: true,\n                dataGrouping: {\n                    enabled: false\n                },\n                dataLabels: {\n                    allowOverlap: true,\n                    enabled: true,\n                    format: 'P: {point.volumePos:.2f} | N: {point.volumeNeg:.2f}',\n                    padding: 0,\n                    style: {\n                        /** @internal */\n                        fontSize: '7px'\n                    },\n                    verticalAlign: 'top'\n                }\n            });\n            return VBPIndicator;\n        }(SMAIndicator));\n        extend(VBPIndicator.prototype, {\n            nameBase: 'Volume by Price',\n            nameComponents: ['ranges'],\n            calculateOn: {\n                chart: 'render',\n                xAxis: 'afterSetExtremes'\n            },\n            pointClass: VBPPoint,\n            markerAttribs: noop,\n            drawGraph: noop,\n            getColumnMetrics: columnPrototype.getColumnMetrics,\n            crispCol: columnPrototype.crispCol\n        });\n        SeriesRegistry.registerSeriesType('vbp', VBPIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `Volume By Price (VBP)` series. If the [type](#series.vbp.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.vbp\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL, compare, compareBase, compareStart\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/volume-by-price\n         * @apioption series.vbp\n         */\n        ''; // to include the above in the js output\n\n        return VBPIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/VWAP/VWAPIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Paweł Dalek\n         *\n         *  Volume Weighted Average Price (VWAP) indicator for Highcharts Stock\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var error = U.error,\n            isArray = U.isArray,\n            merge = U.merge;\n        /* *\n         *\n         * Class\n         *\n         * */\n        /**\n         * The Volume Weighted Average Price (VWAP) series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.vwap\n         *\n         * @augments Highcharts.Series\n         */\n        var VWAPIndicator = /** @class */ (function (_super) {\n                __extends(VWAPIndicator, _super);\n            function VWAPIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            VWAPIndicator.prototype.getValues = function (series, params) {\n                var indicator = this,\n                    chart = series.chart,\n                    xValues = series.xData,\n                    yValues = series.yData,\n                    period = params.period,\n                    isOHLC = true,\n                    volumeSeries;\n                // Checks if volume series exists\n                if (!(volumeSeries = (chart.get(params.volumeSeriesID)))) {\n                    error('Series ' +\n                        params.volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, chart);\n                    return;\n                }\n                // Checks if series data fits the OHLC format\n                if (!(isArray(yValues[0]))) {\n                    isOHLC = false;\n                }\n                return indicator.calculateVWAPValues(isOHLC, xValues, yValues, volumeSeries, period);\n            };\n            /**\n             * Main algorithm used to calculate Volume Weighted Average Price (VWAP)\n             * values\n             *\n             * @private\n             *\n             * @param {boolean} isOHLC\n             * Says if data has OHLC format\n             *\n             * @param {Array<number>} xValues\n             * Array of timestamps\n             *\n             * @param {Array<number|Array<number,number,number,number>>} yValues\n             * Array of yValues, can be an array of a four arrays (OHLC) or array of\n             * values (line)\n             *\n             * @param {Array<*>} volumeSeries\n             * Volume series\n             *\n             * @param {number} period\n             * Number of points to be calculated\n             *\n             * @return {Object}\n             * Object contains computed VWAP\n             **/\n            VWAPIndicator.prototype.calculateVWAPValues = function (isOHLC, xValues, yValues, volumeSeries, period) {\n                var volumeValues = volumeSeries.yData,\n                    volumeLength = volumeSeries.xData.length,\n                    pointsLength = xValues.length,\n                    cumulativePrice = [],\n                    cumulativeVolume = [],\n                    xData = [],\n                    yData = [],\n                    VWAP = [],\n                    commonLength,\n                    typicalPrice,\n                    cPrice,\n                    cVolume,\n                    i,\n                    j;\n                if (pointsLength <= volumeLength) {\n                    commonLength = pointsLength;\n                }\n                else {\n                    commonLength = volumeLength;\n                }\n                for (i = 0, j = 0; i < commonLength; i++) {\n                    // Depending on whether series is OHLC or line type, price is\n                    // average of the high, low and close or a simple value\n                    typicalPrice = isOHLC ?\n                        ((yValues[i][1] + yValues[i][2] +\n                            yValues[i][3]) / 3) :\n                        yValues[i];\n                    typicalPrice *= volumeValues[i];\n                    cPrice = j ?\n                        (cumulativePrice[i - 1] + typicalPrice) :\n                        typicalPrice;\n                    cVolume = j ?\n                        (cumulativeVolume[i - 1] + volumeValues[i]) :\n                        volumeValues[i];\n                    cumulativePrice.push(cPrice);\n                    cumulativeVolume.push(cVolume);\n                    VWAP.push([xValues[i], (cPrice / cVolume)]);\n                    xData.push(VWAP[i][0]);\n                    yData.push(VWAP[i][1]);\n                    j++;\n                    if (j === period) {\n                        j = 0;\n                    }\n                }\n                return {\n                    values: VWAP,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Volume Weighted Average Price indicator.\n             *\n             * This series requires `linkedTo` option to be set.\n             *\n             * @sample stock/indicators/vwap\n             *         Volume Weighted Average Price indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/vwap\n             * @optionparent plotOptions.vwap\n             */\n            VWAPIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    period: 30,\n                    /**\n                     * The id of volume series which is mandatory. For example using\n                     * OHLC data, volumeSeriesID='volume' means the indicator will be\n                     * calculated using OHLC and volume values.\n                     */\n                    volumeSeriesID: 'volume'\n                }\n            });\n            return VWAPIndicator;\n        }(SMAIndicator));\n        SeriesRegistry.registerSeriesType('vwap', VWAPIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `Volume Weighted Average Price (VWAP)` series. If the\n         * [type](#series.vwap.type) option is not specified, it is inherited from\n         * [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.vwap\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/vwap\n         * @apioption series.vwap\n         */\n        ''; // to include the above in the js output\n\n        return VWAPIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/WilliamsR/WilliamsRIndicator.js', [_modules['Stock/Indicators/ArrayUtilities.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (AU, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge;\n        /**\n         * The Williams %R series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.williamsr\n         *\n         * @augments Highcharts.Series\n         */\n        var WilliamsRIndicator = /** @class */ (function (_super) {\n                __extends(WilliamsRIndicator, _super);\n            function WilliamsRIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            WilliamsRIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    WR = [], // 0- date, 1- Williams %R\n                    xData = [],\n                    yData = [],\n                    slicedY,\n                    close = 3,\n                    low = 2,\n                    high = 1,\n                    extremes,\n                    R,\n                    HH, // Highest high value in period\n                    LL, // Lowest low value in period\n                    CC, // Current close value\n                    i;\n                // Williams %R requires close value\n                if (xVal.length < period ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                // For a N-period, we start from N-1 point, to calculate Nth point\n                // That is why we later need to comprehend slice() elements list\n                // with (+1)\n                for (i = period - 1; i < yValLen; i++) {\n                    slicedY = yVal.slice(i - period + 1, i + 1);\n                    extremes = AU.getArrayExtremes(slicedY, low, high);\n                    LL = extremes[0];\n                    HH = extremes[1];\n                    CC = yVal[i][close];\n                    R = ((HH - CC) / (HH - LL)) * -100;\n                    if (xVal[i]) {\n                        WR.push([xVal[i], R]);\n                        xData.push(xVal[i]);\n                        yData.push(R);\n                    }\n                }\n                return {\n                    values: WR,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Williams %R. This series requires the `linkedTo` option to be\n             * set and should be loaded after the `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/williams-r\n             *         Williams %R\n             *\n             * @extends      plotOptions.sma\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n             *               pointInterval, pointIntervalUnit, pointPlacement,\n             *               pointRange, pointStart, showInNavigator, stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/williams-r\n             * @optionparent plotOptions.williamsr\n             */\n            WilliamsRIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Paramters used in calculation of Williams %R series points.\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    /**\n                     * Period for Williams %R oscillator\n                     */\n                    period: 14\n                }\n            });\n            return WilliamsRIndicator;\n        }(SMAIndicator));\n        extend(WilliamsRIndicator.prototype, {\n            nameBase: 'Williams %R'\n        });\n        SeriesRegistry.registerSeriesType('williamsr', WilliamsRIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `Williams %R Oscillator` series. If the [type](#series.williamsr.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.williamsr\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/williams-r\n         * @apioption series.williamsr\n         */\n        ''; // adds doclets above to the transpiled file\n\n        return WilliamsRIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/WMA/WMAIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Kacper Madej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var isArray = U.isArray,\n            merge = U.merge;\n        /* eslint-disable valid-jsdoc */\n        // Utils:\n        /**\n         * @private\n         */\n        function accumulateAverage(points, xVal, yVal, i, index) {\n            var xValue = xVal[i],\n                yValue = index < 0 ? yVal[i] : yVal[i][index];\n            points.push([xValue, yValue]);\n        }\n        /**\n         * @private\n         */\n        function weightedSumArray(array, pLen) {\n            // The denominator is the sum of the number of days as a triangular number.\n            // If there are 5 days, the triangular numbers are 5, 4, 3, 2, and 1.\n            // The sum is 5 + 4 + 3 + 2 + 1 = 15.\n            var denominator = (pLen + 1) / 2 * pLen;\n            // reduce VS loop => reduce\n            return array.reduce(function (prev, cur, i) {\n                return [null, prev[1] + cur[1] * (i + 1)];\n            })[1] / denominator;\n        }\n        /**\n         * @private\n         */\n        function populateAverage(points, xVal, yVal, i) {\n            var pLen = points.length,\n                wmaY = weightedSumArray(points,\n                pLen),\n                wmaX = xVal[i - 1];\n            points.shift(); // remove point until range < period\n            return [wmaX, wmaY];\n        }\n        /* eslint-enable valid-jsdoc */\n        /**\n         * The SMA series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.wma\n         *\n         * @augments Highcharts.Series\n         */\n        var WMAIndicator = /** @class */ (function (_super) {\n                __extends(WMAIndicator, _super);\n            function WMAIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            WMAIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    range = 1,\n                    xValue = xVal[0],\n                    yValue = yVal[0],\n                    WMA = [],\n                    xData = [],\n                    yData = [],\n                    index = -1,\n                    i,\n                    points,\n                    WMAPoint;\n                if (xVal.length < period) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick\n                if (isArray(yVal[0])) {\n                    index = params.index;\n                    yValue = yVal[0][index];\n                }\n                // Starting point\n                points = [[xValue, yValue]];\n                // Accumulate first N-points\n                while (range !== period) {\n                    accumulateAverage(points, xVal, yVal, range, index);\n                    range++;\n                }\n                // Calculate value one-by-one for each period in visible data\n                for (i = range; i < yValLen; i++) {\n                    WMAPoint = populateAverage(points, xVal, yVal, i);\n                    WMA.push(WMAPoint);\n                    xData.push(WMAPoint[0]);\n                    yData.push(WMAPoint[1]);\n                    accumulateAverage(points, xVal, yVal, i, index);\n                }\n                WMAPoint = populateAverage(points, xVal, yVal, i);\n                WMA.push(WMAPoint);\n                xData.push(WMAPoint[0]);\n                yData.push(WMAPoint[1]);\n                return {\n                    values: WMA,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Weighted moving average indicator (WMA). This series requires `linkedTo`\n             * option to be set.\n             *\n             * @sample stock/indicators/wma\n             *         Weighted moving average indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/wma\n             * @optionparent plotOptions.wma\n             */\n            WMAIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    index: 3,\n                    period: 9\n                }\n            });\n            return WMAIndicator;\n        }(SMAIndicator));\n        SeriesRegistry.registerSeriesType('wma', WMAIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `WMA` series. If the [type](#series.wma.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.wma\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/wma\n         * @apioption series.wma\n         */\n        ''; // adds doclet above to the transpiled file\n\n        return WMAIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Zigzag/ZigzagIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Kacper Madej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var merge = U.merge,\n            extend = U.extend;\n        /* *\n         *\n         * Class\n         *\n         * */\n        /**\n         * The Zig Zag series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.zigzag\n         *\n         * @augments Highcharts.Series\n         */\n        var ZigzagIndicator = /** @class */ (function (_super) {\n                __extends(ZigzagIndicator, _super);\n            function ZigzagIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            ZigzagIndicator.prototype.getValues = function (series, params) {\n                var lowIndex = params.lowIndex,\n                    highIndex = params.highIndex,\n                    deviation = params.deviation / 100,\n                    deviations = {\n                        'low': 1 + deviation,\n                        'high': 1 - deviation\n                    },\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    zigzag = [],\n                    xData = [],\n                    yData = [],\n                    i,\n                    j,\n                    zigzagPoint,\n                    firstZigzagLow,\n                    firstZigzagHigh,\n                    directionUp,\n                    zigzagLen,\n                    exitLoop = false,\n                    yIndex = false;\n                // Exit if not enught points or no low or high values\n                if (!xVal || xVal.length <= 1 ||\n                    (yValLen &&\n                        (typeof yVal[0][lowIndex] === 'undefined' ||\n                            typeof yVal[0][highIndex] === 'undefined'))) {\n                    return;\n                }\n                // Set first zigzag point candidate\n                firstZigzagLow = yVal[0][lowIndex];\n                firstZigzagHigh = yVal[0][highIndex];\n                // Search for a second zigzag point candidate,\n                // this will also set first zigzag point\n                for (i = 1; i < yValLen; i++) {\n                    // requried change to go down\n                    if (yVal[i][lowIndex] <= firstZigzagHigh * deviations.high) {\n                        zigzag.push([xVal[0], firstZigzagHigh]);\n                        // second zigzag point candidate\n                        zigzagPoint = [xVal[i], yVal[i][lowIndex]];\n                        // next line will be going up\n                        directionUp = true;\n                        exitLoop = true;\n                        // requried change to go up\n                    }\n                    else if (yVal[i][highIndex] >= firstZigzagLow * deviations.low) {\n                        zigzag.push([xVal[0], firstZigzagLow]);\n                        // second zigzag point candidate\n                        zigzagPoint = [xVal[i], yVal[i][highIndex]];\n                        // next line will be going down\n                        directionUp = false;\n                        exitLoop = true;\n                    }\n                    if (exitLoop) {\n                        xData.push(zigzag[0][0]);\n                        yData.push(zigzag[0][1]);\n                        j = i++;\n                        i = yValLen;\n                    }\n                }\n                // Search for next zigzags\n                for (i = j; i < yValLen; i++) {\n                    if (directionUp) { // next line up\n                        // lower when going down -> change zigzag candidate\n                        if (yVal[i][lowIndex] <= zigzagPoint[1]) {\n                            zigzagPoint = [xVal[i], yVal[i][lowIndex]];\n                        }\n                        // requried change to go down -> new zigzagpoint and\n                        // direction change\n                        if (yVal[i][highIndex] >=\n                            zigzagPoint[1] * deviations.low) {\n                            yIndex = highIndex;\n                        }\n                    }\n                    else { // next line down\n                        // higher when going up -> change zigzag candidate\n                        if (yVal[i][highIndex] >= zigzagPoint[1]) {\n                            zigzagPoint = [xVal[i], yVal[i][highIndex]];\n                        }\n                        // requried change to go down -> new zigzagpoint and\n                        // direction change\n                        if (yVal[i][lowIndex] <=\n                            zigzagPoint[1] * deviations.high) {\n                            yIndex = lowIndex;\n                        }\n                    }\n                    if (yIndex !== false) { // new zigzag point and direction change\n                        zigzag.push(zigzagPoint);\n                        xData.push(zigzagPoint[0]);\n                        yData.push(zigzagPoint[1]);\n                        zigzagPoint = [xVal[i], yVal[i][yIndex]];\n                        directionUp = !directionUp;\n                        yIndex = false;\n                    }\n                }\n                zigzagLen = zigzag.length;\n                // no zigzag for last point\n                if (zigzagLen !== 0 &&\n                    zigzag[zigzagLen - 1][0] < xVal[yValLen - 1]) {\n                    // set last point from zigzag candidate\n                    zigzag.push(zigzagPoint);\n                    xData.push(zigzagPoint[0]);\n                    yData.push(zigzagPoint[1]);\n                }\n                return {\n                    values: zigzag,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Zig Zag indicator.\n             *\n             * This series requires `linkedTo` option to be set.\n             *\n             * @sample stock/indicators/zigzag\n             *         Zig Zag indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/zigzag\n             * @optionparent plotOptions.zigzag\n             */\n            ZigzagIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index, period\n                 */\n                params: {\n                    // Index and period are unchangeable, do not inherit (#15362)\n                    index: void 0,\n                    period: void 0,\n                    /**\n                     * The point index which indicator calculations will base - low\n                     * value.\n                     *\n                     * For example using OHLC data, index=2 means the indicator will be\n                     * calculated using Low values.\n                     */\n                    lowIndex: 2,\n                    /**\n                     * The point index which indicator calculations will base - high\n                     * value.\n                     *\n                     * For example using OHLC data, index=1 means the indicator will be\n                     * calculated using High values.\n                     */\n                    highIndex: 1,\n                    /**\n                     * The threshold for the value change.\n                     *\n                     * For example deviation=1 means the indicator will ignore all price\n                     * movements less than 1%.\n                     */\n                    deviation: 1\n                }\n            });\n            return ZigzagIndicator;\n        }(SMAIndicator));\n        extend(ZigzagIndicator.prototype, {\n            nameComponents: ['deviation'],\n            nameSuffixes: ['%'],\n            nameBase: 'Zig Zag'\n        });\n        SeriesRegistry.registerSeriesType('zigzag', ZigzagIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `Zig Zag` series. If the [type](#series.zigzag.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.zigzag\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/zigzag\n         * @apioption series.zigzag\n         */\n        ''; // adds doclets above to transpiled file\n\n        return ZigzagIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/LinearRegression/LinearRegression.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2021 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var isArray = U.isArray,\n            extend = U.extend,\n            merge = U.merge;\n        /* *\n         *\n         * Class\n         *\n         * */\n        /**\n         * Linear regression series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearregression\n         *\n         * @augments Highcharts.Series\n         */\n        var LinearRegressionIndicator = /** @class */ (function (_super) {\n                __extends(LinearRegressionIndicator, _super);\n            function LinearRegressionIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Return the slope and intercept of a straight line function.\n             *\n             * @private\n             *\n             * @param {Array<number>} xData\n             * List of all x coordinates in a period.\n             *\n             * @param {Array<number>} yData\n             * List of all y coordinates in a period.\n             *\n             * @return {Highcharts.RegressionLineParametersObject}\n             * Object that contains the slope and the intercept of a straight line\n             * function.\n             */\n            LinearRegressionIndicator.prototype.getRegressionLineParameters = function (xData, yData) {\n                // least squares method\n                var yIndex = this.options.params.index,\n                    getSingleYValue = function (yValue,\n                    yIndex) {\n                        return isArray(yValue) ? yValue[yIndex] : yValue;\n                }, xSum = xData.reduce(function (accX, val) {\n                    return val + accX;\n                }, 0), ySum = yData.reduce(function (accY, val) {\n                    return getSingleYValue(val, yIndex) + accY;\n                }, 0), xMean = xSum / xData.length, yMean = ySum / yData.length, xError, yError, formulaNumerator = 0, formulaDenominator = 0, i, slope;\n                for (i = 0; i < xData.length; i++) {\n                    xError = xData[i] - xMean;\n                    yError = getSingleYValue(yData[i], yIndex) - yMean;\n                    formulaNumerator += xError * yError;\n                    formulaDenominator += Math.pow(xError, 2);\n                }\n                slope = formulaDenominator ?\n                    formulaNumerator / formulaDenominator : 0; // don't divide by 0\n                return {\n                    slope: slope,\n                    intercept: yMean - slope * xMean\n                };\n            };\n            /**\n             * Return the y value on a straight line.\n             *\n             * @private\n             *\n             * @param {Highcharts.RegressionLineParametersObject} lineParameters\n             * Object that contains the slope and the intercept of a straight line\n             * function.\n             *\n             * @param {number} endPointX\n             * X coordinate of the point.\n             *\n             * @return {number}\n             * Y value of the point that lies on the line.\n             */\n            LinearRegressionIndicator.prototype.getEndPointY = function (lineParameters, endPointX) {\n                return lineParameters.slope * endPointX + lineParameters.intercept;\n            };\n            /**\n             * Transform the coordinate system so that x values start at 0 and\n             * apply xAxisUnit.\n             *\n             * @private\n             *\n             * @param {Array<number>} xData\n             * List of all x coordinates in a period\n             *\n             * @param {number} xAxisUnit\n             * Option (see the API)\n             *\n             * @return {Array<number>}\n             * Array of transformed x data\n             */\n            LinearRegressionIndicator.prototype.transformXData = function (xData, xAxisUnit) {\n                var xOffset = xData[0];\n                return xData.map(function (xValue) {\n                    return (xValue - xOffset) / xAxisUnit;\n                });\n            };\n            /**\n             * Find the closest distance between points in the base series.\n             * @private\n             * @param {Array<number>} xData list of all x coordinates in the base series\n             * @return {number} - closest distance between points in the base series\n             */\n            LinearRegressionIndicator.prototype.findClosestDistance = function (xData) {\n                var distance,\n                    closestDistance,\n                    i;\n                for (i = 1; i < xData.length - 1; i++) {\n                    distance = xData[i] - xData[i - 1];\n                    if (distance > 0 &&\n                        (typeof closestDistance === 'undefined' ||\n                            distance < closestDistance)) {\n                        closestDistance = distance;\n                    }\n                }\n                return closestDistance;\n            };\n            // Required to be implemented - starting point for indicator's logic\n            LinearRegressionIndicator.prototype.getValues = function (baseSeries, regressionSeriesParams) {\n                var xData = baseSeries.xData,\n                    yData = baseSeries.yData,\n                    period = regressionSeriesParams.period,\n                    lineParameters,\n                    i,\n                    periodStart,\n                    periodEnd, \n                    // format required to be returned\n                    indicatorData = {\n                        xData: [],\n                        yData: [],\n                        values: []\n                    },\n                    endPointX,\n                    endPointY,\n                    periodXData,\n                    periodYData,\n                    periodTransformedXData,\n                    xAxisUnit = this.options.params.xAxisUnit ||\n                        this.findClosestDistance(xData);\n                // Iteration logic: x value of the last point within the period\n                // (end point) is used to represent the y value (regression)\n                // of the entire period.\n                for (i = period - 1; i <= xData.length - 1; i++) {\n                    periodStart = i - period + 1; // adjusted for slice() function\n                    periodEnd = i + 1; // (as above)\n                    endPointX = xData[i];\n                    periodXData = xData.slice(periodStart, periodEnd);\n                    periodYData = yData.slice(periodStart, periodEnd);\n                    periodTransformedXData = this.transformXData(periodXData, xAxisUnit);\n                    lineParameters = this.getRegressionLineParameters(periodTransformedXData, periodYData);\n                    endPointY = this.getEndPointY(lineParameters, periodTransformedXData[periodTransformedXData.length - 1]);\n                    // @todo this is probably not used anywhere\n                    indicatorData.values.push({\n                        regressionLineParameters: lineParameters,\n                        x: endPointX,\n                        y: endPointY\n                    });\n                    indicatorData.xData.push(endPointX);\n                    indicatorData.yData.push(endPointY);\n                }\n                return indicatorData;\n            };\n            /**\n             * Linear regression indicator. This series requires `linkedTo` option to be\n             * set.\n             *\n             * @sample {highstock} stock/indicators/linear-regression\n             *         Linear regression indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        7.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/regressions\n             * @optionparent plotOptions.linearregression\n             */\n            LinearRegressionIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    /**\n                     * Unit (in milliseconds) for the x axis distances used to\n                     * compute the regression line paramters (slope & intercept) for\n                     * every range. In Highcharts Stock the x axis values are always\n                     * represented in milliseconds which may cause that distances\n                     * between points are \"big\" integer numbers.\n                     *\n                     * Highcharts Stock's linear regression algorithm (least squares\n                     * method) will utilize these \"big\" integers for finding the\n                     * slope and the intercept of the regression line for each\n                     * period. In consequence, this value may be a very \"small\"\n                     * decimal number that's hard to interpret by a human.\n                     *\n                     * For instance: `xAxisUnit` equealed to `86400000` ms (1 day)\n                     * forces the algorithm to treat `86400000` as `1` while\n                     * computing the slope and the intercept. This may enchance the\n                     * legiblitity of the indicator's values.\n                     *\n                     * Default value is the closest distance between two data\n                     * points.\n                     *\n                     * In `v9.0.2`, the default value has been changed\n                     * from `undefined` to `null`.\n                     *\n                     * @sample {highstock} stock/plotoptions/linear-regression-xaxisunit\n                     *         xAxisUnit set to 1 minute\n                     *\n                     * @example\n                     * // In Liniear Regression Slope Indicator series `xAxisUnit`is\n                     * // `86400000` (1 day) and period is `3`. There're 3 points in\n                     * // the base series:\n                     *\n                     * data: [\n                     *   [Date.UTC(2020, 0, 1), 1],\n                     *   [Date.UTC(2020, 0, 2), 3],\n                     *   [Date.UTC(2020, 0, 3), 5]\n                     * ]\n                     *\n                     * // This will produce one point in the indicator series that\n                     * // has a `y` value of `2` (slope of the regression line). If\n                     * // we change the `xAxisUnit` to `1` (ms) the value of the\n                     * // indicator's point will be `2.3148148148148148e-8` which is\n                     * // harder to interpert for a human.\n                     *\n                     * @type    {null|number}\n                     * @product highstock\n                     */\n                    xAxisUnit: null\n                },\n                tooltip: {\n                    valueDecimals: 4\n                }\n            });\n            return LinearRegressionIndicator;\n        }(SMAIndicator));\n        extend(LinearRegressionIndicator.prototype, {\n            nameBase: 'Linear Regression Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegression', LinearRegressionIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A linear regression series. If the\n         * [type](#series.linearregression.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregression\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregression\n         */\n        ''; // to include the above in the js output\n\n        return LinearRegressionIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/LinearRegressionSlopes/LinearRegressionSlopes.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2021 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var LinearRegressionIndicator = SeriesRegistry.seriesTypes.linearRegression;\n        var extend = U.extend,\n            merge = U.merge;\n        /* *\n         *\n         * Class\n         *\n         * */\n        /**\n         * The Linear Regression Slope series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearRegressionSlope\n         *\n         * @augments Highcharts.Series\n         */\n        var LinearRegressionSlopesIndicator = /** @class */ (function (_super) {\n                __extends(LinearRegressionSlopesIndicator, _super);\n            function LinearRegressionSlopesIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            LinearRegressionSlopesIndicator.prototype.getEndPointY = function (lineParameters) {\n                return lineParameters.slope;\n            };\n            /**\n             * Linear regression slope indicator. This series requires `linkedTo`\n             * option to be set.\n             *\n             * @sample {highstock} stock/indicators/linear-regression-slope\n             *         Linear regression slope indicator\n             *\n             * @extends      plotOptions.linearregression\n             * @since        7.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires  stock/indicators/regressions\n             * @optionparent plotOptions.linearregressionslope\n             */\n            LinearRegressionSlopesIndicator.defaultOptions = merge(LinearRegressionIndicator.defaultOptions);\n            return LinearRegressionSlopesIndicator;\n        }(LinearRegressionIndicator));\n        extend(LinearRegressionSlopesIndicator.prototype, {\n            nameBase: 'Linear Regression Slope Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegressionSlope', LinearRegressionSlopesIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A linear regression intercept series. If the\n         * [type](#series.linearregressionslope.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregressionslope\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregressionslope\n         */\n        ''; // to include the above in the js output\n\n        return LinearRegressionSlopesIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/LinearRegressionIntercept/LinearRegressionIntercept.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2021 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var LinearRegressionIndicator = SeriesRegistry.seriesTypes.linearRegression;\n        var extend = U.extend,\n            merge = U.merge;\n        /* *\n         *\n         * Class\n         *\n         * */\n        /**\n         * The Linear Regression Intercept series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearRegressionIntercept\n         *\n         * @augments Highcharts.Series\n         */\n        var LinearRegressionInterceptIndicator = /** @class */ (function (_super) {\n                __extends(LinearRegressionInterceptIndicator, _super);\n            function LinearRegressionInterceptIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            LinearRegressionInterceptIndicator.prototype.getEndPointY = function (lineParameters) {\n                return lineParameters.intercept;\n            };\n            /**\n             * Linear regression intercept indicator. This series requires `linkedTo`\n             * option to be set.\n             *\n             * @sample {highstock} stock/indicators/linear-regression-intercept\n             *         Linear intercept slope indicator\n             *\n             * @extends      plotOptions.linearregression\n             * @since        7.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires  stock/indicators/regressions\n             * @optionparent plotOptions.linearregressionintercept\n             */\n            LinearRegressionInterceptIndicator.defaultOptions = merge(LinearRegressionIndicator.defaultOptions);\n            return LinearRegressionInterceptIndicator;\n        }(LinearRegressionIndicator));\n        extend(LinearRegressionInterceptIndicator.prototype, {\n            nameBase: 'Linear Regression Intercept Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegressionIntercept', LinearRegressionInterceptIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A linear regression intercept series. If the\n         * [type](#series.linearregressionintercept.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregressionintercept\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregressionintercept\n         */\n        ''; // to include the above in the js output\n\n        return LinearRegressionInterceptIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/LinearRegressionAngle/LinearRegressionAngle.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2021 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var LinearRegressionIndicator = SeriesRegistry.seriesTypes.linearRegression;\n        var extend = U.extend,\n            merge = U.merge;\n        /* *\n         *\n         * Class\n         *\n         * */\n        /**\n         * The Linear Regression Angle series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearRegressionAngle\n         *\n         * @augments Highcharts.Series\n         */\n        var LinearRegressionAngleIndicator = /** @class */ (function (_super) {\n                __extends(LinearRegressionAngleIndicator, _super);\n            function LinearRegressionAngleIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n            * Convert a slope of a line to angle (in degrees) between\n            * the line and x axis\n            * @private\n            * @param {number} slope of the straight line function\n            * @return {number} angle in degrees\n            */\n            LinearRegressionAngleIndicator.prototype.slopeToAngle = function (slope) {\n                return Math.atan(slope) * (180 / Math.PI); // rad to deg\n            };\n            LinearRegressionAngleIndicator.prototype.getEndPointY = function (lineParameters) {\n                return this.slopeToAngle(lineParameters.slope);\n            };\n            /**\n             * Linear regression angle indicator. This series requires `linkedTo`\n             * option to be set.\n             *\n             * @sample {highstock} stock/indicators/linear-regression-angle\n             *         Linear intercept angle indicator\n             *\n             * @extends      plotOptions.linearregression\n             * @since        7.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires  stock/indicators/regressions\n             * @optionparent plotOptions.linearregressionangle\n             */\n            LinearRegressionAngleIndicator.defaultOptions = merge(LinearRegressionIndicator.defaultOptions, {\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span>' +\n                        '{series.name}: <b>{point.y}°</b><br/>'\n                }\n            });\n            return LinearRegressionAngleIndicator;\n        }(LinearRegressionIndicator));\n        extend(LinearRegressionAngleIndicator.prototype, {\n            nameBase: 'Linear Regression Angle Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegressionAngle', LinearRegressionAngleIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A linear regression intercept series. If the\n         * [type](#series.linearregressionangle.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregressionangle\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregressionangle\n         */\n        ''; // to include the above in the js output\n\n        return LinearRegressionAngleIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/ABands/ABandsIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var correctFloat = U.correctFloat,\n            extend = U.extend,\n            merge = U.merge;\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         */\n        function getBaseForBand(low, high, factor) {\n            return (((correctFloat(high - low)) /\n                ((correctFloat(high + low)) / 2)) * 1000) * factor;\n        }\n        /**\n         * @private\n         */\n        function getPointUB(high, base) {\n            return high * (correctFloat(1 + 2 * base));\n        }\n        /**\n         * @private\n         */\n        function getPointLB(low, base) {\n            return low * (correctFloat(1 - 2 * base));\n        }\n        /* eslint-enable valid-jsdoc */\n        /**\n         * The ABands series type\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.abands\n         *\n         * @augments Highcharts.Series\n         */\n        var ABandsIndicator = /** @class */ (function (_super) {\n                __extends(ABandsIndicator, _super);\n            function ABandsIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            ABandsIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    factor = params.factor,\n                    index = params.index,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0, \n                    // Upperbands\n                    UB = [], \n                    // Lowerbands\n                    LB = [], \n                    // ABANDS array structure:\n                    // 0-date, 1-top line, 2-middle line, 3-bottom line\n                    ABANDS = [], \n                    // middle line, top line and bottom line\n                    ML,\n                    TL,\n                    BL,\n                    date,\n                    bandBase,\n                    pointSMA,\n                    ubSMA,\n                    lbSMA,\n                    low = 2,\n                    high = 1,\n                    xData = [],\n                    yData = [],\n                    slicedX,\n                    slicedY,\n                    i;\n                if (yValLen < period) {\n                    return;\n                }\n                for (i = 0; i <= yValLen; i++) {\n                    // Get UB and LB values of every point. This condition\n                    // is necessary, because there is a need to calculate current\n                    // UB nad LB values simultaneously with given period SMA\n                    // in one for loop.\n                    if (i < yValLen) {\n                        bandBase = getBaseForBand(yVal[i][low], yVal[i][high], factor);\n                        UB.push(getPointUB(yVal[i][high], bandBase));\n                        LB.push(getPointLB(yVal[i][low], bandBase));\n                    }\n                    if (i >= period) {\n                        slicedX = xVal.slice(i - period, i);\n                        slicedY = yVal.slice(i - period, i);\n                        ubSMA = _super.prototype.getValues.call(this, {\n                            xData: slicedX,\n                            yData: UB.slice(i - period, i)\n                        }, {\n                            period: period\n                        });\n                        lbSMA = _super.prototype.getValues.call(this, {\n                            xData: slicedX,\n                            yData: LB.slice(i - period, i)\n                        }, {\n                            period: period\n                        });\n                        pointSMA = _super.prototype.getValues.call(this, {\n                            xData: slicedX,\n                            yData: slicedY\n                        }, {\n                            period: period,\n                            index: index\n                        });\n                        date = pointSMA.xData[0];\n                        TL = ubSMA.yData[0];\n                        BL = lbSMA.yData[0];\n                        ML = pointSMA.yData[0];\n                        ABANDS.push([date, TL, ML, BL]);\n                        xData.push(date);\n                        yData.push([TL, ML, BL]);\n                    }\n                }\n                return {\n                    values: ABANDS,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Acceleration bands (ABANDS). This series requires the `linkedTo` option\n             * to be set and should be loaded after the\n             * `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/acceleration-bands\n             *         Acceleration Bands\n             *\n             * @extends      plotOptions.sma\n             * @mixes        Highcharts.MultipleLinesMixin\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking,\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/acceleration-bands\n             * @optionparent plotOptions.abands\n             */\n            ABandsIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Option for fill color between lines in Accelleration bands Indicator.\n                 *\n                 * @sample {highstock} stock/indicators/indicator-area-fill\n                 *      Background fill between lines.\n                 *\n                 * @type {Highcharts.Color}\n                 * @since 9.3.2\n                 * @apioption plotOptions.abands.fillColor\n                 *\n                 */\n                params: {\n                    period: 20,\n                    /**\n                     * The algorithms factor value used to calculate bands.\n                     *\n                     * @product highstock\n                     */\n                    factor: 0.001,\n                    index: 3\n                },\n                lineWidth: 1,\n                topLine: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1\n                    }\n                },\n                bottomLine: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1\n                    }\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return ABandsIndicator;\n        }(SMAIndicator));\n        extend(ABandsIndicator.prototype, {\n            areaLinesNames: ['top', 'bottom'],\n            linesApiNames: ['topLine', 'bottomLine'],\n            nameBase: 'Acceleration Bands',\n            nameComponents: ['period', 'factor'],\n            pointArrayMap: ['top', 'middle', 'bottom'],\n            pointValKey: 'middle'\n        });\n        MultipleLinesComposition.compose(ABandsIndicator);\n        SeriesRegistry.registerSeriesType('abands', ABandsIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An Acceleration bands indicator. If the [type](#series.abands.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.abands\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval,\n         *            pointIntervalUnit, pointPlacement, pointRange, pointStart,\n         *            stacking, showInNavigator,\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/acceleration-bands\n         * @apioption series.abands\n         */\n        ''; // to include the above in jsdoc\n\n        return ABandsIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/TrendLine/TrendLineIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var extend = U.extend,\n            merge = U.merge,\n            isArray = U.isArray;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Trend line series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.trendline\n         *\n         * @augments Highcharts.Series\n         */\n        var TrendLineIndicator = /** @class */ (function (_super) {\n                __extends(TrendLineIndicator, _super);\n            function TrendLineIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                *\n                *   Properties\n                *\n                * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            TrendLineIndicator.prototype.getValues = function (series, params) {\n                var xVal = series.xData,\n                    yVal = series.yData,\n                    LR = [],\n                    xData = [],\n                    yData = [],\n                    sumX = 0,\n                    sumY = 0,\n                    sumXY = 0,\n                    sumX2 = 0,\n                    xValLength = xVal.length,\n                    index = params.index,\n                    alpha,\n                    beta,\n                    i,\n                    x,\n                    y;\n                // Get sums:\n                for (i = 0; i < xValLength; i++) {\n                    x = xVal[i];\n                    y = isArray(yVal[i]) ? yVal[i][index] : yVal[i];\n                    sumX += x;\n                    sumY += y;\n                    sumXY += x * y;\n                    sumX2 += x * x;\n                }\n                // Get slope and offset:\n                alpha = (xValLength * sumXY - sumX * sumY) /\n                    (xValLength * sumX2 - sumX * sumX);\n                if (isNaN(alpha)) {\n                    alpha = 0;\n                }\n                beta = (sumY - alpha * sumX) / xValLength;\n                // Calculate linear regression:\n                for (i = 0; i < xValLength; i++) {\n                    x = xVal[i];\n                    y = alpha * x + beta;\n                    // Prepare arrays required for getValues() method\n                    LR[i] = [x, y];\n                    xData[i] = x;\n                    yData[i] = y;\n                }\n                return {\n                    xData: xData,\n                    yData: yData,\n                    values: LR\n                };\n            };\n            /**\n             * Trendline (linear regression) fits a straight line to the selected data\n             * using a method called the Sum Of Least Squares. This series requires the\n             * `linkedTo` option to be set.\n             *\n             * @sample stock/indicators/trendline\n             *         Trendline indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        7.1.3\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/trendline\n             * @optionparent plotOptions.trendline\n             */\n            TrendLineIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding period\n                 */\n                params: {\n                    period: void 0,\n                    /**\n                     * The point index which indicator calculations will base. For\n                     * example using OHLC data, index=2 means the indicator will be\n                     * calculated using Low values.\n                     *\n                     * @default 3\n                     */\n                    index: 3\n                }\n            });\n            return TrendLineIndicator;\n        }(SMAIndicator));\n        extend(TrendLineIndicator.prototype, {\n            nameBase: 'Trendline',\n            nameComponents: false\n        });\n        SeriesRegistry.registerSeriesType('trendline', TrendLineIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `TrendLine` series. If the [type](#series.trendline.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.trendline\n         * @since     7.1.3\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/trendline\n         * @apioption series.trendline\n         */\n        ''; // to include the above in the js output\n\n        return TrendLineIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/DisparityIndex/DisparityIndexIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *  (c) 2010-2021 Rafal Sebestjanski\n         *\n         *  Disparity Index technical indicator for Highcharts Stock\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var correctFloat = U.correctFloat,\n            defined = U.defined,\n            extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Disparity Index series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.disparityindex\n         *\n         * @augments Highcharts.Series\n         */\n        var DisparityIndexIndicator = /** @class */ (function (_super) {\n                __extends(DisparityIndexIndicator, _super);\n            function DisparityIndexIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.averageIndicator = void 0;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            DisparityIndexIndicator.prototype.init = function () {\n                var args = arguments,\n                    ctx = this, // Disparity Index indicator\n                    params = args[1].params, // options.params\n                    averageType = params && params.average ? params.average : void 0;\n                ctx.averageIndicator = SeriesRegistry\n                    .seriesTypes[averageType] || SMAIndicator;\n                ctx.averageIndicator.prototype.init.apply(ctx, args);\n            };\n            DisparityIndexIndicator.prototype.calculateDisparityIndex = function (curPrice, periodAverage) {\n                return correctFloat(curPrice - periodAverage) / periodAverage * 100;\n            };\n            DisparityIndexIndicator.prototype.getValues = function (series, params) {\n                var index = params.index,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    disparityIndexPoint = [],\n                    xData = [],\n                    yData = [], \n                    // \"as any\" because getValues doesn't exist on typeof Series\n                    averageIndicator = this.averageIndicator,\n                    isOHLC = isArray(yVal[0]), \n                    // Get the average indicator's values\n                    values = averageIndicator.prototype.getValues(series,\n                    params),\n                    yValues = values.yData,\n                    start = xVal.indexOf(values.xData[0]);\n                // Check period, if bigger than points length, skip\n                if (!yValues || yValues.length === 0 ||\n                    !defined(index) ||\n                    yVal.length <= start) {\n                    return;\n                }\n                // Get the Disparity Index indicator's values\n                for (var i = start; i < yValLen; i++) {\n                    var disparityIndexValue = this.calculateDisparityIndex(isOHLC ? yVal[i][index] : yVal[i],\n                        yValues[i - start]);\n                    disparityIndexPoint.push([\n                        xVal[i],\n                        disparityIndexValue\n                    ]);\n                    xData.push(xVal[i]);\n                    yData.push(disparityIndexValue);\n                }\n                return {\n                    values: disparityIndexPoint,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Disparity Index.\n             * This series requires the `linkedTo` option to be set and should\n             * be loaded after the `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/disparity-index\n             *         Disparity Index indicator\n             *\n             * @extends      plotOptions.sma\n             * @since 9.1.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n             *               pointInterval, pointIntervalUnit, pointPlacement,\n             *               pointRange, pointStart, showInNavigator, stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/disparity-index\n             * @optionparent plotOptions.disparityindex\n             */\n            DisparityIndexIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    /**\n                     * The average used to calculate the Disparity Index indicator.\n                     * By default it uses SMA, with EMA as an option. To use other\n                     * averages, e.g. TEMA, the `stock/indicators/tema.js` file needs to\n                     * be loaded.\n                     *\n                     * If value is different than `ema`, `dema`, `tema` or `wma`,\n                     * then sma is used.\n                     */\n                    average: 'sma',\n                    index: 3\n                },\n                marker: {\n                    enabled: false\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return DisparityIndexIndicator;\n        }(SMAIndicator));\n        extend(DisparityIndexIndicator.prototype, {\n            nameBase: 'Disparity Index',\n            nameComponents: ['period', 'average']\n        });\n        SeriesRegistry.registerSeriesType('disparityindex', DisparityIndexIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * The Disparity Index indicator series.\n         * If the [type](#series.disparityindex.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.disparityindex\n         * @since 9.1.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis,  dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/disparity-index\n         * @apioption series.disparityindex\n         */\n        ''; // to include the above in the js output\n\n        return DisparityIndexIndicator;\n    });\n    _registerModule(_modules, 'masters/indicators/indicators-all.src.js', [], function () {\n\n        // eslint-disable-next-line max-len\n        // eslint-disable-next-line max-len\n\n    });\n}));","/**\n * @license Highstock JS v9.3.3 (2022-02-01)\n *\n * Advanced Highcharts Stock tools\n *\n * (c) 2010-2021 Highsoft AS\n * Author: Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n'use strict';\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/full-screen', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n        }\n    }\n    _registerModule(_modules, 'Extensions/FullScreen.js', [_modules['Core/Chart/Chart.js'], _modules['Core/Globals.js'], _modules['Core/Renderer/HTML/AST.js'], _modules['Core/Utilities.js']], function (Chart, H, AST, U) {\n        /* *\n         * (c) 2009-2021 Rafal Sebestjanski\n         *\n         * Full screen for Highcharts\n         *\n         * License: www.highcharts.com/license\n         */\n        var doc = H.doc;\n        var addEvent = U.addEvent;\n        /**\n         * The module allows user to enable display chart in full screen mode.\n         * Used in StockTools too.\n         * Based on default solutions in browsers.\n         *\n         */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * Handles displaying chart's container in the fullscreen mode.\n         *\n         * **Note**: Fullscreen is not supported on iPhone due to iOS limitations.\n         *\n         * @class\n         * @name Highcharts.Fullscreen\n         * @hideconstructor\n         * @requires modules/full-screen\n         */\n        var Fullscreen = /** @class */ (function () {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                function Fullscreen(chart) {\n                    /**\n                     * Chart managed by the fullscreen controller.\n                     * @name Highcharts.Fullscreen#chart\n                     * @type {Highcharts.Chart}\n                     */\n                    this.chart = chart;\n                /**\n                 * The flag is set to `true` when the chart is displayed in\n                 * the fullscreen mode.\n                 *\n                 * @name Highcharts.Fullscreen#isOpen\n                 * @type {boolean|undefined}\n                 * @since 8.0.1\n                 */\n                this.isOpen = false;\n                var container = chart.renderTo;\n                // Hold event and methods available only for a current browser.\n                if (!this.browserProps) {\n                    if (typeof container.requestFullscreen === 'function') {\n                        this.browserProps = {\n                            fullscreenChange: 'fullscreenchange',\n                            requestFullscreen: 'requestFullscreen',\n                            exitFullscreen: 'exitFullscreen'\n                        };\n                    }\n                    else if (container.mozRequestFullScreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'mozfullscreenchange',\n                            requestFullscreen: 'mozRequestFullScreen',\n                            exitFullscreen: 'mozCancelFullScreen'\n                        };\n                    }\n                    else if (container.webkitRequestFullScreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'webkitfullscreenchange',\n                            requestFullscreen: 'webkitRequestFullScreen',\n                            exitFullscreen: 'webkitExitFullscreen'\n                        };\n                    }\n                    else if (container.msRequestFullscreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'MSFullscreenChange',\n                            requestFullscreen: 'msRequestFullscreen',\n                            exitFullscreen: 'msExitFullscreen'\n                        };\n                    }\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Stops displaying the chart in fullscreen mode.\n             * Exporting module required.\n             *\n             * @since       8.0.1\n             *\n             * @function    Highcharts.Fullscreen#close\n             * @return      {void}\n             * @requires    modules/full-screen\n             */\n            Fullscreen.prototype.close = function () {\n                var fullscreen = this,\n                    chart = fullscreen.chart,\n                    optionsChart = chart.options.chart;\n                // Don't fire exitFullscreen() when user exited using 'Escape' button.\n                if (fullscreen.isOpen &&\n                    fullscreen.browserProps &&\n                    chart.container.ownerDocument instanceof Document) {\n                    chart.container.ownerDocument[fullscreen.browserProps.exitFullscreen]();\n                }\n                // Unbind event as it's necessary only before exiting from fullscreen.\n                if (fullscreen.unbindFullscreenEvent) {\n                    fullscreen.unbindFullscreenEvent = fullscreen\n                        .unbindFullscreenEvent();\n                }\n                chart.setSize(fullscreen.origWidth, fullscreen.origHeight, false);\n                fullscreen.origWidth = void 0;\n                fullscreen.origHeight = void 0;\n                optionsChart.width = fullscreen.origWidthOption;\n                optionsChart.height = fullscreen.origHeightOption;\n                fullscreen.origWidthOption = void 0;\n                fullscreen.origHeightOption = void 0;\n                fullscreen.isOpen = false;\n                fullscreen.setButtonText();\n            };\n            /**\n             * Displays the chart in fullscreen mode.\n             * When fired customly by user before exporting context button is created,\n             * button's text will not be replaced - it's on the user side.\n             * Exporting module required.\n             *\n             * @since       8.0.1\n             *\n             * @function Highcharts.Fullscreen#open\n             * @return      {void}\n             * @requires    modules/full-screen\n             */\n            Fullscreen.prototype.open = function () {\n                var fullscreen = this,\n                    chart = fullscreen.chart,\n                    optionsChart = chart.options.chart;\n                if (optionsChart) {\n                    fullscreen.origWidthOption = optionsChart.width;\n                    fullscreen.origHeightOption = optionsChart.height;\n                }\n                fullscreen.origWidth = chart.chartWidth;\n                fullscreen.origHeight = chart.chartHeight;\n                // Handle exitFullscreen() method when user clicks 'Escape' button.\n                if (fullscreen.browserProps) {\n                    var unbindChange_1 = addEvent(chart.container.ownerDocument, // chart's document\n                        fullscreen.browserProps.fullscreenChange,\n                        function () {\n                            // Handle lack of async of browser's fullScreenChange event.\n                            if (fullscreen.isOpen) {\n                                fullscreen.isOpen = false;\n                            fullscreen.close();\n                        }\n                        else {\n                            chart.setSize(null, null, false);\n                            fullscreen.isOpen = true;\n                            fullscreen.setButtonText();\n                        }\n                    });\n                    var unbindDestroy_1 = addEvent(chart, 'destroy',\n                        unbindChange_1);\n                    fullscreen.unbindFullscreenEvent = function () {\n                        unbindChange_1();\n                        unbindDestroy_1();\n                    };\n                    var promise = chart.renderTo[fullscreen.browserProps.requestFullscreen]();\n                    if (promise) {\n                        // No dot notation because of IE8 compatibility\n                        promise['catch'](function () {\n                            alert(// eslint-disable-line no-alert\n                            'Full screen is not supported inside a frame.');\n                        });\n                    }\n                }\n            };\n            /**\n             * Replaces the exporting context button's text when toogling the\n             * fullscreen mode.\n             *\n             * @private\n             *\n             * @since 8.0.1\n             *\n             * @requires modules/full-screen\n             */\n            Fullscreen.prototype.setButtonText = function () {\n                var chart = this.chart,\n                    exportDivElements = chart.exportDivElements,\n                    exportingOptions = chart.options.exporting,\n                    menuItems = (exportingOptions &&\n                        exportingOptions.buttons &&\n                        exportingOptions.buttons.contextButton.menuItems),\n                    lang = chart.options.lang;\n                if (exportingOptions &&\n                    exportingOptions.menuItemDefinitions &&\n                    lang &&\n                    lang.exitFullscreen &&\n                    lang.viewFullscreen &&\n                    menuItems &&\n                    exportDivElements) {\n                    var exportDivElement = exportDivElements[menuItems.indexOf('viewFullscreen')];\n                    if (exportDivElement) {\n                        AST.setElementHTML(exportDivElement, !this.isOpen ?\n                            (exportingOptions.menuItemDefinitions.viewFullscreen\n                                .text ||\n                                lang.viewFullscreen) : lang.exitFullscreen);\n                    }\n                }\n            };\n            /**\n             * Toggles displaying the chart in fullscreen mode.\n             * By default, when the exporting module is enabled, a context button with\n             * a drop down menu in the upper right corner accesses this function.\n             * Exporting module required.\n             *\n             * @since 8.0.1\n             *\n             * @sample      highcharts/members/chart-togglefullscreen/\n             *              Toggle fullscreen mode from a HTML button\n             *\n             * @function Highcharts.Fullscreen#toggle\n             * @requires    modules/full-screen\n             */\n            Fullscreen.prototype.toggle = function () {\n                var fullscreen = this;\n                if (!fullscreen.isOpen) {\n                    fullscreen.open();\n                }\n                else {\n                    fullscreen.close();\n                }\n            };\n            return Fullscreen;\n        }());\n        H.Fullscreen = Fullscreen;\n        // Initialize fullscreen\n        addEvent(Chart, 'beforeRender', function () {\n            /**\n             * @name Highcharts.Chart#fullscreen\n             * @type {Highcharts.Fullscreen}\n             * @requires modules/full-screen\n             */\n            this.fullscreen = new H.Fullscreen(this);\n        });\n\n        return H.Fullscreen;\n    });\n    _registerModule(_modules, 'masters/modules/full-screen.src.js', [], function () {\n\n\n    });\n}));","/**\n * @license Highstock JS v9.3.3 (2022-02-01)\n *\n * Highcharts Stock as a plugin for Highcharts\n *\n * (c) 2010-2021 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n'use strict';\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/stock', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n        }\n    }\n    _registerModule(_modules, 'Core/Axis/OrdinalAxis.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Globals.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (Axis, H, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var addEvent = U.addEvent,\n            correctFloat = U.correctFloat,\n            css = U.css,\n            defined = U.defined,\n            error = U.error,\n            pick = U.pick,\n            timeUnits = U.timeUnits;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var composedClasses = [];\n        /* eslint-disable valid-jsdoc */\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Extends the axis with ordinal support.\n         * @private\n         */\n        var OrdinalAxis;\n        (function (OrdinalAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Extends the axis with ordinal support.\n             *\n             * @private\n             *\n             * @param AxisClass\n             * Axis class to extend.\n             *\n             * @param ChartClass\n             * Chart class to use.\n             *\n             * @param SeriesClass\n             * Series class to use.\n             */\n            function compose(AxisClass, SeriesClass, ChartClass) {\n                if (composedClasses.indexOf(AxisClass) === -1) {\n                    composedClasses.push(AxisClass);\n                    var axisProto = AxisClass.prototype;\n                    axisProto.getTimeTicks = getTimeTicks;\n                    axisProto.index2val = index2val;\n                    axisProto.lin2val = lin2val;\n                    axisProto.val2lin = val2lin;\n                    // Record this to prevent overwriting by broken-axis module (#5979)\n                    axisProto.ordinal2lin = axisProto.val2lin;\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'foundExtremes', onAxisFoundExtremes);\n                    addEvent(AxisClass, 'afterSetScale', onAxisAfterSetScale);\n                    addEvent(AxisClass, 'initialAxisTranslation', onAxisInitialAxisTranslation);\n                }\n                if (composedClasses.indexOf(ChartClass) === -1) {\n                    composedClasses.push(ChartClass);\n                    addEvent(ChartClass, 'pan', onChartPan);\n                }\n                if (composedClasses.indexOf(SeriesClass) === -1) {\n                    composedClasses.push(SeriesClass);\n                    addEvent(SeriesClass, 'updatedData', onSeriesUpdatedData);\n                }\n                /* eslint-enable no-invalid-this */\n                return AxisClass;\n            }\n            OrdinalAxis.compose = compose;\n            /**\n             * In an ordinal axis, there might be areas with dense consentrations of\n             * points, then large gaps between some. Creating equally distributed\n             * ticks over this entire range may lead to a huge number of ticks that\n             * will later be removed. So instead, break the positions up in\n             * segments, find the tick positions for each segment then concatenize\n             * them. This method is used from both data grouping logic and X axis\n             * tick position logic.\n             * @private\n             */\n            function getTimeTicks(normalizedInterval, min, max, startOfWeek, positions, closestDistance, findHigherRanks) {\n                if (positions === void 0) { positions = []; }\n                if (closestDistance === void 0) { closestDistance = 0; }\n                var higherRanks = {},\n                    tickPixelIntervalOption = this.options.tickPixelInterval,\n                    time = this.chart.time, \n                    // Record all the start positions of a segment, to use when\n                    // deciding what's a gap in the data.\n                    segmentStarts = [];\n                var end,\n                    segmentPositions,\n                    hasCrossedHigherRank,\n                    info,\n                    outsideMax,\n                    start = 0,\n                    groupPositions = [],\n                    lastGroupPosition = -Number.MAX_VALUE;\n                // The positions are not always defined, for example for ordinal\n                // positions when data has regular interval (#1557, #2090)\n                if ((!this.options.ordinal && !this.options.breaks) ||\n                    !positions ||\n                    positions.length < 3 ||\n                    typeof min === 'undefined') {\n                    return time.getTimeTicks.apply(time, arguments);\n                }\n                // Analyze the positions array to split it into segments on gaps\n                // larger than 5 times the closest distance. The closest distance is\n                // already found at this point, so we reuse that instead of\n                // computing it again.\n                var posLength = positions.length;\n                for (end = 0; end < posLength; end++) {\n                    outsideMax = end && positions[end - 1] > max;\n                    if (positions[end] < min) { // Set the last position before min\n                        start = end;\n                    }\n                    if (end === posLength - 1 ||\n                        positions[end + 1] - positions[end] > closestDistance * 5 ||\n                        outsideMax) {\n                        // For each segment, calculate the tick positions from the\n                        // getTimeTicks utility function. The interval will be the\n                        // same regardless of how long the segment is.\n                        if (positions[end] > lastGroupPosition) { // #1475\n                            segmentPositions = time.getTimeTicks(normalizedInterval, positions[start], positions[end], startOfWeek);\n                            // Prevent duplicate groups, for example for multiple\n                            // segments within one larger time frame (#1475)\n                            while (segmentPositions.length &&\n                                segmentPositions[0] <= lastGroupPosition) {\n                                segmentPositions.shift();\n                            }\n                            if (segmentPositions.length) {\n                                lastGroupPosition =\n                                    segmentPositions[segmentPositions.length - 1];\n                            }\n                            segmentStarts.push(groupPositions.length);\n                            groupPositions = groupPositions.concat(segmentPositions);\n                        }\n                        // Set start of next segment\n                        start = end + 1;\n                    }\n                    if (outsideMax) {\n                        break;\n                    }\n                }\n                // Get the grouping info from the last of the segments. The info is\n                // the same for all segments.\n                if (segmentPositions) {\n                    info = segmentPositions.info;\n                    // Optionally identify ticks with higher rank, for example\n                    // when the ticks have crossed midnight.\n                    if (findHigherRanks && info.unitRange <= timeUnits.hour) {\n                        end = groupPositions.length - 1;\n                        // Compare points two by two\n                        for (start = 1; start < end; start++) {\n                            if (time.dateFormat('%d', groupPositions[start]) !==\n                                time.dateFormat('%d', groupPositions[start - 1])) {\n                                higherRanks[groupPositions[start]] = 'day';\n                                hasCrossedHigherRank = true;\n                            }\n                        }\n                        // If the complete array has crossed midnight, we want\n                        // to mark the first positions also as higher rank\n                        if (hasCrossedHigherRank) {\n                            higherRanks[groupPositions[0]] = 'day';\n                        }\n                        info.higherRanks = higherRanks;\n                    }\n                    // Save the info\n                    info.segmentStarts = segmentStarts;\n                    groupPositions.info = info;\n                }\n                else {\n                    error(12, false, this.chart);\n                }\n                // Don't show ticks within a gap in the ordinal axis, where the\n                // space between two points is greater than a portion of the tick\n                // pixel interval\n                if (findHigherRanks && defined(tickPixelIntervalOption)) {\n                    var length_1 = groupPositions.length,\n                        translatedArr = [],\n                        distances = [];\n                    var itemToRemove = void 0,\n                        translated = void 0,\n                        lastTranslated = void 0,\n                        medianDistance = void 0,\n                        distance = void 0,\n                        i = length_1;\n                    // Find median pixel distance in order to keep a reasonably even\n                    // distance between ticks (#748)\n                    while (i--) {\n                        translated = this.translate(groupPositions[i]);\n                        if (lastTranslated) {\n                            distances[i] = lastTranslated - translated;\n                        }\n                        translatedArr[i] = lastTranslated = translated;\n                    }\n                    distances.sort();\n                    medianDistance = distances[Math.floor(distances.length / 2)];\n                    if (medianDistance < tickPixelIntervalOption * 0.6) {\n                        medianDistance = null;\n                    }\n                    // Now loop over again and remove ticks where needed\n                    i = groupPositions[length_1 - 1] > max ? length_1 - 1 : length_1; // #817\n                    lastTranslated = void 0;\n                    while (i--) {\n                        translated = translatedArr[i];\n                        distance = Math.abs(lastTranslated - translated);\n                        // #4175 - when axis is reversed, the distance, is negative but\n                        // tickPixelIntervalOption positive, so we need to compare the\n                        // same values\n                        // Remove ticks that are closer than 0.6 times the pixel\n                        // interval from the one to the right, but not if it is close to\n                        // the median distance (#748).\n                        if (lastTranslated &&\n                            distance < tickPixelIntervalOption * 0.8 &&\n                            (medianDistance === null || distance < medianDistance * 0.8)) {\n                            // Is this a higher ranked position with a normal\n                            // position to the right?\n                            if (higherRanks[groupPositions[i]] &&\n                                !higherRanks[groupPositions[i + 1]]) {\n                                // Yes: remove the lower ranked neighbour to the\n                                // right\n                                itemToRemove = i + 1;\n                                lastTranslated = translated; // #709\n                            }\n                            else {\n                                // No: remove this one\n                                itemToRemove = i;\n                            }\n                            groupPositions.splice(itemToRemove, 1);\n                        }\n                        else {\n                            lastTranslated = translated;\n                        }\n                    }\n                }\n                return groupPositions;\n            }\n            /**\n             * Get axis position of given index of the extended ordinal positions.\n             * Used only when panning an ordinal axis.\n             *\n             * @private\n             * @function Highcharts.Axis#index2val\n             * @param {number} index\n             * The index value of searched point\n             */\n            function index2val(index) {\n                var axis = this,\n                    ordinal = axis.ordinal, \n                    // Context could be changed to extendedOrdinalPositions.\n                    ordinalPositions = ordinal.positions;\n                // The visible range contains only equally spaced values.\n                if (!ordinalPositions) {\n                    return index;\n                }\n                var i = ordinalPositions.length - 1,\n                    distance;\n                if (index < 0) { // out of range, in effect panning to the left\n                    index = ordinalPositions[0];\n                }\n                else if (index > i) { // out of range, panning to the right\n                    index = ordinalPositions[i];\n                }\n                else { // split it up\n                    i = Math.floor(index);\n                    distance = index - i; // the decimal\n                }\n                if (typeof distance !== 'undefined' &&\n                    typeof ordinalPositions[i] !== 'undefined') {\n                    return ordinalPositions[i] + (distance ?\n                        distance *\n                            (ordinalPositions[i + 1] - ordinalPositions[i]) :\n                        0);\n                }\n                return index;\n            }\n            /**\n             * Translate from linear (internal) to axis value.\n             *\n             * @private\n             * @function Highcharts.Axis#lin2val\n             * @param {number} val\n             * The linear abstracted value.\n             */\n            function lin2val(val) {\n                var axis = this,\n                    ordinal = axis.ordinal,\n                    localMin = axis.old ? axis.old.min : axis.min,\n                    localA = axis.old ? axis.old.transA : axis.transA;\n                var positions = ordinal.positions; // for the current visible range\n                    // The visible range contains only equally spaced values.\n                    if (!positions) {\n                        return val;\n                }\n                // Convert back from modivied value to pixels. // #15970\n                var pixelVal = (val - localMin) * localA +\n                        axis.minPixelPadding,\n                    isInside = pixelVal > 0 && pixelVal < axis.left + axis.len;\n                // If the value is not inside the plot area, use the extended positions.\n                // (array contains also points that are outside of the plotArea).\n                if (!isInside) {\n                    // When iterating for the first time,\n                    // get the extended ordinal positional and assign them.\n                    if (!ordinal.extendedOrdinalPositions) {\n                        ordinal.extendedOrdinalPositions = (ordinal.getExtendedPositions());\n                    }\n                    positions = ordinal.extendedOrdinalPositions;\n                }\n                // In some cases (especially in early stages of the chart creation) the\n                // getExtendedPositions might return undefined.\n                if (positions && positions.length) {\n                    var index = ordinal.getIndexOfPoint(pixelVal,\n                        positions),\n                        mantissa = correctFloat(index % 1);\n                    // Check if the index is inside position array. If true,\n                    // read/approximate value for that exact index.\n                    if (index >= 0 && index < positions.length - 1) {\n                        var leftNeighbour = positions[Math.floor(index)],\n                            rightNeighbour = positions[Math.ceil(index)],\n                            distance = rightNeighbour - leftNeighbour;\n                        return positions[Math.floor(index)] + mantissa * distance;\n                    }\n                    // For cases when the index is not in the extended ordinal position\n                    // array, like when the value we are looking for exceed the\n                    // available data, approximate that value based on the calculated\n                    // slope.\n                    var positionsLength = positions.length,\n                        firstPositionsValue = positions[0],\n                        lastPositionsValue = positions[positionsLength - 1],\n                        slope = (lastPositionsValue - firstPositionsValue) / (positionsLength - 1);\n                    if (index < 0) {\n                        return firstPositionsValue + slope * index;\n                    }\n                    return lastPositionsValue + slope * (index - positionsLength);\n                }\n                return val;\n            }\n            /**\n             * Internal function to calculate the precise index in ordinalPositions\n             * array.\n             * @private\n             */\n            function getIndexInArray(ordinalPositions, val) {\n                var index = OrdinalAxis.Additions.findIndexOf(ordinalPositions,\n                    val,\n                    true);\n                if (ordinalPositions[index] === val) {\n                    return index;\n                }\n                var percent = (val - ordinalPositions[index]) /\n                        (ordinalPositions[index + 1] - ordinalPositions[index]);\n                return index + percent;\n            }\n            /**\n            * @private\n            */\n            function onAxisAfterInit() {\n                var axis = this;\n                if (!axis.ordinal) {\n                    axis.ordinal = new OrdinalAxis.Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisFoundExtremes() {\n                var axis = this;\n                if (axis.isXAxis &&\n                    defined(axis.options.overscroll) &&\n                    axis.max === axis.dataMax &&\n                    (\n                    // Panning is an execption. We don't want to apply\n                    // overscroll when panning over the dataMax\n                    !axis.chart.mouseIsDown ||\n                        axis.isInternal) && (\n                // Scrollbar buttons are the other execption:\n                !axis.eventArgs ||\n                    axis.eventArgs && axis.eventArgs.trigger !== 'navigator')) {\n                    axis.max += axis.options.overscroll;\n                    // Live data and buttons require translation for the min:\n                    if (!axis.isInternal && defined(axis.userMin)) {\n                        axis.min += axis.options.overscroll;\n                    }\n                }\n            }\n            /**\n             * For ordinal axis, that loads data async, redraw axis after data is\n             * loaded. If we don't do that, axis will have the same extremes as\n             * previously, but ordinal positions won't be calculated. See #10290\n             * @private\n             */\n            function onAxisAfterSetScale() {\n                var axis = this;\n                if (axis.horiz && !axis.isDirty) {\n                    axis.isDirty = axis.isOrdinal &&\n                        axis.chart.navigator &&\n                        !axis.chart.navigator.adaptToUpdatedData;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInitialAxisTranslation() {\n                var axis = this;\n                if (axis.ordinal) {\n                    axis.ordinal.beforeSetTickPositions();\n                    axis.tickInterval = axis.ordinal.postProcessTickInterval(axis.tickInterval);\n                }\n            }\n            /**\n             * Extending the Chart.pan method for ordinal axes\n             * @private\n             */\n            function onChartPan(e) {\n                var chart = this,\n                    xAxis = chart.xAxis[0],\n                    overscroll = xAxis.options.overscroll,\n                    chartX = e.originalEvent.chartX,\n                    panning = chart.options.chart.panning;\n                var runBase = false;\n                if (panning &&\n                    panning.type !== 'y' &&\n                    xAxis.options.ordinal &&\n                    xAxis.series.length) {\n                    var mouseDownX = chart.mouseDownX,\n                        extremes = xAxis.getExtremes(),\n                        dataMax = extremes.dataMax,\n                        min = extremes.min,\n                        max = extremes.max,\n                        hoverPoints = chart.hoverPoints,\n                        closestPointRange = (xAxis.closestPointRange ||\n                            (xAxis.ordinal && xAxis.ordinal.overscrollPointsRange)),\n                        pointPixelWidth = (xAxis.translationSlope *\n                            (xAxis.ordinal.slope || closestPointRange)), \n                        // how many ordinal units did we move?\n                        movedUnits = (mouseDownX - chartX) / pointPixelWidth, \n                        // get index of all the chart's points\n                        extendedAxis = {\n                            ordinal: {\n                                positions: xAxis.ordinal.getExtendedPositions()\n                            }\n                        },\n                        index2val_1 = xAxis.index2val,\n                        val2lin_1 = xAxis.val2lin;\n                    var trimmedRange = void 0,\n                        ordinalPositions = void 0,\n                        searchAxisLeft = void 0,\n                        searchAxisRight = void 0;\n                    // we have an ordinal axis, but the data is equally spaced\n                    if (!extendedAxis.ordinal.positions) {\n                        runBase = true;\n                    }\n                    else if (Math.abs(movedUnits) > 1) {\n                        // Remove active points for shared tooltip\n                        if (hoverPoints) {\n                            hoverPoints.forEach(function (point) {\n                                point.setState();\n                            });\n                        }\n                        if (movedUnits < 0) {\n                            searchAxisLeft = extendedAxis;\n                            searchAxisRight = xAxis.ordinal.positions ?\n                                xAxis : extendedAxis;\n                        }\n                        else {\n                            searchAxisLeft = xAxis.ordinal.positions ?\n                                xAxis : extendedAxis;\n                            searchAxisRight = extendedAxis;\n                        }\n                        // In grouped data series, the last ordinal position represents\n                        // the grouped data, which is to the left of the real data max.\n                        // If we don't compensate for this, we will be allowed to pan\n                        // grouped data series passed the right of the plot area.\n                        ordinalPositions = searchAxisRight.ordinal.positions;\n                        if (dataMax >\n                            ordinalPositions[ordinalPositions.length - 1]) {\n                            ordinalPositions.push(dataMax);\n                        }\n                        // Get the new min and max values by getting the ordinal index\n                        // for the current extreme, then add the moved units and\n                        // translate back to values. This happens on the extended\n                        // ordinal positions if the new position is out of range, else\n                        // it happens on the current x axis which is smaller and faster.\n                        chart.fixedRange = max - min;\n                        trimmedRange = xAxis.navigatorAxis\n                            .toFixedRange(void 0, void 0, index2val_1.apply(searchAxisLeft, [\n                            val2lin_1.apply(searchAxisLeft, [min, true]) +\n                                movedUnits\n                        ]), index2val_1.apply(searchAxisRight, [\n                            val2lin_1.apply(searchAxisRight, [max, true]) +\n                                movedUnits\n                        ]));\n                        // Apply it if it is within the available data range\n                        if (trimmedRange.min >= Math.min(extremes.dataMin, min) &&\n                            trimmedRange.max <= Math.max(dataMax, max) +\n                                overscroll) {\n                            xAxis.setExtremes(trimmedRange.min, trimmedRange.max, true, false, { trigger: 'pan' });\n                        }\n                        chart.mouseDownX = chartX; // set new reference for next run\n                        css(chart.container, { cursor: 'move' });\n                    }\n                }\n                else {\n                    runBase = true;\n                }\n                // revert to the linear chart.pan version\n                if (runBase || (panning && /y/.test(panning.type))) {\n                    if (overscroll) {\n                        xAxis.max = xAxis.dataMax + overscroll;\n                    }\n                }\n                else {\n                    e.preventDefault();\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesUpdatedData() {\n                var xAxis = this.xAxis;\n                // Destroy the extended ordinal index on updated data\n                // and destroy extendedOrdinalPositions, #16055.\n                if (xAxis && xAxis.options.ordinal) {\n                    delete xAxis.ordinal.index;\n                    delete xAxis.ordinal.extendedOrdinalPositions;\n                }\n            }\n            /**\n             * Translate from a linear axis value to the corresponding ordinal axis\n             * position. If there are no gaps in the ordinal axis this will be the\n             * same. The translated value is the value that the point would have if\n             * the axis was linear, using the same min and max.\n             *\n             * @private\n             * @function Highcharts.Axis#val2lin\n             * @param {number} val\n             * The axis value.\n             * @param {boolean} [toIndex]\n             * Whether to return the index in the ordinalPositions or the new value.\n             */\n            function val2lin(val, toIndex) {\n                var axis = this,\n                    ordinal = axis.ordinal,\n                    ordinalPositions = ordinal.positions;\n                var slope = ordinal.slope,\n                    extendedOrdinalPositions = ordinal.extendedOrdinalPositions;\n                if (!ordinalPositions) {\n                    return val;\n                }\n                var ordinalLength = ordinalPositions.length;\n                var ordinalIndex;\n                // If the searched value is inside visible plotArea, ivastigate the\n                // value basing on ordinalPositions.\n                if (ordinalPositions[0] <= val &&\n                    ordinalPositions[ordinalLength - 1] >= val) {\n                    ordinalIndex = getIndexInArray(ordinalPositions, val);\n                    // final return value is based on ordinalIndex\n                }\n                else {\n                    if (!extendedOrdinalPositions) {\n                        extendedOrdinalPositions =\n                            ordinal.getExtendedPositions &&\n                                ordinal.getExtendedPositions();\n                        ordinal.extendedOrdinalPositions = extendedOrdinalPositions;\n                    }\n                    if (!(extendedOrdinalPositions && extendedOrdinalPositions.length)) {\n                        return val;\n                    }\n                    var length_2 = extendedOrdinalPositions.length;\n                    if (!slope) {\n                        slope =\n                            (extendedOrdinalPositions[length_2 - 1] -\n                                extendedOrdinalPositions[0]) /\n                                length_2;\n                    }\n                    // OriginalPointReference is equal to the index of\n                    // first point of ordinalPositions in extendedOrdinalPositions.\n                    var originalPositionsReference = getIndexInArray(extendedOrdinalPositions,\n                        ordinalPositions[0]);\n                    // If the searched value is outside the visiblePlotArea,\n                    // check if it is inside extendedOrdinalPositions.\n                    if (val >= extendedOrdinalPositions[0] &&\n                        val <=\n                            extendedOrdinalPositions[length_2 - 1]) {\n                        // Return Value\n                        ordinalIndex = getIndexInArray(extendedOrdinalPositions, val) -\n                            originalPositionsReference;\n                    }\n                    else {\n                        // Since ordinal.slope is the average distance between 2\n                        // points on visible plotArea, this can be used to calculete\n                        // the approximate position of the point, which is outside\n                        // the extededOrdinalPositions.\n                        if (val < extendedOrdinalPositions[0]) {\n                            var diff = extendedOrdinalPositions[0] - val,\n                                approximateIndexOffset = diff / slope;\n                            ordinalIndex =\n                                -originalPositionsReference -\n                                    approximateIndexOffset;\n                        }\n                        else {\n                            var diff = val -\n                                    extendedOrdinalPositions[length_2 - 1],\n                                approximateIndexOffset = diff / slope;\n                            ordinalIndex =\n                                approximateIndexOffset +\n                                    length_2 -\n                                    originalPositionsReference;\n                        }\n                    }\n                }\n                return toIndex ? ordinalIndex : slope * (ordinalIndex || 0) +\n                    ordinal.offset;\n            }\n            /* *\n             *\n             *  Classes\n             *\n             * */\n            /**\n             * @private\n             */\n            var Additions = /** @class */ (function () {\n                    /* *\n                     *\n                     *  Constructors\n                     *\n                     * */\n                    /**\n                     * @private\n                     */\n                    function Additions(axis) {\n                        this.index = {};\n                    this.axis = axis;\n                }\n                /* *\n                *\n                *  Functions\n                *\n                * */\n                /**\n                 * Calculate the ordinal positions before tick positions are calculated.\n                 * @private\n                 */\n                Additions.prototype.beforeSetTickPositions = function () {\n                    var axis = this.axis,\n                        ordinal = axis.ordinal,\n                        extremes = axis.getExtremes(),\n                        min = extremes.min,\n                        max = extremes.max,\n                        hasBreaks = axis.isXAxis && !!axis.options.breaks,\n                        isOrdinal = axis.options.ordinal,\n                        ignoreHiddenSeries = axis.chart.options.chart.ignoreHiddenSeries;\n                    var len,\n                        uniqueOrdinalPositions,\n                        dist,\n                        minIndex,\n                        maxIndex,\n                        slope,\n                        i,\n                        ordinalPositions = [],\n                        overscrollPointsRange = Number.MAX_VALUE,\n                        useOrdinal = false;\n                    // Apply the ordinal logic\n                    if (isOrdinal || hasBreaks) { // #4167 YAxis is never ordinal ?\n                        axis.series.forEach(function (series, i) {\n                            uniqueOrdinalPositions = [];\n                            if ((!ignoreHiddenSeries || series.visible !== false) &&\n                                (series\n                                    .takeOrdinalPosition !== false ||\n                                    hasBreaks)) {\n                                // concatenate the processed X data into the existing\n                                // positions, or the empty array\n                                ordinalPositions = ordinalPositions.concat(series.processedXData);\n                                len = ordinalPositions.length;\n                                // remove duplicates (#1588)\n                                ordinalPositions.sort(function (a, b) {\n                                    // without a custom function it is sorted as strings\n                                    return a - b;\n                                });\n                                overscrollPointsRange = Math.min(overscrollPointsRange, pick(\n                                // Check for a single-point series:\n                                series.closestPointRange, overscrollPointsRange));\n                                if (len) {\n                                    i = 0;\n                                    while (i < len - 1) {\n                                        if (ordinalPositions[i] !==\n                                            ordinalPositions[i + 1]) {\n                                            uniqueOrdinalPositions.push(ordinalPositions[i + 1]);\n                                        }\n                                        i++;\n                                    }\n                                    // Check first item:\n                                    if (uniqueOrdinalPositions[0] !==\n                                        ordinalPositions[0]) {\n                                        uniqueOrdinalPositions.unshift(ordinalPositions[0]);\n                                    }\n                                    ordinalPositions = uniqueOrdinalPositions;\n                                }\n                            }\n                        });\n                        // cache the length\n                        len = ordinalPositions.length;\n                        // Check if we really need the overhead of mapping axis data\n                        // against the ordinal positions. If the series consist of\n                        // evenly spaced data any way, we don't need any ordinal logic.\n                        if (len > 2) { // two points have equal distance by default\n                            dist = ordinalPositions[1] - ordinalPositions[0];\n                            i = len - 1;\n                            while (i-- && !useOrdinal) {\n                                if (ordinalPositions[i + 1] - ordinalPositions[i] !==\n                                    dist) {\n                                    useOrdinal = true;\n                                }\n                            }\n                            // When zooming in on a week, prevent axis padding for\n                            // weekends even though the data within the week is evenly\n                            // spaced.\n                            if (!axis.options.keepOrdinalPadding &&\n                                (ordinalPositions[0] - min > dist ||\n                                    (max -\n                                        ordinalPositions[ordinalPositions.length - 1]) > dist)) {\n                                useOrdinal = true;\n                            }\n                        }\n                        else if (axis.options.overscroll) {\n                            if (len === 2) {\n                                // Exactly two points, distance for overscroll is fixed:\n                                overscrollPointsRange =\n                                    ordinalPositions[1] - ordinalPositions[0];\n                            }\n                            else if (len === 1) {\n                                // We have just one point, closest distance is unknown.\n                                // Assume then it is last point and overscrolled range:\n                                overscrollPointsRange = axis.options.overscroll;\n                                ordinalPositions = [\n                                    ordinalPositions[0],\n                                    ordinalPositions[0] + overscrollPointsRange\n                                ];\n                            }\n                            else {\n                                // In case of zooming in on overscrolled range, stick to\n                                // the old range:\n                                overscrollPointsRange = ordinal.overscrollPointsRange;\n                            }\n                        }\n                        // Record the slope and offset to compute the linear values from\n                        // the array index. Since the ordinal positions may exceed the\n                        // current range, get the start and end positions within it\n                        // (#719, #665b)\n                        if (useOrdinal || axis.forceOrdinal) {\n                            if (axis.options.overscroll) {\n                                ordinal.overscrollPointsRange = overscrollPointsRange;\n                                ordinalPositions = ordinalPositions.concat(ordinal.getOverscrollPositions());\n                            }\n                            // Register\n                            ordinal.positions = ordinalPositions;\n                            // This relies on the ordinalPositions being set. Use\n                            // Math.max and Math.min to prevent padding on either sides\n                            // of the data.\n                            minIndex = axis.ordinal2lin(// #5979\n                            Math.max(min, ordinalPositions[0]), true);\n                            maxIndex = Math.max(axis.ordinal2lin(Math.min(max, ordinalPositions[ordinalPositions.length - 1]), true), 1); // #3339\n                            // Set the slope and offset of the values compared to the\n                            // indices in the ordinal positions\n                            ordinal.slope = slope = (max - min) / (maxIndex - minIndex);\n                            ordinal.offset = min - (minIndex * slope);\n                        }\n                        else {\n                            ordinal.overscrollPointsRange = pick(axis.closestPointRange, ordinal.overscrollPointsRange);\n                            ordinal.positions = axis.ordinal.slope = ordinal.offset =\n                                void 0;\n                        }\n                    }\n                    axis.isOrdinal = isOrdinal && useOrdinal; // #3818, #4196, #4926\n                    ordinal.groupIntervalFactor = null; // reset for next run\n                };\n                /**\n                 * Faster way of using the Array.indexOf method.\n                 * Works for sorted arrays only with unique values.\n                 *\n                 * @param {Array} sortedArray\n                 *        The sorted array inside which we are looking for.\n                 * @param {number} key\n                 *        The key to being found.\n                 * @param {boolean} indirectSearch\n                 *        In case of lack of the point in the array, should return\n                 *        value be equal to -1 or the closest smaller index.\n                 *  @private\n                 */\n                Additions.findIndexOf = function (sortedArray, key, indirectSearch) {\n                    var start = 0,\n                        end = sortedArray.length - 1,\n                        middle;\n                    while (start < end) {\n                        middle = Math.ceil((start + end) / 2);\n                        // Key found as the middle element.\n                        if (sortedArray[middle] <= key) {\n                            // Continue searching to the right.\n                            start = middle;\n                        }\n                        else {\n                            // Continue searching to the left.\n                            end = middle - 1;\n                        }\n                    }\n                    if (sortedArray[start] === key) {\n                        return start;\n                    }\n                    // Key could not be found.\n                    return !indirectSearch ? -1 : start;\n                };\n                /**\n                 * Get the ordinal positions for the entire data set. This is necessary\n                 * in chart panning because we need to find out what points or data\n                 * groups are available outside the visible range. When a panning\n                 * operation starts, if an index for the given grouping does not exists,\n                 * it is created and cached. This index is deleted on updated data, so\n                 * it will be regenerated the next time a panning operation starts.\n                 * @private\n                 */\n                Additions.prototype.getExtendedPositions = function () {\n                    var ordinal = this,\n                        axis = ordinal.axis,\n                        axisProto = axis.constructor.prototype,\n                        chart = axis.chart,\n                        grouping = axis.series[0].currentDataGrouping,\n                        key = grouping ?\n                            grouping.count + grouping.unitName :\n                            'raw',\n                        overscroll = axis.options.overscroll,\n                        extremes = axis.getExtremes();\n                    var fakeAxis,\n                        fakeSeries = void 0,\n                        ordinalIndex = ordinal.index;\n                    // If this is the first time, or the ordinal index is deleted by\n                    // updatedData,\n                    // create it.\n                    if (!ordinalIndex) {\n                        ordinalIndex = ordinal.index = {};\n                    }\n                    if (!ordinalIndex[key]) {\n                        // Create a fake axis object where the extended ordinal\n                        // positions are emulated\n                        fakeAxis = {\n                            series: [],\n                            chart: chart,\n                            forceOrdinal: false,\n                            getExtremes: function () {\n                                return {\n                                    min: extremes.dataMin,\n                                    max: extremes.dataMax + overscroll\n                                };\n                            },\n                            getGroupPixelWidth: axisProto.getGroupPixelWidth,\n                            getTimeTicks: axisProto.getTimeTicks,\n                            options: {\n                                ordinal: true\n                            },\n                            ordinal: {\n                                getGroupIntervalFactor: this.getGroupIntervalFactor\n                            },\n                            ordinal2lin: axisProto.ordinal2lin,\n                            getIndexOfPoint: axisProto.getIndexOfPoint,\n                            val2lin: axisProto.val2lin // #2590\n                        };\n                        fakeAxis.ordinal.axis = fakeAxis;\n                        // Add the fake series to hold the full data, then apply\n                        // processData to it\n                        axis.series.forEach(function (series) {\n                            fakeSeries = {\n                                xAxis: fakeAxis,\n                                xData: series.xData.slice(),\n                                chart: chart,\n                                destroyGroupedData: H.noop,\n                                getProcessedData: Series.prototype.getProcessedData,\n                                applyGrouping: Series.prototype.applyGrouping\n                            };\n                            fakeSeries.xData = fakeSeries.xData.concat(ordinal.getOverscrollPositions());\n                            fakeSeries.options = {\n                                dataGrouping: grouping ? {\n                                    firstAnchor: 'firstPoint',\n                                    anchor: 'middle',\n                                    lastAnchor: 'lastPoint',\n                                    enabled: true,\n                                    forced: true,\n                                    // doesn't matter which, use the fastest\n                                    approximation: 'open',\n                                    units: [[\n                                            grouping.unitName,\n                                            [grouping.count]\n                                        ]]\n                                } : {\n                                    enabled: false\n                                }\n                            };\n                            fakeAxis.series.push(fakeSeries);\n                            series.processData.apply(fakeSeries);\n                        });\n                        // Force to use the ordinal when points are evenly spaced (e.g.\n                        // weeks), #3825.\n                        if ((fakeSeries.closestPointRange !==\n                            fakeSeries.basePointRange) &&\n                            fakeSeries.currentDataGrouping) {\n                            fakeAxis.forceOrdinal = true;\n                        }\n                        // Run beforeSetTickPositions to compute the ordinalPositions\n                        axis.ordinal.beforeSetTickPositions.apply({ axis: fakeAxis });\n                        // Cache it\n                        ordinalIndex[key] = fakeAxis.ordinal.positions;\n                    }\n                    return ordinalIndex[key];\n                };\n                /**\n                 * Find the factor to estimate how wide the plot area would have been if\n                 * ordinal gaps were included. This value is used to compute an imagined\n                 * plot width in order to establish the data grouping interval.\n                 *\n                 * A real world case is the intraday-candlestick example. Without this\n                 * logic, it would show the correct data grouping when viewing a range\n                 * within each day, but once moving the range to include the gap between\n                 * two days, the interval would include the cut-away night hours and the\n                 * data grouping would be wrong. So the below method tries to compensate\n                 * by identifying the most common point interval, in this case days.\n                 *\n                 * An opposite case is presented in issue #718. We have a long array of\n                 * daily data, then one point is appended one hour after the last point.\n                 * We expect the data grouping not to change.\n                 *\n                 * In the future, if we find cases where this estimation doesn't work\n                 * optimally, we might need to add a second pass to the data grouping\n                 * logic, where we do another run with a greater interval if the number\n                 * of data groups is more than a certain fraction of the desired group\n                 * count.\n                 * @private\n                 */\n                Additions.prototype.getGroupIntervalFactor = function (xMin, xMax, series) {\n                    var ordinal = this,\n                        axis = ordinal.axis,\n                        processedXData = series.processedXData,\n                        len = processedXData.length,\n                        distances = [];\n                    var median,\n                        i,\n                        groupIntervalFactor = ordinal.groupIntervalFactor;\n                    // Only do this computation for the first series, let the other\n                    // inherit it (#2416)\n                    if (!groupIntervalFactor) {\n                        // Register all the distances in an array\n                        for (i = 0; i < len - 1; i++) {\n                            distances[i] = (processedXData[i + 1] -\n                                processedXData[i]);\n                        }\n                        // Sort them and find the median\n                        distances.sort(function (a, b) {\n                            return a - b;\n                        });\n                        median = distances[Math.floor(len / 2)];\n                        // Compensate for series that don't extend through the entire\n                        // axis extent. #1675.\n                        xMin = Math.max(xMin, processedXData[0]);\n                        xMax = Math.min(xMax, processedXData[len - 1]);\n                        ordinal.groupIntervalFactor = groupIntervalFactor =\n                            (len * median) / (xMax - xMin);\n                    }\n                    // Return the factor needed for data grouping\n                    return groupIntervalFactor;\n                };\n                /**\n                 * Get index of point inside the ordinal positions array.\n                 *\n                 * @private\n                 * @param {number} val\n                 * The pixel value of a point.\n                 *\n                 * @param {Array<number>} [ordinallArray]\n                 * An array of all points available on the axis for the given data set.\n                 * Either ordinalPositions if the value is inside the plotArea or\n                 * extendedOrdinalPositions if not.\n                 */\n                Additions.prototype.getIndexOfPoint = function (val, ordinalArray) {\n                    var ordinal = this,\n                        axis = ordinal.axis,\n                        firstPointVal = ordinal.positions ? ordinal.positions[0] : 0;\n                    var firstPointX = axis.series[0].points &&\n                            axis.series[0].points[0] &&\n                            axis.series[0].points[0].plotX ||\n                            axis.minPixelPadding; // #15987\n                        // When more series assign to axis, find the smallest one, #15987.\n                        if (axis.series.length > 1) {\n                            axis.series.forEach(function (series) {\n                                if (series.points &&\n                                    defined(series.points[0]) &&\n                                    defined(series.points[0].plotX) &&\n                                    series.points[0].plotX < firstPointX) {\n                                    firstPointX = series.points[0].plotX;\n                            }\n                        });\n                    }\n                    // Distance in pixels between two points on the ordinal axis in the\n                    // current zoom.\n                    var ordinalPointPixelInterval = axis.translationSlope * (ordinal.slope ||\n                            axis.closestPointRange ||\n                            ordinal.overscrollPointsRange), \n                        // toValue for the first point.\n                        shiftIndex = (val - firstPointX) / ordinalPointPixelInterval;\n                    return Additions.findIndexOf(ordinalArray, firstPointVal) + shiftIndex;\n                };\n                /**\n                 * Get ticks for an ordinal axis within a range where points don't\n                 * exist. It is required when overscroll is enabled. We can't base on\n                 * points, because we may not have any, so we use approximated\n                 * pointRange and generate these ticks between Axis.dataMax,\n                 * Axis.dataMax + Axis.overscroll evenly spaced. Used in panning and\n                 * navigator scrolling.\n                 * @private\n                 */\n                Additions.prototype.getOverscrollPositions = function () {\n                    var ordinal = this,\n                        axis = ordinal.axis,\n                        extraRange = axis.options.overscroll,\n                        distance = ordinal.overscrollPointsRange,\n                        positions = [],\n                        max = axis.dataMax;\n                    if (defined(distance)) {\n                        // Max + pointRange because we need to scroll to the last\n                        while (max <= axis.dataMax + extraRange) {\n                            max += distance;\n                            positions.push(max);\n                        }\n                    }\n                    return positions;\n                };\n                /**\n                 * Make the tick intervals closer because the ordinal gaps make the\n                 * ticks spread out or cluster.\n                 * @private\n                 */\n                Additions.prototype.postProcessTickInterval = function (tickInterval) {\n                    // Problem: https://jsfiddle.net/highcharts/FQm4E/1/. This is a case\n                    // where this algorithm doesn't work optimally. In this case, the\n                    // tick labels are spread out per week, but all the gaps reside\n                    // within weeks. So we have a situation where the labels are courser\n                    // than the ordinal gaps, and thus the tick interval should not be\n                    // altered.\n                    var ordinal = this,\n                        axis = ordinal.axis,\n                        ordinalSlope = ordinal.slope;\n                    var ret;\n                    if (ordinalSlope) {\n                        if (!axis.options.breaks) {\n                            ret = (tickInterval /\n                                (ordinalSlope / axis.closestPointRange));\n                        }\n                        else {\n                            ret = axis.closestPointRange || tickInterval; // #7275\n                        }\n                    }\n                    else {\n                        ret = tickInterval;\n                    }\n                    return ret;\n                };\n                return Additions;\n            }());\n            OrdinalAxis.Additions = Additions;\n        })(OrdinalAxis || (OrdinalAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OrdinalAxis;\n    });\n    _registerModule(_modules, 'Series/DataModifyComposition.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Series/Point.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (Axis, Point, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var pointTooltipFormatter = Point.prototype.tooltipFormatter;\n        var addEvent = U.addEvent,\n            arrayMax = U.arrayMax,\n            arrayMin = U.arrayMin,\n            correctFloat = U.correctFloat,\n            defined = U.defined,\n            isArray = U.isArray,\n            isNumber = U.isNumber,\n            isString = U.isString,\n            pick = U.pick;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var DataModifyComposition;\n        (function (DataModifyComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            var composedClasses = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Extends the series, axis and point classes with\n             * compare and cumulative support.\n             *\n             * @private\n             *\n             * @param SeriesClass\n             * Series class to use.\n             *\n             * @param AxisClass\n             * Axis class to extend.\n             *\n             * @param PointClass\n             * Point class to use.\n             */\n            function compose(SeriesClass, AxisClass, PointClass) {\n                if (composedClasses.indexOf(SeriesClass) === -1) {\n                    composedClasses.push(SeriesClass);\n                    var seriesProto = SeriesClass.prototype;\n                    seriesProto.setCompare = seriesSetCompare;\n                    seriesProto.setCumulative = seriesSetCumulative;\n                    addEvent(SeriesClass, 'afterInit', afterInit);\n                    addEvent(SeriesClass, 'afterGetExtremes', afterGetExtremes);\n                    addEvent(SeriesClass, 'afterProcessData', afterProcessData);\n                }\n                if (composedClasses.indexOf(AxisClass) === -1) {\n                    composedClasses.push(AxisClass);\n                    var axisProto = AxisClass.prototype;\n                    axisProto.setCompare = axisSetCompare;\n                    axisProto.setModifier = setModifier;\n                    axisProto.setCumulative = axisSetCumulative;\n                }\n                if (composedClasses.indexOf(PointClass) === -1) {\n                    composedClasses.push(PointClass);\n                    var pointProto = PointClass.prototype;\n                    pointProto.tooltipFormatter = tooltipFormatter;\n                }\n                return SeriesClass;\n            }\n            DataModifyComposition.compose = compose;\n            /* ********************************************************************** *\n             *  Start shared compare and cumulative logic                             *\n             * ********************************************************************** */\n            /**\n             * Shared code for the axis.setCompare() and the axis.setCumulative()\n             * methods. Inits the 'compare' or the 'cumulative' mode.\n             * @private\n             */\n            function setModifier(mode, modeState, redraw) {\n                if (!this.isXAxis) {\n                    this.series.forEach(function (series) {\n                        if (mode === 'compare' &&\n                            typeof modeState !== 'boolean') {\n                            series.setCompare(modeState, false);\n                        }\n                        else if (mode === 'cumulative' &&\n                            !isString(modeState)) {\n                            series.setCumulative(modeState, false);\n                        }\n                    });\n                    if (pick(redraw, true)) {\n                        this.chart.redraw();\n                    }\n                }\n            }\n            /**\n             * Extend the tooltip formatter by adding support for the point.change\n             * variable as well as the changeDecimals option.\n             *\n             * @ignore\n             * @function Highcharts.Point#tooltipFormatter\n             *\n             * @param {string} pointFormat\n             */\n            function tooltipFormatter(pointFormat) {\n                var point = this, numberFormatter = point.series.chart.numberFormatter, replace = function (value) {\n                        pointFormat = pointFormat.replace('{point.' + value + '}', (point[value] > 0 && value === 'change' ? '+' : '') +\n                            numberFormatter(point[value], pick(point.series.tooltipOptions.changeDecimals, 2)));\n                };\n                if (defined(point.change)) {\n                    replace('change');\n                }\n                if (defined(point.cumulativeSum)) {\n                    replace('cumulativeSum');\n                }\n                return pointTooltipFormatter.apply(this, [pointFormat]);\n            }\n            /**\n             * Extend series.init by adding a methods to modify the y values used\n             * for plotting on the y axis. For compare mode, this method is called both\n             * from the axis when finding dataMin and dataMax,\n             * and from the series.translate method.\n             *\n             * @ignore\n             * @function Highcharts.Series#init\n             */\n            function afterInit() {\n                var compare = this.options.compare;\n                var dataModify;\n                if (compare === 'percent' ||\n                    compare === 'value' ||\n                    this.options.cumulative) {\n                    dataModify = new Additions(this);\n                    if (compare === 'percent' || compare === 'value') {\n                        // Set comparison mode\n                        dataModify.initCompare(compare);\n                    }\n                    else {\n                        // Set Cumulative Sum mode\n                        dataModify.initCumulative();\n                    }\n                }\n                this.dataModify = dataModify;\n            }\n            /**\n             * Adjust the extremes (compare and cumulative modify the data).\n             * @private\n             */\n            function afterGetExtremes(e) {\n                var dataExtremes = e.dataExtremes,\n                    activeYData = dataExtremes.activeYData;\n                if (this.dataModify && dataExtremes) {\n                    var extremes = void 0;\n                    if (this.options.compare) {\n                        extremes = [\n                            this.dataModify.modifyValue(dataExtremes.dataMin),\n                            this.dataModify.modifyValue(dataExtremes.dataMax)\n                        ];\n                    }\n                    else if (this.options.cumulative &&\n                        isArray(activeYData) &&\n                        // If only one y visible, sum doesn't change\n                        // so no need to change extremes\n                        activeYData.length >= 2) {\n                        extremes = Additions.getCumulativeExtremes(activeYData);\n                    }\n                    if (extremes) {\n                        dataExtremes.dataMin = arrayMin(extremes);\n                        dataExtremes.dataMax = arrayMax(extremes);\n                    }\n                }\n            }\n            /* ********************************************************************** *\n             *  End shared compare and cumulative logic                               *\n             * ********************************************************************** */\n            /* ********************************************************************** *\n             *  Start value compare logic                                             *\n             * ********************************************************************** */\n            /**\n             * Highcharts Stock only. Set the\n             * [compare](https://api.highcharts.com/highstock/plotOptions.series.compare)\n             * mode of the series after render time.\n             * In most cases it is more useful running\n             * {@link Axis#setCompare} on the X axis to update all its series.\n             *\n             * @function Highcharts.Series#setCompare\n             *\n             * @param {string|null} [compare]\n             *        Can be one of `undefined` (default), `null`, `\"percent\"`\n             *        or `\"value\"`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function seriesSetCompare(compare, redraw) {\n                // Survive to export, #5485 (and for options generally)\n                this.options.compare = this.userOptions.compare = compare;\n                // Fire series.init() that will set or delete series.dataModify\n                this.update({}, pick(redraw, true));\n                if (this.dataModify && (compare === 'value' || compare === 'percent')) {\n                    this.dataModify.initCompare(compare);\n                }\n                else {\n                    // When disabling, clear the points\n                    this.points.forEach(function (point) {\n                        delete point.change;\n                    });\n                }\n            }\n            /**\n             * Extend series.processData by finding the first y value in the plot area,\n             * used for comparing the following values\n             *\n             * @ignore\n             * @function Highcharts.Series#processData\n             */\n            function afterProcessData() {\n                var series = this;\n                if (series.xAxis && // not pies\n                    series.processedYData &&\n                    series.dataModify) {\n                    var processedXData = series.processedXData,\n                        processedYData = series.processedYData,\n                        length_1 = processedYData.length,\n                        compareStart = series.options.compareStart === true ? 0 : 1;\n                    var keyIndex = -1,\n                        i = void 0;\n                    // For series with more than one value (range, OHLC etc), compare\n                    // against close or the pointValKey (#4922, #3112, #9854)\n                    if (series.pointArrayMap) {\n                        keyIndex = series.pointArrayMap.indexOf(series.options.pointValKey || series.pointValKey || 'y');\n                    }\n                    // find the first value for comparison\n                    for (i = 0; i < length_1 - compareStart; i++) {\n                        var compareValue = processedYData[i] && keyIndex > -1 ?\n                                processedYData[i][keyIndex] : processedYData[i];\n                        if (isNumber(compareValue) &&\n                            compareValue !== 0 &&\n                            processedXData[i + compareStart] >= (series.xAxis.min || 0)) {\n                            series.dataModify.compareValue = compareValue;\n                            break;\n                        }\n                    }\n                }\n            }\n            /**\n             * Highcharts Stock only. Set the compare mode on all series\n             * belonging to a Y axis.\n             *\n             * @see [plotOptions.series.compare](https://api.highcharts.com/highstock/plotOptions.series.compare)\n             *\n             * @sample stock/members/axis-setcompare/\n             *         Set compare\n             *\n             * @function Highcharts.Axis#setCompare\n             *\n             * @param {string|null} [compare]\n             *        The compare mode. Can be one of `undefined` (default), `null`,\n             *        `\"value\"` or `\"percent\"`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function axisSetCompare(compare, redraw) {\n                this.setModifier('compare', compare, redraw);\n            }\n            /* ********************************************************************** *\n             *  End value compare logic                                               *\n             * ********************************************************************** */\n            /* ********************************************************************** *\n             *  Start Cumulative Sum logic, author: Rafal Sebestjanski                *\n             * ********************************************************************** */\n            /**\n             * Highcharts Stock only. Set the\n             * [cumulative](https://api.highcharts.com/highstock/plotOptions.series.cumulative)\n             * mode of the series after render time.\n             * In most cases it is more useful running\n             * {@link Axis#setCumulative} on the Y axis to update all its series.\n             *\n             * @function Highcharts.Series#setCumulative\n             *\n             * @param {boolean} [cumulative=false]\n             *        Either enable or disable Cumulative Sum mode.\n             *        Can be one of `false` (default) or `true`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function seriesSetCumulative(cumulative, redraw) {\n                // Set default value to false\n                cumulative = pick(cumulative, false);\n                // Survive to export, #5485 (and for options generally)\n                this.options.cumulative = this.userOptions.cumulative = cumulative;\n                // Fire series.init() that will set or delete series.dataModify\n                this.update({}, pick(redraw, true));\n                // If should, turn on the Cumulative Sum mode\n                if (this.dataModify) {\n                    this.dataModify.initCumulative();\n                }\n                else {\n                    // When disabling, clear the points\n                    this.points.forEach(function (point) {\n                        delete point.cumulativeSum;\n                    });\n                }\n            }\n            /**\n             * Highcharts Stock only. Set the cumulative mode on all series\n             * belonging to a Y axis.\n             *\n             * @see [plotOptions.series.cumulative](https://api.highcharts.com/highstock/plotOptions.series.cumulative)\n             *\n             * @sample stock/members/axis-setcumulative/\n             *         Set cumulative\n             *\n             * @function Highcharts.Axis#setCumulative\n             *\n             * @param {boolean} [cumulative]\n             *        Whether to disable or enable the cumulative mode.\n             *        Can be one of `undefined` (default, treated as `false`),\n             *        `false` or `true`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function axisSetCumulative(cumulative, redraw) {\n                this.setModifier('cumulative', cumulative, redraw);\n            }\n            /* *\n             *\n             *  Classes\n             *\n             * */\n            /**\n             * @private\n             */\n            var Additions = /** @class */ (function () {\n                    /* *\n                     *\n                     *  Constructors\n                     *\n                     * */\n                    /**\n                     * @private\n                     */\n                    function Additions(series) {\n                        this.series = series;\n                }\n                /* *\n                *\n                *  Functions\n                *\n                * */\n                /**\n                 * @private\n                 */\n                Additions.prototype.modifyValue = function () {\n                    return 0;\n                };\n                /**\n                 * @ignore\n                 * @function Highcharts.Series#getCumulativeExtremes\n                 *\n                 * @param {Array} [activeYData]\n                 *        An array cointaining all the points' y values\n                 *        in a visible range.\n                 */\n                Additions.getCumulativeExtremes = function (activeYData) {\n                    var cumulativeDataMin = Infinity,\n                        cumulativeDataMax = -Infinity;\n                    activeYData.reduce(function (prev, cur) {\n                        var sum = prev + cur;\n                        cumulativeDataMin = Math.min(cumulativeDataMin, sum, prev);\n                        cumulativeDataMax = Math.max(cumulativeDataMax, sum, prev);\n                        return sum;\n                    });\n                    return [cumulativeDataMin, cumulativeDataMax];\n                };\n                /**\n                 * @ignore\n                 * @function Highcharts.Series#initCompare\n                 *\n                 * @param {string} [compare]\n                 *        Can be one of `\"percent\"` or `\"value\"`.\n                 */\n                Additions.prototype.initCompare = function (compare) {\n                    // Set the modifyValue method\n                    this.modifyValue = function (value, index) {\n                        if (value === null) {\n                            value = 0;\n                        }\n                        var compareValue = this.compareValue;\n                        if (typeof value !== 'undefined' &&\n                            typeof compareValue !== 'undefined') { // #2601, #5814\n                            // Get the modified value\n                            if (compare === 'value') {\n                                value -= compareValue;\n                                // Compare percent\n                            }\n                            else {\n                                var compareBase = this.series.options.compareBase;\n                                value = 100 * (value / compareValue) -\n                                    (compareBase === 100 ? 0 : 100);\n                            }\n                            // record for tooltip etc.\n                            if (typeof index !== 'undefined') {\n                                var point = this.series.points[index];\n                                if (point) {\n                                    point.change = value;\n                                }\n                            }\n                            return value;\n                        }\n                        return 0;\n                    };\n                };\n                /**\n                 * @ignore\n                 * @function Highcharts.Series#initCumulative\n                 */\n                Additions.prototype.initCumulative = function () {\n                    // Set the modifyValue method\n                    this.modifyValue = function (value, index) {\n                        if (value === null) {\n                            value = 0;\n                        }\n                        if (value !== void 0 && index !== void 0) {\n                            var prevPoint = index > 0 ?\n                                    this.series.points[index - 1] : null;\n                            // Get the modified value\n                            if (prevPoint && prevPoint.cumulativeSum) {\n                                value = correctFloat(prevPoint.cumulativeSum + value);\n                            }\n                            // Record for tooltip etc.\n                            var point = this.series.points[index];\n                            if (point) {\n                                point.cumulativeSum = value;\n                            }\n                            return value;\n                        }\n                        return 0;\n                    };\n                };\n                return Additions;\n            }());\n            DataModifyComposition.Additions = Additions;\n        })(DataModifyComposition || (DataModifyComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Compare the values of the series against the first non-null, non-\n         * zero value in the visible range. The y axis will show percentage\n         * or absolute change depending on whether `compare` is set to `\"percent\"`\n         * or `\"value\"`. When this is applied to multiple series, it allows\n         * comparing the development of the series against each other. Adds\n         * a `change` field to every point object.\n         *\n         * @see [compareBase](#plotOptions.series.compareBase)\n         * @see [Axis.setCompare()](/class-reference/Highcharts.Axis#setCompare)\n         * @see [Series.setCompare()](/class-reference/Highcharts.Series#setCompare)\n         *\n         * @sample {highstock} stock/plotoptions/series-compare-percent/\n         *         Percent\n         * @sample {highstock} stock/plotoptions/series-compare-value/\n         *         Value\n         *\n         * @type      {string}\n         * @since     1.0.1\n         * @product   highstock\n         * @apioption plotOptions.series.compare\n         */\n        /**\n         * Defines if comparison should start from the first point within the visible\n         * range or should start from the first point **before** the range.\n         *\n         * In other words, this flag determines if first point within the visible range\n         * will have 0% (`compareStart=true`) or should have been already calculated\n         * according to the previous point (`compareStart=false`).\n         *\n         * @sample {highstock} stock/plotoptions/series-comparestart/\n         *         Calculate compare within visible range\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     6.0.0\n         * @product   highstock\n         * @apioption plotOptions.series.compareStart\n         */\n        /**\n         * When [compare](#plotOptions.series.compare) is `percent`, this option\n         * dictates whether to use 0 or 100 as the base of comparison.\n         *\n         * @sample {highstock} stock/plotoptions/series-comparebase/\n         *         Compare base is 100\n         *\n         * @type       {number}\n         * @default    0\n         * @since      5.0.6\n         * @product    highstock\n         * @validvalue [0, 100]\n         * @apioption  plotOptions.series.compareBase\n         */\n        /**\n         * Cumulative Sum feature replaces points' values with the following formula:\n         * `sum of all previous points' values + current point's value`.\n         * Works only for points in a visible range.\n         * Adds the `cumulativeSum` field to each point object that can be accessed\n         * e.g. in the [tooltip.pointFormat](https://api.highcharts.com/highstock/tooltip.pointFormat).\n         *\n         * @see [Axis.setCumulative()](/class-reference/Highcharts.Axis#setCumulative)\n         * @see [Series.setCumulative()](/class-reference/Highcharts.Series#setCumulative)\n         *\n         * @sample {highstock} stock/plotoptions/series-cumulative-sum/\n         *         Cumulative Sum\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since 9.3.0\n         * @product   highstock\n         * @apioption plotOptions.series.cumulative\n         */\n        ''; // keeps doclets above in transpiled file\n\n        return DataModifyComposition;\n    });\n    _registerModule(_modules, 'Core/Axis/BrokenAxis.js', [_modules['Extensions/Stacking.js'], _modules['Core/Utilities.js']], function (StackItem, U) {\n        /* *\n         *\n         *  (c) 2009-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var addEvent = U.addEvent,\n            find = U.find,\n            fireEvent = U.fireEvent,\n            isArray = U.isArray,\n            isNumber = U.isNumber,\n            pick = U.pick;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Axis with support of broken data rows.\n         * @private\n         */\n        var BrokenAxis;\n        (function (BrokenAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            var composedClasses = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Adds support for broken axes.\n             * @private\n             */\n            function compose(AxisClass, SeriesClass) {\n                if (composedClasses.indexOf(AxisClass) === -1) {\n                    composedClasses.push(AxisClass);\n                    AxisClass.keepProps.push('brokenAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterSetTickPositions', onAxisAfterSetTickPositions);\n                    addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n                }\n                if (composedClasses.indexOf(SeriesClass) === -1) {\n                    composedClasses.push(SeriesClass);\n                    var seriesProto = SeriesClass.prototype;\n                    seriesProto.drawBreaks = seriesDrawBreaks;\n                    seriesProto.gappedPath = seriesGappedPath;\n                    addEvent(SeriesClass, 'afterGeneratePoints', onSeriesAfterGeneratePoints);\n                    addEvent(SeriesClass, 'afterRender', onSeriesAfterRender);\n                }\n                return AxisClass;\n            }\n            BrokenAxis.compose = compose;\n            /**\n             * @private\n             */\n            function onAxisAfterInit() {\n                if (typeof this.brokenAxis !== 'undefined') {\n                    this.brokenAxis.setBreaks(this.options.breaks, false);\n                }\n            }\n            /**\n             * Force Axis to be not-ordinal when breaks are defined.\n             * @private\n             */\n            function onAxisAfterSetOptions() {\n                var axis = this;\n                if (axis.brokenAxis && axis.brokenAxis.hasBreaks) {\n                    axis.options.ordinal = false;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisAfterSetTickPositions() {\n                var axis = this,\n                    brokenAxis = axis.brokenAxis;\n                if (brokenAxis &&\n                    brokenAxis.hasBreaks) {\n                    var tickPositions = axis.tickPositions,\n                        info = axis.tickPositions.info,\n                        newPositions = [];\n                    for (var i = 0; i < tickPositions.length; i++) {\n                        if (!brokenAxis.isInAnyBreak(tickPositions[i])) {\n                            newPositions.push(tickPositions[i]);\n                        }\n                    }\n                    axis.tickPositions = newPositions;\n                    axis.tickPositions.info = info;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInit() {\n                var axis = this;\n                if (!axis.brokenAxis) {\n                    axis.brokenAxis = new Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterGeneratePoints() {\n                var _a = this,\n                    isDirty = _a.isDirty,\n                    connectNulls = _a.options.connectNulls,\n                    points = _a.points,\n                    xAxis = _a.xAxis,\n                    yAxis = _a.yAxis;\n                // Set, or reset visibility of the points. Axis.setBreaks marks\n                // the series as isDirty\n                if (isDirty) {\n                    var i = points.length;\n                    while (i--) {\n                        var point = points[i];\n                        // Respect nulls inside the break (#4275)\n                        var nullGap = point.y === null && connectNulls === false;\n                        var isPointInBreak = (!nullGap && ((xAxis &&\n                                xAxis.brokenAxis &&\n                                xAxis.brokenAxis.isInAnyBreak(point.x,\n                            true)) || (yAxis &&\n                                yAxis.brokenAxis &&\n                                yAxis.brokenAxis.isInAnyBreak(point.y,\n                            true))));\n                        // Set point.visible if in any break.\n                        // If not in break, reset visible to original value.\n                        point.visible = isPointInBreak ?\n                            false :\n                            point.options.visible !== false;\n                    }\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterRender() {\n                this.drawBreaks(this.xAxis, ['x']);\n                this.drawBreaks(this.yAxis, pick(this.pointArrayMap, ['y']));\n            }\n            /**\n             * @private\n             */\n            function seriesDrawBreaks(axis, keys) {\n                var series = this,\n                    points = series.points;\n                var breaks,\n                    threshold,\n                    eventName,\n                    y;\n                if (axis && // #5950\n                    axis.brokenAxis &&\n                    axis.brokenAxis.hasBreaks) {\n                    var brokenAxis_1 = axis.brokenAxis;\n                    keys.forEach(function (key) {\n                        breaks = brokenAxis_1 && brokenAxis_1.breakArray || [];\n                        threshold = axis.isXAxis ?\n                            axis.min :\n                            pick(series.options.threshold, axis.min);\n                        points.forEach(function (point) {\n                            y = pick(point['stack' + key.toUpperCase()], point[key]);\n                            breaks.forEach(function (brk) {\n                                if (isNumber(threshold) && isNumber(y)) {\n                                    eventName = false;\n                                    if ((threshold < brk.from && y > brk.to) ||\n                                        (threshold > brk.from && y < brk.from)) {\n                                        eventName = 'pointBreak';\n                                    }\n                                    else if ((threshold < brk.from &&\n                                        y > brk.from &&\n                                        y < brk.to) || (threshold > brk.from &&\n                                        y > brk.to &&\n                                        y < brk.from)) {\n                                        eventName = 'pointInBreak';\n                                    }\n                                    if (eventName) {\n                                        fireEvent(axis, eventName, { point: point, brk: brk });\n                                    }\n                                }\n                            });\n                        });\n                    });\n                }\n            }\n            /**\n             * Extend getGraphPath by identifying gaps in the data so that we\n             * can draw a gap in the line or area. This was moved from ordinal\n             * axis module to broken axis module as of #5045.\n             *\n             * @private\n             * @function Highcharts.Series#gappedPath\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Gapped path\n             */\n            function seriesGappedPath() {\n                var currentDataGrouping = this.currentDataGrouping,\n                    groupingSize = currentDataGrouping && currentDataGrouping.gapSize,\n                    points = this.points.slice(),\n                    yAxis = this.yAxis;\n                var gapSize = this.options.gapSize,\n                    i = points.length - 1,\n                    stack;\n                /**\n                 * Defines when to display a gap in the graph, together with the\n                 * [gapUnit](plotOptions.series.gapUnit) option.\n                 *\n                 * In case when `dataGrouping` is enabled, points can be grouped\n                 * into a larger time span. This can make the grouped points to\n                 * have a greater distance than the absolute value of `gapSize`\n                 * property, which will result in disappearing graph completely.\n                 * To prevent this situation the mentioned distance between\n                 * grouped points is used instead of previously defined\n                 * `gapSize`.\n                 *\n                 * In practice, this option is most often used to visualize gaps\n                 * in time series. In a stock chart, intraday data is available\n                 * for daytime hours, while gaps will appear in nights and\n                 * weekends.\n                 *\n                 * @see [gapUnit](plotOptions.series.gapUnit)\n                 * @see [xAxis.breaks](#xAxis.breaks)\n                 *\n                 * @sample {highstock} stock/plotoptions/series-gapsize/\n                 * Setting the gap size to 2 introduces gaps for weekends in\n                 * daily datasets.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @product   highstock\n                 * @requires  modules/broken-axis\n                 * @apioption plotOptions.series.gapSize\n                 */\n                /**\n                 * Together with [gapSize](plotOptions.series.gapSize), this\n                 * option defines where to draw gaps in the graph.\n                 *\n                 * When the `gapUnit` is `\"relative\"` (default), a gap size of 5\n                 * means that if the distance between two points is greater than\n                 * 5 times that of the two closest points, the graph will be\n                 * broken.\n                 *\n                 * When the `gapUnit` is `\"value\"`, the gap is based on absolute\n                 * axis values, which on a datetime axis is milliseconds. This\n                 * also applies to the navigator series that inherits gap\n                 * options from the base series.\n                 *\n                 * @see [gapSize](plotOptions.series.gapSize)\n                 *\n                 * @type       {string}\n                 * @default    relative\n                 * @since      5.0.13\n                 * @product    highstock\n                 * @validvalue [\"relative\", \"value\"]\n                 * @requires   modules/broken-axis\n                 * @apioption  plotOptions.series.gapUnit\n                 */\n                if (gapSize && i > 0) { // #5008\n                    // Gap unit is relative\n                    if (this.options.gapUnit !== 'value') {\n                        gapSize *= this.basePointRange;\n                    }\n                    // Setting a new gapSize in case dataGrouping is enabled\n                    // (#7686)\n                    if (groupingSize &&\n                        groupingSize > gapSize &&\n                        // Except when DG is forced (e.g. from other series)\n                        // and has lower granularity than actual points (#11351)\n                        groupingSize >= this.basePointRange) {\n                        gapSize = groupingSize;\n                    }\n                    // extension for ordinal breaks\n                    var current = void 0,\n                        next = void 0;\n                    while (i--) {\n                        // Reassign next if it is not visible\n                        if (!(next && next.visible !== false)) {\n                            next = points[i + 1];\n                        }\n                        current = points[i];\n                        // Skip iteration if one of the points is not visible\n                        if (next.visible === false || current.visible === false) {\n                            continue;\n                        }\n                        if (next.x - current.x > gapSize) {\n                            var xRange = (current.x + next.x) / 2;\n                            points.splice(// insert after this one\n                            i + 1, 0, {\n                                isNull: true,\n                                x: xRange\n                            });\n                            // For stacked chart generate empty stack items, #6546\n                            if (yAxis.stacking && this.options.stacking) {\n                                stack = yAxis.stacking.stacks[this.stackKey][xRange] = new StackItem(yAxis, yAxis.options.stackLabels, false, xRange, this.stack);\n                                stack.total = 0;\n                            }\n                        }\n                        // Assign current to next for the upcoming iteration\n                        next = current;\n                    }\n                }\n                // Call base method\n                return this.getGraphPath(points);\n            }\n            /* *\n             *\n             *  Class\n             *\n             * */\n            /**\n             * Provides support for broken axes.\n             * @private\n             * @class\n             */\n            var Additions = /** @class */ (function () {\n                    /* *\n                     *\n                     *  Constructors\n                     *\n                     * */\n                    function Additions(axis) {\n                        this.hasBreaks = false;\n                    this.axis = axis;\n                }\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                Additions.isInBreak = function (brk, val) {\n                    var repeat = brk.repeat || Infinity,\n                        from = brk.from,\n                        length = brk.to - brk.from,\n                        test = (val >= from ?\n                            (val - from) % repeat :\n                            repeat - ((from - val) % repeat));\n                    var ret;\n                    if (!brk.inclusive) {\n                        ret = test < length && test !== 0;\n                    }\n                    else {\n                        ret = test <= length;\n                    }\n                    return ret;\n                };\n                /**\n                 * @private\n                 */\n                Additions.lin2Val = function (val) {\n                    var axis = this;\n                    var brokenAxis = axis.brokenAxis;\n                    var breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    var nval = val,\n                        brk,\n                        i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.from >= nval) {\n                            break;\n                        }\n                        else if (brk.to < nval) {\n                            nval += brk.len;\n                        }\n                        else if (Additions.isInBreak(brk, nval)) {\n                            nval += brk.len;\n                        }\n                    }\n                    return nval;\n                };\n                /**\n                 * @private\n                 */\n                Additions.val2Lin = function (val) {\n                    var axis = this;\n                    var brokenAxis = axis.brokenAxis;\n                    var breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    var nval = val,\n                        brk,\n                        i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.to <= val) {\n                            nval -= brk.len;\n                        }\n                        else if (brk.from >= val) {\n                            break;\n                        }\n                        else if (Additions.isInBreak(brk, val)) {\n                            nval -= (val - brk.from);\n                            break;\n                        }\n                    }\n                    return nval;\n                };\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Returns the first break found where the x is larger then break.from\n                 * and smaller then break.to.\n                 *\n                 * @param {number} x\n                 * The number which should be within a break.\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} breaks\n                 * The array of breaks to search within.\n                 *\n                 * @return {Highcharts.XAxisBreaksOptions|undefined}\n                 * Returns the first break found that matches, returns false if no break\n                 * is found.\n                 */\n                Additions.prototype.findBreakAt = function (x, breaks) {\n                    return find(breaks, function (b) {\n                        return b.from < x && x < b.to;\n                    });\n                };\n                /**\n                 * @private\n                 */\n                Additions.prototype.isInAnyBreak = function (val, testKeep) {\n                    var brokenAxis = this,\n                        axis = brokenAxis.axis,\n                        breaks = axis.options.breaks || [];\n                    var i = breaks.length,\n                        inbrk,\n                        keep,\n                        ret;\n                    if (i && isNumber(val)) {\n                        while (i--) {\n                            if (Additions.isInBreak(breaks[i], val)) {\n                                inbrk = true;\n                                if (!keep) {\n                                    keep = pick(breaks[i].showPoints, !axis.isXAxis);\n                                }\n                            }\n                        }\n                        if (inbrk && testKeep) {\n                            ret = inbrk && !keep;\n                        }\n                        else {\n                            ret = inbrk;\n                        }\n                    }\n                    return ret;\n                };\n                /**\n                 * Dynamically set or unset breaks in an axis. This function in lighter\n                 * than usin Axis.update, and it also preserves animation.\n                 *\n                 * @private\n                 * @function Highcharts.Axis#setBreaks\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} [breaks]\n                 * The breaks to add. When `undefined` it removes existing breaks.\n                 *\n                 * @param {boolean} [redraw=true]\n                 * Whether to redraw the chart immediately.\n                 */\n                Additions.prototype.setBreaks = function (breaks, redraw) {\n                    var brokenAxis = this;\n                    var axis = brokenAxis.axis;\n                    var hasBreaks = (isArray(breaks) && !!breaks.length);\n                    axis.isDirty = brokenAxis.hasBreaks !== hasBreaks;\n                    brokenAxis.hasBreaks = hasBreaks;\n                    axis.options.breaks = axis.userOptions.breaks = breaks;\n                    axis.forceRedraw = true; // Force recalculation in setScale\n                    // Recalculate series related to the axis.\n                    axis.series.forEach(function (series) {\n                        series.isDirty = true;\n                    });\n                    if (!hasBreaks && axis.val2lin === Additions.val2Lin) {\n                        // Revert to prototype functions\n                        delete axis.val2lin;\n                        delete axis.lin2val;\n                    }\n                    if (hasBreaks) {\n                        axis.userOptions.ordinal = false;\n                        axis.lin2val = Additions.lin2Val;\n                        axis.val2lin = Additions.val2Lin;\n                        axis.setExtremes = function (newMin, newMax, redraw, animation, eventArguments) {\n                            // If trying to set extremes inside a break, extend min to\n                            // after, and max to before the break ( #3857 )\n                            if (brokenAxis.hasBreaks) {\n                                var breaks_1 = (this.options.breaks || []);\n                                var axisBreak = void 0;\n                                while ((axisBreak = brokenAxis.findBreakAt(newMin, breaks_1))) {\n                                    newMin = axisBreak.to;\n                                }\n                                while ((axisBreak = brokenAxis.findBreakAt(newMax, breaks_1))) {\n                                    newMax = axisBreak.from;\n                                }\n                                // If both min and max is within the same break.\n                                if (newMax < newMin) {\n                                    newMax = newMin;\n                                }\n                            }\n                            axis.constructor.prototype.setExtremes.call(this, newMin, newMax, redraw, animation, eventArguments);\n                        };\n                        axis.setAxisTranslation = function () {\n                            axis.constructor.prototype.setAxisTranslation.call(this);\n                            brokenAxis.unitLength = void 0;\n                            if (brokenAxis.hasBreaks) {\n                                var breaks_2 = axis.options.breaks || [], \n                                    // Temporary one:\n                                    breakArrayT_1 = [],\n                                    breakArray_1 = [],\n                                    pointRangePadding = pick(axis.pointRangePadding, 0);\n                                var length_1 = 0,\n                                    inBrk_1,\n                                    repeat_1,\n                                    min_1 = axis.userMin || axis.min,\n                                    max_1 = axis.userMax || axis.max,\n                                    start_1,\n                                    i_1;\n                                // Min & max check (#4247)\n                                breaks_2.forEach(function (brk) {\n                                    repeat_1 = brk.repeat || Infinity;\n                                    if (isNumber(min_1) && isNumber(max_1)) {\n                                        if (Additions.isInBreak(brk, min_1)) {\n                                            min_1 += ((brk.to % repeat_1) -\n                                                (min_1 % repeat_1));\n                                        }\n                                        if (Additions.isInBreak(brk, max_1)) {\n                                            max_1 -= ((max_1 % repeat_1) -\n                                                (brk.from % repeat_1));\n                                        }\n                                    }\n                                });\n                                // Construct an array holding all breaks in the axis\n                                breaks_2.forEach(function (brk) {\n                                    start_1 = brk.from;\n                                    repeat_1 = brk.repeat || Infinity;\n                                    if (isNumber(min_1) && isNumber(max_1)) {\n                                        while (start_1 - repeat_1 > min_1) {\n                                            start_1 -= repeat_1;\n                                        }\n                                        while (start_1 < min_1) {\n                                            start_1 += repeat_1;\n                                        }\n                                        for (i_1 = start_1; i_1 < max_1; i_1 += repeat_1) {\n                                            breakArrayT_1.push({\n                                                value: i_1,\n                                                move: 'in'\n                                            });\n                                            breakArrayT_1.push({\n                                                value: i_1 + brk.to - brk.from,\n                                                move: 'out',\n                                                size: brk.breakSize\n                                            });\n                                        }\n                                    }\n                                });\n                                breakArrayT_1.sort(function (a, b) {\n                                    return ((a.value === b.value) ?\n                                        ((a.move === 'in' ? 0 : 1) -\n                                            (b.move === 'in' ? 0 : 1)) :\n                                        a.value - b.value);\n                                });\n                                // Simplify the breaks\n                                inBrk_1 = 0;\n                                start_1 = min_1;\n                                breakArrayT_1.forEach(function (brk) {\n                                    inBrk_1 += (brk.move === 'in' ? 1 : -1);\n                                    if (inBrk_1 === 1 && brk.move === 'in') {\n                                        start_1 = brk.value;\n                                    }\n                                    if (inBrk_1 === 0 && isNumber(start_1)) {\n                                        breakArray_1.push({\n                                            from: start_1,\n                                            to: brk.value,\n                                            len: brk.value - start_1 - (brk.size || 0)\n                                        });\n                                        length_1 += (brk.value -\n                                            start_1 -\n                                            (brk.size || 0));\n                                    }\n                                });\n                                brokenAxis.breakArray = breakArray_1;\n                                // Used with staticScale, and below the actual axis\n                                // length, when breaks are substracted.\n                                if (isNumber(min_1) &&\n                                    isNumber(max_1) &&\n                                    isNumber(axis.min)) {\n                                    brokenAxis.unitLength = max_1 - min_1 - length_1 +\n                                        pointRangePadding;\n                                    fireEvent(axis, 'afterBreaks');\n                                    if (axis.staticScale) {\n                                        axis.transA = axis.staticScale;\n                                    }\n                                    else if (brokenAxis.unitLength) {\n                                        axis.transA *=\n                                            (max_1 - axis.min + pointRangePadding) /\n                                                brokenAxis.unitLength;\n                                    }\n                                    if (pointRangePadding) {\n                                        axis.minPixelPadding =\n                                            axis.transA * (axis.minPointOffset || 0);\n                                    }\n                                    axis.min = min_1;\n                                    axis.max = max_1;\n                                }\n                            }\n                        };\n                    }\n                    if (pick(redraw, true)) {\n                        axis.chart.redraw();\n                    }\n                };\n                return Additions;\n            }());\n            BrokenAxis.Additions = Additions;\n        })(BrokenAxis || (BrokenAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BrokenAxis;\n    });\n    _registerModule(_modules, 'masters/modules/broken-axis.src.js', [_modules['Core/Globals.js'], _modules['Core/Axis/BrokenAxis.js']], function (Highcharts, BrokenAxis) {\n\n        var G = Highcharts;\n        // Compositions\n        BrokenAxis.compose(G.Axis, G.Series);\n\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Axis/DateTimeAxis.js'], _modules['Core/FormatUtilities.js'], _modules['Core/Globals.js'], _modules['Core/Series/Point.js'], _modules['Core/Series/Series.js'], _modules['Core/Tooltip.js'], _modules['Core/DefaultOptions.js'], _modules['Core/Utilities.js']], function (Axis, DateTimeAxis, F, H, Point, Series, Tooltip, D, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var format = F.format;\n        var seriesProto = Series.prototype;\n        var addEvent = U.addEvent,\n            arrayMax = U.arrayMax,\n            arrayMin = U.arrayMin,\n            correctFloat = U.correctFloat,\n            defined = U.defined,\n            error = U.error,\n            extend = U.extend,\n            isNumber = U.isNumber,\n            merge = U.merge,\n            pick = U.pick;\n        /**\n         * @typedef {\"average\"|\"averages\"|\"open\"|\"high\"|\"low\"|\"close\"|\"sum\"} Highcharts.DataGroupingApproximationValue\n         */\n        /**\n         * The position of the point inside the group.\n         *\n         * @typedef    {\"start\"|\"middle\"|\"end\"} Highcharts.DataGroupingAnchor\n         */\n        /**\n         * The position of the first or last point in the series inside the group.\n         *\n         * @typedef    {\"start\"|\"middle\"|\"end\"|\"firstPoint\"|\"lastPoint\"} Highcharts.DataGroupingAnchorExtremes\n         */\n        /**\n         * @interface Highcharts.DataGroupingInfoObject\n         */ /**\n        * @name Highcharts.DataGroupingInfoObject#length\n        * @type {number}\n        */ /**\n        * @name Highcharts.DataGroupingInfoObject#options\n        * @type {Highcharts.SeriesOptionsType|undefined}\n        */ /**\n        * @name Highcharts.DataGroupingInfoObject#start\n        * @type {number}\n        */\n        ''; // detach doclets above\n        /* ************************************************************************** *\n         *  Start data grouping module                                                *\n         * ************************************************************************** */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * Define the available approximation types. The data grouping\n         * approximations takes an array or numbers as the first parameter. In case\n         * of ohlc, four arrays are sent in as four parameters. Each array consists\n         * only of numbers. In case null values belong to the group, the property\n         * .hasNulls will be set to true on the array.\n         *\n         * @product highstock\n         *\n         * @private\n         * @name Highcharts.approximations\n         * @type {Highcharts.Dictionary<Function>}\n         */\n        var approximations = H.approximations = {\n                sum: function (arr) {\n                    var len = arr.length,\n            ret;\n                // 1. it consists of nulls exclusive\n                if (!len && arr.hasNulls) {\n                    ret = null;\n                    // 2. it has a length and real values\n                }\n                else if (len) {\n                    ret = 0;\n                    while (len--) {\n                        ret += arr[len];\n                    }\n                }\n                // 3. it has zero length, so just return undefined\n                // => doNothing()\n                return ret;\n            },\n            average: function (arr) {\n                var len = arr.length,\n                    ret = approximations.sum(arr);\n                // If we have a number, return it divided by the length. If not,\n                // return null or undefined based on what the sum method finds.\n                if (isNumber(ret) && len) {\n                    ret = correctFloat(ret / len);\n                }\n                return ret;\n            },\n            // The same as average, but for series with multiple values, like area\n            // ranges.\n            averages: function () {\n                var ret = [];\n                [].forEach.call(arguments, function (arr) {\n                    ret.push(approximations.average(arr));\n                });\n                // Return undefined when first elem. is undefined and let\n                // sum method handle null (#7377)\n                return typeof ret[0] === 'undefined' ? void 0 : ret;\n            },\n            open: function (arr) {\n                return arr.length ? arr[0] : (arr.hasNulls ? null : void 0);\n            },\n            high: function (arr) {\n                return arr.length ?\n                    arrayMax(arr) :\n                    (arr.hasNulls ? null : void 0);\n            },\n            low: function (arr) {\n                return arr.length ?\n                    arrayMin(arr) :\n                    (arr.hasNulls ? null : void 0);\n            },\n            close: function (arr) {\n                return arr.length ?\n                    arr[arr.length - 1] :\n                    (arr.hasNulls ? null : void 0);\n            },\n            // HLC, OHLC and range are special cases where a multidimensional array is\n            // input and an array is output.\n            hlc: function (high, low, close) {\n                high = approximations.high(high);\n                low = approximations.low(low);\n                close = approximations.close(close);\n                if (isNumber(high) ||\n                    isNumber(low) ||\n                    isNumber(close)) {\n                    return [high, low, close];\n                }\n            },\n            ohlc: function (open, high, low, close) {\n                open = approximations.open(open);\n                high = approximations.high(high);\n                low = approximations.low(low);\n                close = approximations.close(close);\n                if (isNumber(open) ||\n                    isNumber(high) ||\n                    isNumber(low) ||\n                    isNumber(close)) {\n                    return [open, high, low, close];\n                }\n            },\n            range: function (low, high) {\n                low = approximations.low(low);\n                high = approximations.high(high);\n                if (isNumber(low) || isNumber(high)) {\n                    return [low, high];\n                }\n                if (low === null && high === null) {\n                    return null;\n                }\n                // else, return is undefined\n            }\n        };\n        var applyGrouping = function (hasExtemesChanged) {\n                var series = this,\n            chart = series.chart,\n            options = series.options,\n            dataGroupingOptions = options.dataGrouping,\n            groupingEnabled = series.allowDG !== false && dataGroupingOptions &&\n                    pick(dataGroupingOptions.enabled,\n            chart.options.isStock),\n            visible = (series.visible || !chart.options.chart.ignoreHiddenSeries),\n            hasGroupedData,\n            skip,\n            lastDataGrouping = this.currentDataGrouping,\n            currentDataGrouping,\n            croppedData,\n            revertRequireSorting = false;\n            // Data needs to be sorted for dataGrouping\n            if (groupingEnabled && !series.requireSorting) {\n                series.requireSorting = revertRequireSorting = true;\n            }\n            // Skip if skipDataGrouping method returns false or if grouping is disabled\n            // (in that order).\n            skip = skipDataGrouping(series, hasExtemesChanged) === false || !groupingEnabled;\n            // Revert original requireSorting value if changed\n            if (revertRequireSorting) {\n                series.requireSorting = false;\n            }\n            if (!skip) {\n                series.destroyGroupedData();\n                var i = void 0,\n                    processedXData = dataGroupingOptions.groupAll ?\n                        series.xData :\n                        series.processedXData,\n                    processedYData = dataGroupingOptions.groupAll ?\n                        series.yData :\n                        series.processedYData,\n                    plotSizeX = chart.plotSizeX,\n                    xAxis = series.xAxis,\n                    ordinal = xAxis.options.ordinal,\n                    groupPixelWidth = series.groupPixelWidth;\n                // Execute grouping if the amount of points is greater than the limit\n                // defined in groupPixelWidth\n                if (groupPixelWidth &&\n                    processedXData &&\n                    processedXData.length) {\n                    hasGroupedData = true;\n                    // Force recreation of point instances in series.translate, #5699\n                    series.isDirty = true;\n                    series.points = null; // #6709\n                    var extremes = xAxis.getExtremes(),\n                        xMin = extremes.min,\n                        xMax = extremes.max,\n                        groupIntervalFactor = (ordinal &&\n                            xAxis.ordinal &&\n                            xAxis.ordinal.getGroupIntervalFactor(xMin,\n                        xMax,\n                        series)) || 1,\n                        interval = (groupPixelWidth * (xMax - xMin) / plotSizeX) *\n                            groupIntervalFactor,\n                        groupPositions = xAxis.getTimeTicks(DateTimeAxis.Additions.prototype.normalizeTimeTickInterval(interval,\n                        dataGroupingOptions.units ||\n                            defaultDataGroupingUnits), \n                        // Processed data may extend beyond axis (#4907)\n                        Math.min(xMin,\n                        processedXData[0]),\n                        Math.max(xMax,\n                        processedXData[processedXData.length - 1]),\n                        xAxis.options.startOfWeek,\n                        processedXData,\n                        series.closestPointRange),\n                        groupedData = seriesProto.groupData.apply(series,\n                        [\n                            processedXData,\n                            processedYData,\n                            groupPositions,\n                            dataGroupingOptions.approximation\n                        ]),\n                        groupedXData = groupedData.groupedXData,\n                        groupedYData = groupedData.groupedYData,\n                        gapSize = 0;\n                    // The smoothed option is deprecated, instead, there is a fallback\n                    // to the new anchoring mechanism. #12455.\n                    if (dataGroupingOptions &&\n                        dataGroupingOptions.smoothed &&\n                        groupedXData.length) {\n                        dataGroupingOptions.firstAnchor = 'firstPoint';\n                        dataGroupingOptions.anchor = 'middle';\n                        dataGroupingOptions.lastAnchor = 'lastPoint';\n                        error(32, false, chart, {\n                            'dataGrouping.smoothed': 'use dataGrouping.anchor'\n                        });\n                    }\n                    anchorPoints(series, groupedXData, xMax);\n                    // Record what data grouping values were used\n                    for (i = 1; i < groupPositions.length; i++) {\n                        // The grouped gapSize needs to be the largest distance between\n                        // the group to capture varying group sizes like months or DST\n                        // crossing (#10000). Also check that the gap is not at the\n                        // start of a segment.\n                        if (!groupPositions.info.segmentStarts ||\n                            groupPositions.info.segmentStarts.indexOf(i) === -1) {\n                            gapSize = Math.max(groupPositions[i] - groupPositions[i - 1], gapSize);\n                        }\n                    }\n                    currentDataGrouping = groupPositions.info;\n                    currentDataGrouping.gapSize = gapSize;\n                    series.closestPointRange = groupPositions.info.totalRange;\n                    series.groupMap = groupedData.groupMap;\n                    if (visible) {\n                        adjustExtremes(xAxis, groupedXData);\n                    }\n                    // We calculated all group positions but we should render\n                    // only the ones within the visible range\n                    if (dataGroupingOptions.groupAll) {\n                        // Keep the reference to all grouped points\n                        // for further calculation (eg. heikinashi).\n                        series.allGroupedData = groupedYData;\n                        croppedData = series.cropData(groupedXData, groupedYData, xAxis.min, xAxis.max, 1 // Ordinal xAxis will remove left-most points otherwise\n                        );\n                        groupedXData = croppedData.xData;\n                        groupedYData = croppedData.yData;\n                        series.cropStart = croppedData.start; // #15005\n                    }\n                    // Set series props\n                    series.processedXData = groupedXData;\n                    series.processedYData = groupedYData;\n                }\n                else {\n                    series.groupMap = null;\n                }\n                series.hasGroupedData = hasGroupedData;\n                series.currentDataGrouping = currentDataGrouping;\n                series.preventGraphAnimation =\n                    (lastDataGrouping && lastDataGrouping.totalRange) !==\n                        (currentDataGrouping && currentDataGrouping.totalRange);\n            }\n        };\n        var skipDataGrouping = function (series,\n            force) {\n                return !(series.isCartesian &&\n                    !series.isDirty &&\n                    !series.xAxis.isDirty &&\n                    !series.yAxis.isDirty &&\n                    !force);\n        };\n        var groupData = function (xData,\n            yData,\n            groupPositions,\n            approximation) {\n                var series = this,\n            data = series.data,\n            dataOptions = series.options && series.options.data,\n            groupedXData = [],\n            groupedYData = [],\n            groupMap = [],\n            dataLength = xData.length,\n            pointX,\n            pointY,\n            groupedY, \n                // when grouping the fake extended axis for panning,\n                // we don't need to consider y\n                handleYData = !!yData,\n            values = [],\n            approximationFn,\n            pointArrayMap = series.pointArrayMap,\n            pointArrayMapLength = pointArrayMap && pointArrayMap.length,\n            extendedPointArrayMap = ['x'].concat(pointArrayMap || ['y']),\n            groupAll = (this.options.dataGrouping &&\n                    this.options.dataGrouping.groupAll),\n            pos = 0,\n            start = 0,\n            valuesLen,\n            i,\n            j;\n            /**\n             * @private\n             */\n            function getApproximation(approx) {\n                if (typeof approx === 'function') {\n                    return approx;\n                }\n                if (approximations[approx]) {\n                    return approximations[approx];\n                }\n                return approximations[(series.getDGApproximation && series.getDGApproximation()) ||\n                    'average'];\n            }\n            approximationFn = getApproximation(approximation);\n            // Calculate values array size from pointArrayMap length\n            if (pointArrayMapLength) {\n                pointArrayMap.forEach(function () {\n                    values.push([]);\n                });\n            }\n            else {\n                values.push([]);\n            }\n            valuesLen = pointArrayMapLength || 1;\n            // Start with the first point within the X axis range (#2696)\n            for (i = 0; i <= dataLength; i++) {\n                if (xData[i] >= groupPositions[0]) {\n                    break;\n                }\n            }\n            for (i; i <= dataLength; i++) {\n                // when a new group is entered, summarize and initialize\n                // the previous group\n                while ((typeof groupPositions[pos + 1] !== 'undefined' &&\n                    xData[i] >= groupPositions[pos + 1]) ||\n                    i === dataLength) { // get the last group\n                    // get group x and y\n                    pointX = groupPositions[pos];\n                    series.dataGroupInfo = {\n                        start: groupAll ? start : (series.cropStart + start),\n                        length: values[0].length\n                    };\n                    groupedY = approximationFn.apply(series, values);\n                    // By default, let options of the first grouped point be passed over\n                    // to the grouped point. This allows preserving properties like\n                    // `name` and `color` or custom properties. Implementers can\n                    // override this from the approximation function, where they can\n                    // write custom options to `this.dataGroupInfo.options`.\n                    if (series.pointClass && !defined(series.dataGroupInfo.options)) {\n                        // Convert numbers and arrays into objects\n                        series.dataGroupInfo.options = merge(series.pointClass.prototype\n                            .optionsToObject.call({ series: series }, series.options.data[series.cropStart + start]));\n                        // Make sure the raw data (x, y, open, high etc) is not copied\n                        // over and overwriting approximated data.\n                        extendedPointArrayMap.forEach(function (key) {\n                            delete series.dataGroupInfo.options[key];\n                        });\n                    }\n                    // push the grouped data\n                    if (typeof groupedY !== 'undefined') {\n                        groupedXData.push(pointX);\n                        groupedYData.push(groupedY);\n                        groupMap.push(series.dataGroupInfo);\n                    }\n                    // reset the aggregate arrays\n                    start = i;\n                    for (j = 0; j < valuesLen; j++) {\n                        values[j].length = 0; // faster than values[j] = []\n                        values[j].hasNulls = false;\n                    }\n                    // Advance on the group positions\n                    pos += 1;\n                    // don't loop beyond the last group\n                    if (i === dataLength) {\n                        break;\n                    }\n                }\n                // break out\n                if (i === dataLength) {\n                    break;\n                }\n                // for each raw data point, push it to an array that contains all values\n                // for this specific group\n                if (pointArrayMap) {\n                    var index = (series.options.dataGrouping &&\n                            series.options.dataGrouping.groupAll ?\n                            i : series.cropStart + i),\n                        point = (data && data[index]) ||\n                            series.pointClass.prototype.applyOptions.apply({\n                                series: series\n                            },\n                        [dataOptions[index]]),\n                        val = void 0;\n                    for (j = 0; j < pointArrayMapLength; j++) {\n                        val = point[pointArrayMap[j]];\n                        if (isNumber(val)) {\n                            values[j].push(val);\n                        }\n                        else if (val === null) {\n                            values[j].hasNulls = true;\n                        }\n                    }\n                }\n                else {\n                    pointY = handleYData ? yData[i] : null;\n                    if (isNumber(pointY)) {\n                        values[0].push(pointY);\n                    }\n                    else if (pointY === null) {\n                        values[0].hasNulls = true;\n                    }\n                }\n            }\n            return {\n                groupedXData: groupedXData,\n                groupedYData: groupedYData,\n                groupMap: groupMap\n            };\n        };\n        var anchorPoints = function (series,\n            groupedXData,\n            xMax) {\n                var options = series.options,\n            dataGroupingOptions = options.dataGrouping,\n            totalRange = (series.currentDataGrouping && series.currentDataGrouping.gapSize);\n            var i;\n            // DataGrouping x-coordinates.\n            if (dataGroupingOptions && series.xData && totalRange && series.groupMap) {\n                var groupedDataLength = groupedXData.length - 1,\n                    anchor = dataGroupingOptions.anchor,\n                    firstAnchor = pick(dataGroupingOptions.firstAnchor,\n                    anchor),\n                    lastAnchor = pick(dataGroupingOptions.lastAnchor,\n                    anchor);\n                // Anchor points that are not extremes.\n                if (anchor && anchor !== 'start') {\n                    var shiftInterval = (totalRange *\n                            { middle: 0.5,\n                        end: 1 }[anchor]);\n                    i = groupedXData.length - 1;\n                    while (i-- && i > 0) {\n                        groupedXData[i] += shiftInterval;\n                    }\n                }\n                // Change the first point position, but only when it is\n                // the first point in the data set not in the current zoom.\n                if (firstAnchor &&\n                    firstAnchor !== 'start' &&\n                    series.xData[0] >= groupedXData[0]) {\n                    var groupStart = series.groupMap[0].start,\n                        groupLength = series.groupMap[0].length;\n                    var firstGroupstEnd = void 0;\n                    if (isNumber(groupStart) && isNumber(groupLength)) {\n                        firstGroupstEnd = groupStart + (groupLength - 1);\n                    }\n                    groupedXData[0] = {\n                        middle: groupedXData[0] + 0.5 * totalRange,\n                        end: groupedXData[0] + totalRange,\n                        firstPoint: series.xData[0],\n                        lastPoint: firstGroupstEnd && series.xData[firstGroupstEnd]\n                    }[firstAnchor];\n                }\n                // Change the last point position but only when it is\n                // the last point in the data set not in the current zoom.\n                if (lastAnchor &&\n                    lastAnchor !== 'start' &&\n                    totalRange &&\n                    groupedXData[groupedDataLength] >= xMax - totalRange) {\n                    var lastGroupStart = series.groupMap[series.groupMap.length - 1].start;\n                    groupedXData[groupedDataLength] = {\n                        middle: groupedXData[groupedDataLength] + 0.5 * totalRange,\n                        end: groupedXData[groupedDataLength] + totalRange,\n                        firstPoint: lastGroupStart && series.xData[lastGroupStart],\n                        lastPoint: series.xData[series.xData.length - 1]\n                    }[lastAnchor];\n                }\n            }\n        };\n        var adjustExtremes = function (xAxis,\n            groupedXData) {\n                // Make sure the X axis extends to show the first group (#2533)\n                // But only for visible series (#5493, #6393)\n                if (defined(groupedXData[0]) &&\n                    isNumber(xAxis.min) &&\n                    isNumber(xAxis.dataMin) &&\n                    groupedXData[0] < xAxis.min) {\n                    if ((!defined(xAxis.options.min) &&\n                        xAxis.min <= xAxis.dataMin) ||\n                        xAxis.min === xAxis.dataMin) {\n                        xAxis.min = Math.min(groupedXData[0],\n            xAxis.min);\n                }\n                xAxis.dataMin = Math.min(groupedXData[0], xAxis.dataMin);\n            }\n            // When the last anchor set, change the extremes that\n            // the last point is visible (#12455).\n            if (defined(groupedXData[groupedXData.length - 1]) &&\n                isNumber(xAxis.max) &&\n                isNumber(xAxis.dataMax) &&\n                groupedXData[groupedXData.length - 1] > xAxis.max) {\n                if ((!defined(xAxis.options.max) &&\n                    isNumber(xAxis.dataMax) &&\n                    xAxis.max >= xAxis.dataMax) || xAxis.max === xAxis.dataMax) {\n                    xAxis.max = Math.max(groupedXData[groupedXData.length - 1], xAxis.max);\n                }\n                xAxis.dataMax = Math.max(groupedXData[groupedXData.length - 1], xAxis.dataMax);\n            }\n        };\n        var dataGrouping = {\n                approximations: approximations,\n                groupData: groupData\n            };\n        // -----------------------------------------------------------------------------\n        // The following code applies to implementation of data grouping on a Series\n        var baseProcessData = seriesProto.processData, baseGeneratePoints = seriesProto.generatePoints, \n            /** @ignore */\n            commonOptions = {\n                // enabled: null, // (true for stock charts, false for basic),\n                // forced: undefined,\n                groupPixelWidth: 2,\n                // the first one is the point or start value, the second is the start\n                // value if we're dealing with range, the third one is the end value if\n                // dealing with a range\n                dateTimeLabelFormats: {\n                    millisecond: [\n                        '%A, %b %e, %H:%M:%S.%L',\n                        '%A, %b %e, %H:%M:%S.%L',\n                        '-%H:%M:%S.%L'\n                    ],\n                    second: [\n                        '%A, %b %e, %H:%M:%S',\n                        '%A, %b %e, %H:%M:%S',\n                        '-%H:%M:%S'\n                    ],\n                    minute: [\n                        '%A, %b %e, %H:%M',\n                        '%A, %b %e, %H:%M',\n                        '-%H:%M'\n                    ],\n                    hour: [\n                        '%A, %b %e, %H:%M',\n                        '%A, %b %e, %H:%M',\n                        '-%H:%M'\n                    ],\n                    day: [\n                        '%A, %b %e, %Y',\n                        '%A, %b %e',\n                        '-%A, %b %e, %Y'\n                    ],\n                    week: [\n                        'Week from %A, %b %e, %Y',\n                        '%A, %b %e',\n                        '-%A, %b %e, %Y'\n                    ],\n                    month: [\n                        '%B %Y',\n                        '%B',\n                        '-%B %Y'\n                    ],\n                    year: [\n                        '%Y',\n                        '%Y',\n                        '-%Y'\n                    ]\n                }\n                // smoothed = false, // enable this for navigator series only\n            }, specificOptions = {\n                line: {},\n                spline: {},\n                area: {},\n                areaspline: {},\n                arearange: {},\n                column: {\n                    groupPixelWidth: 10\n                },\n                columnrange: {\n                    groupPixelWidth: 10\n                },\n                candlestick: {\n                    groupPixelWidth: 10\n                },\n                ohlc: {\n                    groupPixelWidth: 5\n                },\n                hlc: {\n                    groupPixelWidth: 5\n                    // Move to HeikinAshiSeries.ts aftre refactoring data grouping.\n                },\n                heikinashi: {\n                    groupPixelWidth: 10\n                }\n            }, \n            // units are defined in a separate array to allow complete overriding in\n            // case of a user option\n            defaultDataGroupingUnits = H.defaultDataGroupingUnits = [\n                [\n                    'millisecond',\n                    [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n                ], [\n                    'second',\n                    [1, 2, 5, 10, 15, 30]\n                ], [\n                    'minute',\n                    [1, 2, 5, 10, 15, 30]\n                ], [\n                    'hour',\n                    [1, 2, 3, 4, 6, 8, 12]\n                ], [\n                    'day',\n                    [1]\n                ], [\n                    'week',\n                    [1]\n                ], [\n                    'month',\n                    [1, 3, 6]\n                ], [\n                    'year',\n                    null\n                ]\n            ];\n        // Set default approximations to the prototypes if present. Properties are\n        // inherited down. Can be overridden for individual series types.\n        seriesProto.getDGApproximation = function () {\n            if (this.is('arearange')) {\n                return 'range';\n            }\n            if (this.is('ohlc')) {\n                return 'ohlc';\n            }\n            if (this.is('hlc')) {\n                return 'hlc';\n            }\n            if (this.is('column')) {\n                return 'sum';\n            }\n            return 'average';\n        };\n        /**\n         * Takes parallel arrays of x and y data and groups the data into intervals\n         * defined by groupPositions, a collection of starting x values for each group.\n         *\n         * @private\n         * @function Highcharts.Series#groupData\n         *\n         * @param {Array<number>} xData\n         *\n         * @param {Array<number>|Array<Array<number>>} yData\n         *\n         * @param {boolean} groupPositions\n         *\n         * @param {string|Function} approximation\n         *\n         * @return {void}\n         */\n        seriesProto.groupData = groupData;\n        /**\n         * For the processed data, calculate the grouped data if needed.\n         *\n         * @private\n         * @function Highcharts.Series#applyGrouping\n         *\n         * @return {void}\n         */\n        seriesProto.applyGrouping = applyGrouping;\n        // Destroy the grouped data points. #622, #740\n        seriesProto.destroyGroupedData = function () {\n            // Clear previous groups\n            if (this.groupedData) {\n                this.groupedData.forEach(function (point, i) {\n                    if (point) {\n                        this.groupedData[i] = point.destroy ?\n                            point.destroy() : null;\n                    }\n                }, this);\n                // Clears all:\n                // - `this.groupedData`\n                // - `this.points`\n                // - `preserve` object in series.update()\n                this.groupedData.length = 0;\n            }\n        };\n        // Override the generatePoints method by adding a reference to grouped data\n        seriesProto.generatePoints = function () {\n            baseGeneratePoints.apply(this);\n            // Record grouped data in order to let it be destroyed the next time\n            // processData runs\n            this.destroyGroupedData(); // #622\n            this.groupedData = this.hasGroupedData ? this.points : null;\n        };\n        /**\n         * Check the groupPixelWidth and apply the grouping if needed.\n         * Fired only after processing the data.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Axis#applyGrouping\n         */\n        Axis.prototype.applyGrouping = function (e) {\n            var axis = this,\n                series = axis.series;\n            series.forEach(function (series) {\n                // Reset the groupPixelWidth, then calculate if needed.\n                series.groupPixelWidth = void 0; // #2110\n                series.groupPixelWidth = (axis.getGroupPixelWidth &&\n                    axis.getGroupPixelWidth());\n                if (series.groupPixelWidth) {\n                    series.hasProcessed = true; // #2692\n                }\n                // Fire independing on series.groupPixelWidth to always set a proper\n                // dataGrouping state, (#16238)\n                series.applyGrouping(!!e.hasExtemesChanged);\n            });\n        };\n        // Get the data grouping pixel width based on the greatest defined individual\n        // width of the axis' series, and if whether one of the axes need grouping.\n        Axis.prototype.getGroupPixelWidth = function () {\n            var series = this.series,\n                len = series.length,\n                i,\n                groupPixelWidth = 0,\n                doGrouping = false,\n                dataLength,\n                dgOptions;\n            // If multiple series are compared on the same x axis, give them the same\n            // group pixel width (#334)\n            i = len;\n            while (i--) {\n                dgOptions = series[i].options.dataGrouping;\n                if (dgOptions) {\n                    groupPixelWidth = Math.max(groupPixelWidth, \n                    // Fallback to commonOptions (#9693)\n                    pick(dgOptions.groupPixelWidth, commonOptions.groupPixelWidth));\n                }\n            }\n            // If one of the series needs grouping, apply it to all (#1634)\n            i = len;\n            while (i--) {\n                dgOptions = series[i].options.dataGrouping;\n                if (dgOptions) { // #2692\n                    dataLength = (series[i].processedXData || series[i].data).length;\n                    // Execute grouping if the amount of points is greater than the\n                    // limit defined in groupPixelWidth\n                    if (series[i].groupPixelWidth ||\n                        (dataLength >\n                            (this.chart.plotSizeX / groupPixelWidth)) ||\n                        (dataLength && dgOptions.forced)) {\n                        doGrouping = true;\n                    }\n                }\n            }\n            return doGrouping ? groupPixelWidth : 0;\n        };\n        /**\n         * Highcharts Stock only. Force data grouping on all the axis' series.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Axis#setDataGrouping\n         *\n         * @param {boolean|Highcharts.DataGroupingOptionsObject} [dataGrouping]\n         *        A `dataGrouping` configuration. Use `false` to disable data grouping\n         *        dynamically.\n         *\n         * @param {boolean} [redraw=true]\n         *        Whether to redraw the chart or wait for a later call to\n         *        {@link Chart#redraw}.\n         */\n        Axis.prototype.setDataGrouping = function (dataGrouping, redraw) {\n            var axis = this;\n            var i;\n            redraw = pick(redraw, true);\n            if (!dataGrouping) {\n                dataGrouping = {\n                    forced: false,\n                    units: null\n                };\n            }\n            // Axis is instantiated, update all series\n            if (this instanceof Axis) {\n                i = this.series.length;\n                while (i--) {\n                    this.series[i].update({\n                        dataGrouping: dataGrouping\n                    }, false);\n                }\n                // Axis not yet instanciated, alter series options\n            }\n            else {\n                this.chart.options.series.forEach(function (seriesOptions) {\n                    seriesOptions.dataGrouping = dataGrouping;\n                }, false);\n            }\n            // Clear ordinal slope, so we won't accidentaly use the old one (#7827)\n            if (axis.ordinal) {\n                axis.ordinal.slope = void 0;\n            }\n            if (redraw) {\n                this.chart.redraw();\n            }\n        };\n        // When all series are processed, calculate the group pixel width and then\n        // if this value is different than zero apply groupings.\n        addEvent(Axis, 'postProcessData', Axis.prototype.applyGrouping);\n        // Override point prototype to throw a warning when trying to update grouped\n        // points.\n        addEvent(Point, 'update', function () {\n            if (this.dataGroup) {\n                error(24, false, this.series.chart);\n                return false;\n            }\n        });\n        // Extend the original method, make the tooltip's header reflect the grouped\n        // range.\n        addEvent(Tooltip, 'headerFormatter', function (e) {\n            var tooltip = this,\n                chart = this.chart,\n                time = chart.time,\n                labelConfig = e.labelConfig,\n                series = labelConfig.series,\n                options = series.options,\n                tooltipOptions = series.tooltipOptions,\n                dataGroupingOptions = options.dataGrouping,\n                xDateFormat = tooltipOptions.xDateFormat,\n                xDateFormatEnd,\n                xAxis = series.xAxis,\n                currentDataGrouping,\n                dateTimeLabelFormats,\n                labelFormats,\n                formattedKey,\n                formatString = tooltipOptions[e.isFooter ? 'footerFormat' : 'headerFormat'];\n            // apply only to grouped series\n            if (xAxis &&\n                xAxis.options.type === 'datetime' &&\n                dataGroupingOptions &&\n                isNumber(labelConfig.key)) {\n                // set variables\n                currentDataGrouping = series.currentDataGrouping;\n                dateTimeLabelFormats = dataGroupingOptions.dateTimeLabelFormats ||\n                    // Fallback to commonOptions (#9693)\n                    commonOptions.dateTimeLabelFormats;\n                // if we have grouped data, use the grouping information to get the\n                // right format\n                if (currentDataGrouping) {\n                    labelFormats =\n                        dateTimeLabelFormats[currentDataGrouping.unitName];\n                    if (currentDataGrouping.count === 1) {\n                        xDateFormat = labelFormats[0];\n                    }\n                    else {\n                        xDateFormat = labelFormats[1];\n                        xDateFormatEnd = labelFormats[2];\n                    }\n                    // if not grouped, and we don't have set the xDateFormat option, get the\n                    // best fit, so if the least distance between points is one minute, show\n                    // it, but if the least distance is one day, skip hours and minutes etc.\n                }\n                else if (!xDateFormat && dateTimeLabelFormats && xAxis.dateTime) {\n                    xDateFormat = xAxis.dateTime.getXDateFormat(labelConfig.x, tooltipOptions.dateTimeLabelFormats);\n                }\n                // now format the key\n                formattedKey = time.dateFormat(xDateFormat, labelConfig.key);\n                if (xDateFormatEnd) {\n                    formattedKey += time.dateFormat(xDateFormatEnd, labelConfig.key + currentDataGrouping.totalRange - 1);\n                }\n                // Replace default header style with class name\n                if (series.chart.styledMode) {\n                    formatString = this.styledModeFormat(formatString);\n                }\n                // return the replaced format\n                e.text = format(formatString, {\n                    point: extend(labelConfig.point, { key: formattedKey }),\n                    series: series\n                }, chart);\n                e.preventDefault();\n            }\n        });\n        // Destroy grouped data on series destroy\n        addEvent(Series, 'destroy', seriesProto.destroyGroupedData);\n        // Handle default options for data grouping. This must be set at runtime because\n        // some series types are defined after this.\n        addEvent(Series, 'afterSetOptions', function (e) {\n            var options = e.options,\n                type = this.type,\n                plotOptions = this.chart.options.plotOptions,\n                defaultOptions = D.defaultOptions.plotOptions[type].dataGrouping, \n                // External series, for example technical indicators should also inherit\n                // commonOptions which are not available outside this module\n                baseOptions = (this.useCommonDataGrouping && commonOptions);\n            if (plotOptions && (specificOptions[type] || baseOptions)) { // #1284\n                if (!defaultOptions) {\n                    defaultOptions = merge(commonOptions, specificOptions[type]);\n                }\n                var rangeSelector = this.chart.rangeSelector;\n                options.dataGrouping = merge(baseOptions, defaultOptions, plotOptions.series && plotOptions.series.dataGrouping, // #1228\n                // Set by the StockChart constructor:\n                plotOptions[type].dataGrouping, this.userOptions.dataGrouping, !options.isInternal &&\n                    rangeSelector &&\n                    isNumber(rangeSelector.selected) &&\n                    rangeSelector.buttonOptions[rangeSelector.selected].dataGrouping);\n            }\n        });\n        // When resetting the scale reset the hasProccessed flag to avoid taking\n        // previous data grouping of neighbour series into accound when determining\n        // group pixel width (#2692).\n        addEvent(Axis, 'afterSetScale', function () {\n            this.series.forEach(function (series) {\n                series.hasProcessed = false;\n            });\n        });\n        H.dataGrouping = dataGrouping;\n        /* eslint-enable no-invalid-this, valid-jsdoc */\n        /**\n         * Data grouping is the concept of sampling the data values into larger\n         * blocks in order to ease readability and increase performance of the\n         * JavaScript charts. Highcharts Stock by default applies data grouping when\n         * the points become closer than a certain pixel value, determined by\n         * the `groupPixelWidth` option.\n         *\n         * If data grouping is applied, the grouping information of grouped\n         * points can be read from the [Point.dataGroup](\n         * /class-reference/Highcharts.Point#dataGroup). If point options other than\n         * the data itself are set, for example `name` or `color` or custom properties,\n         * the grouping logic doesn't know how to group it. In this case the options of\n         * the first point instance are copied over to the group point. This can be\n         * altered through a custom `approximation` callback function.\n         *\n         * @declare   Highcharts.DataGroupingOptionsObject\n         * @product   highstock\n         * @requires  product:highstock\n         * @requires  module:modules/datagrouping\n         * @apioption plotOptions.series.dataGrouping\n         */\n        /**\n         * Specifies how the points should be located on the X axis inside the group.\n         * Points that are extremes can be set separately. Available options:\n         *\n         * - `start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * - `middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * - `end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-anchor\n         *         Changing the point x-coordinate inside the group.\n         *\n         * @see [dataGrouping.firstAnchor](#plotOptions.series.dataGrouping.firstAnchor)\n         * @see [dataGrouping.lastAnchor](#plotOptions.series.dataGrouping.lastAnchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchor}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.anchor\n         */\n        /**\n         * The method of approximation inside a group. When for example 30 days\n         * are grouped into one month, this determines what value should represent\n         * the group. Possible values are \"average\", \"averages\", \"open\", \"high\",\n         * \"low\", \"close\" and \"sum\". For OHLC and candlestick series the approximation\n         * is \"ohlc\" by default, which finds the open, high, low and close values\n         * within all the grouped data. For ranges, the approximation is \"range\",\n         * which finds the low and high values. For multi-dimensional data,\n         * like ranges and OHLC, \"averages\" will compute the average for each\n         * dimension.\n         *\n         * Custom aggregate methods can be added by assigning a callback function\n         * as the approximation. This function takes a numeric array as the\n         * argument and should return a single numeric value or `null`. Note\n         * that the numeric array will never contain null values, only true\n         * numbers. Instead, if null values are present in the raw data, the\n         * numeric array will have an `.hasNulls` property set to `true`. For\n         * single-value data sets the data is available in the first argument\n         * of the callback function. For OHLC data sets, all the open values\n         * are in the first argument, all high values in the second etc.\n         *\n         * Since v4.2.7, grouping meta data is available in the approximation\n         * callback from `this.dataGroupInfo`. It can be used to extract information\n         * from the raw data.\n         *\n         * Defaults to `average` for line-type series, `sum` for columns, `range`\n         * for range series, `hlc` for HLC, and `ohlc` for OHLC and candlestick.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-approximation\n         *         Approximation callback with custom data\n         * @sample {highstock} stock/plotoptions/series-datagrouping-simple-approximation\n         *         Simple approximation demo\n         *\n         * @type       {Highcharts.DataGroupingApproximationValue|Function}\n         * @apioption  plotOptions.series.dataGrouping.approximation\n         */\n        /**\n         * Datetime formats for the header of the tooltip in a stock chart.\n         * The format can vary within a chart depending on the currently selected\n         * time range and the current data grouping.\n         *\n         * The default formats are:\n         * ```js\n         * {\n         *     millisecond: [\n         *         '%A, %b %e, %H:%M:%S.%L', '%A, %b %e, %H:%M:%S.%L', '-%H:%M:%S.%L'\n         *     ],\n         *     second: ['%A, %b %e, %H:%M:%S', '%A, %b %e, %H:%M:%S', '-%H:%M:%S'],\n         *     minute: ['%A, %b %e, %H:%M', '%A, %b %e, %H:%M', '-%H:%M'],\n         *     hour: ['%A, %b %e, %H:%M', '%A, %b %e, %H:%M', '-%H:%M'],\n         *     day: ['%A, %b %e, %Y', '%A, %b %e', '-%A, %b %e, %Y'],\n         *     week: ['Week from %A, %b %e, %Y', '%A, %b %e', '-%A, %b %e, %Y'],\n         *     month: ['%B %Y', '%B', '-%B %Y'],\n         *     year: ['%Y', '%Y', '-%Y']\n         * }\n         * ```\n         *\n         * For each of these array definitions, the first item is the format\n         * used when the active time span is one unit. For instance, if the\n         * current data applies to one week, the first item of the week array\n         * is used. The second and third items are used when the active time\n         * span is more than two units. For instance, if the current data applies\n         * to two weeks, the second and third item of the week array are used,\n         *  and applied to the start and end date of the time span.\n         *\n         * @type      {Object}\n         * @apioption plotOptions.series.dataGrouping.dateTimeLabelFormats\n         */\n        /**\n         * Enable or disable data grouping.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @apioption plotOptions.series.dataGrouping.enabled\n         */\n        /**\n         * Specifies how the first grouped point is positioned on the xAxis.\n         * If firstAnchor and/or lastAnchor are defined, then those options take\n         * precedence over anchor for the first and/or last grouped points.\n         * Available options:\n         *\n         * -`start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * -`middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * -`end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * -`firstPoint` the first point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n         *\n         * -`lastPoint` the last point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n         *         Applying first and last anchor.\n         *\n         * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchorExtremes}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.firstAnchor\n         */\n        /**\n         * When data grouping is forced, it runs no matter how small the intervals\n         * are. This can be handy for example when the sum should be calculated\n         * for values appearing at random times within each hour.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @apioption plotOptions.series.dataGrouping.forced\n         */\n        /**\n         * The approximate pixel width of each group. If for example a series\n         * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n         * is performed. If however the series contains so many points that\n         * the spacing is less than the groupPixelWidth, Highcharts will try\n         * to group it into appropriate groups so that each is more or less\n         * two pixels wide. If multiple series with different group pixel widths\n         * are drawn on the same x axis, all series will take the greatest width.\n         * For example, line series have 2px default group width, while column\n         * series have 10px. If combined, both the line and the column will\n         * have 10px by default.\n         *\n         * @type      {number}\n         * @default   2\n         * @apioption plotOptions.series.dataGrouping.groupPixelWidth\n         */\n        /**\n         * By default only points within the visible range are grouped. Enabling this\n         * option will force data grouping to calculate all grouped points for a given\n         * dataset. That option prevents for example a column series from calculating\n         * a grouped point partially. The effect is similar to\n         * [Series.getExtremesFromAll](#plotOptions.series.getExtremesFromAll) but does\n         * not affect yAxis extremes.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-groupall/\n         *         Two series with the same data but different groupAll setting\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     6.1.0\n         * @apioption plotOptions.series.dataGrouping.groupAll\n         */\n        /**\n         * Specifies how the last grouped point is positioned on the xAxis.\n         * If firstAnchor and/or lastAnchor are defined, then those options take\n         * precedence over anchor for the first and/or last grouped points.\n         * Available options:\n         *\n         * -`start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * -`middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * -`end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * -`firstPoint` the first point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n         *\n         * -`lastPoint` the last point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n         *         Applying first and last anchor.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-last-anchor\n         *         Applying the last anchor in the chart with live data.\n         *\n         * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchorExtremes}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.lastAnchor\n         */\n        /**\n         * Normally, a group is indexed by the start of that group, so for example\n         * when 30 daily values are grouped into one month, that month's x value\n         * will be the 1st of the month. This apparently shifts the data to\n         * the left. When the smoothed option is true, this is compensated for.\n         * The data is shifted to the middle of the group, and min and max\n         * values are preserved. Internally, this is used in the Navigator series.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @deprecated\n         * @apioption plotOptions.series.dataGrouping.smoothed\n         */\n        /**\n         * An array determining what time intervals the data is allowed to be\n         * grouped to. Each array item is an array where the first value is\n         * the time unit and the second value another array of allowed multiples.\n         *\n         * Defaults to:\n         * ```js\n         * units: [[\n         *     'millisecond', // unit name\n         *     [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n         * ], [\n         *     'second',\n         *     [1, 2, 5, 10, 15, 30]\n         * ], [\n         *     'minute',\n         *     [1, 2, 5, 10, 15, 30]\n         * ], [\n         *     'hour',\n         *     [1, 2, 3, 4, 6, 8, 12]\n         * ], [\n         *     'day',\n         *     [1]\n         * ], [\n         *     'week',\n         *     [1]\n         * ], [\n         *     'month',\n         *     [1, 3, 6]\n         * ], [\n         *     'year',\n         *     null\n         * ]]\n         * ```\n         *\n         * @type      {Array<Array<string,(Array<number>|null)>>}\n         * @apioption plotOptions.series.dataGrouping.units\n         */\n        /**\n         * The approximate pixel width of each group. If for example a series\n         * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n         * is performed. If however the series contains so many points that\n         * the spacing is less than the groupPixelWidth, Highcharts will try\n         * to group it into appropriate groups so that each is more or less\n         * two pixels wide. Defaults to `10`.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-grouppixelwidth/\n         *         Two series with the same data density but different groupPixelWidth\n         *\n         * @type      {number}\n         * @default   10\n         * @apioption plotOptions.column.dataGrouping.groupPixelWidth\n         */\n        ''; // required by JSDoc parsing\n\n        return dataGrouping;\n    });\n    _registerModule(_modules, 'Series/HLC/HLCPoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2021 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var ColumnSeries = SeriesRegistry.seriesTypes.column;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var HLCPoint = /** @class */ (function (_super) {\n                __extends(HLCPoint, _super);\n            function HLCPoint() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.close = void 0;\n                _this.high = void 0;\n                _this.low = void 0;\n                _this.options = void 0;\n                _this.plotClose = void 0;\n                _this.series = void 0;\n                return _this;\n            }\n            return HLCPoint;\n        }(ColumnSeries.prototype.pointClass));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HLCPoint;\n    });\n    _registerModule(_modules, 'Series/HLC/HLCSeries.js', [_modules['Series/HLC/HLCPoint.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (HLCPoint, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var ColumnSeries = SeriesRegistry.seriesTypes.column;\n        var extend = U.extend,\n            merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The hlc series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.hlc\n         *\n         * @augments Highcharts.Series\n         */\n        var HLCSeries = /** @class */ (function (_super) {\n                __extends(HLCSeries, _super);\n            function HLCSeries() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                _this.yData = void 0;\n                return _this;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Extend the path if close is not between high and low.\n             *\n             * @param {SVGPath} path the path array of the point\n             * @param {number} halfStrokeWidth\n             * @param {number} value value of the point to which the stem should be extended\n             */\n            HLCSeries.prototype.extendStem = function (path, halfStrokeWidth, value) {\n                var start = path[0];\n                var end = path[1];\n                // We don't need to worry about crisp - close value\n                // is already crisped and halfStrokeWidth should remove it.\n                if (typeof start[2] === 'number') {\n                    start[2] = Math.max(value + halfStrokeWidth, start[2]);\n                }\n                if (typeof end[2] === 'number') {\n                    end[2] = Math.min(value - halfStrokeWidth, end[2]);\n                }\n            };\n            /**\n             * Function to create SVGPath of the point based on the\n             * plot positions of this point.\n             * @private\n             */\n            HLCSeries.prototype.getPointPath = function (point, graphic) {\n                // crisp vector coordinates\n                var strokeWidth = graphic.strokeWidth(),\n                    series = point.series,\n                    crispCorr = (strokeWidth % 2) / 2, \n                    // #2596:\n                    crispX = Math.round(point.plotX) - crispCorr,\n                    halfWidth = Math.round(point.shapeArgs.width / 2);\n                var path,\n                    plotClose = point.plotClose;\n                // the vertical stem\n                path = [\n                    ['M', crispX, Math.round(point.yBottom)],\n                    ['L', crispX, Math.round(point.plotHigh)]\n                ];\n                // close\n                if (point.close !== null) {\n                    plotClose = Math.round(point.plotClose) + crispCorr;\n                    path.push(['M', crispX, plotClose], ['L', crispX + halfWidth, plotClose]);\n                    series.extendStem(path, strokeWidth / 2, plotClose);\n                }\n                return path;\n            };\n            /**\n             * Draw single point\n             * @private\n             */\n            HLCSeries.prototype.drawSinglePoint = function (point) {\n                var series = point.series,\n                    chart = series.chart;\n                var path,\n                    graphic = point.graphic,\n                    isNew = !graphic;\n                if (typeof point.plotY !== 'undefined') {\n                    // Create and/or update the graphic\n                    if (!graphic) {\n                        point.graphic = graphic = chart.renderer.path()\n                            .add(series.group);\n                    }\n                    if (!chart.styledMode) {\n                        graphic.attr(series.pointAttribs(point, (point.selected && 'select'))); // #3897\n                    }\n                    // crisp vector coordinates\n                    path = series.getPointPath(point, graphic);\n                    graphic[isNew ? 'attr' : 'animate']({ d: path })\n                        .addClass(point.getClassName(), true);\n                }\n            };\n            /**\n             * Draw the data points\n             * @private\n             */\n            HLCSeries.prototype.drawPoints = function () {\n                this.points.forEach(this.drawSinglePoint);\n            };\n            /**\n             * @private\n             * @function Highcharts.seriesTypes.hlc#init\n             */\n            HLCSeries.prototype.init = function () {\n                _super.prototype.init.apply(this, arguments);\n                this.options.stacking = void 0; // #8817\n            };\n            /**\n             * Postprocess mapping between options and SVG attributes\n             * @private\n             */\n            HLCSeries.prototype.pointAttribs = function (point, state) {\n                var attribs = _super.prototype.pointAttribs.call(this,\n                    point,\n                    state);\n                delete attribs.fill;\n                return attribs;\n            };\n            HLCSeries.prototype.toYData = function (point) {\n                // return a plain array for speedy calculation\n                return [point.high, point.low, point.close];\n            };\n            /**\n             * Translate data points from raw values x and y to plotX and plotY\n             *\n             * @private\n             * @function Highcharts.seriesTypes.hlc#translate\n             */\n            HLCSeries.prototype.translate = function () {\n                var series = this,\n                    yAxis = series.yAxis,\n                    names = (this.pointArrayMap && this.pointArrayMap.slice()) || [],\n                    translated = names.map(function (name) {\n                        return \"plot\" + (name.charAt(0).toUpperCase() + name.slice(1));\n                });\n                translated.push('yBottom');\n                names.push('low');\n                _super.prototype.translate.apply(series);\n                // Do the translation\n                series.points.forEach(function (point) {\n                    names.forEach(function (name, i) {\n                        var value = point[name];\n                        if (value !== null) {\n                            if (series.dataModify) {\n                                value = series.dataModify.modifyValue(value);\n                            }\n                            point[translated[i]] =\n                                yAxis.toPixels(value, true);\n                        }\n                    });\n                    // Align the tooltip to the high value to avoid covering the\n                    // point\n                    point.tooltipPos[1] =\n                        point.plotHigh + yAxis.pos - series.chart.plotTop;\n                });\n            };\n            /**\n             * An HLC chart is a style of financial chart used to describe price\n             * movements over time. It displays high, low and close values per\n             * data point.\n             *\n             * @sample stock/demo/hlc/\n             *         HLC chart\n             *\n             * @extends      plotOptions.column\n             * @excluding    borderColor, borderRadius, borderWidth, crisp, stacking,\n             *               stack\n             * @product      highstock\n             * @optionparent plotOptions.hlc\n             */\n            HLCSeries.defaultOptions = merge(ColumnSeries.defaultOptions, {\n                /**\n                 * The approximate pixel width of each group. If for example a series\n                 * with 30 points is displayed over a 600 pixel wide plot area, no\n                 * grouping is performed. If however the series contains so many points\n                 * that the spacing is less than the groupPixelWidth, Highcharts will\n                 * try to group it into appropriate groups so that each is more or less\n                 * two pixels wide. Defaults to `5`.\n                 *\n                 * @type      {number}\n                 * @default   5\n                 * @product   highstock\n                 * @apioption plotOptions.hlc.dataGrouping.groupPixelWidth\n                 */\n                /**\n                 * @type      {Highcharts.DataGroupingApproximationValue|Function}\n                 * @default   hlc\n                 * @product   highstock\n                 * @apioption plotOptions.hlc.dataGrouping.approximation\n                 */\n                /**\n                 * @default   close\n                 * @apioption plotOptions.hlc.colorKey\n                 */\n                /**\n                 * The pixel width of the line/border. Defaults to `1`.\n                 *\n                 * @sample {highstock} stock/plotoptions/hlc-linewidth/\n                 *         A greater line width\n                 *\n                 * @type    {number}\n                 * @default 1\n                 * @product highstock\n                 *\n                 * @public\n                 */\n                lineWidth: 1,\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> ' +\n                        '<b> {series.name}</b><br/>' +\n                        'High: {point.high}<br/>' +\n                        'Low: {point.low}<br/>' +\n                        'Close: {point.close}<br/>'\n                },\n                threshold: null,\n                states: {\n                    /**\n                     * @extends plotOptions.column.states.hover\n                     * @product highstock\n                     */\n                    hover: {\n                        /**\n                         * The pixel width of the line representing the HLC point.\n                         *\n                         * @type    {number}\n                         * @default 3\n                         * @product highstock\n                         */\n                        lineWidth: 3\n                    }\n                },\n                /**\n                 * Determines which one of  `high`, `low`, `close` values should\n                 * be represented as `point.y`, which is later used to set dataLabel\n                 * position and [compare](#plotOptions.series.compare).\n                 *\n                 * @sample {highstock} stock/plotoptions/hlc-pointvalkey/\n                 *         Possible values\n                 *\n                 * @type       {string}\n                 * @default    close\n                 * @validvalue [\"high\", \"low\", \"close\"]\n                 * @product    highstock\n                 * @apioption  plotOptions.hlc.pointValKey\n                 */\n                /**\n                 * @default   close\n                 * @apioption plotOptions.hlc.colorKey\n                 */\n                stickyTracking: true\n            });\n            return HLCSeries;\n        }(ColumnSeries));\n        extend(HLCSeries.prototype, {\n            animate: null,\n            directTouch: false,\n            pointArrayMap: ['high', 'low', 'close'],\n            pointAttrToOptions: {\n                stroke: 'color',\n                'stroke-width': 'lineWidth'\n            },\n            pointValKey: 'close'\n        });\n        HLCSeries.prototype.pointClass = HLCPoint;\n        SeriesRegistry.registerSeriesType('hlc', HLCSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `hlc` series. If the [type](#series.hlc.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.hlc\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @apioption series.hlc\n         */\n        /**\n         * An array of data points for the series. For the `hlc` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of arrays with 4 or 3 values. In this case, the values correspond\n         *    to `x,high,low,close`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred. The `x` value can\n         *    also be omitted, in which case the inner arrays should be of length of 3\\.\n         *    Then the `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 5, 6, 7],\n         *        [1, 4, 8, 2],\n         *        [2, 3, 4, 10]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.hlc.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        high: 4,\n         *        low: 5,\n         *        close: 2,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        high: 3,\n         *        low: 6,\n         *        close: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<Array<(number|string),number,number>|Array<(number|string),number,number,number>|*>}\n         * @extends   series.arearange.data\n         * @excluding y, marker\n         * @product   highstock\n         * @apioption series.hlc.data\n         */\n        /**\n         * The closing value of each data point.\n         *\n         * @type      {number}\n         * @product   highstock\n         * @apioption series.hlc.data.close\n         */\n        ''; // adds doclets above to transpilat\n\n        return HLCSeries;\n    });\n    _registerModule(_modules, 'Series/OHLC/OHLCPoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var HLCSeries = SeriesRegistry.seriesTypes.hlc;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var OHLCPoint = /** @class */ (function (_super) {\n                __extends(OHLCPoint, _super);\n            function OHLCPoint() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.open = void 0;\n                _this.options = void 0;\n                _this.plotOpen = void 0;\n                _this.series = void 0;\n                return _this;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Extend the parent method by adding up or down to the class name.\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#getClassName\n             */\n            OHLCPoint.prototype.getClassName = function () {\n                return _super.prototype.getClassName.call(this) +\n                    (this.open < this.close ?\n                        ' highcharts-point-up' :\n                        ' highcharts-point-down');\n            };\n            /**\n             * Save upColor as point color (#14826).\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#resolveUpColor\n             */\n            OHLCPoint.prototype.resolveUpColor = function () {\n                if (this.open < this.close &&\n                    !this.options.color &&\n                    this.series.options.upColor) {\n                    this.color = this.series.options.upColor;\n                }\n            };\n            /**\n             * Extend the parent method by saving upColor.\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#resolveColor\n             */\n            OHLCPoint.prototype.resolveColor = function () {\n                _super.prototype.resolveColor.call(this);\n                this.resolveUpColor();\n            };\n            /**\n             * Extend the parent method by saving upColor.\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#getZone\n             *\n             * @return {Highcharts.SeriesZonesOptionsObject}\n             *         The zone item.\n             */\n            OHLCPoint.prototype.getZone = function () {\n                var zone = _super.prototype.getZone.call(this);\n                this.resolveUpColor();\n                return zone;\n            };\n            /**\n             * Extend the parent method by resolving up/down colors (#15849)\n             * @private\n             **/\n            OHLCPoint.prototype.applyOptions = function () {\n                _super.prototype.applyOptions.apply(this, arguments);\n                if (this.resolveColor) {\n                    this.resolveColor();\n                }\n                return this;\n            };\n            return OHLCPoint;\n        }(HLCSeries.prototype.pointClass));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OHLCPoint;\n    });\n    _registerModule(_modules, 'Series/OHLC/OHLCSeries.js', [_modules['Series/OHLC/OHLCPoint.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (OHLCPoint, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var Series = SeriesRegistry.series,\n            HLCSeries = SeriesRegistry.seriesTypes.hlc;\n        var addEvent = U.addEvent,\n            extend = U.extend,\n            merge = U.merge;\n        /**\n         * The ohlc series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ohlc\n         *\n         * @augments Highcharts.Series\n         */\n        var OHLCSeries = /** @class */ (function (_super) {\n                __extends(OHLCSeries, _super);\n            function OHLCSeries() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            OHLCSeries.prototype.getPointPath = function (point, graphic) {\n                var path = _super.prototype.getPointPath.call(this,\n                    point,\n                    graphic),\n                    strokeWidth = graphic.strokeWidth(),\n                    crispCorr = (strokeWidth % 2) / 2,\n                    crispX = Math.round(point.plotX) - crispCorr,\n                    halfWidth = Math.round(point.shapeArgs.width / 2);\n                var plotOpen = point.plotOpen;\n                // crisp vector coordinates\n                if (point.open !== null) {\n                    plotOpen = Math.round(point.plotOpen) + crispCorr;\n                    path.push(['M', crispX, plotOpen], ['L', crispX - halfWidth, plotOpen]);\n                    _super.prototype.extendStem.call(this, path, strokeWidth / 2, plotOpen);\n                }\n                return path;\n            };\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Postprocess mapping between options and SVG attributes\n             * @private\n             */\n            OHLCSeries.prototype.pointAttribs = function (point, state) {\n                var attribs = _super.prototype.pointAttribs.call(this,\n                    point,\n                    state),\n                    options = this.options;\n                delete attribs.fill;\n                if (!point.options.color &&\n                    options.upColor &&\n                    point.open < point.close) {\n                    attribs.stroke = options.upColor;\n                }\n                return attribs;\n            };\n            OHLCSeries.prototype.toYData = function (point) {\n                // return a plain array for speedy calculation\n                return [point.open, point.high, point.low, point.close];\n            };\n            /**\n             * An OHLC chart is a style of financial chart used to describe price\n             * movements over time. It displays open, high, low and close values per\n             * data point.\n             *\n             * @sample stock/demo/ohlc/\n             *         OHLC chart\n             *\n             * @extends      plotOptions.hlc\n             * @product      highstock\n             * @optionparent plotOptions.ohlc\n             */\n            /**\n             * The parameter allows setting line series type and use OHLC indicators.\n             * Data in OHLC format is required.\n             *\n             * @sample {highstock} stock/indicators/use-ohlc-data\n             *         Use OHLC data format to plot line chart\n             *\n             * @type      {boolean}\n             * @product   highstock\n             * @apioption plotOptions.line.useOhlcData\n             */\n            OHLCSeries.defaultOptions = merge(HLCSeries.defaultOptions, {\n                /**\n                 * @type      {Highcharts.DataGroupingApproximationValue|Function}\n                 * @default   ohlc\n                 * @product   highstock\n                 * @apioption plotOptions.ohlc.dataGrouping.approximation\n                 */\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> ' +\n                        '<b> {series.name}</b><br/>' +\n                        'Open: {point.open}<br/>' +\n                        'High: {point.high}<br/>' +\n                        'Low: {point.low}<br/>' +\n                        'Close: {point.close}<br/>'\n                }\n                /**\n                 * Determines which one of  `open`, `high`, `low`, `close` values should\n                 * be represented as `point.y`, which is later used to set dataLabel\n                 * position and [compare](#plotOptions.series.compare).\n                 *\n                 * @default    close\n                 * @validvalue [\"open\", \"high\", \"low\", \"close\"]\n                 * @product    highstock\n                 * @apioption  plotOptions.ohlc.pointValKey\n                 */\n                /**\n                 * Line color for up points.\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @product   highstock\n                 * @apioption plotOptions.ohlc.upColor\n                 */\n            });\n            return OHLCSeries;\n        }(HLCSeries));\n        extend(OHLCSeries.prototype, {\n            pointArrayMap: ['open', 'high', 'low', 'close']\n        });\n        OHLCSeries.prototype.pointClass = OHLCPoint;\n        SeriesRegistry.registerSeriesType('ohlc', OHLCSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        // Add useOhlcData option\n        addEvent(Series, 'init', function (eventOptions) {\n            // eslint-disable-next-line no-invalid-this\n            var series = this,\n                options = eventOptions.options;\n            if (options.useOhlcData &&\n                options.id !== 'highcharts-navigator-series') {\n                extend(series, {\n                    pointValKey: OHLCSeries.prototype.pointValKey,\n                    // keys: ohlcProto.keys, // @todo potentially nonsense\n                    pointArrayMap: OHLCSeries.prototype.pointArrayMap,\n                    toYData: OHLCSeries.prototype.toYData\n                });\n            }\n        });\n        addEvent(Series, 'afterSetOptions', function (e) {\n            var options = e.options,\n                dataGrouping = options.dataGrouping;\n            if (dataGrouping &&\n                options.useOhlcData &&\n                options.id !== 'highcharts-navigator-series') {\n                dataGrouping.approximation = 'ohlc';\n            }\n        });\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `ohlc` series. If the [type](#series.ohlc.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ohlc\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @apioption series.ohlc\n         */\n        /**\n         * An array of data points for the series. For the `ohlc` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of arrays with 5 or 4 values. In this case, the values correspond\n         *    to `x,open,high,low,close`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred. The `x` value can\n         *    also be omitted, in which case the inner arrays should be of length 4\\.\n         *    Then the `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 6, 5, 6, 7],\n         *        [1, 9, 4, 8, 2],\n         *        [2, 6, 3, 4, 10]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.ohlc.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        open: 3,\n         *        high: 4,\n         *        low: 5,\n         *        close: 2,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        open: 4,\n         *        high: 3,\n         *        low: 6,\n         *        close: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<Array<(number|string),number,number,number>|Array<(number|string),number,number,number,number>|*>}\n         * @extends   series.arearange.data\n         * @excluding y, marker\n         * @product   highstock\n         * @apioption series.ohlc.data\n         */\n        /**\n         * The opening value of each data point.\n         *\n         * @type      {number}\n         * @product   highstock\n         * @apioption series.ohlc.data.open\n         */\n        ''; // adds doclets above to transpilat\n\n        return OHLCSeries;\n    });\n    _registerModule(_modules, 'Series/Candlestick/CandlestickSeries.js', [_modules['Core/DefaultOptions.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (D, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var defaultOptions = D.defaultOptions;\n        var _a = SeriesRegistry.seriesTypes,\n            ColumnSeries = _a.column,\n            OHLCSeries = _a.ohlc;\n        var merge = U.merge;\n        /* *\n         *\n         *  Code\n         *\n         * */\n        /**\n         * The candlestick series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.candlestick\n         *\n         * @augments Highcharts.seriesTypes.ohlc\n         */\n        var CandlestickSeries = /** @class */ (function (_super) {\n                __extends(CandlestickSeries, _super);\n            function CandlestickSeries() {\n                /* *\n                 *\n                 * Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 * Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             * Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Postprocess mapping between options and SVG attributes\n             *\n             * @private\n             * @function Highcharts.seriesTypes.candlestick#pointAttribs\n             */\n            CandlestickSeries.prototype.pointAttribs = function (point, state) {\n                var attribs = ColumnSeries.prototype.pointAttribs.call(this,\n                    point,\n                    state),\n                    options = this.options,\n                    isUp = point.open < point.close,\n                    stroke = options.lineColor || this.color,\n                    color = point.color || this.color, // (#14826)\n                    stateOptions;\n                attribs['stroke-width'] = options.lineWidth;\n                attribs.fill = point.options.color ||\n                    (isUp ? (options.upColor || color) : color);\n                attribs.stroke = point.options.lineColor ||\n                    (isUp ? (options.upLineColor || stroke) : stroke);\n                // Select or hover states\n                if (state) {\n                    stateOptions = options.states[state];\n                    attribs.fill = stateOptions.color || attribs.fill;\n                    attribs.stroke = stateOptions.lineColor || attribs.stroke;\n                    attribs['stroke-width'] =\n                        stateOptions.lineWidth || attribs['stroke-width'];\n                }\n                return attribs;\n            };\n            /**\n             * Draw the data points.\n             *\n             * @private\n             * @function Highcharts.seriesTypes.candlestick#drawPoints\n             */\n            CandlestickSeries.prototype.drawPoints = function () {\n                var series = this,\n                    points = series.points,\n                    chart = series.chart,\n                    reversedYAxis = series.yAxis.reversed;\n                points.forEach(function (point) {\n                    var graphic = point.graphic,\n                        plotOpen,\n                        plotClose,\n                        topBox,\n                        bottomBox,\n                        hasTopWhisker,\n                        hasBottomWhisker,\n                        crispCorr,\n                        crispX,\n                        path,\n                        halfWidth,\n                        isNew = !graphic;\n                    if (typeof point.plotY !== 'undefined') {\n                        if (!graphic) {\n                            point.graphic = graphic = chart.renderer.path()\n                                .add(series.group);\n                        }\n                        if (!series.chart.styledMode) {\n                            graphic\n                                .attr(series.pointAttribs(point, (point.selected && 'select'))) // #3897\n                                .shadow(series.options.shadow);\n                        }\n                        // Crisp vector coordinates\n                        crispCorr = (graphic.strokeWidth() % 2) / 2;\n                        // #2596:\n                        crispX = Math.round(point.plotX) - crispCorr;\n                        plotOpen = point.plotOpen;\n                        plotClose = point.plotClose;\n                        topBox = Math.min(plotOpen, plotClose);\n                        bottomBox = Math.max(plotOpen, plotClose);\n                        halfWidth = Math.round(point.shapeArgs.width / 2);\n                        hasTopWhisker = reversedYAxis ?\n                            bottomBox !== point.yBottom :\n                            Math.round(topBox) !==\n                                Math.round(point.plotHigh);\n                        hasBottomWhisker = reversedYAxis ?\n                            Math.round(topBox) !==\n                                Math.round(point.plotHigh) :\n                            bottomBox !== point.yBottom;\n                        topBox = Math.round(topBox) + crispCorr;\n                        bottomBox = Math.round(bottomBox) + crispCorr;\n                        // Create the path. Due to a bug in Chrome 49, the path is\n                        // first instanciated with no values, then the values\n                        // pushed. For unknown reasons, instanciating the path array\n                        // with all the values would lead to a crash when updating\n                        // frequently (#5193).\n                        path = [];\n                        path.push(['M', crispX - halfWidth, bottomBox], ['L', crispX - halfWidth, topBox], ['L', crispX + halfWidth, topBox], ['L', crispX + halfWidth, bottomBox], ['Z'], // Ensure a nice rectangle #2602\n                        ['M', crispX, topBox], [\n                            'L',\n                            // #460, #2094\n                            crispX,\n                            hasTopWhisker ?\n                                Math.round(reversedYAxis ?\n                                    point.yBottom :\n                                    point.plotHigh) :\n                                topBox\n                        ], ['M', crispX, bottomBox], [\n                            'L',\n                            // #460, #2094\n                            crispX,\n                            hasBottomWhisker ?\n                                Math.round(reversedYAxis ?\n                                    point.plotHigh :\n                                    point.yBottom) :\n                                bottomBox\n                        ]);\n                        graphic[isNew ? 'attr' : 'animate']({ d: path })\n                            .addClass(point.getClassName(), true);\n                    }\n                });\n                /* eslint-enable valid-jsdoc */\n            };\n            CandlestickSeries.defaultOptions = merge(OHLCSeries.defaultOptions, defaultOptions.plotOptions, \n            /**\n             * A candlestick chart is a style of financial chart used to describe\n             * price movements over time.\n             *\n             * @sample stock/demo/candlestick/\n             *         Candlestick chart\n             *\n             * @extends      plotOptions.ohlc\n             * @excluding    borderColor,borderRadius,borderWidth\n             * @product      highstock\n             * @optionparent plotOptions.candlestick\n             */\n            {\n                /**\n                 * The specific line color for up candle sticks. The default is to\n                 * inherit the general `lineColor` setting.\n                 *\n                 * @sample {highstock} stock/plotoptions/candlestick-linecolor/\n                 *         Candlestick line colors\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @since     1.3.6\n                 * @product   highstock\n                 * @apioption plotOptions.candlestick.upLineColor\n                 */\n                states: {\n                    /**\n                     * @extends plotOptions.column.states.hover\n                     * @product highstock\n                     */\n                    hover: {\n                        /**\n                         * The pixel width of the line/border around the\n                         * candlestick.\n                         *\n                         * @product highstock\n                         */\n                        lineWidth: 2\n                    }\n                },\n                tooltip: defaultOptions.plotOptions.ohlc.tooltip,\n                /**\n                 * @type    {number|null}\n                 * @product highstock\n                 */\n                threshold: null,\n                /**\n                 * The color of the line/border of the candlestick.\n                 *\n                 * In styled mode, the line stroke can be set with the\n                 * `.highcharts-candlestick-series .highcahrts-point` rule.\n                 *\n                 * @see [upLineColor](#plotOptions.candlestick.upLineColor)\n                 *\n                 * @sample {highstock} stock/plotoptions/candlestick-linecolor/\n                 *         Candlestick line colors\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default #000000\n                 * @product highstock\n                 */\n                lineColor: \"#000000\" /* neutralColor100 */,\n                /**\n                 * The pixel width of the candlestick line/border. Defaults to `1`.\n                 *\n                 *\n                 * In styled mode, the line stroke width can be set with the\n                 * `.highcharts-candlestick-series .highcahrts-point` rule.\n                 *\n                 * @product highstock\n                 */\n                lineWidth: 1,\n                /**\n                 * The fill color of the candlestick when values are rising.\n                 *\n                 * In styled mode, the up color can be set with the\n                 * `.highcharts-candlestick-series .highcharts-point-up` rule.\n                 *\n                 * @sample {highstock} stock/plotoptions/candlestick-color/\n                 *         Custom colors\n                 * @sample {highstock} highcharts/css/candlestick/\n                 *         Colors in styled mode\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default #ffffff\n                 * @product highstock\n                */\n                upColor: \"#ffffff\" /* backgroundColor */,\n                /**\n                 * @product highstock\n                 */\n                stickyTracking: true\n            });\n            return CandlestickSeries;\n        }(OHLCSeries));\n        SeriesRegistry.registerSeriesType('candlestick', CandlestickSeries);\n        /* *\n         *\n         * Default Export\n         *\n         * */\n        /* *\n         *\n         * API Options\n         *\n         * */\n        /**\n         * A `candlestick` series. If the [type](#series.candlestick.type)\n         * option is not specified, it is inherited from [chart.type](\n         * #chart.type).\n         *\n         * @type      {*}\n         * @extends   series,plotOptions.candlestick\n         * @excluding dataParser, dataURL, marker\n         * @product   highstock\n         * @apioption series.candlestick\n         */\n        /**\n         * An array of data points for the series. For the `candlestick` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of arrays with 5 or 4 values. In this case, the values correspond\n         *    to `x,open,high,low,close`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred. The `x` value can\n         *    also be omitted, in which case the inner arrays should be of length 4.\n         *    Then the `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 7, 2, 0, 4],\n         *        [1, 1, 4, 2, 8],\n         *        [2, 3, 3, 9, 3]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.candlestick.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        open: 9,\n         *        high: 2,\n         *        low: 4,\n         *        close: 6,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        open: 1,\n         *        high: 4,\n         *        low: 7,\n         *        close: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<Array<(number|string),number,number,number>|Array<(number|string),number,number,number,number>|*>}\n         * @extends   series.ohlc.data\n         * @excluding y\n         * @product   highstock\n         * @apioption series.candlestick.data\n         */\n        ''; // adds doclets above to transpilat\n\n        return CandlestickSeries;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var ColumnSeries = SeriesRegistry.seriesTypes.column;\n        var isNumber = U.isNumber;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var FlagsPoint = /** @class */ (function (_super) {\n                __extends(FlagsPoint, _super);\n            function FlagsPoint() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.options = void 0;\n                _this.series = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            FlagsPoint.prototype.isValid = function () {\n                // #9233 - Prevent from treating flags as null points (even if\n                // they have no y values defined).\n                return isNumber(this.y) || typeof this.y === 'undefined';\n            };\n            /**\n             * @private\n             */\n            FlagsPoint.prototype.hasNewShapeType = function () {\n                var shape = this.options.shape || this.series.options.shape;\n                return this.graphic && shape && shape !== this.graphic.symbolKey;\n            };\n            return FlagsPoint;\n        }(ColumnSeries.prototype.pointClass));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FlagsPoint;\n    });\n    _registerModule(_modules, 'Series/OnSeriesComposition.js', [_modules['Series/Column/ColumnSeries.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (ColumnSeries, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var columnProto = ColumnSeries.prototype;\n        var seriesProto = Series.prototype;\n        var defined = U.defined,\n            stableSort = U.stableSort;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var OnSeriesComposition;\n        (function (OnSeriesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Properties\n             *\n             * */\n            var composedClasses = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(SeriesClass) {\n                if (composedClasses.indexOf(SeriesClass) === -1) {\n                    composedClasses.push(SeriesClass);\n                    var seriesProto_1 = SeriesClass.prototype;\n                    seriesProto_1.getPlotBox = getPlotBox;\n                    seriesProto_1.translate = translate;\n                }\n                return SeriesClass;\n            }\n            OnSeriesComposition.compose = compose;\n            /**\n             * Override getPlotBox. If the onSeries option is valid, return the plot box\n             * of the onSeries, otherwise proceed as usual.\n             *\n             * @private\n             */\n            function getPlotBox() {\n                return seriesProto.getPlotBox.call((this.options.onSeries &&\n                    this.chart.get(this.options.onSeries)) || this);\n            }\n            OnSeriesComposition.getPlotBox = getPlotBox;\n            /**\n             * Extend the translate method by placing the point on the related series\n             *\n             * @private\n             */\n            function translate() {\n                columnProto.translate.apply(this);\n                var series = this,\n                    options = series.options,\n                    chart = series.chart,\n                    points = series.points,\n                    optionsOnSeries = options.onSeries,\n                    onSeries = (optionsOnSeries &&\n                        chart.get(optionsOnSeries)),\n                    step = onSeries && onSeries.options.step,\n                    onData = (onSeries && onSeries.points),\n                    inverted = chart.inverted,\n                    xAxis = series.xAxis,\n                    yAxis = series.yAxis;\n                var cursor = points.length - 1,\n                    point,\n                    lastPoint,\n                    onKey = options.onKey || 'y',\n                    i = onData && onData.length,\n                    xOffset = 0,\n                    leftPoint,\n                    lastX,\n                    rightPoint,\n                    currentDataGrouping,\n                    distanceRatio;\n                // relate to a master series\n                if (onSeries && onSeries.visible && i) {\n                    xOffset = (onSeries.pointXOffset || 0) + (onSeries.barW || 0) / 2;\n                    currentDataGrouping = onSeries.currentDataGrouping;\n                    lastX = (onData[i - 1].x +\n                        (currentDataGrouping ? currentDataGrouping.totalRange : 0)); // #2374\n                    // sort the data points\n                    stableSort(points, function (a, b) { return (a.x - b.x); });\n                    onKey = 'plot' + onKey[0].toUpperCase() + onKey.substr(1);\n                    while (i-- && points[cursor]) {\n                        leftPoint = onData[i];\n                        point = points[cursor];\n                        point.y = leftPoint.y;\n                        if (leftPoint.x <= point.x &&\n                            typeof leftPoint[onKey] !== 'undefined') {\n                            if (point.x <= lastX) { // #803\n                                point.plotY = leftPoint[onKey];\n                                // interpolate between points, #666\n                                if (leftPoint.x < point.x &&\n                                    !step) {\n                                    rightPoint = onData[i + 1];\n                                    if (rightPoint &&\n                                        typeof rightPoint[onKey] !== 'undefined') {\n                                        // the distance ratio, between 0 and 1\n                                        distanceRatio =\n                                            (point.x - leftPoint.x) /\n                                                (rightPoint.x - leftPoint.x);\n                                        point.plotY +=\n                                            distanceRatio *\n                                                // the plotY distance\n                                                (rightPoint[onKey] - leftPoint[onKey]);\n                                        point.y +=\n                                            distanceRatio *\n                                                (rightPoint.y - leftPoint.y);\n                                    }\n                                }\n                            }\n                            cursor--;\n                            i++; // check again for points in the same x position\n                            if (cursor < 0) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                // Add plotY position and handle stacking\n                points.forEach(function (point, i) {\n                    var stackIndex;\n                    point.plotX += xOffset; // #2049\n                    // Undefined plotY means the point is either on axis, outside series\n                    // range or hidden series. If the series is outside the range of the\n                    // x axis it should fall through with an undefined plotY, but then\n                    // we must remove the shapeArgs (#847). For inverted charts, we need\n                    // to calculate position anyway, because series.invertGroups is not\n                    // defined\n                    if (typeof point.plotY === 'undefined' || inverted) {\n                        if (point.plotX >= 0 &&\n                            point.plotX <= xAxis.len) {\n                            // We're inside xAxis range\n                            if (inverted) {\n                                point.plotY = xAxis.translate(point.x, 0, 1, 0, 1);\n                                point.plotX = defined(point.y) ?\n                                    yAxis.translate(point.y, 0, 0, 0, 1) :\n                                    0;\n                            }\n                            else {\n                                point.plotY = (xAxis.opposite ? 0 : series.yAxis.len) +\n                                    xAxis.offset; // For the windbarb demo\n                            }\n                        }\n                        else {\n                            point.shapeArgs = {}; // 847\n                        }\n                    }\n                    // if multiple flags appear at the same x, order them into a stack\n                    lastPoint = points[i - 1];\n                    if (lastPoint && lastPoint.plotX === point.plotX) {\n                        if (typeof lastPoint.stackIndex === 'undefined') {\n                            lastPoint.stackIndex = 0;\n                        }\n                        stackIndex = lastPoint.stackIndex + 1;\n                    }\n                    point.stackIndex = stackIndex; // #3639\n                });\n                this.onSeries = onSeries;\n            }\n            OnSeriesComposition.translate = translate;\n        })(OnSeriesComposition || (OnSeriesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OnSeriesComposition;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsSymbols.js', [_modules['Core/Renderer/RendererRegistry.js'], _modules['Core/Renderer/SVG/SVGRenderer.js']], function (RendererRegistry, SVGRenderer) {\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        var symbols = SVGRenderer.prototype.symbols;\n        /* *\n         *\n         *  Symbols\n         *\n         * */\n        // create the flag icon with anchor\n        symbols.flag = function (x, y, w, h, options) {\n            var anchorX = (options && options.anchorX) || x,\n                anchorY = (options && options.anchorY) || y;\n            // To do: unwanted any cast because symbols.circle has wrong type, it\n            // actually returns an SVGPathArray\n            var path = symbols.circle(anchorX - 1,\n                anchorY - 1, 2, 2);\n            path.push(['M', anchorX, anchorY], ['L', x, y + h], ['L', x, y], ['L', x + w, y], ['L', x + w, y + h], ['L', x, y + h], ['Z']);\n            return path;\n        };\n        /**\n         * Create the circlepin and squarepin icons with anchor.\n         * @private\n         * @param {string} shape\n         * circle or square\n         */\n        function createPinSymbol(shape) {\n            symbols[(shape + 'pin')] = function (x, y, w, h, options) {\n                var anchorX = options && options.anchorX,\n                    anchorY = options && options.anchorY;\n                var path;\n                // For single-letter flags, make sure circular flags are not taller\n                // than their width\n                if (shape === 'circle' && h > w) {\n                    x -= Math.round((h - w) / 2);\n                    w = h;\n                }\n                path = (symbols[shape])(x, y, w, h);\n                if (anchorX && anchorY) {\n                    /**\n                     * If the label is below the anchor, draw the connecting line from\n                     * the top edge of the label, otherwise start drawing from the\n                     * bottom edge\n                     */\n                    var labelX = anchorX;\n                    if (shape === 'circle') {\n                        labelX = x + w / 2;\n                    }\n                    else {\n                        var startSeg = path[0];\n                        var endSeg = path[1];\n                        if (startSeg[0] === 'M' && endSeg[0] === 'L') {\n                            labelX = (startSeg[1] + endSeg[1]) / 2;\n                        }\n                    }\n                    var labelY = (y > anchorY) ? y : y + h;\n                    path.push([\n                        'M',\n                        labelX,\n                        labelY\n                    ], [\n                        'L',\n                        anchorX,\n                        anchorY\n                    ]);\n                    path = path.concat(symbols.circle(anchorX - 1, anchorY - 1, 2, 2));\n                }\n                return path;\n            };\n        }\n        createPinSymbol('circle');\n        createPinSymbol('square');\n        /**\n         * The symbol callbacks are generated on the SVGRenderer object in all browsers.\n         * Even VML browsers need this in order to generate shapes in export. Now share\n         * them with the VMLRenderer.\n         */\n        var Renderer = RendererRegistry.getRendererType();\n        if (Renderer !== SVGRenderer) {\n            Renderer.prototype.symbols.circlepin = symbols.circlepin;\n            Renderer.prototype.symbols.flag = symbols.flag;\n            Renderer.prototype.symbols.squarepin = symbols.squarepin;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return symbols;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsSeries.js', [_modules['Series/Flags/FlagsPoint.js'], _modules['Core/Globals.js'], _modules['Series/OnSeriesComposition.js'], _modules['Core/Renderer/RendererUtilities.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Core/Utilities.js']], function (FlagsPoint, H, OnSeriesComposition, R, SeriesRegistry, SVGElement, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var noop = H.noop;\n        var distribute = R.distribute;\n        var Series = SeriesRegistry.series,\n            ColumnSeries = SeriesRegistry.seriesTypes.column;\n        var addEvent = U.addEvent,\n            defined = U.defined,\n            extend = U.extend,\n            merge = U.merge,\n            objectEach = U.objectEach,\n            wrap = U.wrap;\n        /* *\n         *\n         *  Classes\n         *\n         * */\n        /**\n         * The Flags series.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.flags\n         *\n         * @augments Highcharts.Series\n         */\n        var FlagsSeries = /** @class */ (function (_super) {\n                __extends(FlagsSeries, _super);\n            function FlagsSeries() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Disable animation, but keep clipping (#8546).\n             * @private\n             */\n            FlagsSeries.prototype.animate = function (init) {\n                if (init) {\n                    this.setClip();\n                }\n            };\n            /**\n             * Draw the markers.\n             * @private\n             */\n            FlagsSeries.prototype.drawPoints = function () {\n                var series = this,\n                    points = series.points,\n                    chart = series.chart,\n                    renderer = chart.renderer,\n                    plotX,\n                    plotY,\n                    inverted = chart.inverted,\n                    options = series.options,\n                    optionsY = options.y,\n                    shape,\n                    i,\n                    point,\n                    graphic,\n                    stackIndex,\n                    anchorY,\n                    attribs,\n                    outsideRight,\n                    yAxis = series.yAxis,\n                    boxesMap = {},\n                    boxes = [],\n                    centered;\n                i = points.length;\n                while (i--) {\n                    point = points[i];\n                    outsideRight =\n                        (inverted ? point.plotY : point.plotX) >\n                            series.xAxis.len;\n                    plotX = point.plotX;\n                    stackIndex = point.stackIndex;\n                    shape = point.options.shape || options.shape;\n                    plotY = point.plotY;\n                    if (typeof plotY !== 'undefined') {\n                        plotY = point.plotY + optionsY -\n                            (typeof stackIndex !== 'undefined' &&\n                                (stackIndex * options.stackDistance));\n                    }\n                    // skip connectors for higher level stacked points\n                    point.anchorX = stackIndex ? void 0 : point.plotX;\n                    anchorY = stackIndex ? void 0 : point.plotY;\n                    centered = shape !== 'flag';\n                    graphic = point.graphic;\n                    // Only draw the point if y is defined and the flag is within\n                    // the visible area\n                    if (typeof plotY !== 'undefined' &&\n                        plotX >= 0 &&\n                        !outsideRight) {\n                        // #15384\n                        if (graphic && point.hasNewShapeType()) {\n                            graphic = graphic.destroy();\n                        }\n                        // Create the flag\n                        if (!graphic) {\n                            graphic = point.graphic = renderer.label('', null, null, shape, null, null, options.useHTML)\n                                .addClass('highcharts-point')\n                                .add(series.markerGroup);\n                            // Add reference to the point for tracker (#6303)\n                            if (point.graphic.div) {\n                                point.graphic.div.point = point;\n                            }\n                            graphic.isNew = true;\n                        }\n                        graphic.attr({\n                            align: centered ? 'center' : 'left',\n                            width: options.width,\n                            height: options.height,\n                            'text-align': options.textAlign\n                        });\n                        if (!chart.styledMode) {\n                            graphic\n                                .attr(series.pointAttribs(point))\n                                .css(merge(options.style, point.style))\n                                .shadow(options.shadow);\n                        }\n                        if (plotX > 0) { // #3119\n                            plotX -= graphic.strokeWidth() % 2; // #4285\n                        }\n                        // Plant the flag\n                        attribs = {\n                            y: plotY,\n                            anchorY: anchorY\n                        };\n                        if (options.allowOverlapX) {\n                            attribs.x = plotX;\n                            attribs.anchorX = point.anchorX;\n                        }\n                        graphic.attr({\n                            text: point.options.title || options.title || 'A'\n                        })[graphic.isNew ? 'attr' : 'animate'](attribs);\n                        // Rig for the distribute function\n                        if (!options.allowOverlapX) {\n                            if (!boxesMap[point.plotX]) {\n                                boxesMap[point.plotX] = {\n                                    align: centered ? 0.5 : 0,\n                                    size: graphic.width,\n                                    target: plotX,\n                                    anchorX: plotX\n                                };\n                            }\n                            else {\n                                boxesMap[point.plotX].size = Math.max(boxesMap[point.plotX].size, graphic.width);\n                            }\n                        }\n                        // Set the tooltip anchor position\n                        point.tooltipPos = [\n                            plotX,\n                            plotY + yAxis.pos - chart.plotTop\n                        ]; // #6327\n                    }\n                    else if (graphic) {\n                        point.graphic = graphic.destroy();\n                    }\n                }\n                // Handle X-dimension overlapping\n                if (!options.allowOverlapX) {\n                    var maxDistance_1 = 100;\n                    objectEach(boxesMap, function (box) {\n                        box.plotX = box.anchorX;\n                        boxes.push(box);\n                        maxDistance_1 = Math.max(box.size, maxDistance_1);\n                    });\n                    // If necessary (for overlapping or long labels)  distribute it\n                    // depending on the label width or a hardcoded value, #16041.\n                    distribute(boxes, inverted ? yAxis.len : this.xAxis.len, maxDistance_1);\n                    points.forEach(function (point) {\n                        var box = point.graphic && boxesMap[point.plotX];\n                        if (box) {\n                            point.graphic[point.graphic.isNew ? 'attr' : 'animate']({\n                                x: box.pos + box.align * box.size,\n                                anchorX: point.anchorX\n                            });\n                            // Hide flag when its box position is not specified\n                            // (#8573, #9299)\n                            if (!defined(box.pos)) {\n                                point.graphic.attr({\n                                    x: -9999,\n                                    anchorX: -9999\n                                });\n                                point.graphic.isNew = true;\n                            }\n                            else {\n                                point.graphic.isNew = false;\n                            }\n                        }\n                    });\n                }\n                // Can be a mix of SVG and HTML and we need events for both (#6303)\n                if (options.useHTML) {\n                    wrap(series.markerGroup, 'on', function (proceed) {\n                        return SVGElement.prototype.on.apply(\n                        // for HTML\n                        // eslint-disable-next-line no-invalid-this\n                        proceed.apply(this, [].slice.call(arguments, 1)), \n                        // and for SVG\n                        [].slice.call(arguments, 1));\n                    });\n                }\n            };\n            /**\n             * Extend the column trackers with listeners to expand and contract\n             * stacks.\n             * @private\n             */\n            FlagsSeries.prototype.drawTracker = function () {\n                var series = this,\n                    points = series.points;\n                _super.prototype.drawTracker.call(this);\n                /* *\n                * Bring each stacked flag up on mouse over, this allows readability\n                * of vertically stacked elements as well as tight points on the x\n                * axis. #1924.\n                */\n                points.forEach(function (point) {\n                    var graphic = point.graphic;\n                    if (graphic) {\n                        if (point.unbindMouseOver) {\n                            point.unbindMouseOver();\n                        }\n                        point.unbindMouseOver = addEvent(graphic.element, 'mouseover', function () {\n                            // Raise this point\n                            if (point.stackIndex > 0 &&\n                                !point.raised) {\n                                point._y = graphic.y;\n                                graphic.attr({\n                                    y: point._y - 8\n                                });\n                                point.raised = true;\n                            }\n                            // Revert other raised points\n                            points.forEach(function (otherPoint) {\n                                if (otherPoint !== point &&\n                                    otherPoint.raised &&\n                                    otherPoint.graphic) {\n                                    otherPoint.graphic.attr({\n                                        y: otherPoint._y\n                                    });\n                                    otherPoint.raised = false;\n                                }\n                            });\n                        });\n                    }\n                });\n            };\n            /**\n             * Get presentational attributes\n             * @private\n             */\n            FlagsSeries.prototype.pointAttribs = function (point, state) {\n                var options = this.options,\n                    color = (point && point.color) || this.color,\n                    lineColor = options.lineColor,\n                    lineWidth = (point && point.lineWidth),\n                    fill = (point && point.fillColor) || options.fillColor;\n                if (state) {\n                    fill = options.states[state].fillColor;\n                    lineColor = options.states[state].lineColor;\n                    lineWidth = options.states[state].lineWidth;\n                }\n                return {\n                    fill: fill || color,\n                    stroke: lineColor || color,\n                    'stroke-width': lineWidth || options.lineWidth || 0\n                };\n            };\n            /**\n             * @private\n             */\n            FlagsSeries.prototype.setClip = function () {\n                Series.prototype.setClip.apply(this, arguments);\n                if (this.options.clip !== false &&\n                    this.sharedClipKey &&\n                    this.markerGroup) {\n                    this.markerGroup.clip(this.chart.sharedClips[this.sharedClipKey]);\n                }\n            };\n            /**\n             * Flags are used to mark events in stock charts. They can be added on the\n             * timeline, or attached to a specific series.\n             *\n             * @sample stock/demo/flags-general/\n             *         Flags on a line series\n             *\n             * @extends      plotOptions.column\n             * @excluding    animation, borderColor, borderRadius, borderWidth,\n             *               colorByPoint, dataGrouping, pointPadding, pointWidth,\n             *               turboThreshold\n             * @product      highstock\n             * @optionparent plotOptions.flags\n             */\n            FlagsSeries.defaultOptions = merge(ColumnSeries.defaultOptions, {\n                /**\n                 * In case the flag is placed on a series, on what point key to place\n                 * it. Line and columns have one key, `y`. In range or OHLC-type series,\n                 * however, the flag can optionally be placed on the `open`, `high`,\n                 * `low` or `close` key.\n                 *\n                 * @sample {highstock} stock/plotoptions/flags-onkey/\n                 *         Range series, flag on high\n                 *\n                 * @type       {string}\n                 * @default    y\n                 * @since      4.2.2\n                 * @product    highstock\n                 * @validvalue [\"y\", \"open\", \"high\", \"low\", \"close\"]\n                 * @apioption  plotOptions.flags.onKey\n                 */\n                /**\n                 * The id of the series that the flags should be drawn on. If no id\n                 * is given, the flags are drawn on the x axis.\n                 *\n                 * @sample {highstock} stock/plotoptions/flags/\n                 *         Flags on series and on x axis\n                 *\n                 * @type      {string}\n                 * @product   highstock\n                 * @apioption plotOptions.flags.onSeries\n                 */\n                pointRange: 0,\n                /**\n                 * Whether the flags are allowed to overlap sideways. If `false`, the\n                 * flags are moved sideways using an algorithm that seeks to place every\n                 * flag as close as possible to its original position.\n                 *\n                 * @sample {highstock} stock/plotoptions/flags-allowoverlapx\n                 *         Allow sideways overlap\n                 *\n                 * @since 6.0.4\n                 */\n                allowOverlapX: false,\n                /**\n                 * The shape of the marker. Can be one of \"flag\", \"circlepin\",\n                 * \"squarepin\", or an image of the format `url(/path-to-image.jpg)`.\n                 * Individual shapes can also be set for each point.\n                 *\n                 * @sample {highstock} stock/plotoptions/flags/\n                 *         Different shapes\n                 *\n                 * @type    {Highcharts.FlagsShapeValue}\n                 * @product highstock\n                 */\n                shape: 'flag',\n                /**\n                 * When multiple flags in the same series fall on the same value, this\n                 * number determines the vertical offset between them.\n                 *\n                 * @sample {highstock} stock/plotoptions/flags-stackdistance/\n                 *         A greater stack distance\n                 *\n                 * @product highstock\n                 */\n                stackDistance: 12,\n                /**\n                 * Text alignment for the text inside the flag.\n                 *\n                 * @since      5.0.0\n                 * @product    highstock\n                 * @validvalue [\"left\", \"center\", \"right\"]\n                 */\n                textAlign: 'center',\n                /**\n                 * Specific tooltip options for flag series. Flag series tooltips are\n                 * different from most other types in that a flag doesn't have a data\n                 * value, so the tooltip rather displays the `text` option for each\n                 * point.\n                 *\n                 * @extends   plotOptions.series.tooltip\n                 * @excluding changeDecimals, valueDecimals, valuePrefix, valueSuffix\n                 * @product   highstock\n                 */\n                tooltip: {\n                    pointFormat: '{point.text}'\n                },\n                threshold: null,\n                /**\n                 * The text to display on each flag. This can be defined on series\n                 * level, or individually for each point. Defaults to `\"A\"`.\n                 *\n                 * @type      {string}\n                 * @default   A\n                 * @product   highstock\n                 * @apioption plotOptions.flags.title\n                 */\n                /**\n                 * The y position of the top left corner of the flag relative to either\n                 * the series (if onSeries is defined), or the x axis. Defaults to\n                 * `-30`.\n                 *\n                 * @product highstock\n                 */\n                y: -30,\n                /**\n                 * Whether to use HTML to render the flag texts. Using HTML allows for\n                 * advanced formatting, images and reliable bi-directional text\n                 * rendering. Note that exported images won't respect the HTML, and that\n                 * HTML won't respect Z-index settings.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     1.3\n                 * @product   highstock\n                 * @apioption plotOptions.flags.useHTML\n                 */\n                /**\n                 * Fixed width of the flag's shape. By default, width is autocalculated\n                 * according to the flag's title.\n                 *\n                 * @sample {highstock} stock/demo/flags-shapes/\n                 *         Flags with fixed width\n                 *\n                 * @type      {number}\n                 * @product   highstock\n                 * @apioption plotOptions.flags.width\n                 */\n                /**\n                 * Fixed height of the flag's shape. By default, height is\n                 * autocalculated according to the flag's title.\n                 *\n                 * @type      {number}\n                 * @product   highstock\n                 * @apioption plotOptions.flags.height\n                 */\n                /**\n                 * The fill color for the flags.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @product highstock\n                 */\n                fillColor: \"#ffffff\" /* backgroundColor */,\n                /**\n                 * The color of the line/border of the flag.\n                 *\n                 * In styled mode, the stroke is set in the\n                 * `.highcharts-flag-series.highcharts-point` rule.\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default   #000000\n                 * @product   highstock\n                 * @apioption plotOptions.flags.lineColor\n                 */\n                /**\n                 * The pixel width of the flag's line/border.\n                 *\n                 * @product highstock\n                 */\n                lineWidth: 1,\n                states: {\n                    /**\n                     * @extends plotOptions.column.states.hover\n                     * @product highstock\n                     */\n                    hover: {\n                        /**\n                         * The color of the line/border of the flag.\n                         *\n                         * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                         * @product highstock\n                         */\n                        lineColor: \"#000000\" /* neutralColor100 */,\n                        /**\n                         * The fill or background color of the flag.\n                         *\n                         * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                         * @product highstock\n                         */\n                        fillColor: \"#ccd6eb\" /* highlightColor20 */\n                    }\n                },\n                /**\n                 * The text styles of the flag.\n                 *\n                 * In styled mode, the styles are set in the\n                 * `.highcharts-flag-series .highcharts-point` rule.\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"fontSize\": \"11px\", \"fontWeight\": \"bold\"}\n                 * @product highstock\n                 */\n                style: {\n                    /** @ignore-option */\n                    fontSize: '11px',\n                    /** @ignore-option */\n                    fontWeight: 'bold'\n                }\n            });\n            return FlagsSeries;\n        }(ColumnSeries));\n        OnSeriesComposition.compose(FlagsSeries);\n        extend(FlagsSeries.prototype, {\n            allowDG: false,\n            forceCrop: true,\n            invertible: false,\n            noSharedTooltip: true,\n            pointClass: FlagsPoint,\n            sorted: false,\n            takeOrdinalPosition: false,\n            trackerGroups: ['markerGroup'],\n            buildKDTree: noop,\n            /**\n             * Inherit the initialization from base Series.\n             * @private\n             */\n            init: Series.prototype.init,\n            /**\n             * Don't invert the flag marker group (#4960).\n             * @private\n             */\n            invertGroups: noop\n        });\n        SeriesRegistry.registerSeriesType('flags', FlagsSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"circlepin\"|\"flag\"|\"squarepin\"} Highcharts.FlagsShapeValue\n         */\n        ''; // detach doclets above\n        /* *\n         *\n         *  API Option\n         *\n         * */\n        /**\n         * A `flags` series. If the [type](#series.flags.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.flags\n         * @excluding animation, borderColor, borderRadius, borderWidth, colorByPoint,\n         *            connectNulls, dashStyle, dataGrouping, dataParser, dataURL,\n         *            gapSize, gapUnit, linecap, lineWidth, marker, pointPadding,\n         *            pointWidth, step, turboThreshold, useOhlcData\n         * @product   highstock\n         * @apioption series.flags\n         */\n        /**\n         * An array of data points for the series. For the `flags` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.flags.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        title: \"A\",\n         *        text: \"First event\"\n         *    }, {\n         *        x: 1,\n         *        title: \"B\",\n         *        text: \"Second event\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<*>}\n         * @extends   series.line.data\n         * @excluding dataLabels, marker, name, y\n         * @product   highstock\n         * @apioption series.flags.data\n         */\n        /**\n         * The fill color of an individual flag. By default it inherits from\n         * the series color.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @product   highstock\n         * @apioption series.flags.data.fillColor\n         */\n        /**\n         * The longer text to be shown in the flag's tooltip.\n         *\n         * @type      {string}\n         * @product   highstock\n         * @apioption series.flags.data.text\n         */\n        /**\n         * The short text to be shown on the flag.\n         *\n         * @type      {string}\n         * @product   highstock\n         * @apioption series.flags.data.title\n         */\n        ''; // adds doclets above to transpiled file\n\n        return FlagsSeries;\n    });\n    _registerModule(_modules, 'Core/Axis/ScrollbarAxis.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var addEvent = U.addEvent,\n            defined = U.defined,\n            pick = U.pick;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * Creates scrollbars if enabled.\n         * @private\n         */\n        var ScrollbarAxis = /** @class */ (function () {\n                function ScrollbarAxis() {\n                }\n                /**\n                 * Attaches to axis events to create scrollbars if enabled.\n                 *\n                 * @private\n                 *\n                 * @param AxisClass\n                 * Axis class to extend.\n                 *\n                 * @param ScrollbarClass\n                 * Scrollbar class to use.\n                 */\n                ScrollbarAxis.compose = function (AxisClass, ScrollbarClass) {\n                    if (ScrollbarAxis.composed.indexOf(AxisClass) === -1) {\n                        ScrollbarAxis.composed.push(AxisClass);\n                }\n                else {\n                    return AxisClass;\n                }\n                var getExtremes = function (axis) {\n                        var axisMin = pick(axis.options && axis.options.min,\n                    axis.min);\n                    var axisMax = pick(axis.options && axis.options.max,\n                        axis.max);\n                    return {\n                        axisMin: axisMin,\n                        axisMax: axisMax,\n                        scrollMin: defined(axis.dataMin) ?\n                            Math.min(axisMin, axis.min, axis.dataMin, pick(axis.threshold, Infinity)) : axisMin,\n                        scrollMax: defined(axis.dataMax) ?\n                            Math.max(axisMax, axis.max, axis.dataMax, pick(axis.threshold, -Infinity)) : axisMax\n                    };\n                };\n                // Wrap axis initialization and create scrollbar if enabled:\n                addEvent(AxisClass, 'afterInit', function () {\n                    var axis = this;\n                    if (axis.options &&\n                        axis.options.scrollbar &&\n                        axis.options.scrollbar.enabled) {\n                        // Predefined options:\n                        axis.options.scrollbar.vertical = !axis.horiz;\n                        axis.options.startOnTick = axis.options.endOnTick = false;\n                        axis.scrollbar = new ScrollbarClass(axis.chart.renderer, axis.options.scrollbar, axis.chart);\n                        addEvent(axis.scrollbar, 'changed', function (e) {\n                            var _a = getExtremes(axis),\n                                axisMin = _a.axisMin,\n                                axisMax = _a.axisMax,\n                                unitedMin = _a.scrollMin,\n                                unitedMax = _a.scrollMax,\n                                range = unitedMax - unitedMin,\n                                to,\n                                from;\n                            // #12834, scroll when show/hide series, wrong extremes\n                            if (!defined(axisMin) || !defined(axisMax)) {\n                                return;\n                            }\n                            if ((axis.horiz && !axis.reversed) ||\n                                (!axis.horiz && axis.reversed)) {\n                                to = unitedMin + range * this.to;\n                                from = unitedMin + range * this.from;\n                            }\n                            else {\n                                // y-values in browser are reversed, but this also\n                                // applies for reversed horizontal axis:\n                                to = unitedMin + range * (1 - this.from);\n                                from = unitedMin + range * (1 - this.to);\n                            }\n                            if (this.shouldUpdateExtremes(e.DOMType)) {\n                                axis.setExtremes(from, to, true, (e.DOMType !== 'mousemove' &&\n                                    e.DOMType !== 'touchmove'), e);\n                            }\n                            else {\n                                // When live redraw is disabled, don't change extremes\n                                // Only change the position of the scollbar thumb\n                                this.setRange(this.from, this.to);\n                            }\n                        });\n                    }\n                });\n                // Wrap rendering axis, and update scrollbar if one is created:\n                addEvent(AxisClass, 'afterRender', function () {\n                    var axis = this,\n                        _a = getExtremes(axis),\n                        scrollMin = _a.scrollMin,\n                        scrollMax = _a.scrollMax,\n                        scrollbar = axis.scrollbar,\n                        offset = (axis.axisTitleMargin + (axis.titleOffset || 0)),\n                        scrollbarsOffsets = axis.chart.scrollbarsOffsets,\n                        axisMargin = axis.options.margin || 0,\n                        offsetsIndex,\n                        from,\n                        to;\n                    if (scrollbar) {\n                        if (axis.horiz) {\n                            // Reserve space for labels/title\n                            if (!axis.opposite) {\n                                scrollbarsOffsets[1] += offset;\n                            }\n                            scrollbar.position(axis.left, (axis.top +\n                                axis.height +\n                                2 +\n                                scrollbarsOffsets[1] -\n                                (axis.opposite ? axisMargin : 0)), axis.width, axis.height);\n                            // Next scrollbar should reserve space for margin (if set)\n                            if (!axis.opposite) {\n                                scrollbarsOffsets[1] += axisMargin;\n                            }\n                            offsetsIndex = 1;\n                        }\n                        else {\n                            // Reserve space for labels/title\n                            if (axis.opposite) {\n                                scrollbarsOffsets[0] += offset;\n                            }\n                            var xPosition = void 0;\n                            if (!scrollbar.options.opposite) {\n                                xPosition = axis.opposite ? 0 : axisMargin;\n                            }\n                            else {\n                                xPosition = axis.left +\n                                    axis.width +\n                                    2 +\n                                    scrollbarsOffsets[0] -\n                                    (axis.opposite ? 0 : axisMargin);\n                            }\n                            scrollbar.position(xPosition, axis.top, axis.width, axis.height);\n                            // Next scrollbar should reserve space for margin (if set)\n                            if (axis.opposite) {\n                                scrollbarsOffsets[0] += axisMargin;\n                            }\n                            offsetsIndex = 0;\n                        }\n                        scrollbarsOffsets[offsetsIndex] += scrollbar.size +\n                            scrollbar.options.margin;\n                        if (isNaN(scrollMin) ||\n                            isNaN(scrollMax) ||\n                            !defined(axis.min) ||\n                            !defined(axis.max) ||\n                            axis.min === axis.max // #10733\n                        ) {\n                            // default action: when extremes are the same or there is\n                            // not extremes on the axis, but scrollbar exists, make it\n                            // full size\n                            scrollbar.setRange(0, 1);\n                        }\n                        else {\n                            from = ((axis.min - scrollMin) /\n                                (scrollMax - scrollMin));\n                            to = ((axis.max - scrollMin) /\n                                (scrollMax - scrollMin));\n                            if ((axis.horiz && !axis.reversed) ||\n                                (!axis.horiz && axis.reversed)) {\n                                scrollbar.setRange(from, to);\n                            }\n                            else {\n                                // inverse vertical axis\n                                scrollbar.setRange(1 - to, 1 - from);\n                            }\n                        }\n                    }\n                });\n                // Make space for a scrollbar:\n                addEvent(AxisClass, 'afterGetOffset', function () {\n                    var axis = this,\n                        opposite = axis.scrollbar && !axis.scrollbar.options.opposite,\n                        index = axis.horiz ? 2 : opposite ? 3 : 1,\n                        scrollbar = axis.scrollbar;\n                    if (scrollbar) {\n                        // reset scrollbars offsets\n                        axis.chart.scrollbarsOffsets = [0, 0];\n                        axis.chart.axisOffset[index] +=\n                            scrollbar.size + scrollbar.options.margin;\n                    }\n                });\n                return AxisClass;\n            };\n            ScrollbarAxis.composed = [];\n            return ScrollbarAxis;\n        }());\n\n        return ScrollbarAxis;\n    });\n    _registerModule(_modules, 'Core/ScrollbarDefaults.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var isTouchDevice = H.isTouchDevice;\n        /* *\n         *\n         *  Constant\n         *\n         * */\n        /**\n         *\n         * The scrollbar is a means of panning over the X axis of a stock chart.\n         * Scrollbars can  also be applied to other types of axes.\n         *\n         * Another approach to scrollable charts is the [chart.scrollablePlotArea](\n         * https://api.highcharts.com/highcharts/chart.scrollablePlotArea) option that\n         * is especially suitable for simpler cartesian charts on mobile.\n         *\n         * In styled mode, all the presentational options for the\n         * scrollbar are replaced by the classes `.highcharts-scrollbar-thumb`,\n         * `.highcharts-scrollbar-arrow`, `.highcharts-scrollbar-button`,\n         * `.highcharts-scrollbar-rifles` and `.highcharts-scrollbar-track`.\n         *\n         * @sample stock/yaxis/inverted-bar-scrollbar/\n         *         A scrollbar on a simple bar chart\n         *\n         * @product highstock gantt\n         * @optionparent scrollbar\n         *\n         * @private\n         */\n        var ScrollbarDefaults = {\n                /**\n                 * The height of the scrollbar. The height also applies to the width\n                 * of the scroll arrows so that they are always squares. Defaults to\n                 * 20 for touch devices and 14 for mouse devices.\n                 *\n                 * @sample stock/scrollbar/height/\n                 *         A 30px scrollbar\n                 *\n                 * @type    {number}\n                 * @default 20/14\n                 */\n                height: isTouchDevice ? 20 : 14,\n                /**\n                 * The border rounding radius of the bar.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 */\n                barBorderRadius: 0,\n                /**\n                 * The corner radius of the scrollbar buttons.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 */\n                buttonBorderRadius: 0,\n                /**\n                 * Enable or disable the scrollbar.\n                 *\n                 * @sample stock/scrollbar/enabled/\n                 *         Disable the scrollbar,\n            only use navigator\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @apioption scrollbar.enabled\n                 */\n                /**\n                 * Whether to redraw the main chart as the scrollbar or the navigator\n                 * zoomed window is moved. Defaults to `true` for modern browsers and\n                 * `false` for legacy IE browsers as well as mobile devices.\n                 *\n                 * @sample stock/scrollbar/liveredraw\n                 *         Setting live redraw to false\n                 *\n                 * @type  {boolean}\n                 * @since 1.3\n                 */\n                liveRedraw: void 0,\n                /**\n                 * The margin between the scrollbar and its axis when the scrollbar is\n                 * applied directly to an axis.\n                 */\n                margin: 10,\n                /**\n                 * The minimum width of the scrollbar.\n                 *\n                 * @since 1.2.5\n                 */\n                minWidth: 6,\n                /** @ignore-option */\n                opposite: true,\n                /**\n                 * Whether to show or hide the scrollbar when the scrolled content is\n                 * zoomed out to it full extent.\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @apioption scrollbar.showFull\n                 */\n                step: 0.2,\n                /**\n                 * The z index of the scrollbar group.\n                 */\n                zIndex: 3,\n                /**\n                 * The background color of the scrollbar itself.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                barBackgroundColor: \"#cccccc\" /* neutralColor20 */,\n                /**\n                 * The width of the bar's border.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 */\n                barBorderWidth: 1,\n                /**\n                 * The color of the scrollbar's border.\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                barBorderColor: \"#cccccc\" /* neutralColor20 */,\n                /**\n                 * The color of the small arrow inside the scrollbar buttons.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                buttonArrowColor: \"#333333\" /* neutralColor80 */,\n                /**\n                 * The color of scrollbar buttons.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                buttonBackgroundColor: \"#e6e6e6\" /* neutralColor10 */,\n                /**\n                 * The color of the border of the scrollbar buttons.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                buttonBorderColor: \"#cccccc\" /* neutralColor20 */,\n                /**\n                 * The border width of the scrollbar buttons.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 */\n                buttonBorderWidth: 1,\n                /**\n                 * The color of the small rifles in the middle of the scrollbar.\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                rifleColor: \"#333333\" /* neutralColor80 */,\n                /**\n                 * The color of the track background.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                trackBackgroundColor: \"#f2f2f2\" /* neutralColor5 */,\n                /**\n                 * The color of the border of the scrollbar track.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                trackBorderColor: \"#f2f2f2\" /* neutralColor5 */,\n                /**\n                 * The corner radius of the border of the scrollbar track.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @apioption scrollbar.trackBorderRadius\n                 */\n                /**\n                 * The width of the border of the scrollbar track.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 */\n                trackBorderWidth: 1\n            };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ScrollbarDefaults;\n    });\n    _registerModule(_modules, 'Core/Scrollbar.js', [_modules['Core/DefaultOptions.js'], _modules['Core/Globals.js'], _modules['Core/Axis/ScrollbarAxis.js'], _modules['Core/ScrollbarDefaults.js'], _modules['Core/Utilities.js']], function (D, H, ScrollbarAxis, ScrollbarDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var defaultOptions = D.defaultOptions;\n        var addEvent = U.addEvent,\n            correctFloat = U.correctFloat,\n            defined = U.defined,\n            destroyObjectProperties = U.destroyObjectProperties,\n            fireEvent = U.fireEvent,\n            merge = U.merge,\n            pick = U.pick,\n            removeEvent = U.removeEvent;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * A reusable scrollbar, internally used in Highcharts Stock's\n         * navigator and optionally on individual axes.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Scrollbar\n         * @param {Highcharts.SVGRenderer} renderer\n         * @param {Highcharts.ScrollbarOptions} options\n         * @param {Highcharts.Chart} chart\n         */\n        var Scrollbar = /** @class */ (function () {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                function Scrollbar(renderer, options, chart) {\n                    /* *\n                     *\n                     *  Properties\n                     *\n                     * */\n                    this._events = [];\n                this.chart = void 0;\n                this.chartX = 0;\n                this.chartY = 0;\n                this.from = 0;\n                this.group = void 0;\n                this.options = void 0;\n                this.renderer = void 0;\n                this.scrollbar = void 0;\n                this.scrollbarButtons = [];\n                this.scrollbarGroup = void 0;\n                this.scrollbarLeft = 0;\n                this.scrollbarRifles = void 0;\n                this.scrollbarStrokeWidth = 1;\n                this.scrollbarTop = 0;\n                this.size = 0;\n                this.to = 0;\n                this.track = void 0;\n                this.trackBorderWidth = 1;\n                this.userOptions = void 0;\n                this.x = 0;\n                this.y = 0;\n                this.init(renderer, options, chart);\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            Scrollbar.compose = function (AxisClass) {\n                ScrollbarAxis.compose(AxisClass, Scrollbar);\n            };\n            /**\n             * When we have vertical scrollbar, rifles and arrow in buttons should be\n             * rotated. The same method is used in Navigator's handles, to rotate them.\n             *\n             * @function Highcharts.swapXY\n             *\n             * @param {Highcharts.SVGPathArray} path\n             * Path to be rotated.\n             *\n             * @param {boolean} [vertical]\n             * If vertical scrollbar, swap x-y values.\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Rotated path.\n             *\n             * @requires modules/stock\n             */\n            Scrollbar.swapXY = function (path, vertical) {\n                if (vertical) {\n                    path.forEach(function (seg) {\n                        var len = seg.length;\n                        var temp;\n                        for (var i = 0; i < len; i += 2) {\n                            temp = seg[i + 1];\n                            if (typeof temp === 'number') {\n                                seg[i + 1] = seg[i + 2];\n                                seg[i + 2] = temp;\n                            }\n                        }\n                    });\n                }\n                return path;\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Set up the mouse and touch events for the Scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#addEvents\n             */\n            Scrollbar.prototype.addEvents = function () {\n                var buttonsOrder = this.options.inverted ? [1, 0] : [0, 1],\n                    buttons = this.scrollbarButtons,\n                    bar = this.scrollbarGroup.element,\n                    track = this.track.element,\n                    mouseDownHandler = this.mouseDownHandler.bind(this),\n                    mouseMoveHandler = this.mouseMoveHandler.bind(this),\n                    mouseUpHandler = this.mouseUpHandler.bind(this);\n                // Mouse events\n                var _events = [\n                        [\n                            buttons[buttonsOrder[0]].element,\n                            'click',\n                            this.buttonToMinClick.bind(this)\n                        ],\n                        [\n                            buttons[buttonsOrder[1]].element,\n                            'click',\n                            this.buttonToMaxClick.bind(this)\n                        ],\n                        [track, 'click',\n                    this.trackClick.bind(this)],\n                        [bar, 'mousedown',\n                    mouseDownHandler],\n                        [bar.ownerDocument, 'mousemove',\n                    mouseMoveHandler],\n                        [bar.ownerDocument, 'mouseup',\n                    mouseUpHandler]\n                    ];\n                // Touch events\n                if (H.hasTouch) {\n                    _events.push([bar, 'touchstart', mouseDownHandler], [bar.ownerDocument, 'touchmove', mouseMoveHandler], [bar.ownerDocument, 'touchend', mouseUpHandler]);\n                }\n                // Add them all\n                _events.forEach(function (args) {\n                    addEvent.apply(null, args);\n                });\n                this._events = _events;\n            };\n            Scrollbar.prototype.buttonToMaxClick = function (e) {\n                var scroller = this;\n                var range = ((scroller.to - scroller.from) *\n                        pick(scroller.options.step, 0.2));\n                scroller.updatePosition(scroller.from + range, scroller.to + range);\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            };\n            Scrollbar.prototype.buttonToMinClick = function (e) {\n                var scroller = this;\n                var range = correctFloat(scroller.to - scroller.from) *\n                        pick(scroller.options.step, 0.2);\n                scroller.updatePosition(correctFloat(scroller.from - range), correctFloat(scroller.to - range));\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            };\n            /**\n             * Get normalized (0-1) cursor position over the scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#cursorToScrollbarPosition\n             *\n             * @param  {*} normalizedEvent\n             *         normalized event, with chartX and chartY values\n             *\n             * @return {Highcharts.Dictionary<number>}\n             *         Local position {chartX, chartY}\n             */\n            Scrollbar.prototype.cursorToScrollbarPosition = function (normalizedEvent) {\n                var scroller = this,\n                    options = scroller.options,\n                    minWidthDifference = options.minWidth > scroller.calculatedWidth ?\n                        options.minWidth :\n                        0; // minWidth distorts translation\n                    return {\n                        chartX: (normalizedEvent.chartX - scroller.x -\n                            scroller.xOffset) /\n                            (scroller.barWidth - minWidthDifference),\n                        chartY: (normalizedEvent.chartY - scroller.y -\n                            scroller.yOffset) /\n                            (scroller.barWidth - minWidthDifference)\n                    };\n            };\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#destroy\n             */\n            Scrollbar.prototype.destroy = function () {\n                var scroller = this,\n                    navigator = scroller.chart.scroller;\n                // Disconnect events added in addEvents\n                scroller.removeEvents();\n                // Destroy properties\n                [\n                    'track',\n                    'scrollbarRifles',\n                    'scrollbar',\n                    'scrollbarGroup',\n                    'group'\n                ].forEach(function (prop) {\n                    if (scroller[prop] && scroller[prop].destroy) {\n                        scroller[prop] = scroller[prop].destroy();\n                    }\n                });\n                // #6421, chart may have more scrollbars\n                if (navigator && scroller === navigator.scrollbar) {\n                    navigator.scrollbar = null;\n                    // Destroy elements in collection\n                    destroyObjectProperties(navigator.scrollbarButtons);\n                }\n            };\n            /**\n             * Draw the scrollbar buttons with arrows\n             *\n             * @private\n             * @function Highcharts.Scrollbar#drawScrollbarButton\n             * @param {number} index\n             *        0 is left, 1 is right\n             */\n            Scrollbar.prototype.drawScrollbarButton = function (index) {\n                var scroller = this,\n                    renderer = scroller.renderer,\n                    scrollbarButtons = scroller.scrollbarButtons,\n                    options = scroller.options,\n                    size = scroller.size,\n                    group = renderer.g().add(scroller.group);\n                var tempElem;\n                scrollbarButtons.push(group);\n                // Create a rectangle for the scrollbar button\n                tempElem = renderer.rect()\n                    .addClass('highcharts-scrollbar-button')\n                    .add(group);\n                // Presentational attributes\n                if (!scroller.chart.styledMode) {\n                    tempElem.attr({\n                        stroke: options.buttonBorderColor,\n                        'stroke-width': options.buttonBorderWidth,\n                        fill: options.buttonBackgroundColor\n                    });\n                }\n                // Place the rectangle based on the rendered stroke width\n                tempElem.attr(tempElem.crisp({\n                    x: -0.5,\n                    y: -0.5,\n                    width: size + 1,\n                    height: size + 1,\n                    r: options.buttonBorderRadius\n                }, tempElem.strokeWidth()));\n                // Button arrow\n                tempElem = renderer\n                    .path(Scrollbar.swapXY([[\n                        'M',\n                        size / 2 + (index ? -1 : 1),\n                        size / 2 - 3\n                    ], [\n                        'L',\n                        size / 2 + (index ? -1 : 1),\n                        size / 2 + 3\n                    ], [\n                        'L',\n                        size / 2 + (index ? 2 : -2),\n                        size / 2\n                    ]], options.vertical))\n                    .addClass('highcharts-scrollbar-arrow')\n                    .add(scrollbarButtons[index]);\n                if (!scroller.chart.styledMode) {\n                    tempElem.attr({\n                        fill: options.buttonArrowColor\n                    });\n                }\n            };\n            /**\n             * @private\n             * @function Highcharts.Scrollbar#init\n             * @param {Highcharts.SVGRenderer} renderer\n             * @param {Highcharts.ScrollbarOptions} options\n             * @param {Highcharts.Chart} chart\n             */\n            Scrollbar.prototype.init = function (renderer, options, chart) {\n                var scroller = this;\n                scroller.scrollbarButtons = [];\n                scroller.renderer = renderer;\n                scroller.userOptions = options;\n                scroller.options = merge(ScrollbarDefaults, defaultOptions.scrollbar, options);\n                scroller.chart = chart;\n                // backward compatibility\n                scroller.size = pick(scroller.options.size, scroller.options.height);\n                // Init\n                if (options.enabled) {\n                    scroller.render();\n                    scroller.addEvents();\n                }\n            };\n            Scrollbar.prototype.mouseDownHandler = function (e) {\n                var scroller = this,\n                    normalizedEvent = scroller.chart.pointer.normalize(e),\n                    mousePosition = scroller.cursorToScrollbarPosition(normalizedEvent);\n                scroller.chartX = mousePosition.chartX;\n                scroller.chartY = mousePosition.chartY;\n                scroller.initPositions = [scroller.from, scroller.to];\n                scroller.grabbedCenter = true;\n            };\n            /**\n             * Event handler for the mouse move event.\n             * @private\n             */\n            Scrollbar.prototype.mouseMoveHandler = function (e) {\n                var scroller = this,\n                    normalizedEvent = scroller.chart.pointer.normalize(e),\n                    options = scroller.options,\n                    direction = options.vertical ?\n                        'chartY' : 'chartX',\n                    initPositions = scroller.initPositions || [];\n                var scrollPosition,\n                    chartPosition,\n                    change;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when\n                // holding the finger down in the center of the scrollbar. This\n                // should be ignored.\n                if (scroller.grabbedCenter &&\n                    // #4696, scrollbar failed on Android\n                    (!e.touches || e.touches[0][direction] !== 0)) {\n                    chartPosition = scroller.cursorToScrollbarPosition(normalizedEvent)[direction];\n                    scrollPosition = scroller[direction];\n                    change = chartPosition - scrollPosition;\n                    scroller.hasDragged = true;\n                    scroller.updatePosition(initPositions[0] + change, initPositions[1] + change);\n                    if (scroller.hasDragged) {\n                        fireEvent(scroller, 'changed', {\n                            from: scroller.from,\n                            to: scroller.to,\n                            trigger: 'scrollbar',\n                            DOMType: e.type,\n                            DOMEvent: e\n                        });\n                    }\n                }\n            };\n            /**\n             * Event handler for the mouse up event.\n             * @private\n             */\n            Scrollbar.prototype.mouseUpHandler = function (e) {\n                var scroller = this;\n                if (scroller.hasDragged) {\n                    fireEvent(scroller, 'changed', {\n                        from: scroller.from,\n                        to: scroller.to,\n                        trigger: 'scrollbar',\n                        DOMType: e.type,\n                        DOMEvent: e\n                    });\n                }\n                scroller.grabbedCenter =\n                    scroller.hasDragged =\n                        scroller.chartX =\n                            scroller.chartY = null;\n            };\n            /**\n             * Position the scrollbar, method called from a parent with defined\n             * dimensions.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#position\n             * @param {number} x\n             *        x-position on the chart\n             * @param {number} y\n             *        y-position on the chart\n             * @param {number} width\n             *        width of the scrollbar\n             * @param {number} height\n             *        height of the scorllbar\n             */\n            Scrollbar.prototype.position = function (x, y, width, height) {\n                var scroller = this,\n                    options = scroller.options,\n                    vertical = options.vertical,\n                    method = scroller.rendered ? 'animate' : 'attr';\n                var xOffset = height,\n                    yOffset = 0;\n                scroller.x = x;\n                scroller.y = y + this.trackBorderWidth;\n                scroller.width = width; // width with buttons\n                scroller.height = height;\n                scroller.xOffset = xOffset;\n                scroller.yOffset = yOffset;\n                // If Scrollbar is a vertical type, swap options:\n                if (vertical) {\n                    scroller.width = scroller.yOffset = width = yOffset = scroller.size;\n                    scroller.xOffset = xOffset = 0;\n                    scroller.barWidth = height - width * 2; // width without buttons\n                    scroller.x = x = x + scroller.options.margin;\n                }\n                else {\n                    scroller.height = scroller.xOffset = height = xOffset =\n                        scroller.size;\n                    scroller.barWidth = width - height * 2; // width without buttons\n                    scroller.y = scroller.y + scroller.options.margin;\n                }\n                // Set general position for a group:\n                scroller.group[method]({\n                    translateX: x,\n                    translateY: scroller.y\n                });\n                // Resize background/track:\n                scroller.track[method]({\n                    width: width,\n                    height: height\n                });\n                // Move right/bottom button ot it's place:\n                scroller.scrollbarButtons[1][method]({\n                    translateX: vertical ? 0 : width - xOffset,\n                    translateY: vertical ? height - yOffset : 0\n                });\n            };\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#removeEvents\n             */\n            Scrollbar.prototype.removeEvents = function () {\n                this._events.forEach(function (args) {\n                    removeEvent.apply(null, args);\n                });\n                this._events.length = 0;\n            };\n            /**\n             * Render scrollbar with all required items.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#render\n             */\n            Scrollbar.prototype.render = function () {\n                var scroller = this,\n                    renderer = scroller.renderer,\n                    options = scroller.options,\n                    size = scroller.size,\n                    styledMode = scroller.chart.styledMode,\n                    group = renderer.g('scrollbar').attr({\n                        zIndex: options.zIndex,\n                        translateY: -99999\n                    }).add();\n                // Draw the scrollbar group\n                scroller.group = group;\n                // Draw the scrollbar track:\n                scroller.track = renderer.rect()\n                    .addClass('highcharts-scrollbar-track')\n                    .attr({\n                    x: 0,\n                    r: options.trackBorderRadius || 0,\n                    height: size,\n                    width: size\n                }).add(group);\n                if (!styledMode) {\n                    scroller.track.attr({\n                        fill: options.trackBackgroundColor,\n                        stroke: options.trackBorderColor,\n                        'stroke-width': options.trackBorderWidth\n                    });\n                }\n                scroller.trackBorderWidth = scroller.track.strokeWidth();\n                scroller.track.attr({\n                    y: -this.trackBorderWidth % 2 / 2\n                });\n                // Draw the scrollbar itself\n                scroller.scrollbarGroup = renderer.g().add(group);\n                scroller.scrollbar = renderer.rect()\n                    .addClass('highcharts-scrollbar-thumb')\n                    .attr({\n                    height: size,\n                    width: size,\n                    r: options.barBorderRadius || 0\n                }).add(scroller.scrollbarGroup);\n                scroller.scrollbarRifles = renderer\n                    .path(Scrollbar.swapXY([\n                    ['M', -3, size / 4],\n                    ['L', -3, 2 * size / 3],\n                    ['M', 0, size / 4],\n                    ['L', 0, 2 * size / 3],\n                    ['M', 3, size / 4],\n                    ['L', 3, 2 * size / 3]\n                ], options.vertical))\n                    .addClass('highcharts-scrollbar-rifles')\n                    .add(scroller.scrollbarGroup);\n                if (!styledMode) {\n                    scroller.scrollbar.attr({\n                        fill: options.barBackgroundColor,\n                        stroke: options.barBorderColor,\n                        'stroke-width': options.barBorderWidth\n                    });\n                    scroller.scrollbarRifles.attr({\n                        stroke: options.rifleColor,\n                        'stroke-width': 1\n                    });\n                }\n                scroller.scrollbarStrokeWidth = scroller.scrollbar.strokeWidth();\n                scroller.scrollbarGroup.translate(-scroller.scrollbarStrokeWidth % 2 / 2, -scroller.scrollbarStrokeWidth % 2 / 2);\n                // Draw the buttons:\n                scroller.drawScrollbarButton(0);\n                scroller.drawScrollbarButton(1);\n            };\n            /**\n             * Set scrollbar size, with a given scale.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#setRange\n             * @param {number} from\n             *        scale (0-1) where bar should start\n             * @param {number} to\n             *        scale (0-1) where bar should end\n             */\n            Scrollbar.prototype.setRange = function (from, to) {\n                var scroller = this,\n                    options = scroller.options,\n                    vertical = options.vertical,\n                    minWidth = options.minWidth,\n                    fullWidth = scroller.barWidth,\n                    method = (this.rendered &&\n                        !this.hasDragged &&\n                        !(this.chart.navigator && this.chart.navigator.hasDragged)) ? 'animate' : 'attr';\n                if (!defined(fullWidth)) {\n                    return;\n                }\n                var toPX = fullWidth * Math.min(to, 1);\n                var fromPX,\n                    newSize;\n                from = Math.max(from, 0);\n                fromPX = Math.ceil(fullWidth * from);\n                scroller.calculatedWidth = newSize = correctFloat(toPX - fromPX);\n                // We need to recalculate position, if minWidth is used\n                if (newSize < minWidth) {\n                    fromPX = (fullWidth - minWidth + newSize) * from;\n                    newSize = minWidth;\n                }\n                var newPos = Math.floor(fromPX + scroller.xOffset + scroller.yOffset);\n                var newRiflesPos = newSize / 2 - 0.5; // -0.5 -> rifle line width / 2\n                    // Store current position:\n                    scroller.from = from;\n                scroller.to = to;\n                if (!vertical) {\n                    scroller.scrollbarGroup[method]({\n                        translateX: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        width: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateX: newRiflesPos\n                    });\n                    scroller.scrollbarLeft = newPos;\n                    scroller.scrollbarTop = 0;\n                }\n                else {\n                    scroller.scrollbarGroup[method]({\n                        translateY: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        height: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateY: newRiflesPos\n                    });\n                    scroller.scrollbarTop = newPos;\n                    scroller.scrollbarLeft = 0;\n                }\n                if (newSize <= 12) {\n                    scroller.scrollbarRifles.hide();\n                }\n                else {\n                    scroller.scrollbarRifles.show(true);\n                }\n                // Show or hide the scrollbar based on the showFull setting\n                if (options.showFull === false) {\n                    if (from <= 0 && to >= 1) {\n                        scroller.group.hide();\n                    }\n                    else {\n                        scroller.group.show();\n                    }\n                }\n                scroller.rendered = true;\n            };\n            /**\n             * Checks if the extremes should be updated in response to a scrollbar\n             * change event.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#shouldUpdateExtremes\n             */\n            Scrollbar.prototype.shouldUpdateExtremes = function (eventType) {\n                return (pick(this.options.liveRedraw, H.svg && !H.isTouchDevice && !this.chart.isBoosting) ||\n                    // Mouseup always should change extremes\n                    eventType === 'mouseup' ||\n                    eventType === 'touchend' ||\n                    // Internal events\n                    !defined(eventType));\n            };\n            Scrollbar.prototype.trackClick = function (e) {\n                var scroller = this;\n                var normalizedEvent = scroller.chart.pointer.normalize(e),\n                    range = scroller.to - scroller.from,\n                    top = scroller.y + scroller.scrollbarTop,\n                    left = scroller.x + scroller.scrollbarLeft;\n                if ((scroller.options.vertical && normalizedEvent.chartY > top) ||\n                    (!scroller.options.vertical && normalizedEvent.chartX > left)) {\n                    // On the top or on the left side of the track:\n                    scroller.updatePosition(scroller.from + range, scroller.to + range);\n                }\n                else {\n                    // On the bottom or the right side of the track:\n                    scroller.updatePosition(scroller.from - range, scroller.to - range);\n                }\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            };\n            /**\n             * Update the scrollbar with new options\n             *\n             * @private\n             * @function Highcharts.Scrollbar#update\n             * @param  {Highcharts.ScrollbarOptions} options\n             */\n            Scrollbar.prototype.update = function (options) {\n                this.destroy();\n                this.init(this.chart.renderer, merge(true, this.options, options), this.chart);\n            };\n            /**\n             * Update position option in the Scrollbar, with normalized 0-1 scale\n             *\n             * @private\n             * @function Highcharts.Scrollbar#updatePosition\n             * @param  {number} from\n             * @param  {number} to\n             */\n            Scrollbar.prototype.updatePosition = function (from, to) {\n                if (to > 1) {\n                    from = correctFloat(1 - correctFloat(to - from));\n                    to = 1;\n                }\n                if (from < 0) {\n                    to = correctFloat(to - from);\n                    from = 0;\n                }\n                this.from = from;\n                this.to = to;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            Scrollbar.defaultOptions = ScrollbarDefaults;\n            return Scrollbar;\n        }());\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        defaultOptions.scrollbar = merge(true, Scrollbar.defaultOptions, defaultOptions.scrollbar);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Scrollbar;\n    });\n    _registerModule(_modules, 'Core/Axis/NavigatorAxis.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var isTouchDevice = H.isTouchDevice;\n        var addEvent = U.addEvent,\n            correctFloat = U.correctFloat,\n            defined = U.defined,\n            isNumber = U.isNumber,\n            pick = U.pick;\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         * @class\n         */\n        var NavigatorAxisAdditions = /** @class */ (function () {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                function NavigatorAxisAdditions(axis) {\n                    this.axis = axis;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            NavigatorAxisAdditions.prototype.destroy = function () {\n                this.axis = void 0;\n            };\n            /**\n             * Add logic to normalize the zoomed range in order to preserve the pressed\n             * state of range selector buttons\n             *\n             * @private\n             * @function Highcharts.Axis#toFixedRange\n             */\n            NavigatorAxisAdditions.prototype.toFixedRange = function (pxMin, pxMax, fixedMin, fixedMax) {\n                var navigator = this;\n                var axis = navigator.axis;\n                var chart = axis.chart;\n                var fixedRange = chart && chart.fixedRange,\n                    halfPointRange = (axis.pointRange || 0) / 2,\n                    newMin = pick(fixedMin,\n                    axis.translate(pxMin,\n                    true, !axis.horiz)),\n                    newMax = pick(fixedMax,\n                    axis.translate(pxMax,\n                    true, !axis.horiz)),\n                    changeRatio = fixedRange && (newMax - newMin) / fixedRange;\n                // Add/remove half point range to/from the extremes (#1172)\n                if (!defined(fixedMin)) {\n                    newMin = correctFloat(newMin + halfPointRange);\n                }\n                if (!defined(fixedMax)) {\n                    newMax = correctFloat(newMax - halfPointRange);\n                }\n                // If the difference between the fixed range and the actual requested\n                // range is too great, the user is dragging across an ordinal gap, and\n                // we need to release the range selector button.\n                if (changeRatio > 0.7 && changeRatio < 1.3) {\n                    if (fixedMax) {\n                        newMin = newMax - fixedRange;\n                    }\n                    else {\n                        newMax = newMin + fixedRange;\n                    }\n                }\n                if (!isNumber(newMin) || !isNumber(newMax)) { // #1195, #7411\n                    newMin = newMax = void 0;\n                }\n                return {\n                    min: newMin,\n                    max: newMax\n                };\n            };\n            return NavigatorAxisAdditions;\n        }());\n        /**\n         * @private\n         * @class\n         */\n        var NavigatorAxis = /** @class */ (function () {\n                function NavigatorAxis() {\n                }\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                NavigatorAxis.compose = function (AxisClass) {\n                    AxisClass.keepProps.push('navigatorAxis');\n                /* eslint-disable no-invalid-this */\n                addEvent(AxisClass, 'init', function () {\n                    var axis = this;\n                    if (!axis.navigatorAxis) {\n                        axis.navigatorAxis = new NavigatorAxisAdditions(axis);\n                    }\n                });\n                // For Stock charts, override selection zooming with some special\n                // features because X axis zooming is already allowed by the Navigator\n                // and Range selector.\n                addEvent(AxisClass, 'zoom', function (e) {\n                    var axis = this;\n                    var chart = axis.chart;\n                    var chartOptions = chart.options;\n                    var navigator = chartOptions.navigator;\n                    var navigatorAxis = axis.navigatorAxis;\n                    var pinchType = chartOptions.chart.pinchType;\n                    var rangeSelector = chartOptions.rangeSelector;\n                    var zoomType = chartOptions.chart.zoomType;\n                    var previousZoom;\n                    if (axis.isXAxis && ((navigator && navigator.enabled) ||\n                        (rangeSelector && rangeSelector.enabled))) {\n                        // For y only zooming, ignore the X axis completely\n                        if (zoomType === 'y') {\n                            e.zoomed = false;\n                            // For xy zooming, record the state of the zoom before zoom\n                            // selection, then when the reset button is pressed, revert to\n                            // this state. This should apply only if the chart is\n                            // initialized with a range (#6612), otherwise zoom all the way\n                            // out.\n                        }\n                        else if (((!isTouchDevice && zoomType === 'xy') ||\n                            (isTouchDevice && pinchType === 'xy')) &&\n                            axis.options.range) {\n                            previousZoom = navigatorAxis.previousZoom;\n                            if (defined(e.newMin)) {\n                                navigatorAxis.previousZoom = [axis.min, axis.max];\n                            }\n                            else if (previousZoom) {\n                                e.newMin = previousZoom[0];\n                                e.newMax = previousZoom[1];\n                                navigatorAxis.previousZoom = void 0;\n                            }\n                        }\n                    }\n                    if (typeof e.zoomed !== 'undefined') {\n                        e.preventDefault();\n                    }\n                });\n                /* eslint-enable no-invalid-this */\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * @private\n             */\n            NavigatorAxis.AdditionsClass = NavigatorAxisAdditions;\n            return NavigatorAxis;\n        }());\n\n        return NavigatorAxis;\n    });\n    _registerModule(_modules, 'Core/Navigator.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Chart/Chart.js'], _modules['Core/Color/Color.js'], _modules['Core/Globals.js'], _modules['Core/Axis/NavigatorAxis.js'], _modules['Core/DefaultOptions.js'], _modules['Core/Renderer/RendererRegistry.js'], _modules['Core/Scrollbar.js'], _modules['Core/Series/Series.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (Axis, Chart, Color, H, NavigatorAxis, D, RendererRegistry, Scrollbar, Series, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var color = Color.parse;\n        var hasTouch = H.hasTouch,\n            isTouchDevice = H.isTouchDevice;\n        var defaultOptions = D.defaultOptions;\n        var seriesTypes = SeriesRegistry.seriesTypes;\n        var addEvent = U.addEvent,\n            clamp = U.clamp,\n            correctFloat = U.correctFloat,\n            defined = U.defined,\n            destroyObjectProperties = U.destroyObjectProperties,\n            erase = U.erase,\n            extend = U.extend,\n            find = U.find,\n            isArray = U.isArray,\n            isNumber = U.isNumber,\n            merge = U.merge,\n            pick = U.pick,\n            removeEvent = U.removeEvent,\n            splat = U.splat;\n        var defaultSeriesType, \n            // Finding the min or max of a set of variables where we don't know if they\n            // are defined, is a pattern that is repeated several places in Highcharts.\n            // Consider making this a global utility method.\n            numExt = function (extreme) {\n                var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            var numbers = [].filter.call(args,\n                isNumber);\n            if (numbers.length) {\n                return Math[extreme].apply(0, numbers);\n            }\n        };\n        defaultSeriesType = typeof seriesTypes.areaspline === 'undefined' ?\n            'line' :\n            'areaspline';\n        extend(defaultOptions, {\n            /**\n             * Maximum range which can be set using the navigator's handles.\n             * Opposite of [xAxis.minRange](#xAxis.minRange).\n             *\n             * @sample {highstock} stock/navigator/maxrange/\n             *         Defined max and min range\n             *\n             * @type      {number}\n             * @since     6.0.0\n             * @product   highstock gantt\n             * @apioption xAxis.maxRange\n             */\n            /**\n             * The navigator is a small series below the main series, displaying\n             * a view of the entire data set. It provides tools to zoom in and\n             * out on parts of the data as well as panning across the dataset.\n             *\n             * @product      highstock gantt\n             * @optionparent navigator\n             */\n            navigator: {\n                /**\n                 * Whether the navigator and scrollbar should adapt to updated data\n                 * in the base X axis. When loading data async, as in the demo below,\n                 * this should be `false`. Otherwise new data will trigger navigator\n                 * redraw, which will cause unwanted looping. In the demo below, the\n                 * data in the navigator is set only once. On navigating, only the main\n                 * chart content is updated.\n                 *\n                 * @sample {highstock} stock/demo/lazy-loading/\n                 *         Set to false with async data loading\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @apioption navigator.adaptToUpdatedData\n                 */\n                /**\n                 * An integer identifying the index to use for the base series, or a\n                 * string representing the id of the series.\n                 *\n                 * **Note**: As of Highcharts 5.0, this is now a deprecated option.\n                 * Prefer [series.showInNavigator](#plotOptions.series.showInNavigator).\n                 *\n                 * @see [series.showInNavigator](#plotOptions.series.showInNavigator)\n                 *\n                 * @deprecated\n                 * @type      {number|string}\n                 * @default   0\n                 * @apioption navigator.baseSeries\n                 */\n                /**\n                 * Enable or disable the navigator.\n                 *\n                 * @sample {highstock} stock/navigator/enabled/\n                 *         Disable the navigator\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @apioption navigator.enabled\n                 */\n                /**\n                 * When the chart is inverted, whether to draw the navigator on the\n                 * opposite side.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     5.0.8\n                 * @apioption navigator.opposite\n                 */\n                /**\n                 * The height of the navigator.\n                 *\n                 * @sample {highstock} stock/navigator/height/\n                 *         A higher navigator\n                 */\n                height: 40,\n                /**\n                 * The distance from the nearest element, the X axis or X axis labels.\n                 *\n                 * @sample {highstock} stock/navigator/margin/\n                 *         A margin of 2 draws the navigator closer to the X axis labels\n                 */\n                margin: 25,\n                /**\n                 * Whether the mask should be inside the range marking the zoomed\n                 * range, or outside. In Highcharts Stock 1.x it was always `false`.\n                 *\n                 * @sample {highstock} stock/navigator/maskinside-false/\n                 *         False, mask outside\n                 *\n                 * @since   2.0\n                 */\n                maskInside: true,\n                /**\n                 * Options for the handles for dragging the zoomed area.\n                 *\n                 * @sample {highstock} stock/navigator/handles/\n                 *         Colored handles\n                 */\n                handles: {\n                    /**\n                     * Width for handles.\n                     *\n                     * @sample {highstock} stock/navigator/styled-handles/\n                     *         Styled handles\n                     *\n                     * @since   6.0.0\n                     */\n                    width: 7,\n                    /**\n                     * Height for handles.\n                     *\n                     * @sample {highstock} stock/navigator/styled-handles/\n                     *         Styled handles\n                     *\n                     * @since   6.0.0\n                     */\n                    height: 15,\n                    /**\n                     * Array to define shapes of handles. 0-index for left, 1-index for\n                     * right.\n                     *\n                     * Additionally, the URL to a graphic can be given on this form:\n                     * `url(graphic.png)`. Note that for the image to be applied to\n                     * exported charts, its URL needs to be accessible by the export\n                     * server.\n                     *\n                     * Custom callbacks for symbol path generation can also be added to\n                     * `Highcharts.SVGRenderer.prototype.symbols`. The callback is then\n                     * used by its method name, as shown in the demo.\n                     *\n                     * @sample {highstock} stock/navigator/styled-handles/\n                     *         Styled handles\n                     *\n                     * @type    {Array<string>}\n                     * @default [\"navigator-handle\", \"navigator-handle\"]\n                     * @since   6.0.0\n                     */\n                    symbols: ['navigator-handle', 'navigator-handle'],\n                    /**\n                     * Allows to enable/disable handles.\n                     *\n                     * @since   6.0.0\n                     */\n                    enabled: true,\n                    /**\n                     * The width for the handle border and the stripes inside.\n                     *\n                     * @sample {highstock} stock/navigator/styled-handles/\n                     *         Styled handles\n                     *\n                     * @since     6.0.0\n                     * @apioption navigator.handles.lineWidth\n                     */\n                    lineWidth: 1,\n                    /**\n                     * The fill for the handle.\n                     *\n                     * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     */\n                    backgroundColor: \"#f2f2f2\" /* neutralColor5 */,\n                    /**\n                     * The stroke for the handle border and the stripes inside.\n                     *\n                     * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     */\n                    borderColor: \"#999999\" /* neutralColor40 */\n                },\n                /**\n                 * The color of the mask covering the areas of the navigator series\n                 * that are currently not visible in the main series. The default\n                 * color is bluish with an opacity of 0.3 to see the series below.\n                 *\n                 * @see In styled mode, the mask is styled with the\n                 *      `.highcharts-navigator-mask` and\n                 *      `.highcharts-navigator-mask-inside` classes.\n                 *\n                 * @sample {highstock} stock/navigator/maskfill/\n                 *         Blue, semi transparent mask\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default rgba(102,133,194,0.3)\n                 */\n                maskFill: color(\"#6685c2\" /* highlightColor60 */).setOpacity(0.3).get(),\n                /**\n                 * The color of the line marking the currently zoomed area in the\n                 * navigator.\n                 *\n                 * @sample {highstock} stock/navigator/outline/\n                 *         2px blue outline\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default #cccccc\n                 */\n                outlineColor: \"#cccccc\" /* neutralColor20 */,\n                /**\n                 * The width of the line marking the currently zoomed area in the\n                 * navigator.\n                 *\n                 * @see In styled mode, the outline stroke width is set with the\n                 *      `.highcharts-navigator-outline` class.\n                 *\n                 * @sample {highstock} stock/navigator/outline/\n                 *         2px blue outline\n                 *\n                 * @type    {number}\n                 */\n                outlineWidth: 1,\n                /**\n                 * Options for the navigator series. Available options are the same\n                 * as any series, documented at [plotOptions](#plotOptions.series)\n                 * and [series](#series).\n                 *\n                 * Unless data is explicitly defined on navigator.series, the data\n                 * is borrowed from the first series in the chart.\n                 *\n                 * Default series options for the navigator series are:\n                 * ```js\n                 * series: {\n                 *     type: 'areaspline',\n                 *     fillOpacity: 0.05,\n                 *     dataGrouping: {\n                 *         smoothed: true\n                 *     },\n                 *     lineWidth: 1,\n                 *     marker: {\n                 *         enabled: false\n                 *     }\n                 * }\n                 * ```\n                 *\n                 * @see In styled mode, the navigator series is styled with the\n                 *      `.highcharts-navigator-series` class.\n                 *\n                 * @sample {highstock} stock/navigator/series-data/\n                 *         Using a separate data set for the navigator\n                 * @sample {highstock} stock/navigator/series/\n                 *         A green navigator series\n                 *\n                 * @type {*|Array<*>|Highcharts.SeriesOptionsType|Array<Highcharts.SeriesOptionsType>}\n                 */\n                series: {\n                    /**\n                     * The type of the navigator series.\n                     *\n                     * Heads up:\n                     * In column-type navigator, zooming is limited to at least one\n                     * point with its `pointRange`.\n                     *\n                     * @sample {highstock} stock/navigator/column/\n                     *         Column type navigator\n                     *\n                     * @type    {string}\n                     * @default {highstock} `areaspline` if defined, otherwise `line`\n                     * @default {gantt} gantt\n                     */\n                    type: defaultSeriesType,\n                    /**\n                     * The fill opacity of the navigator series.\n                     */\n                    fillOpacity: 0.05,\n                    /**\n                     * The pixel line width of the navigator series.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * @ignore-option\n                     */\n                    compare: null,\n                    /**\n                     * Unless data is explicitly defined, the data is borrowed from the\n                     * first series in the chart.\n                     *\n                     * @type      {Array<number|Array<number|string|null>|object|null>}\n                     * @product   highstock\n                     * @apioption navigator.series.data\n                     */\n                    /**\n                     * Data grouping options for the navigator series.\n                     *\n                     * @extends plotOptions.series.dataGrouping\n                     */\n                    dataGrouping: {\n                        approximation: 'average',\n                        enabled: true,\n                        groupPixelWidth: 2,\n                        // Replace smoothed property by anchors, #12455.\n                        firstAnchor: 'firstPoint',\n                        anchor: 'middle',\n                        lastAnchor: 'lastPoint',\n                        // Day and week differs from plotOptions.series.dataGrouping\n                        units: [\n                            ['millisecond', [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]],\n                            ['second', [1, 2, 5, 10, 15, 30]],\n                            ['minute', [1, 2, 5, 10, 15, 30]],\n                            ['hour', [1, 2, 3, 4, 6, 8, 12]],\n                            ['day', [1, 2, 3, 4]],\n                            ['week', [1, 2, 3]],\n                            ['month', [1, 3, 6]],\n                            ['year', null]\n                        ]\n                    },\n                    /**\n                     * Data label options for the navigator series. Data labels are\n                     * disabled by default on the navigator series.\n                     *\n                     * @extends plotOptions.series.dataLabels\n                     */\n                    dataLabels: {\n                        enabled: false,\n                        zIndex: 2 // #1839\n                    },\n                    id: 'highcharts-navigator-series',\n                    className: 'highcharts-navigator-series',\n                    /**\n                     * Sets the fill color of the navigator series.\n                     *\n                     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @apioption navigator.series.color\n                     */\n                    /**\n                     * Line color for the navigator series. Allows setting the color\n                     * while disallowing the default candlestick setting.\n                     *\n                     * @type {Highcharts.ColorString|null}\n                     */\n                    lineColor: null,\n                    marker: {\n                        enabled: false\n                    },\n                    /**\n                     * Since Highcharts Stock v8, default value is the same as default\n                     * `pointRange` defined for a specific type (e.g. `null` for\n                     * column type).\n                     *\n                     * In Highcharts Stock version < 8, defaults to 0.\n                     *\n                     * @extends plotOptions.series.pointRange\n                     * @type {number|null}\n                     * @apioption navigator.series.pointRange\n                     */\n                    /**\n                     * The threshold option. Setting it to 0 will make the default\n                     * navigator area series draw its area from the 0 value and up.\n                     *\n                     * @type {number|null}\n                     */\n                    threshold: null\n                },\n                /**\n                 * Options for the navigator X axis. Default series options for the\n                 * navigator xAxis are:\n                 * ```js\n                 * xAxis: {\n                 *     tickWidth: 0,\n                 *     lineWidth: 0,\n                 *     gridLineWidth: 1,\n                 *     tickPixelInterval: 200,\n                 *     labels: {\n                 *            align: 'left',\n                 *         style: {\n                 *             color: '#888'\n                 *         },\n                 *         x: 3,\n                 *         y: -4\n                 *     }\n                 * }\n                 * ```\n                 *\n                 * @extends   xAxis\n                 * @excluding linkedTo, maxZoom, minRange, opposite, range, scrollbar,\n                 *            showEmpty, maxRange\n                 */\n                xAxis: {\n                    /**\n                     * Additional range on the right side of the xAxis. Works similar to\n                     * xAxis.maxPadding, but value is set in milliseconds.\n                     * Can be set for both, main xAxis and navigator's xAxis.\n                     *\n                     * @since   6.0.0\n                     */\n                    overscroll: 0,\n                    className: 'highcharts-navigator-xaxis',\n                    tickLength: 0,\n                    lineWidth: 0,\n                    gridLineColor: \"#e6e6e6\" /* neutralColor10 */,\n                    gridLineWidth: 1,\n                    tickPixelInterval: 200,\n                    labels: {\n                        align: 'left',\n                        /**\n                         * @type {Highcharts.CSSObject}\n                         */\n                        style: {\n                            /** @ignore */\n                            color: \"#999999\" /* neutralColor40 */\n                        },\n                        x: 3,\n                        y: -4\n                    },\n                    crosshair: false\n                },\n                /**\n                 * Options for the navigator Y axis. Default series options for the\n                 * navigator yAxis are:\n                 * ```js\n                 * yAxis: {\n                 *     gridLineWidth: 0,\n                 *     startOnTick: false,\n                 *     endOnTick: false,\n                 *     minPadding: 0.1,\n                 *     maxPadding: 0.1,\n                 *     labels: {\n                 *         enabled: false\n                 *     },\n                 *     title: {\n                 *         text: null\n                 *     },\n                 *     tickWidth: 0\n                 * }\n                 * ```\n                 *\n                 * @extends   yAxis\n                 * @excluding height, linkedTo, maxZoom, minRange, ordinal, range,\n                 *            showEmpty, scrollbar, top, units, maxRange, minLength,\n                 *            maxLength, resize\n                 */\n                yAxis: {\n                    className: 'highcharts-navigator-yaxis',\n                    gridLineWidth: 0,\n                    startOnTick: false,\n                    endOnTick: false,\n                    minPadding: 0.1,\n                    maxPadding: 0.1,\n                    labels: {\n                        enabled: false\n                    },\n                    crosshair: false,\n                    title: {\n                        text: null\n                    },\n                    tickLength: 0,\n                    tickWidth: 0\n                }\n            }\n        });\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * Draw one of the handles on the side of the zoomed range in the navigator\n         *\n         * @private\n         * @function Highcharts.Renderer#symbols.navigator-handle\n         * @param {number} x\n         * @param {number} y\n         * @param {number} w\n         * @param {number} h\n         * @param {Highcharts.NavigatorHandlesOptions} options\n         * @return {Highcharts.SVGPathArray}\n         *         Path to be used in a handle\n         */\n        RendererRegistry.getRendererType().prototype.symbols['navigator-handle'] = function (_x, _y, _w, _h, options) {\n            var halfWidth = (options && options.width || 0) / 2,\n                markerPosition = Math.round(halfWidth / 3) + 0.5,\n                height = options && options.height || 0;\n            return [\n                ['M', -halfWidth - 1, 0.5],\n                ['L', halfWidth, 0.5],\n                ['L', halfWidth, height + 0.5],\n                ['L', -halfWidth - 1, height + 0.5],\n                ['L', -halfWidth - 1, 0.5],\n                ['M', -markerPosition, 4],\n                ['L', -markerPosition, height - 3],\n                ['M', markerPosition - 1, 4],\n                ['L', markerPosition - 1, height - 3]\n            ];\n        };\n        /**\n         * The Navigator class\n         *\n         * @private\n         * @class\n         * @name Highcharts.Navigator\n         *\n         * @param {Highcharts.Chart} chart\n         *        Chart object\n         */\n        var Navigator = /** @class */ (function () {\n                function Navigator(chart) {\n                    this.baseSeries = void 0;\n                this.chart = void 0;\n                this.handles = void 0;\n                this.height = void 0;\n                this.left = void 0;\n                this.navigatorEnabled = void 0;\n                this.navigatorGroup = void 0;\n                this.navigatorOptions = void 0;\n                this.navigatorSeries = void 0;\n                this.navigatorSize = void 0;\n                this.opposite = void 0;\n                this.outline = void 0;\n                this.outlineHeight = void 0;\n                this.range = void 0;\n                this.rendered = void 0;\n                this.shades = void 0;\n                this.size = void 0;\n                this.top = void 0;\n                this.xAxis = void 0;\n                this.yAxis = void 0;\n                this.zoomedMax = void 0;\n                this.zoomedMin = void 0;\n                this.init(chart);\n            }\n            /**\n             * Draw one of the handles on the side of the zoomed range in the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#drawHandle\n             *\n             * @param {number} x\n             *        The x center for the handle\n             *\n             * @param {number} index\n             *        0 for left and 1 for right\n             *\n             * @param {boolean|undefined} inverted\n             *        flag for chart.inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            Navigator.prototype.drawHandle = function (x, index, inverted, verb) {\n                var navigator = this,\n                    height = navigator.navigatorOptions.handles.height;\n                // Place it\n                navigator.handles[index][verb](inverted ? {\n                    translateX: Math.round(navigator.left + navigator.height / 2),\n                    translateY: Math.round(navigator.top + parseInt(x, 10) + 0.5 - height)\n                } : {\n                    translateX: Math.round(navigator.left + parseInt(x, 10)),\n                    translateY: Math.round(navigator.top + navigator.height / 2 - height / 2 - 1)\n                });\n            };\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawOutline\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            Navigator.prototype.drawOutline = function (zoomedMin, zoomedMax, inverted, verb) {\n                var navigator = this,\n                    maskInside = navigator.navigatorOptions.maskInside,\n                    outlineWidth = navigator.outline.strokeWidth(),\n                    halfOutline = outlineWidth / 2,\n                    outlineCorrection = (outlineWidth % 2) / 2, // #5800\n                    outlineHeight = navigator.outlineHeight,\n                    scrollbarHeight = navigator.scrollbarHeight || 0,\n                    navigatorSize = navigator.size,\n                    left = navigator.left - scrollbarHeight,\n                    navigatorTop = navigator.top,\n                    verticalMin,\n                    path;\n                if (inverted) {\n                    left -= halfOutline;\n                    verticalMin = navigatorTop + zoomedMax + outlineCorrection;\n                    zoomedMax = navigatorTop + zoomedMin + outlineCorrection;\n                    path = [\n                        [\n                            'M',\n                            left + outlineHeight,\n                            navigatorTop - scrollbarHeight - outlineCorrection\n                        ],\n                        // top right of zoomed range\n                        ['L', left + outlineHeight, verticalMin],\n                        ['L', left, verticalMin],\n                        ['L', left, zoomedMax],\n                        ['L', left + outlineHeight, zoomedMax],\n                        [\n                            'L',\n                            left + outlineHeight,\n                            navigatorTop + navigatorSize + scrollbarHeight\n                        ]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // upper left of zoomed range\n                        ['M', left + outlineHeight, verticalMin - halfOutline], \n                        // upper right of z.r.\n                        [\n                            'L',\n                            left + outlineHeight,\n                            zoomedMax + halfOutline\n                        ]);\n                    }\n                }\n                else {\n                    zoomedMin += left + scrollbarHeight - outlineCorrection;\n                    zoomedMax += left + scrollbarHeight - outlineCorrection;\n                    navigatorTop += halfOutline;\n                    path = [\n                        // left\n                        ['M', left, navigatorTop],\n                        // upper left of zoomed range\n                        ['L', zoomedMin, navigatorTop],\n                        // lower left of z.r.\n                        ['L', zoomedMin, navigatorTop + outlineHeight],\n                        // lower right of z.r.\n                        ['L', zoomedMax, navigatorTop + outlineHeight],\n                        // upper right of z.r.\n                        ['L', zoomedMax, navigatorTop],\n                        // right\n                        ['L', left + navigatorSize + scrollbarHeight * 2, navigatorTop]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // upper left of zoomed range\n                        ['M', zoomedMin - halfOutline, navigatorTop], \n                        // upper right of z.r.\n                        ['L', zoomedMax + halfOutline, navigatorTop]);\n                    }\n                }\n                navigator.outline[verb]({\n                    d: path\n                });\n            };\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawMasks\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            Navigator.prototype.drawMasks = function (zoomedMin, zoomedMax, inverted, verb) {\n                var navigator = this,\n                    left = navigator.left,\n                    top = navigator.top,\n                    navigatorHeight = navigator.height,\n                    height,\n                    width,\n                    x,\n                    y;\n                // Determine rectangle position & size\n                // According to (non)inverted position:\n                if (inverted) {\n                    x = [left, left, left];\n                    y = [top, top + zoomedMin, top + zoomedMax];\n                    width = [navigatorHeight, navigatorHeight, navigatorHeight];\n                    height = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                }\n                else {\n                    x = [left, left + zoomedMin, left + zoomedMax];\n                    y = [top, top, top];\n                    width = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                    height = [navigatorHeight, navigatorHeight, navigatorHeight];\n                }\n                navigator.shades.forEach(function (shade, i) {\n                    shade[verb]({\n                        x: x[i],\n                        y: y[i],\n                        width: width[i],\n                        height: height[i]\n                    });\n                });\n            };\n            /**\n             * Generate DOM elements for a navigator:\n             *\n             * - main navigator group\n             *\n             * - all shades\n             *\n             * - outline\n             *\n             * - handles\n             *\n             * @private\n             * @function Highcharts.Navigator#renderElements\n             */\n            Navigator.prototype.renderElements = function () {\n                var navigator = this,\n                    navigatorOptions = navigator.navigatorOptions,\n                    maskInside = navigatorOptions.maskInside,\n                    chart = navigator.chart,\n                    inverted = chart.inverted,\n                    renderer = chart.renderer,\n                    navigatorGroup,\n                    mouseCursor = {\n                        cursor: inverted ? 'ns-resize' : 'ew-resize'\n                    };\n                // Create the main navigator group\n                navigator.navigatorGroup = navigatorGroup = renderer.g('navigator')\n                    .attr({\n                    zIndex: 8,\n                    visibility: 'hidden'\n                })\n                    .add();\n                // Create masks, each mask will get events and fill:\n                [\n                    !maskInside,\n                    maskInside,\n                    !maskInside\n                ].forEach(function (hasMask, index) {\n                    navigator.shades[index] = renderer.rect()\n                        .addClass('highcharts-navigator-mask' +\n                        (index === 1 ? '-inside' : '-outside'))\n                        .add(navigatorGroup);\n                    if (!chart.styledMode) {\n                        navigator.shades[index]\n                            .attr({\n                            fill: hasMask ?\n                                navigatorOptions.maskFill :\n                                'rgba(0,0,0,0)'\n                        })\n                            .css((index === 1) && mouseCursor);\n                    }\n                });\n                // Create the outline:\n                navigator.outline = renderer.path()\n                    .addClass('highcharts-navigator-outline')\n                    .add(navigatorGroup);\n                if (!chart.styledMode) {\n                    navigator.outline.attr({\n                        'stroke-width': navigatorOptions.outlineWidth,\n                        stroke: navigatorOptions.outlineColor\n                    });\n                }\n                // Create the handlers:\n                if (navigatorOptions.handles.enabled) {\n                    [0, 1].forEach(function (index) {\n                        navigatorOptions.handles.inverted = chart.inverted;\n                        navigator.handles[index] = renderer.symbol(navigatorOptions.handles.symbols[index], -navigatorOptions.handles.width / 2 - 1, 0, navigatorOptions.handles.width, navigatorOptions.handles.height, navigatorOptions.handles);\n                        // zIndex = 6 for right handle, 7 for left.\n                        // Can't be 10, because of the tooltip in inverted chart #2908\n                        navigator.handles[index].attr({ zIndex: 7 - index })\n                            .addClass('highcharts-navigator-handle ' +\n                            'highcharts-navigator-handle-' +\n                            ['left', 'right'][index]).add(navigatorGroup);\n                        if (!chart.styledMode) {\n                            var handlesOptions = navigatorOptions.handles;\n                            navigator.handles[index]\n                                .attr({\n                                fill: handlesOptions.backgroundColor,\n                                stroke: handlesOptions.borderColor,\n                                'stroke-width': handlesOptions.lineWidth\n                            })\n                                .css(mouseCursor);\n                        }\n                    });\n                }\n            };\n            /**\n             * Update navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#update\n             *\n             * @param {Highcharts.NavigatorOptions} options\n             *        Options to merge in when updating navigator\n             */\n            Navigator.prototype.update = function (options) {\n                // Remove references to old navigator series in base series\n                (this.series || []).forEach(function (series) {\n                    if (series.baseSeries) {\n                        delete series.baseSeries.navigatorSeries;\n                    }\n                });\n                // Destroy and rebuild navigator\n                this.destroy();\n                var chartOptions = this.chart.options;\n                merge(true, chartOptions.navigator, this.options, options);\n                this.init(this.chart);\n            };\n            /**\n             * Render the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#render\n             * @param {number} min\n             *        X axis value minimum\n             * @param {number} max\n             *        X axis value maximum\n             * @param {number} [pxMin]\n             *        Pixel value minimum\n             * @param {number} [pxMax]\n             *        Pixel value maximum\n             */\n            Navigator.prototype.render = function (min, max, pxMin, pxMax) {\n                var navigator = this,\n                    chart = navigator.chart,\n                    navigatorWidth,\n                    scrollbarLeft,\n                    scrollbarTop,\n                    scrollbarHeight = navigator.scrollbarHeight,\n                    navigatorSize,\n                    xAxis = navigator.xAxis,\n                    pointRange = xAxis.pointRange || 0,\n                    scrollbarXAxis = xAxis.navigatorAxis.fake ? chart.xAxis[0] : xAxis,\n                    navigatorEnabled = navigator.navigatorEnabled,\n                    zoomedMin,\n                    zoomedMax,\n                    rendered = navigator.rendered,\n                    inverted = chart.inverted,\n                    verb,\n                    newMin,\n                    newMax,\n                    currentRange,\n                    minRange = chart.xAxis[0].minRange,\n                    maxRange = chart.xAxis[0].options.maxRange;\n                // Don't redraw while moving the handles (#4703).\n                if (this.hasDragged && !defined(pxMin)) {\n                    return;\n                }\n                min = correctFloat(min - pointRange / 2);\n                max = correctFloat(max + pointRange / 2);\n                // Don't render the navigator until we have data (#486, #4202, #5172).\n                if (!isNumber(min) || !isNumber(max)) {\n                    // However, if navigator was already rendered, we may need to resize\n                    // it. For example hidden series, but visible navigator (#6022).\n                    if (rendered) {\n                        pxMin = 0;\n                        pxMax = pick(xAxis.width, scrollbarXAxis.width);\n                    }\n                    else {\n                        return;\n                    }\n                }\n                navigator.left = pick(xAxis.left, \n                // in case of scrollbar only, without navigator\n                chart.plotLeft + scrollbarHeight +\n                    (inverted ? chart.plotWidth : 0));\n                navigator.size = zoomedMax = navigatorSize = pick(xAxis.len, (inverted ? chart.plotHeight : chart.plotWidth) -\n                    2 * scrollbarHeight);\n                if (inverted) {\n                    navigatorWidth = scrollbarHeight;\n                }\n                else {\n                    navigatorWidth = navigatorSize + 2 * scrollbarHeight;\n                }\n                // Get the pixel position of the handles\n                pxMin = pick(pxMin, xAxis.toPixels(min, true));\n                pxMax = pick(pxMax, xAxis.toPixels(max, true));\n                // Verify (#1851, #2238)\n                if (!isNumber(pxMin) || Math.abs(pxMin) === Infinity) {\n                    pxMin = 0;\n                    pxMax = navigatorWidth;\n                }\n                // Are we below the minRange? (#2618, #6191)\n                newMin = xAxis.toValue(pxMin, true);\n                newMax = xAxis.toValue(pxMax, true);\n                currentRange = Math.abs(correctFloat(newMax - newMin));\n                if (currentRange < minRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - minRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + minRange + pointRange, true);\n                    }\n                }\n                else if (defined(maxRange) &&\n                    correctFloat(currentRange - pointRange) > maxRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - maxRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + maxRange + pointRange, true);\n                    }\n                }\n                // Handles are allowed to cross, but never exceed the plot area\n                navigator.zoomedMax = clamp(Math.max(pxMin, pxMax), 0, zoomedMax);\n                navigator.zoomedMin = clamp(navigator.fixedWidth ?\n                    navigator.zoomedMax - navigator.fixedWidth :\n                    Math.min(pxMin, pxMax), 0, zoomedMax);\n                navigator.range = navigator.zoomedMax - navigator.zoomedMin;\n                zoomedMax = Math.round(navigator.zoomedMax);\n                zoomedMin = Math.round(navigator.zoomedMin);\n                if (navigatorEnabled) {\n                    navigator.navigatorGroup.attr({\n                        visibility: 'visible'\n                    });\n                    // Place elements\n                    verb = rendered && !navigator.hasDragged ? 'animate' : 'attr';\n                    navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    if (navigator.navigatorOptions.handles.enabled) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n                if (navigator.scrollbar) {\n                    if (inverted) {\n                        scrollbarTop = navigator.top - scrollbarHeight;\n                        scrollbarLeft = navigator.left - scrollbarHeight +\n                            (navigatorEnabled || !scrollbarXAxis.opposite ? 0 :\n                                // Multiple axes has offsets:\n                                (scrollbarXAxis.titleOffset || 0) +\n                                    // Self margin from the axis.title\n                                    scrollbarXAxis.axisTitleMargin);\n                        scrollbarHeight = navigatorSize + 2 * scrollbarHeight;\n                    }\n                    else {\n                        scrollbarTop = navigator.top + (navigatorEnabled ?\n                            navigator.height :\n                            -scrollbarHeight);\n                        scrollbarLeft = navigator.left - scrollbarHeight;\n                    }\n                    // Reposition scrollbar\n                    navigator.scrollbar.position(scrollbarLeft, scrollbarTop, navigatorWidth, scrollbarHeight);\n                    // Keep scale 0-1\n                    navigator.scrollbar.setRange(\n                    // Use real value, not rounded because range can be very small\n                    // (#1716)\n                    navigator.zoomedMin / (navigatorSize || 1), navigator.zoomedMax / (navigatorSize || 1));\n                }\n                navigator.rendered = true;\n            };\n            /**\n             * Set up the mouse and touch events for the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#addMouseEvents\n             */\n            Navigator.prototype.addMouseEvents = function () {\n                var navigator = this,\n                    chart = navigator.chart,\n                    container = chart.container,\n                    eventsToUnbind = [],\n                    mouseMoveHandler,\n                    mouseUpHandler;\n                /**\n                 * Create mouse events' handlers.\n                 * Make them as separate functions to enable wrapping them:\n                 */\n                navigator.mouseMoveHandler = mouseMoveHandler = function (e) {\n                    navigator.onMouseMove(e);\n                };\n                navigator.mouseUpHandler = mouseUpHandler = function (e) {\n                    navigator.onMouseUp(e);\n                };\n                // Add shades and handles mousedown events\n                eventsToUnbind = navigator.getPartsEvents('mousedown');\n                // Add mouse move and mouseup events. These are bind to doc/container,\n                // because Navigator.grabbedSomething flags are stored in mousedown\n                // events\n                eventsToUnbind.push(addEvent(chart.renderTo, 'mousemove', mouseMoveHandler), addEvent(container.ownerDocument, 'mouseup', mouseUpHandler));\n                // Touch events\n                if (hasTouch) {\n                    eventsToUnbind.push(addEvent(chart.renderTo, 'touchmove', mouseMoveHandler), addEvent(container.ownerDocument, 'touchend', mouseUpHandler));\n                    eventsToUnbind.concat(navigator.getPartsEvents('touchstart'));\n                }\n                navigator.eventsToUnbind = eventsToUnbind;\n                // Data events\n                if (navigator.series && navigator.series[0]) {\n                    eventsToUnbind.push(addEvent(navigator.series[0].xAxis, 'foundExtremes', function () {\n                        chart.navigator.modifyNavigatorAxisExtremes();\n                    }));\n                }\n            };\n            /**\n             * Generate events for handles and masks\n             *\n             * @private\n             * @function Highcharts.Navigator#getPartsEvents\n             *\n             * @param {string} eventName\n             *        Event name handler, 'mousedown' or 'touchstart'\n             *\n             * @return {Array<Function>}\n             *         An array of functions to remove navigator functions from the\n             *         events again.\n             */\n            Navigator.prototype.getPartsEvents = function (eventName) {\n                var navigator = this,\n                    events = [];\n                ['shades', 'handles'].forEach(function (name) {\n                    navigator[name].forEach(function (navigatorItem, index) {\n                        events.push(addEvent(navigatorItem.element, eventName, function (e) {\n                            navigator[name + 'Mousedown'](e, index);\n                        }));\n                    });\n                });\n                return events;\n            };\n            /**\n             * Mousedown on a shaded mask, either:\n             *\n             * - will be stored for future drag&drop\n             *\n             * - will directly shift to a new range\n             *\n             * @private\n             * @function Highcharts.Navigator#shadesMousedown\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             *\n             * @param {number} index\n             *        Index of a mask in Navigator.shades array\n             */\n            Navigator.prototype.shadesMousedown = function (e, index) {\n                e = this.chart.pointer.normalize(e);\n                var navigator = this,\n                    chart = navigator.chart,\n                    xAxis = navigator.xAxis,\n                    zoomedMin = navigator.zoomedMin,\n                    navigatorPosition = navigator.left,\n                    navigatorSize = navigator.size,\n                    range = navigator.range,\n                    chartX = e.chartX,\n                    fixedMax,\n                    fixedMin,\n                    ext,\n                    left;\n                // For inverted chart, swap some options:\n                if (chart.inverted) {\n                    chartX = e.chartY;\n                    navigatorPosition = navigator.top;\n                }\n                if (index === 1) {\n                    // Store information for drag&drop\n                    navigator.grabbedCenter = chartX;\n                    navigator.fixedWidth = range;\n                    navigator.dragOffset = chartX - zoomedMin;\n                }\n                else {\n                    // Shift the range by clicking on shaded areas\n                    left = chartX - navigatorPosition - range / 2;\n                    if (index === 0) {\n                        left = Math.max(0, left);\n                    }\n                    else if (index === 2 && left + range >= navigatorSize) {\n                        left = navigatorSize - range;\n                        if (navigator.reversedExtremes) {\n                            // #7713\n                            left -= range;\n                            fixedMin = navigator.getUnionExtremes().dataMin;\n                        }\n                        else {\n                            // #2293, #3543\n                            fixedMax = navigator.getUnionExtremes().dataMax;\n                        }\n                    }\n                    if (left !== zoomedMin) { // it has actually moved\n                        navigator.fixedWidth = range; // #1370\n                        ext = xAxis.navigatorAxis.toFixedRange(left, left + range, fixedMin, fixedMax);\n                        if (defined(ext.min)) { // #7411\n                            chart.xAxis[0].setExtremes(Math.min(ext.min, ext.max), Math.max(ext.min, ext.max), true, null, // auto animation\n                            { trigger: 'navigator' });\n                        }\n                    }\n                }\n            };\n            /**\n             * Mousedown on a handle mask.\n             * Will store necessary information for drag&drop.\n             *\n             * @private\n             * @function Highcharts.Navigator#handlesMousedown\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             * @param {number} index\n             *        Index of a handle in Navigator.handles array\n             */\n            Navigator.prototype.handlesMousedown = function (e, index) {\n                e = this.chart.pointer.normalize(e);\n                var navigator = this,\n                    chart = navigator.chart,\n                    baseXAxis = chart.xAxis[0], \n                    // For reversed axes, min and max are changed,\n                    // so the other extreme should be stored\n                    reverse = navigator.reversedExtremes;\n                if (index === 0) {\n                    // Grab the left handle\n                    navigator.grabbedLeft = true;\n                    navigator.otherHandlePos = navigator.zoomedMax;\n                    navigator.fixedExtreme = reverse ? baseXAxis.min : baseXAxis.max;\n                }\n                else {\n                    // Grab the right handle\n                    navigator.grabbedRight = true;\n                    navigator.otherHandlePos = navigator.zoomedMin;\n                    navigator.fixedExtreme = reverse ? baseXAxis.max : baseXAxis.min;\n                }\n                chart.fixedRange = null;\n            };\n            /**\n             * Mouse move event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseMove\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            Navigator.prototype.onMouseMove = function (e) {\n                var navigator = this,\n                    chart = navigator.chart,\n                    left = navigator.left,\n                    navigatorSize = navigator.navigatorSize,\n                    range = navigator.range,\n                    dragOffset = navigator.dragOffset,\n                    inverted = chart.inverted,\n                    chartX;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when holding\n                // the finger down in the center of the scrollbar. This should be\n                // ignored.\n                if (!e.touches || e.touches[0].pageX !== 0) { // #4696\n                    e = chart.pointer.normalize(e);\n                    chartX = e.chartX;\n                    // Swap some options for inverted chart\n                    if (inverted) {\n                        left = navigator.top;\n                        chartX = e.chartY;\n                    }\n                    // Drag left handle or top handle\n                    if (navigator.grabbedLeft) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, chartX - left, navigator.otherHandlePos);\n                        // Drag right handle or bottom handle\n                    }\n                    else if (navigator.grabbedRight) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, navigator.otherHandlePos, chartX - left);\n                        // Drag scrollbar or open area in navigator\n                    }\n                    else if (navigator.grabbedCenter) {\n                        navigator.hasDragged = true;\n                        if (chartX < dragOffset) { // outside left\n                            chartX = dragOffset;\n                            // outside right\n                        }\n                        else if (chartX >\n                            navigatorSize + dragOffset - range) {\n                            chartX = navigatorSize + dragOffset - range;\n                        }\n                        navigator.render(0, 0, chartX - dragOffset, chartX - dragOffset + range);\n                    }\n                    if (navigator.hasDragged &&\n                        navigator.scrollbar &&\n                        pick(navigator.scrollbar.options.liveRedraw, \n                        // By default, don't run live redraw on VML, on touch\n                        // devices or if the chart is in boost.\n                        H.svg && !isTouchDevice && !this.chart.isBoosting)) {\n                        e.DOMType = e.type; // DOMType is for IE8\n                        setTimeout(function () {\n                            navigator.onMouseUp(e);\n                        }, 0);\n                    }\n                }\n            };\n            /**\n             * Mouse up event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseUp\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            Navigator.prototype.onMouseUp = function (e) {\n                var navigator = this,\n                    chart = navigator.chart,\n                    xAxis = navigator.xAxis,\n                    scrollbar = navigator.scrollbar,\n                    DOMEvent = e.DOMEvent || e,\n                    inverted = chart.inverted,\n                    verb = navigator.rendered && !navigator.hasDragged ?\n                        'animate' : 'attr',\n                    zoomedMax,\n                    zoomedMin,\n                    unionExtremes,\n                    fixedMin,\n                    fixedMax,\n                    ext;\n                if (\n                // MouseUp is called for both, navigator and scrollbar (that order),\n                // which causes calling afterSetExtremes twice. Prevent first call\n                // by checking if scrollbar is going to set new extremes (#6334)\n                (navigator.hasDragged && (!scrollbar || !scrollbar.hasDragged)) ||\n                    e.trigger === 'scrollbar') {\n                    unionExtremes = navigator.getUnionExtremes();\n                    // When dragging one handle, make sure the other one doesn't change\n                    if (navigator.zoomedMin === navigator.otherHandlePos) {\n                        fixedMin = navigator.fixedExtreme;\n                    }\n                    else if (navigator.zoomedMax === navigator.otherHandlePos) {\n                        fixedMax = navigator.fixedExtreme;\n                    }\n                    // Snap to right edge (#4076)\n                    if (navigator.zoomedMax === navigator.size) {\n                        fixedMax = navigator.reversedExtremes ?\n                            unionExtremes.dataMin :\n                            unionExtremes.dataMax;\n                    }\n                    // Snap to left edge (#7576)\n                    if (navigator.zoomedMin === 0) {\n                        fixedMin = navigator.reversedExtremes ?\n                            unionExtremes.dataMax :\n                            unionExtremes.dataMin;\n                    }\n                    ext = xAxis.navigatorAxis.toFixedRange(navigator.zoomedMin, navigator.zoomedMax, fixedMin, fixedMax);\n                    if (defined(ext.min)) {\n                        chart.xAxis[0].setExtremes(Math.min(ext.min, ext.max), Math.max(ext.min, ext.max), true, \n                        // Run animation when clicking buttons, scrollbar track etc,\n                        // but not when dragging handles or scrollbar\n                        navigator.hasDragged ? false : null, {\n                            trigger: 'navigator',\n                            triggerOp: 'navigator-drag',\n                            DOMEvent: DOMEvent // #1838\n                        });\n                    }\n                }\n                if (e.DOMType !== 'mousemove' &&\n                    e.DOMType !== 'touchmove') {\n                    navigator.grabbedLeft = navigator.grabbedRight =\n                        navigator.grabbedCenter = navigator.fixedWidth =\n                            navigator.fixedExtreme = navigator.otherHandlePos =\n                                navigator.hasDragged = navigator.dragOffset = null;\n                }\n                // Update position of navigator shades, outline and handles (#12573)\n                if (navigator.navigatorEnabled &&\n                    isNumber(navigator.zoomedMin) &&\n                    isNumber(navigator.zoomedMax)) {\n                    zoomedMin = Math.round(navigator.zoomedMin);\n                    zoomedMax = Math.round(navigator.zoomedMax);\n                    if (navigator.shades) {\n                        navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.outline) {\n                        navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.navigatorOptions.handles.enabled &&\n                        Object.keys(navigator.handles).length ===\n                            navigator.handles.length) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n            };\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeEvents\n             */\n            Navigator.prototype.removeEvents = function () {\n                if (this.eventsToUnbind) {\n                    this.eventsToUnbind.forEach(function (unbind) {\n                        unbind();\n                    });\n                    this.eventsToUnbind = void 0;\n                }\n                this.removeBaseSeriesEvents();\n            };\n            /**\n             * Remove data events.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeBaseSeriesEvents\n             */\n            Navigator.prototype.removeBaseSeriesEvents = function () {\n                var baseSeries = this.baseSeries || [];\n                if (this.navigatorEnabled && baseSeries[0]) {\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        baseSeries.forEach(function (series) {\n                            removeEvent(series, 'updatedData', this.updatedDataHandler);\n                        }, this);\n                    }\n                    // We only listen for extremes-events on the first baseSeries\n                    if (baseSeries[0].xAxis) {\n                        removeEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes);\n                    }\n                }\n            };\n            /**\n             * Initialize the Navigator object\n             *\n             * @private\n             * @function Highcharts.Navigator#init\n             *\n             * @param {Highcharts.Chart} chart\n             */\n            Navigator.prototype.init = function (chart) {\n                var chartOptions = chart.options,\n                    navigatorOptions = chartOptions.navigator,\n                    navigatorEnabled = navigatorOptions.enabled,\n                    scrollbarOptions = chartOptions.scrollbar,\n                    scrollbarEnabled = scrollbarOptions.enabled,\n                    height = navigatorEnabled ? navigatorOptions.height : 0,\n                    scrollbarHeight = scrollbarEnabled ?\n                        scrollbarOptions.height :\n                        0;\n                this.handles = [];\n                this.shades = [];\n                this.chart = chart;\n                this.setBaseSeries();\n                this.height = height;\n                this.scrollbarHeight = scrollbarHeight;\n                this.scrollbarEnabled = scrollbarEnabled;\n                this.navigatorEnabled = navigatorEnabled;\n                this.navigatorOptions = navigatorOptions;\n                this.scrollbarOptions = scrollbarOptions;\n                this.outlineHeight = height + scrollbarHeight;\n                this.opposite = pick(navigatorOptions.opposite, Boolean(!navigatorEnabled && chart.inverted)); // #6262\n                var navigator = this,\n                    baseSeries = navigator.baseSeries,\n                    xAxisIndex = chart.xAxis.length,\n                    yAxisIndex = chart.yAxis.length,\n                    baseXaxis = baseSeries && baseSeries[0] && baseSeries[0].xAxis ||\n                        chart.xAxis[0] || { options: {} };\n                chart.isDirtyBox = true;\n                if (navigator.navigatorEnabled) {\n                    // an x axis is required for scrollbar also\n                    navigator.xAxis = new Axis(chart, merge({\n                        // inherit base xAxis' break and ordinal options\n                        breaks: baseXaxis.options.breaks,\n                        ordinal: baseXaxis.options.ordinal\n                    }, navigatorOptions.xAxis, {\n                        id: 'navigator-x-axis',\n                        yAxis: 'navigator-y-axis',\n                        isX: true,\n                        type: 'datetime',\n                        index: xAxisIndex,\n                        isInternal: true,\n                        offset: 0,\n                        keepOrdinalPadding: true,\n                        startOnTick: false,\n                        endOnTick: false,\n                        minPadding: 0,\n                        maxPadding: 0,\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        offsets: [scrollbarHeight, 0, -scrollbarHeight, 0],\n                        width: height\n                    } : {\n                        offsets: [0, -scrollbarHeight, 0, scrollbarHeight],\n                        height: height\n                    }));\n                    navigator.yAxis = new Axis(chart, merge(navigatorOptions.yAxis, {\n                        id: 'navigator-y-axis',\n                        alignTicks: false,\n                        offset: 0,\n                        index: yAxisIndex,\n                        isInternal: true,\n                        reversed: pick((navigatorOptions.yAxis &&\n                            navigatorOptions.yAxis.reversed), (chart.yAxis[0] && chart.yAxis[0].reversed), false),\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        width: height\n                    } : {\n                        height: height\n                    }));\n                    // If we have a base series, initialize the navigator series\n                    if (baseSeries || navigatorOptions.series.data) {\n                        navigator.updateNavigatorSeries(false);\n                        // If not, set up an event to listen for added series\n                    }\n                    else if (chart.series.length === 0) {\n                        navigator.unbindRedraw = addEvent(chart, 'beforeRedraw', function () {\n                            // We've got one, now add it as base\n                            if (chart.series.length > 0 && !navigator.series) {\n                                navigator.setBaseSeries();\n                                navigator.unbindRedraw(); // reset\n                            }\n                        });\n                    }\n                    navigator.reversedExtremes = (chart.inverted && !navigator.xAxis.reversed) || (!chart.inverted && navigator.xAxis.reversed);\n                    // Render items, so we can bind events to them:\n                    navigator.renderElements();\n                    // Add mouse events\n                    navigator.addMouseEvents();\n                    // in case of scrollbar only, fake an x axis to get translation\n                }\n                else {\n                    navigator.xAxis = {\n                        chart: chart,\n                        navigatorAxis: {\n                            fake: true\n                        },\n                        translate: function (value, reverse) {\n                            var axis = chart.xAxis[0], ext = axis.getExtremes(), scrollTrackWidth = axis.len - 2 * scrollbarHeight, min = numExt('min', axis.options.min, ext.dataMin), valueRange = numExt('max', axis.options.max, ext.dataMax) - min;\n                            return reverse ?\n                                // from pixel to value\n                                (value * valueRange / scrollTrackWidth) + min :\n                                // from value to pixel\n                                scrollTrackWidth * (value - min) / valueRange;\n                        },\n                        toPixels: function (value) {\n                            return this.translate(value);\n                        },\n                        toValue: function (value) {\n                            return this.translate(value, true);\n                        }\n                    };\n                    navigator.xAxis.navigatorAxis.axis = navigator.xAxis;\n                    navigator.xAxis.navigatorAxis.toFixedRange = (NavigatorAxis.AdditionsClass.prototype.toFixedRange.bind(navigator.xAxis.navigatorAxis));\n                }\n                // Initialize the scrollbar\n                if (chart.options.scrollbar.enabled) {\n                    chart.scrollbar = navigator.scrollbar = new Scrollbar(chart.renderer, merge(chart.options.scrollbar, {\n                        margin: navigator.navigatorEnabled ? 0 : 10,\n                        vertical: chart.inverted\n                    }), chart);\n                    addEvent(navigator.scrollbar, 'changed', function (e) {\n                        var range = navigator.size,\n                            to = range * this.to,\n                            from = range * this.from;\n                        navigator.hasDragged = navigator.scrollbar.hasDragged;\n                        navigator.render(0, 0, from, to);\n                        if (this.shouldUpdateExtremes(e.DOMType)) {\n                            setTimeout(function () {\n                                navigator.onMouseUp(e);\n                            });\n                        }\n                    });\n                }\n                // Add data events\n                navigator.addBaseSeriesEvents();\n                // Add redraw events\n                navigator.addChartEvents();\n            };\n            /**\n             * Get the union data extremes of the chart - the outer data extremes of the\n             * base X axis and the navigator axis.\n             *\n             * @private\n             * @function Highcharts.Navigator#getUnionExtremes\n             */\n            Navigator.prototype.getUnionExtremes = function (returnFalseOnNoBaseSeries) {\n                var baseAxis = this.chart.xAxis[0],\n                    navAxis = this.xAxis,\n                    navAxisOptions = navAxis.options,\n                    baseAxisOptions = baseAxis.options,\n                    ret;\n                if (!returnFalseOnNoBaseSeries || baseAxis.dataMin !== null) {\n                    ret = {\n                        dataMin: pick(// #4053\n                        navAxisOptions && navAxisOptions.min, numExt('min', baseAxisOptions.min, baseAxis.dataMin, navAxis.dataMin, navAxis.min)),\n                        dataMax: pick(navAxisOptions && navAxisOptions.max, numExt('max', baseAxisOptions.max, baseAxis.dataMax, navAxis.dataMax, navAxis.max))\n                    };\n                }\n                return ret;\n            };\n            /**\n             * Set the base series and update the navigator series from this. With a bit\n             * of modification we should be able to make this an API method to be called\n             * from the outside\n             *\n             * @private\n             * @function Highcharts.Navigator#setBaseSeries\n             * @param {Highcharts.SeriesOptionsType} [baseSeriesOptions]\n             *        Additional series options for a navigator\n             * @param {boolean} [redraw]\n             *        Whether to redraw after update.\n             */\n            Navigator.prototype.setBaseSeries = function (baseSeriesOptions, redraw) {\n                var chart = this.chart,\n                    baseSeries = this.baseSeries = [];\n                baseSeriesOptions = (baseSeriesOptions ||\n                    chart.options && chart.options.navigator.baseSeries ||\n                    (chart.series.length ?\n                        // Find the first non-navigator series (#8430)\n                        find(chart.series, function (s) {\n                            return !s.options.isInternal;\n                        }).index :\n                        0));\n                // Iterate through series and add the ones that should be shown in\n                // navigator.\n                (chart.series || []).forEach(function (series, i) {\n                    if (\n                    // Don't include existing nav series\n                    !series.options.isInternal &&\n                        (series.options.showInNavigator ||\n                            (i === baseSeriesOptions ||\n                                series.options.id === baseSeriesOptions) &&\n                                series.options.showInNavigator !== false)) {\n                        baseSeries.push(series);\n                    }\n                });\n                // When run after render, this.xAxis already exists\n                if (this.xAxis && !this.xAxis.navigatorAxis.fake) {\n                    this.updateNavigatorSeries(true, redraw);\n                }\n            };\n            /**\n             * Update series in the navigator from baseSeries, adding new if does not\n             * exist.\n             *\n             * @private\n             * @function Highcharts.Navigator.updateNavigatorSeries\n             * @param {boolean} addEvents\n             * @param {boolean} [redraw]\n             */\n            Navigator.prototype.updateNavigatorSeries = function (addEvents, redraw) {\n                var navigator = this,\n                    chart = navigator.chart,\n                    baseSeries = navigator.baseSeries,\n                    baseOptions,\n                    mergedNavSeriesOptions,\n                    chartNavigatorSeriesOptions = navigator.navigatorOptions.series,\n                    baseNavigatorOptions,\n                    navSeriesMixin = {\n                        enableMouseTracking: false,\n                        index: null,\n                        linkedTo: null,\n                        group: 'nav',\n                        padXAxis: false,\n                        xAxis: 'navigator-x-axis',\n                        yAxis: 'navigator-y-axis',\n                        showInLegend: false,\n                        stacking: void 0,\n                        isInternal: true,\n                        states: {\n                            inactive: {\n                                opacity: 1\n                            }\n                        }\n                    }, \n                    // Remove navigator series that are no longer in the baseSeries\n                    navigatorSeries = navigator.series =\n                        (navigator.series || []).filter(function (navSeries) {\n                            var base = navSeries.baseSeries;\n                        if (baseSeries.indexOf(base) < 0) { // Not in array\n                            // If there is still a base series connected to this\n                            // series, remove event handler and reference.\n                            if (base) {\n                                removeEvent(base, 'updatedData', navigator.updatedDataHandler);\n                                delete base.navigatorSeries;\n                            }\n                            // Kill the nav series. It may already have been\n                            // destroyed (#8715).\n                            if (navSeries.chart) {\n                                navSeries.destroy();\n                            }\n                            return false;\n                        }\n                        return true;\n                    });\n                // Go through each base series and merge the options to create new\n                // series\n                if (baseSeries && baseSeries.length) {\n                    baseSeries.forEach(function eachBaseSeries(base) {\n                        var linkedNavSeries = base.navigatorSeries,\n                            userNavOptions = extend(\n                            // Grab color and visibility from base as default\n                            {\n                                color: base.color,\n                                visible: base.visible\n                            }, !isArray(chartNavigatorSeriesOptions) ?\n                                chartNavigatorSeriesOptions :\n                                defaultOptions.navigator.series);\n                        // Don't update if the series exists in nav and we have disabled\n                        // adaptToUpdatedData.\n                        if (linkedNavSeries &&\n                            navigator.navigatorOptions.adaptToUpdatedData === false) {\n                            return;\n                        }\n                        navSeriesMixin.name = 'Navigator ' + baseSeries.length;\n                        baseOptions = base.options || {};\n                        baseNavigatorOptions = baseOptions.navigatorOptions || {};\n                        // The dataLabels options are not merged correctly\n                        // if the settings are an array, #13847.\n                        userNavOptions.dataLabels = splat(userNavOptions.dataLabels);\n                        mergedNavSeriesOptions = merge(baseOptions, navSeriesMixin, userNavOptions, baseNavigatorOptions);\n                        // Once nav series type is resolved, pick correct pointRange\n                        mergedNavSeriesOptions.pointRange = pick(\n                        // Stricte set pointRange in options\n                        userNavOptions.pointRange, baseNavigatorOptions.pointRange, \n                        // Fallback to default values, e.g. `null` for column\n                        defaultOptions.plotOptions[mergedNavSeriesOptions.type || 'line'].pointRange);\n                        // Merge data separately. Do a slice to avoid mutating the\n                        // navigator options from base series (#4923).\n                        var navigatorSeriesData = baseNavigatorOptions.data || userNavOptions.data;\n                        navigator.hasNavigatorData =\n                            navigator.hasNavigatorData || !!navigatorSeriesData;\n                        mergedNavSeriesOptions.data =\n                            navigatorSeriesData ||\n                                baseOptions.data && baseOptions.data.slice(0);\n                        // Update or add the series\n                        if (linkedNavSeries && linkedNavSeries.options) {\n                            linkedNavSeries.update(mergedNavSeriesOptions, redraw);\n                        }\n                        else {\n                            base.navigatorSeries = chart.initSeries(mergedNavSeriesOptions);\n                            base.navigatorSeries.baseSeries = base; // Store ref\n                            navigatorSeries.push(base.navigatorSeries);\n                        }\n                    });\n                }\n                // If user has defined data (and no base series) or explicitly defined\n                // navigator.series as an array, we create these series on top of any\n                // base series.\n                if (chartNavigatorSeriesOptions.data &&\n                    !(baseSeries && baseSeries.length) ||\n                    isArray(chartNavigatorSeriesOptions)) {\n                    navigator.hasNavigatorData = false;\n                    // Allow navigator.series to be an array\n                    chartNavigatorSeriesOptions =\n                        splat(chartNavigatorSeriesOptions);\n                    chartNavigatorSeriesOptions.forEach(function (userSeriesOptions, i) {\n                        navSeriesMixin.name =\n                            'Navigator ' + (navigatorSeries.length + 1);\n                        mergedNavSeriesOptions = merge(defaultOptions.navigator.series, {\n                            // Since we don't have a base series to pull color from,\n                            // try to fake it by using color from series with same\n                            // index. Otherwise pull from the colors array. We need\n                            // an explicit color as otherwise updates will increment\n                            // color counter and we'll get a new color for each\n                            // update of the nav series.\n                            color: chart.series[i] &&\n                                !chart.series[i].options.isInternal &&\n                                chart.series[i].color ||\n                                chart.options.colors[i] ||\n                                chart.options.colors[0]\n                        }, navSeriesMixin, userSeriesOptions);\n                        mergedNavSeriesOptions.data = userSeriesOptions.data;\n                        if (mergedNavSeriesOptions.data) {\n                            navigator.hasNavigatorData = true;\n                            navigatorSeries.push(chart.initSeries(mergedNavSeriesOptions));\n                        }\n                    });\n                }\n                if (addEvents) {\n                    this.addBaseSeriesEvents();\n                }\n            };\n            /**\n             * Add data events.\n             * For example when main series is updated we need to recalculate extremes\n             *\n             * @private\n             * @function Highcharts.Navigator#addBaseSeriesEvent\n             */\n            Navigator.prototype.addBaseSeriesEvents = function () {\n                var navigator = this,\n                    baseSeries = navigator.baseSeries || [];\n                // Bind modified extremes event to first base's xAxis only.\n                // In event of > 1 base-xAxes, the navigator will ignore those.\n                // Adding this multiple times to the same axis is no problem, as\n                // duplicates should be discarded by the browser.\n                if (baseSeries[0] && baseSeries[0].xAxis) {\n                    baseSeries[0].eventsToUnbind.push(addEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes));\n                }\n                baseSeries.forEach(function (base) {\n                    // Link base series show/hide to navigator series visibility\n                    base.eventsToUnbind.push(addEvent(base, 'show', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(true, false);\n                        }\n                    }));\n                    base.eventsToUnbind.push(addEvent(base, 'hide', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(false, false);\n                        }\n                    }));\n                    // Respond to updated data in the base series, unless explicitily\n                    // not adapting to data changes.\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        if (base.xAxis) {\n                            base.eventsToUnbind.push(addEvent(base, 'updatedData', this.updatedDataHandler));\n                        }\n                    }\n                    // Handle series removal\n                    base.eventsToUnbind.push(addEvent(base, 'remove', function () {\n                        if (this.navigatorSeries) {\n                            erase(navigator.series, this.navigatorSeries);\n                            if (defined(this.navigatorSeries.options)) {\n                                this.navigatorSeries.remove(false);\n                            }\n                            delete this.navigatorSeries;\n                        }\n                    }));\n                }, this);\n            };\n            /**\n             * Get minimum from all base series connected to the navigator\n             * @private\n             * @param  {number} currentSeriesMin\n             *         Minium from the current series\n             * @return {number} Minimum from all series\n             */\n            Navigator.prototype.getBaseSeriesMin = function (currentSeriesMin) {\n                return this.baseSeries.reduce(function (min, series) {\n                    // (#10193)\n                    return Math.min(min, series.xData ? series.xData[0] : min);\n                }, currentSeriesMin);\n            };\n            /**\n             * Set the navigator x axis extremes to reflect the total. The navigator\n             * extremes should always be the extremes of the union of all series in the\n             * chart as well as the navigator series.\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyNavigatorAxisExtremes\n             */\n            Navigator.prototype.modifyNavigatorAxisExtremes = function () {\n                var xAxis = this.xAxis,\n                    unionExtremes;\n                if (typeof xAxis.getExtremes !== 'undefined') {\n                    unionExtremes = this.getUnionExtremes(true);\n                    if (unionExtremes &&\n                        (unionExtremes.dataMin !== xAxis.min ||\n                            unionExtremes.dataMax !== xAxis.max)) {\n                        xAxis.min = unionExtremes.dataMin;\n                        xAxis.max = unionExtremes.dataMax;\n                    }\n                }\n            };\n            /**\n             * Hook to modify the base axis extremes with information from the Navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyBaseAxisExtremes\n             */\n            Navigator.prototype.modifyBaseAxisExtremes = function () {\n                var baseXAxis = this,\n                    navigator = baseXAxis.chart.navigator,\n                    baseExtremes = baseXAxis.getExtremes(),\n                    baseMin = baseExtremes.min,\n                    baseMax = baseExtremes.max,\n                    baseDataMin = baseExtremes.dataMin,\n                    baseDataMax = baseExtremes.dataMax,\n                    range = baseMax - baseMin,\n                    stickToMin = navigator.stickToMin,\n                    stickToMax = navigator.stickToMax,\n                    overscroll = pick(baseXAxis.options.overscroll, 0),\n                    newMax,\n                    newMin,\n                    navigatorSeries = navigator.series && navigator.series[0],\n                    hasSetExtremes = !!baseXAxis.setExtremes, \n                    // When the extremes have been set by range selector button, don't\n                    // stick to min or max. The range selector buttons will handle the\n                    // extremes. (#5489)\n                    unmutable = baseXAxis.eventArgs &&\n                        baseXAxis.eventArgs.trigger === 'rangeSelectorButton';\n                if (!unmutable) {\n                    // If the zoomed range is already at the min, move it to the right\n                    // as new data comes in\n                    if (stickToMin) {\n                        newMin = baseDataMin;\n                        newMax = newMin + range;\n                    }\n                    // If the zoomed range is already at the max, move it to the right\n                    // as new data comes in\n                    if (stickToMax) {\n                        newMax = baseDataMax + overscroll;\n                        // If stickToMin is true, the new min value is set above\n                        if (!stickToMin) {\n                            newMin = Math.max(baseDataMin, // don't go below data extremes (#13184)\n                            newMax - range, navigator.getBaseSeriesMin(navigatorSeries && navigatorSeries.xData ?\n                                navigatorSeries.xData[0] :\n                                -Number.MAX_VALUE));\n                        }\n                    }\n                    // Update the extremes\n                    if (hasSetExtremes && (stickToMin || stickToMax)) {\n                        if (isNumber(newMin)) {\n                            baseXAxis.min = baseXAxis.userMin = newMin;\n                            baseXAxis.max = baseXAxis.userMax = newMax;\n                        }\n                    }\n                }\n                // Reset\n                navigator.stickToMin =\n                    navigator.stickToMax = null;\n            };\n            /**\n             * Handler for updated data on the base series. When data is modified, the\n             * navigator series must reflect it. This is called from the Chart.redraw\n             * function before axis and series extremes are computed.\n             *\n             * @private\n             * @function Highcharts.Navigator#updateDataHandler\n             */\n            Navigator.prototype.updatedDataHandler = function () {\n                var navigator = this.chart.navigator,\n                    baseSeries = this,\n                    navigatorSeries = this.navigatorSeries;\n                // If the scrollbar is scrolled all the way to the right, keep right as\n                // new data  comes in.\n                navigator.stickToMax = navigator.reversedExtremes ?\n                    Math.round(navigator.zoomedMin) === 0 :\n                    Math.round(navigator.zoomedMax) >= Math.round(navigator.size);\n                navigator.stickToMin = navigator.shouldStickToMin(baseSeries, navigator);\n                // Set the navigator series data to the new data of the base series\n                if (navigatorSeries && !navigator.hasNavigatorData) {\n                    navigatorSeries.options.pointStart = baseSeries.xData[0];\n                    navigatorSeries.setData(baseSeries.options.data, false, null, false); // #5414\n                }\n            };\n            /**\n             * Detect if the zoomed area should stick to the minimum, #14742.\n             *\n             * @private\n             * @function Highcharts.Navigator#shouldStickToMin\n             */\n            Navigator.prototype.shouldStickToMin = function (baseSeries, navigator) {\n                var xDataMin = navigator.getBaseSeriesMin(baseSeries.xData[0]),\n                    xAxis = baseSeries.xAxis,\n                    max = xAxis.max,\n                    min = xAxis.min,\n                    range = xAxis.options.range;\n                var stickToMin = true;\n                if (isNumber(max) && isNumber(min)) {\n                    // If range declared, stick to the minimum only if the range\n                    // is smaller than the data set range.\n                    if (range && max - xDataMin > 0) {\n                        stickToMin = max - xDataMin < range;\n                    }\n                    else {\n                        // If the current axis minimum falls outside the new\n                        // updated dataset, we must adjust.\n                        stickToMin = min <= xDataMin;\n                    }\n                }\n                else {\n                    stickToMin = false; // #15864\n                }\n                return stickToMin;\n            };\n            /**\n             * Add chart events, like redrawing navigator, when chart requires that.\n             *\n             * @private\n             * @function Highcharts.Navigator#addChartEvents\n             */\n            Navigator.prototype.addChartEvents = function () {\n                if (!this.eventsToUnbind) {\n                    this.eventsToUnbind = [];\n                }\n                this.eventsToUnbind.push(\n                // Move the scrollbar after redraw, like after data updata even if\n                // axes don't redraw\n                addEvent(this.chart, 'redraw', function () {\n                    var navigator = this.navigator,\n                        xAxis = navigator && (navigator.baseSeries &&\n                            navigator.baseSeries[0] &&\n                            navigator.baseSeries[0].xAxis ||\n                            this.xAxis[0]); // #5709, #13114\n                        if (xAxis) {\n                            navigator.render(xAxis.min,\n                        xAxis.max);\n                    }\n                }), \n                // Make room for the navigator, can be placed around the chart:\n                addEvent(this.chart, 'getMargins', function () {\n                    var chart = this,\n                        navigator = chart.navigator,\n                        marginName = navigator.opposite ?\n                            'plotTop' : 'marginBottom';\n                    if (chart.inverted) {\n                        marginName = navigator.opposite ?\n                            'marginRight' : 'plotLeft';\n                    }\n                    chart[marginName] =\n                        (chart[marginName] || 0) + (navigator.navigatorEnabled || !chart.inverted ?\n                            navigator.outlineHeight :\n                            0) + navigator.navigatorOptions.margin;\n                }));\n            };\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Navigator#destroy\n             */\n            Navigator.prototype.destroy = function () {\n                // Disconnect events added in addEvents\n                this.removeEvents();\n                if (this.xAxis) {\n                    erase(this.chart.xAxis, this.xAxis);\n                    erase(this.chart.axes, this.xAxis);\n                }\n                if (this.yAxis) {\n                    erase(this.chart.yAxis, this.yAxis);\n                    erase(this.chart.axes, this.yAxis);\n                }\n                // Destroy series\n                (this.series || []).forEach(function (s) {\n                    if (s.destroy) {\n                        s.destroy();\n                    }\n                });\n                // Destroy properties\n                [\n                    'series', 'xAxis', 'yAxis', 'shades', 'outline', 'scrollbarTrack',\n                    'scrollbarRifles', 'scrollbarGroup', 'scrollbar', 'navigatorGroup',\n                    'rendered'\n                ].forEach(function (prop) {\n                    if (this[prop] && this[prop].destroy) {\n                        this[prop].destroy();\n                    }\n                    this[prop] = null;\n                }, this);\n                // Destroy elements in collection\n                [this.handles].forEach(function (coll) {\n                    destroyObjectProperties(coll);\n                }, this);\n            };\n            return Navigator;\n        }());\n        // End of prototype\n        if (!H.Navigator) {\n            H.Navigator = Navigator;\n            NavigatorAxis.compose(Axis);\n            // For Stock charts. For x only zooming, do not to create the zoom button\n            // because X axis zooming is already allowed by the Navigator and Range\n            // selector. (#9285)\n            addEvent(Chart, 'beforeShowResetZoom', function () {\n                var chartOptions = this.options,\n                    navigator = chartOptions.navigator,\n                    rangeSelector = chartOptions.rangeSelector;\n                if (((navigator && navigator.enabled) ||\n                    (rangeSelector && rangeSelector.enabled)) &&\n                    ((!isTouchDevice && chartOptions.chart.zoomType === 'x') ||\n                        (isTouchDevice && chartOptions.chart.pinchType === 'x'))) {\n                    return false;\n                }\n            });\n            // Initialize navigator for stock charts\n            addEvent(Chart, 'beforeRender', function () {\n                var options = this.options;\n                if (options.navigator.enabled ||\n                    options.scrollbar.enabled) {\n                    this.scroller = this.navigator = new Navigator(this);\n                }\n            });\n            // For stock charts, extend the Chart.setChartSize method so that we can set\n            // the final top position of the navigator once the height of the chart,\n            // including the legend, is determined. #367. We can't use Chart.getMargins,\n            // because labels offsets are not calculated yet.\n            addEvent(Chart, 'afterSetChartSize', function () {\n                var legend = this.legend,\n                    navigator = this.navigator,\n                    scrollbarHeight,\n                    legendOptions,\n                    xAxis,\n                    yAxis;\n                if (navigator) {\n                    legendOptions = legend && legend.options;\n                    xAxis = navigator.xAxis;\n                    yAxis = navigator.yAxis;\n                    scrollbarHeight = navigator.scrollbarHeight;\n                    // Compute the top position\n                    if (this.inverted) {\n                        navigator.left = navigator.opposite ?\n                            this.chartWidth - scrollbarHeight -\n                                navigator.height :\n                            this.spacing[3] + scrollbarHeight;\n                        navigator.top = this.plotTop + scrollbarHeight;\n                    }\n                    else {\n                        navigator.left = pick(xAxis.left, this.plotLeft + scrollbarHeight);\n                        navigator.top = navigator.navigatorOptions.top ||\n                            this.chartHeight -\n                                navigator.height -\n                                scrollbarHeight -\n                                this.spacing[2] -\n                                (this.rangeSelector && this.extraBottomMargin ?\n                                    this.rangeSelector.getHeight() :\n                                    0) -\n                                ((legendOptions &&\n                                    legendOptions.verticalAlign === 'bottom' &&\n                                    legendOptions.layout !== 'proximate' && // #13392\n                                    legendOptions.enabled &&\n                                    !legendOptions.floating) ?\n                                    legend.legendHeight +\n                                        pick(legendOptions.margin, 10) :\n                                    0) -\n                                (this.titleOffset ? this.titleOffset[2] : 0);\n                    }\n                    if (xAxis && yAxis) { // false if navigator is disabled (#904)\n                        if (this.inverted) {\n                            xAxis.options.left = yAxis.options.left = navigator.left;\n                        }\n                        else {\n                            xAxis.options.top = yAxis.options.top = navigator.top;\n                        }\n                        xAxis.setAxisSize();\n                        yAxis.setAxisSize();\n                    }\n                }\n            });\n            // Merge options, if no scrolling exists yet\n            addEvent(Chart, 'update', function (e) {\n                var navigatorOptions = (e.options.navigator || {}),\n                    scrollbarOptions = (e.options.scrollbar || {});\n                if (!this.navigator && !this.scroller &&\n                    (navigatorOptions.enabled || scrollbarOptions.enabled)) {\n                    merge(true, this.options.navigator, navigatorOptions);\n                    merge(true, this.options.scrollbar, scrollbarOptions);\n                    delete e.options.navigator;\n                    delete e.options.scrollbar;\n                }\n            });\n            // Initialize navigator, if no scrolling exists yet\n            addEvent(Chart, 'afterUpdate', function (event) {\n                if (!this.navigator && !this.scroller &&\n                    (this.options.navigator.enabled ||\n                        this.options.scrollbar.enabled)) {\n                    this.scroller = this.navigator = new Navigator(this);\n                    if (pick(event.redraw, true)) {\n                        this.redraw(event.animation); // #7067\n                    }\n                }\n            });\n            // Handle adding new series\n            addEvent(Chart, 'afterAddSeries', function () {\n                if (this.navigator) {\n                    // Recompute which series should be shown in navigator, and add them\n                    this.navigator.setBaseSeries(null, false);\n                }\n            });\n            // Handle updating series\n            addEvent(Series, 'afterUpdate', function () {\n                if (this.chart.navigator && !this.options.isInternal) {\n                    this.chart.navigator.setBaseSeries(null, false);\n                }\n            });\n            Chart.prototype.callbacks.push(function (chart) {\n                var extremes,\n                    navigator = chart.navigator;\n                // Initialize the navigator\n                if (navigator && chart.xAxis[0]) {\n                    extremes = chart.xAxis[0].getExtremes();\n                    navigator.render(extremes.min, extremes.max);\n                }\n            });\n        }\n        H.Navigator = Navigator;\n\n        return H.Navigator;\n    });\n    _registerModule(_modules, 'Extensions/RangeSelector.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Chart/Chart.js'], _modules['Core/Globals.js'], _modules['Core/DefaultOptions.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Core/Utilities.js']], function (Axis, Chart, H, D, SVGElement, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var defaultOptions = D.defaultOptions;\n        var addEvent = U.addEvent,\n            createElement = U.createElement,\n            css = U.css,\n            defined = U.defined,\n            destroyObjectProperties = U.destroyObjectProperties,\n            discardElement = U.discardElement,\n            extend = U.extend,\n            find = U.find,\n            fireEvent = U.fireEvent,\n            isNumber = U.isNumber,\n            merge = U.merge,\n            objectEach = U.objectEach,\n            pad = U.pad,\n            pick = U.pick,\n            pInt = U.pInt,\n            splat = U.splat;\n        /**\n         * Define the time span for the button\n         *\n         * @typedef {\"all\"|\"day\"|\"hour\"|\"millisecond\"|\"minute\"|\"month\"|\"second\"|\"week\"|\"year\"|\"ytd\"} Highcharts.RangeSelectorButtonTypeValue\n         */\n        /**\n         * Callback function to react on button clicks.\n         *\n         * @callback Highcharts.RangeSelectorClickCallbackFunction\n         *\n         * @param {global.Event} e\n         *        Event arguments.\n         *\n         * @param {boolean|undefined}\n         *        Return false to cancel the default button event.\n         */\n        /**\n         * Callback function to parse values entered in the input boxes and return a\n         * valid JavaScript time as milliseconds since 1970.\n         *\n         * @callback Highcharts.RangeSelectorParseCallbackFunction\n         *\n         * @param {string} value\n         *        Input value to parse.\n         *\n         * @return {number}\n         *         Parsed JavaScript time value.\n         */\n        /* ************************************************************************** *\n         * Start Range Selector code                                                  *\n         * ************************************************************************** */\n        extend(defaultOptions, {\n            /**\n             * The range selector is a tool for selecting ranges to display within\n             * the chart. It provides buttons to select preconfigured ranges in\n             * the chart, like 1 day, 1 week, 1 month etc. It also provides input\n             * boxes where min and max dates can be manually input.\n             *\n             * @product      highstock gantt\n             * @optionparent rangeSelector\n             */\n            rangeSelector: {\n                /**\n                 * Whether to enable all buttons from the start. By default buttons are\n                 * only enabled if the corresponding time range exists on the X axis,\n                 * but enabling all buttons allows for dynamically loading different\n                 * time ranges.\n                 *\n                 * @sample {highstock} stock/rangeselector/allbuttonsenabled-true/\n                 *         All buttons enabled\n                 *\n                 * @since     2.0.3\n                 */\n                allButtonsEnabled: false,\n                /**\n                 * An array of configuration objects for the buttons.\n                 *\n                 * Defaults to:\n                 * ```js\n                 * buttons: [{\n                 *     type: 'month',\n                 *     count: 1,\n                 *     text: '1m',\n                 *     title: 'View 1 month'\n                 * }, {\n                 *     type: 'month',\n                 *     count: 3,\n                 *     text: '3m',\n                 *     title: 'View 3 months'\n                 * }, {\n                 *     type: 'month',\n                 *     count: 6,\n                 *     text: '6m',\n                 *     title: 'View 6 months'\n                 * }, {\n                 *     type: 'ytd',\n                 *     text: 'YTD',\n                 *     title: 'View year to date'\n                 * }, {\n                 *     type: 'year',\n                 *     count: 1,\n                 *     text: '1y',\n                 *     title: 'View 1 year'\n                 * }, {\n                 *     type: 'all',\n                 *     text: 'All',\n                 *     title: 'View all'\n                 * }]\n                 * ```\n                 *\n                 * @sample {highstock} stock/rangeselector/datagrouping/\n                 *         Data grouping by buttons\n                 *\n                 * @type      {Array<*>}\n                 */\n                buttons: void 0,\n                /**\n                 * How many units of the defined type the button should span. If `type`\n                 * is \"month\" and `count` is 3, the button spans three months.\n                 *\n                 * @type      {number}\n                 * @default   1\n                 * @apioption rangeSelector.buttons.count\n                 */\n                /**\n                 * Fires when clicking on the rangeSelector button. One parameter,\n                 * event, is passed to the function, containing common event\n                 * information.\n                 *\n                 * ```js\n                 * click: function(e) {\n                 *   console.log(this);\n                 * }\n                 * ```\n                 *\n                 * Return false to stop default button's click action.\n                 *\n                 * @sample {highstock} stock/rangeselector/button-click/\n                 *         Click event on the button\n                 *\n                 * @type      {Highcharts.RangeSelectorClickCallbackFunction}\n                 * @apioption rangeSelector.buttons.events.click\n                 */\n                /**\n                 * Additional range (in milliseconds) added to the end of the calculated\n                 * time span.\n                 *\n                 * @sample {highstock} stock/rangeselector/min-max-offsets/\n                 *         Button offsets\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     6.0.0\n                 * @apioption rangeSelector.buttons.offsetMax\n                 */\n                /**\n                 * Additional range (in milliseconds) added to the start of the\n                 * calculated time span.\n                 *\n                 * @sample {highstock} stock/rangeselector/min-max-offsets/\n                 *         Button offsets\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     6.0.0\n                 * @apioption rangeSelector.buttons.offsetMin\n                 */\n                /**\n                 * When buttons apply dataGrouping on a series, by default zooming\n                 * in/out will deselect buttons and unset dataGrouping. Enable this\n                 * option to keep buttons selected when extremes change.\n                 *\n                 * @sample {highstock} stock/rangeselector/preserve-datagrouping/\n                 *         Different preserveDataGrouping settings\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     6.1.2\n                 * @apioption rangeSelector.buttons.preserveDataGrouping\n                 */\n                /**\n                 * A custom data grouping object for each button.\n                 *\n                 * @see [series.dataGrouping](#plotOptions.series.dataGrouping)\n                 *\n                 * @sample {highstock} stock/rangeselector/datagrouping/\n                 *         Data grouping by range selector buttons\n                 *\n                 * @type      {*}\n                 * @extends   plotOptions.series.dataGrouping\n                 * @apioption rangeSelector.buttons.dataGrouping\n                 */\n                /**\n                 * The text for the button itself.\n                 *\n                 * @type      {string}\n                 * @apioption rangeSelector.buttons.text\n                 */\n                /**\n                 * Explanation for the button, shown as a tooltip on hover, and used by\n                 * assistive technology.\n                 *\n                 * @type      {string}\n                 * @apioption rangeSelector.buttons.title\n                 */\n                /**\n                 * Defined the time span for the button. Can be one of `millisecond`,\n                 * `second`, `minute`, `hour`, `day`, `week`, `month`, `year`, `ytd`,\n                 * and `all`.\n                 *\n                 * @type       {Highcharts.RangeSelectorButtonTypeValue}\n                 * @apioption  rangeSelector.buttons.type\n                 */\n                /**\n                 * The space in pixels between the buttons in the range selector.\n                 */\n                buttonSpacing: 5,\n                /**\n                 * Whether to collapse the range selector buttons into a dropdown when\n                 * there is not enough room to show everything in a single row, instead\n                 * of dividing the range selector into multiple rows.\n                 * Can be one of the following:\n                 *  - `always`: Always collapse\n                 *  - `responsive`: Only collapse when there is not enough room\n                 *  - `never`: Never collapse\n                 *\n                 * @sample {highstock} stock/rangeselector/dropdown/\n                 *         Dropdown option\n                 *\n                 * @validvalue [\"always\", \"responsive\", \"never\"]\n                 * @since 9.0.0\n                 */\n                dropdown: 'responsive',\n                /**\n                 * Enable or disable the range selector. Default to `true` for stock\n                 * charts, using the `stockChart` factory.\n                 *\n                 * @sample {highstock} stock/rangeselector/enabled/\n                 *         Disable the range selector\n                 *\n                 * @type {boolean|undefined}\n                 * @default {highstock} true\n                 */\n                enabled: void 0,\n                /**\n                 * The vertical alignment of the rangeselector box. Allowed properties\n                 * are `top`, `middle`, `bottom`.\n                 *\n                 * @sample {highstock} stock/rangeselector/vertical-align-middle/\n                 *         Middle\n                 * @sample {highstock} stock/rangeselector/vertical-align-bottom/\n                 *         Bottom\n                 *\n                 * @type  {Highcharts.VerticalAlignValue}\n                 * @since 6.0.0\n                 */\n                verticalAlign: 'top',\n                /**\n                 * A collection of attributes for the buttons. The object takes SVG\n                 * attributes like `fill`, `stroke`, `stroke-width`, as well as `style`,\n                 * a collection of CSS properties for the text.\n                 *\n                 * The object can also be extended with states, so you can set\n                 * presentational options for `hover`, `select` or `disabled` button\n                 * states.\n                 *\n                 * CSS styles for the text label.\n                 *\n                 * In styled mode, the buttons are styled by the\n                 * `.highcharts-range-selector-buttons .highcharts-button` rule with its\n                 * different states.\n                 *\n                 * @sample {highstock} stock/rangeselector/styling/\n                 *         Styling the buttons and inputs\n                 *\n                 * @type {Highcharts.SVGAttributes}\n                 */\n                buttonTheme: {\n                    /** @ignore */\n                    width: 28,\n                    /** @ignore */\n                    height: 18,\n                    /** @ignore */\n                    padding: 2,\n                    /** @ignore */\n                    zIndex: 7 // #484, #852\n                },\n                /**\n                 * When the rangeselector is floating, the plot area does not reserve\n                 * space for it. This opens for positioning anywhere on the chart.\n                 *\n                 * @sample {highstock} stock/rangeselector/floating/\n                 *         Placing the range selector between the plot area and the\n                 *         navigator\n                 *\n                 * @since 6.0.0\n                 */\n                floating: false,\n                /**\n                 * The x offset of the range selector relative to its horizontal\n                 * alignment within `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @since 6.0.0\n                 */\n                x: 0,\n                /**\n                 * The y offset of the range selector relative to its horizontal\n                 * alignment within `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @since 6.0.0\n                 */\n                y: 0,\n                /**\n                 * Deprecated. The height of the range selector. Currently it is\n                 * calculated dynamically.\n                 *\n                 * @deprecated\n                 * @type  {number|undefined}\n                 * @since 2.1.9\n                 */\n                height: void 0,\n                /**\n                 * The border color of the date input boxes.\n                 *\n                 * @sample {highstock} stock/rangeselector/styling/\n                 *         Styling the buttons and inputs\n                 *\n                 * @type      {Highcharts.ColorString}\n                 * @since     1.3.7\n                 */\n                inputBoxBorderColor: 'none',\n                /**\n                 * The pixel height of the date input boxes.\n                 *\n                 * @sample {highstock} stock/rangeselector/styling/\n                 *         Styling the buttons and inputs\n                 *\n                 * @since     1.3.7\n                 */\n                inputBoxHeight: 17,\n                /**\n                 * The pixel width of the date input boxes. When `undefined`, the width\n                 * is fitted to the rendered content.\n                 *\n                 * @sample {highstock} stock/rangeselector/styling/\n                 *         Styling the buttons and inputs\n                 *\n                 * @type   {number|undefined}\n                 * @since  1.3.7\n                 */\n                inputBoxWidth: void 0,\n                /**\n                 * The date format in the input boxes when not selected for editing.\n                 * Defaults to `%b %e, %Y`.\n                 *\n                 * This is used to determine which type of input to show,\n                 * `datetime-local`, `date` or `time` and falling back to `text` when\n                 * the browser does not support the input type or the format contains\n                 * milliseconds.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-type/\n                 *         Input types\n                 * @sample {highstock} stock/rangeselector/input-format/\n                 *         Milliseconds in the range selector\n                 *\n                 */\n                inputDateFormat: '%b %e, %Y',\n                /**\n                 * A custom callback function to parse values entered in the input boxes\n                 * and return a valid JavaScript time as milliseconds since 1970.\n                 * The first argument passed is a value to parse,\n                 * second is a boolean indicating use of the UTC time.\n                 *\n                 * This will only get called for inputs of type `text`. Since v8.2.3,\n                 * the input type is dynamically determined based on the granularity\n                 * of the `inputDateFormat` and the browser support.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-format/\n                 *         Milliseconds in the range selector\n                 *\n                 * @type      {Highcharts.RangeSelectorParseCallbackFunction}\n                 * @since     1.3.3\n                 */\n                inputDateParser: void 0,\n                /**\n                 * The date format in the input boxes when they are selected for\n                 * editing. This must be a format that is recognized by JavaScript\n                 * Date.parse.\n                 *\n                 * This will only be used for inputs of type `text`. Since v8.2.3,\n                 * the input type is dynamically determined based on the granularity\n                 * of the `inputDateFormat` and the browser support.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-format/\n                 *         Milliseconds in the range selector\n                 *\n                 */\n                inputEditDateFormat: '%Y-%m-%d',\n                /**\n                 * Enable or disable the date input boxes.\n                 */\n                inputEnabled: true,\n                /**\n                 * Positioning for the input boxes. Allowed properties are `align`,\n                 *  `x` and `y`.\n                 *\n                 * @since 1.2.4\n                 */\n                inputPosition: {\n                    /**\n                     * The alignment of the input box. Allowed properties are `left`,\n                     * `center`, `right`.\n                     *\n                     * @sample {highstock} stock/rangeselector/input-button-position/\n                     *         Alignment\n                     *\n                     * @type  {Highcharts.AlignValue}\n                     * @since 6.0.0\n                     */\n                    align: 'right',\n                    /**\n                     * X offset of the input row.\n                     */\n                    x: 0,\n                    /**\n                     * Y offset of the input row.\n                     */\n                    y: 0\n                },\n                /**\n                 * The space in pixels between the labels and the date input boxes in\n                 * the range selector.\n                 *\n                 * @since 9.0.0\n                 */\n                inputSpacing: 5,\n                /**\n                 * The index of the button to appear pre-selected.\n                 *\n                 * @type      {number}\n                 */\n                selected: void 0,\n                /**\n                 * Positioning for the button row.\n                 *\n                 * @since 1.2.4\n                 */\n                buttonPosition: {\n                    /**\n                     * The alignment of the input box. Allowed properties are `left`,\n                     * `center`, `right`.\n                     *\n                     * @sample {highstock} stock/rangeselector/input-button-position/\n                     *         Alignment\n                     *\n                     * @type  {Highcharts.AlignValue}\n                     * @since 6.0.0\n                     */\n                    align: 'left',\n                    /**\n                     * X offset of the button row.\n                     */\n                    x: 0,\n                    /**\n                     * Y offset of the button row.\n                     */\n                    y: 0\n                },\n                /**\n                 * CSS for the HTML inputs in the range selector.\n                 *\n                 * In styled mode, the inputs are styled by the\n                 * `.highcharts-range-input text` rule in SVG mode, and\n                 * `input.highcharts-range-selector` when active.\n                 *\n                 * @sample {highstock} stock/rangeselector/styling/\n                 *         Styling the buttons and inputs\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @apioption rangeSelector.inputStyle\n                 */\n                inputStyle: {\n                    /** @ignore */\n                    color: \"#335cad\" /* highlightColor80 */,\n                    /** @ignore */\n                    cursor: 'pointer'\n                },\n                /**\n                 * CSS styles for the labels - the Zoom, From and To texts.\n                 *\n                 * In styled mode, the labels are styled by the\n                 * `.highcharts-range-label` class.\n                 *\n                 * @sample {highstock} stock/rangeselector/styling/\n                 *         Styling the buttons and inputs\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                labelStyle: {\n                    /** @ignore */\n                    color: \"#666666\" /* neutralColor60 */\n                }\n            }\n        });\n        extend(defaultOptions.lang, \n        /**\n         * Language object. The language object is global and it can't be set\n         * on each chart initialization. Instead, use `Highcharts.setOptions` to\n         * set it before any chart is initialized.\n         *\n         * ```js\n         * Highcharts.setOptions({\n         *     lang: {\n         *         months: [\n         *             'Janvier', 'Février', 'Mars', 'Avril',\n         *             'Mai', 'Juin', 'Juillet', 'Août',\n         *             'Septembre', 'Octobre', 'Novembre', 'Décembre'\n         *         ],\n         *         weekdays: [\n         *             'Dimanche', 'Lundi', 'Mardi', 'Mercredi',\n         *             'Jeudi', 'Vendredi', 'Samedi'\n         *         ]\n         *     }\n         * });\n         * ```\n         *\n         * @optionparent lang\n         */\n        {\n            /**\n             * The text for the label for the range selector buttons.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorZoom: 'Zoom',\n            /**\n             * The text for the label for the \"from\" input box in the range\n             * selector. Since v9.0, this string is empty as the label is not\n             * rendered by default.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorFrom: '',\n            /**\n             * The text for the label for the \"to\" input box in the range selector.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorTo: '→'\n        });\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * The range selector.\n         *\n         * @private\n         * @class\n         * @name Highcharts.RangeSelector\n         * @param {Highcharts.Chart} chart\n         */\n        var RangeSelector = /** @class */ (function () {\n                function RangeSelector(chart) {\n                    /* *\n                     *\n                     * Properties\n                     *\n                     * */\n                    this.buttons = void 0;\n                this.buttonOptions = RangeSelector.prototype.defaultButtons;\n                this.initialButtonGroupWidth = 0;\n                this.options = void 0;\n                this.chart = chart;\n                // Run RangeSelector\n                this.init(chart);\n            }\n            /**\n             * The method to run when one of the buttons in the range selectors is\n             * clicked\n             *\n             * @private\n             * @function Highcharts.RangeSelector#clickButton\n             * @param {number} i\n             *        The index of the button\n             * @param {boolean} [redraw]\n             */\n            RangeSelector.prototype.clickButton = function (i, redraw) {\n                var rangeSelector = this,\n                    chart = rangeSelector.chart,\n                    rangeOptions = rangeSelector.buttonOptions[i],\n                    baseAxis = chart.xAxis[0],\n                    unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || baseAxis || {},\n                    dataMin = unionExtremes.dataMin,\n                    dataMax = unionExtremes.dataMax,\n                    newMin,\n                    newMax = baseAxis && Math.round(Math.min(baseAxis.max,\n                    pick(dataMax,\n                    baseAxis.max))), // #1568\n                    type = rangeOptions.type,\n                    baseXAxisOptions,\n                    range = rangeOptions._range,\n                    rangeMin,\n                    minSetting,\n                    rangeSetting,\n                    ctx,\n                    ytdExtremes,\n                    dataGrouping = rangeOptions.dataGrouping;\n                // chart has no data, base series is removed\n                if (dataMin === null || dataMax === null) {\n                    return;\n                }\n                // Set the fixed range before range is altered\n                chart.fixedRange = range;\n                rangeSelector.setSelected(i);\n                // Apply dataGrouping associated to button\n                if (dataGrouping) {\n                    this.forcedDataGrouping = true;\n                    Axis.prototype.setDataGrouping.call(baseAxis || { chart: this.chart }, dataGrouping, false);\n                    this.frozenStates = rangeOptions.preserveDataGrouping;\n                }\n                // Apply range\n                if (type === 'month' || type === 'year') {\n                    if (!baseAxis) {\n                        // This is set to the user options and picked up later when the\n                        // axis is instantiated so that we know the min and max.\n                        range = rangeOptions;\n                    }\n                    else {\n                        ctx = {\n                            range: rangeOptions,\n                            max: newMax,\n                            chart: chart,\n                            dataMin: dataMin,\n                            dataMax: dataMax\n                        };\n                        newMin = baseAxis.minFromRange.call(ctx);\n                        if (isNumber(ctx.newMax)) {\n                            newMax = ctx.newMax;\n                        }\n                    }\n                    // Fixed times like minutes, hours, days\n                }\n                else if (range) {\n                    newMin = Math.max(newMax - range, dataMin);\n                    newMax = Math.min(newMin + range, dataMax);\n                }\n                else if (type === 'ytd') {\n                    // On user clicks on the buttons, or a delayed action running from\n                    // the beforeRender event (below), the baseAxis is defined.\n                    if (baseAxis) {\n                        // When \"ytd\" is the pre-selected button for the initial view,\n                        // its calculation is delayed and rerun in the beforeRender\n                        // event (below). When the series are initialized, but before\n                        // the chart is rendered, we have access to the xData array\n                        // (#942).\n                        if (typeof dataMax === 'undefined') {\n                            dataMin = Number.MAX_VALUE;\n                            dataMax = Number.MIN_VALUE;\n                            chart.series.forEach(function (series) {\n                                // reassign it to the last item\n                                var xData = series.xData;\n                                dataMin = Math.min(xData[0], dataMin);\n                                dataMax = Math.max(xData[xData.length - 1], dataMax);\n                            });\n                            redraw = false;\n                        }\n                        ytdExtremes = rangeSelector.getYTDExtremes(dataMax, dataMin, chart.time.useUTC);\n                        newMin = rangeMin = ytdExtremes.min;\n                        newMax = ytdExtremes.max;\n                        // \"ytd\" is pre-selected. We don't yet have access to processed\n                        // point and extremes data (things like pointStart and pointInterval\n                        // are missing), so we delay the process (#942)\n                    }\n                    else {\n                        rangeSelector.deferredYTDClick = i;\n                        return;\n                    }\n                }\n                else if (type === 'all' && baseAxis) {\n                    // If the navigator exist and the axis range is declared reset that\n                    // range and from now on only use the range set by a user, #14742.\n                    if (chart.navigator && chart.navigator.baseSeries[0]) {\n                        chart.navigator.baseSeries[0].xAxis.options\n                            .range = void 0;\n                    }\n                    newMin = dataMin;\n                    newMax = dataMax;\n                }\n                if (defined(newMin)) {\n                    newMin += rangeOptions._offsetMin;\n                }\n                if (defined(newMax)) {\n                    newMax += rangeOptions._offsetMax;\n                }\n                if (this.dropdown) {\n                    this.dropdown.selectedIndex = i + 1;\n                }\n                // Update the chart\n                if (!baseAxis) {\n                    // Axis not yet instanciated. Temporarily set min and range\n                    // options and remove them on chart load (#4317).\n                    baseXAxisOptions = splat(chart.options.xAxis)[0];\n                    rangeSetting = baseXAxisOptions.range;\n                    baseXAxisOptions.range = range;\n                    minSetting = baseXAxisOptions.min;\n                    baseXAxisOptions.min = rangeMin;\n                    addEvent(chart, 'load', function resetMinAndRange() {\n                        baseXAxisOptions.range = rangeSetting;\n                        baseXAxisOptions.min = minSetting;\n                    });\n                }\n                else {\n                    // Existing axis object. Set extremes after render time.\n                    baseAxis.setExtremes(newMin, newMax, pick(redraw, true), void 0, // auto animation\n                    {\n                        trigger: 'rangeSelectorButton',\n                        rangeSelectorButton: rangeOptions\n                    });\n                }\n                fireEvent(this, 'afterBtnClick');\n            };\n            /**\n             * Set the selected option. This method only sets the internal flag, it\n             * doesn't update the buttons or the actual zoomed range.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setSelected\n             * @param {number} [selected]\n             */\n            RangeSelector.prototype.setSelected = function (selected) {\n                this.selected = this.options.selected = selected;\n            };\n            /**\n             * Initialize the range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#init\n             * @param {Highcharts.Chart} chart\n             */\n            RangeSelector.prototype.init = function (chart) {\n                var rangeSelector = this,\n                    options = chart.options.rangeSelector,\n                    buttonOptions = (options.buttons || rangeSelector.defaultButtons.slice()),\n                    selectedOption = options.selected,\n                    blurInputs = function () {\n                        var minInput = rangeSelector.minInput,\n                    maxInput = rangeSelector.maxInput;\n                    // #3274 in some case blur is not defined\n                    if (minInput && minInput.blur) {\n                        fireEvent(minInput, 'blur');\n                    }\n                    if (maxInput && maxInput.blur) {\n                        fireEvent(maxInput, 'blur');\n                    }\n                };\n                rangeSelector.chart = chart;\n                rangeSelector.options = options;\n                rangeSelector.buttons = [];\n                rangeSelector.buttonOptions = buttonOptions;\n                this.eventsToUnbind = [];\n                this.eventsToUnbind.push(addEvent(chart.container, 'mousedown', blurInputs));\n                this.eventsToUnbind.push(addEvent(chart, 'resize', blurInputs));\n                // Extend the buttonOptions with actual range\n                buttonOptions.forEach(rangeSelector.computeButtonRange);\n                // zoomed range based on a pre-selected button index\n                if (typeof selectedOption !== 'undefined' &&\n                    buttonOptions[selectedOption]) {\n                    this.clickButton(selectedOption, false);\n                }\n                this.eventsToUnbind.push(addEvent(chart, 'load', function () {\n                    // If a data grouping is applied to the current button, release it\n                    // when extremes change\n                    if (chart.xAxis && chart.xAxis[0]) {\n                        addEvent(chart.xAxis[0], 'setExtremes', function (e) {\n                            if (this.max - this.min !==\n                                chart.fixedRange &&\n                                e.trigger !== 'rangeSelectorButton' &&\n                                e.trigger !== 'updatedData' &&\n                                rangeSelector.forcedDataGrouping &&\n                                !rangeSelector.frozenStates) {\n                                this.setDataGrouping(false, false);\n                            }\n                        });\n                    }\n                }));\n            };\n            /**\n             * Dynamically update the range selector buttons after a new range has been\n             * set\n             *\n             * @private\n             * @function Highcharts.RangeSelector#updateButtonStates\n             */\n            RangeSelector.prototype.updateButtonStates = function () {\n                var rangeSelector = this,\n                    chart = this.chart,\n                    dropdown = this.dropdown,\n                    baseAxis = chart.xAxis[0],\n                    actualRange = Math.round(baseAxis.max - baseAxis.min),\n                    hasNoData = !baseAxis.hasVisibleSeries,\n                    day = 24 * 36e5, // A single day in milliseconds\n                    unionExtremes = (chart.scroller &&\n                        chart.scroller.getUnionExtremes()) || baseAxis,\n                    dataMin = unionExtremes.dataMin,\n                    dataMax = unionExtremes.dataMax,\n                    ytdExtremes = rangeSelector.getYTDExtremes(dataMax,\n                    dataMin,\n                    chart.time.useUTC),\n                    ytdMin = ytdExtremes.min,\n                    ytdMax = ytdExtremes.max,\n                    selected = rangeSelector.selected,\n                    selectedExists = isNumber(selected),\n                    allButtonsEnabled = rangeSelector.options.allButtonsEnabled,\n                    buttons = rangeSelector.buttons;\n                rangeSelector.buttonOptions.forEach(function (rangeOptions, i) {\n                    var range = rangeOptions._range,\n                        type = rangeOptions.type,\n                        count = rangeOptions.count || 1,\n                        button = buttons[i],\n                        state = 0,\n                        disable,\n                        select,\n                        offsetRange = rangeOptions._offsetMax -\n                            rangeOptions._offsetMin,\n                        isSelected = i === selected, \n                        // Disable buttons where the range exceeds what is allowed in\n                        // the current view\n                        isTooGreatRange = range >\n                            dataMax - dataMin, \n                        // Disable buttons where the range is smaller than the minimum\n                        // range\n                        isTooSmallRange = range < baseAxis.minRange, \n                        // Do not select the YTD button if not explicitly told so\n                        isYTDButNotSelected = false, \n                        // Disable the All button if we're already showing all\n                        isAllButAlreadyShowingAll = false,\n                        isSameRange = range === actualRange;\n                    // Months and years have a variable range so we check the extremes\n                    if ((type === 'month' || type === 'year') &&\n                        (actualRange + 36e5 >=\n                            { month: 28, year: 365 }[type] * day * count - offsetRange) &&\n                        (actualRange - 36e5 <=\n                            { month: 31, year: 366 }[type] * day * count + offsetRange)) {\n                        isSameRange = true;\n                    }\n                    else if (type === 'ytd') {\n                        isSameRange = (ytdMax - ytdMin + offsetRange) === actualRange;\n                        isYTDButNotSelected = !isSelected;\n                    }\n                    else if (type === 'all') {\n                        isSameRange = (baseAxis.max - baseAxis.min >=\n                            dataMax - dataMin);\n                        isAllButAlreadyShowingAll = (!isSelected &&\n                            selectedExists &&\n                            isSameRange);\n                    }\n                    // The new zoom area happens to match the range for a button - mark\n                    // it selected. This happens when scrolling across an ordinal gap.\n                    // It can be seen in the intraday demos when selecting 1h and scroll\n                    // across the night gap.\n                    disable = (!allButtonsEnabled &&\n                        (isTooGreatRange ||\n                            isTooSmallRange ||\n                            isAllButAlreadyShowingAll ||\n                            hasNoData));\n                    select = ((isSelected && isSameRange) ||\n                        (isSameRange && !selectedExists && !isYTDButNotSelected) ||\n                        (isSelected && rangeSelector.frozenStates));\n                    if (disable) {\n                        state = 3;\n                    }\n                    else if (select) {\n                        selectedExists = true; // Only one button can be selected\n                        state = 2;\n                    }\n                    // If state has changed, update the button\n                    if (button.state !== state) {\n                        button.setState(state);\n                        if (dropdown) {\n                            dropdown.options[i + 1].disabled = disable;\n                            if (state === 2) {\n                                dropdown.selectedIndex = i + 1;\n                            }\n                        }\n                        // Reset (#9209)\n                        if (state === 0 && selected === i) {\n                            rangeSelector.setSelected();\n                        }\n                    }\n                });\n            };\n            /**\n             * Compute and cache the range for an individual button\n             *\n             * @private\n             * @function Highcharts.RangeSelector#computeButtonRange\n             * @param {Highcharts.RangeSelectorButtonsOptions} rangeOptions\n             */\n            RangeSelector.prototype.computeButtonRange = function (rangeOptions) {\n                var type = rangeOptions.type,\n                    count = rangeOptions.count || 1, \n                    // these time intervals have a fixed number of milliseconds, as\n                    // opposed to month, ytd and year\n                    fixedTimes = {\n                        millisecond: 1,\n                        second: 1000,\n                        minute: 60 * 1000,\n                        hour: 3600 * 1000,\n                        day: 24 * 3600 * 1000,\n                        week: 7 * 24 * 3600 * 1000\n                    };\n                // Store the range on the button object\n                if (fixedTimes[type]) {\n                    rangeOptions._range = fixedTimes[type] * count;\n                }\n                else if (type === 'month' || type === 'year') {\n                    rangeOptions._range = {\n                        month: 30,\n                        year: 365\n                    }[type] * 24 * 36e5 * count;\n                }\n                rangeOptions._offsetMin = pick(rangeOptions.offsetMin, 0);\n                rangeOptions._offsetMax = pick(rangeOptions.offsetMax, 0);\n                rangeOptions._range +=\n                    rangeOptions._offsetMax - rangeOptions._offsetMin;\n            };\n            /**\n             * Get the unix timestamp of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getInputValue\n             */\n            RangeSelector.prototype.getInputValue = function (name) {\n                var input = name === 'min' ? this.minInput : this.maxInput;\n                var options = this.chart.options\n                        .rangeSelector;\n                var time = this.chart.time;\n                if (input) {\n                    return ((input.type === 'text' && options.inputDateParser) ||\n                        this.defaultInputDateParser)(input.value, time.useUTC, time);\n                }\n                return 0;\n            };\n            /**\n             * Set the internal and displayed value of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setInputValue\n             */\n            RangeSelector.prototype.setInputValue = function (name, inputTime) {\n                var options = this.options, time = this.chart.time, input = name === 'min' ? this.minInput : this.maxInput, dateBox = name === 'min' ? this.minDateBox : this.maxDateBox;\n                if (input) {\n                    var hcTimeAttr = input.getAttribute('data-hc-time');\n                    var updatedTime = defined(hcTimeAttr) ? Number(hcTimeAttr) : void 0;\n                    if (defined(inputTime)) {\n                        var previousTime = updatedTime;\n                        if (defined(previousTime)) {\n                            input.setAttribute('data-hc-time-previous', previousTime);\n                        }\n                        input.setAttribute('data-hc-time', inputTime);\n                        updatedTime = inputTime;\n                    }\n                    input.value = time.dateFormat((this.inputTypeFormats[input.type] ||\n                        options.inputEditDateFormat), updatedTime);\n                    if (dateBox) {\n                        dateBox.attr({\n                            text: time.dateFormat(options.inputDateFormat, updatedTime)\n                        });\n                    }\n                }\n            };\n            /**\n             * Set the min and max value of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setInputExtremes\n             */\n            RangeSelector.prototype.setInputExtremes = function (name, min, max) {\n                var input = name === 'min' ? this.minInput : this.maxInput;\n                if (input) {\n                    var format = this.inputTypeFormats[input.type];\n                    var time = this.chart.time;\n                    if (format) {\n                        var newMin = time.dateFormat(format,\n                            min);\n                        if (input.min !== newMin) {\n                            input.min = newMin;\n                        }\n                        var newMax = time.dateFormat(format,\n                            max);\n                        if (input.max !== newMax) {\n                            input.max = newMax;\n                        }\n                    }\n                }\n            };\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#showInput\n             * @param {string} name\n             */\n            RangeSelector.prototype.showInput = function (name) {\n                var dateBox = name === 'min' ? this.minDateBox : this.maxDateBox;\n                var input = name === 'min' ? this.minInput : this.maxInput;\n                if (input && dateBox && this.inputGroup) {\n                    var isTextInput = input.type === 'text';\n                    var _a = this.inputGroup,\n                        translateX = _a.translateX,\n                        translateY = _a.translateY;\n                    var inputBoxWidth = this.options.inputBoxWidth;\n                    css(input, {\n                        width: isTextInput ?\n                            ((dateBox.width + (inputBoxWidth ? -2 : 20)) + 'px') :\n                            'auto',\n                        height: isTextInput ? ((dateBox.height - 2) + 'px') : 'auto',\n                        border: '2px solid silver'\n                    });\n                    if (isTextInput && inputBoxWidth) {\n                        css(input, {\n                            left: (translateX + dateBox.x) + 'px',\n                            top: translateY + 'px'\n                        });\n                        // Inputs of types date, time or datetime-local should be centered\n                        // on top of the dateBox\n                    }\n                    else {\n                        css(input, {\n                            left: Math.min(Math.round(dateBox.x +\n                                translateX -\n                                (input.offsetWidth - dateBox.width) / 2), this.chart.chartWidth - input.offsetWidth) + 'px',\n                            top: (translateY - (input.offsetHeight - dateBox.height) / 2) + 'px'\n                        });\n                    }\n                }\n            };\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#hideInput\n             * @param {string} name\n             */\n            RangeSelector.prototype.hideInput = function (name) {\n                var input = name === 'min' ? this.minInput : this.maxInput;\n                if (input) {\n                    css(input, {\n                        top: '-9999em',\n                        border: 0,\n                        width: '1px',\n                        height: '1px'\n                    });\n                }\n            };\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#defaultInputDateParser\n             */\n            RangeSelector.prototype.defaultInputDateParser = function (inputDate, useUTC, time) {\n                var hasTimezone = function (str) {\n                        return str.length > 6 &&\n                            (str.lastIndexOf('-') === str.length - 6 ||\n                                str.lastIndexOf('+') === str.length - 6);\n                };\n                var input = inputDate.split('/').join('-').split(' ').join('T');\n                if (input.indexOf('T') === -1) {\n                    input += 'T00:00';\n                }\n                if (useUTC) {\n                    input += 'Z';\n                }\n                else if (H.isSafari && !hasTimezone(input)) {\n                    var offset = new Date(input).getTimezoneOffset() / 60;\n                    input += offset <= 0 ? \"+\" + pad(-offset) + \":00\" : \"-\" + pad(offset) + \":00\";\n                }\n                var date = Date.parse(input);\n                // If the value isn't parsed directly to a value by the\n                // browser's Date.parse method, like YYYY-MM-DD in IE8, try\n                // parsing it a different way\n                if (!isNumber(date)) {\n                    var parts = inputDate.split('-');\n                    date = Date.UTC(pInt(parts[0]), pInt(parts[1]) - 1, pInt(parts[2]));\n                }\n                if (time && useUTC && isNumber(date)) {\n                    date += time.getTimezoneOffset(date);\n                }\n                return date;\n            };\n            /**\n             * Draw either the 'from' or the 'to' HTML input box of the range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#drawInput\n             */\n            RangeSelector.prototype.drawInput = function (name) {\n                var _a = this,\n                    chart = _a.chart,\n                    div = _a.div,\n                    inputGroup = _a.inputGroup;\n                var rangeSelector = this,\n                    chartStyle = chart.renderer.style || {},\n                    renderer = chart.renderer,\n                    options = chart.options.rangeSelector,\n                    lang = defaultOptions.lang,\n                    isMin = name === 'min';\n                /**\n                 * @private\n                 */\n                function updateExtremes() {\n                    var value = rangeSelector.getInputValue(name),\n                        chartAxis = chart.xAxis[0],\n                        dataAxis = chart.scroller && chart.scroller.xAxis ?\n                            chart.scroller.xAxis :\n                            chartAxis,\n                        dataMin = dataAxis.dataMin,\n                        dataMax = dataAxis.dataMax;\n                    var maxInput = rangeSelector.maxInput,\n                        minInput = rangeSelector.minInput;\n                    if (value !== Number(input.getAttribute('data-hc-time-previous')) &&\n                        isNumber(value)) {\n                        input.setAttribute('data-hc-time-previous', value);\n                        // Validate the extremes. If it goes beyound the data min or\n                        // max, use the actual data extreme (#2438).\n                        if (isMin && maxInput && isNumber(dataMin)) {\n                            if (value > Number(maxInput.getAttribute('data-hc-time'))) {\n                                value = void 0;\n                            }\n                            else if (value < dataMin) {\n                                value = dataMin;\n                            }\n                        }\n                        else if (minInput && isNumber(dataMax)) {\n                            if (value < Number(minInput.getAttribute('data-hc-time'))) {\n                                value = void 0;\n                            }\n                            else if (value > dataMax) {\n                                value = dataMax;\n                            }\n                        }\n                        // Set the extremes\n                        if (typeof value !== 'undefined') { // @todo typof undefined\n                            chartAxis.setExtremes(isMin ? value : chartAxis.min, isMin ? chartAxis.max : value, void 0, void 0, { trigger: 'rangeSelectorInput' });\n                        }\n                    }\n                }\n                // Create the text label\n                var text = lang[isMin ? 'rangeSelectorFrom' : 'rangeSelectorTo'] || '';\n                var label = renderer\n                        .label(text, 0)\n                        .addClass('highcharts-range-label')\n                        .attr({\n                        padding: text ? 2 : 0,\n                        height: text ? options.inputBoxHeight : 0\n                    })\n                        .add(inputGroup);\n                // Create an SVG label that shows updated date ranges and and records\n                // click events that bring in the HTML input.\n                var dateBox = renderer\n                        .label('', 0)\n                        .addClass('highcharts-range-input')\n                        .attr({\n                        padding: 2,\n                        width: options.inputBoxWidth,\n                        height: options.inputBoxHeight,\n                        'text-align': 'center'\n                    })\n                        .on('click',\n                    function () {\n                        // If it is already focused, the onfocus event doesn't fire\n                        // (#3713)\n                        rangeSelector.showInput(name);\n                    rangeSelector[name + 'Input'].focus();\n                });\n                if (!chart.styledMode) {\n                    dateBox.attr({\n                        stroke: options.inputBoxBorderColor,\n                        'stroke-width': 1\n                    });\n                }\n                dateBox.add(inputGroup);\n                // Create the HTML input element. This is rendered as 1x1 pixel then set\n                // to the right size when focused.\n                var input = createElement('input', {\n                        name: name,\n                        className: 'highcharts-range-selector'\n                    },\n                    void 0,\n                    div);\n                // #14788: Setting input.type to an unsupported type throws in IE, so\n                // we need to use setAttribute instead\n                input.setAttribute('type', preferredInputType(options.inputDateFormat || '%b %e, %Y'));\n                if (!chart.styledMode) {\n                    // Styles\n                    label.css(merge(chartStyle, options.labelStyle));\n                    dateBox.css(merge({\n                        color: \"#333333\" /* neutralColor80 */\n                    }, chartStyle, options.inputStyle));\n                    css(input, extend({\n                        position: 'absolute',\n                        border: 0,\n                        boxShadow: '0 0 15px rgba(0,0,0,0.3)',\n                        width: '1px',\n                        height: '1px',\n                        padding: 0,\n                        textAlign: 'center',\n                        fontSize: chartStyle.fontSize,\n                        fontFamily: chartStyle.fontFamily,\n                        top: '-9999em' // #4798\n                    }, options.inputStyle));\n                }\n                // Blow up the input box\n                input.onfocus = function () {\n                    rangeSelector.showInput(name);\n                };\n                // Hide away the input box\n                input.onblur = function () {\n                    // update extermes only when inputs are active\n                    if (input === H.doc.activeElement) { // Only when focused\n                        // Update also when no `change` event is triggered, like when\n                        // clicking inside the SVG (#4710)\n                        updateExtremes();\n                    }\n                    // #10404 - move hide and blur outside focus\n                    rangeSelector.hideInput(name);\n                    rangeSelector.setInputValue(name);\n                    input.blur(); // #4606\n                };\n                var keyDown = false;\n                // handle changes in the input boxes\n                input.onchange = function () {\n                    // Update extremes and blur input when clicking date input calendar\n                    if (!keyDown) {\n                        updateExtremes();\n                        rangeSelector.hideInput(name);\n                        input.blur();\n                    }\n                };\n                input.onkeypress = function (event) {\n                    // IE does not fire onchange on enter\n                    if (event.keyCode === 13) {\n                        updateExtremes();\n                    }\n                };\n                input.onkeydown = function (event) {\n                    keyDown = true;\n                    // Arrow keys\n                    if (event.keyCode === 38 || event.keyCode === 40) {\n                        updateExtremes();\n                    }\n                };\n                input.onkeyup = function () {\n                    keyDown = false;\n                };\n                return { dateBox: dateBox, input: input, label: label };\n            };\n            /**\n             * Get the position of the range selector buttons and inputs. This can be\n             * overridden from outside for custom positioning.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getPosition\n             */\n            RangeSelector.prototype.getPosition = function () {\n                var chart = this.chart,\n                    options = chart.options.rangeSelector,\n                    top = options.verticalAlign === 'top' ?\n                        chart.plotTop - chart.axisOffset[0] :\n                        0; // set offset only for varticalAlign top\n                    return {\n                        buttonTop: top + options.buttonPosition.y,\n                        inputTop: top + options.inputPosition.y - 10\n                    };\n            };\n            /**\n             * Get the extremes of YTD. Will choose dataMax if its value is lower than\n             * the current timestamp. Will choose dataMin if its value is higher than\n             * the timestamp for the start of current year.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getYTDExtremes\n             * @return {*}\n             * Returns min and max for the YTD\n             */\n            RangeSelector.prototype.getYTDExtremes = function (dataMax, dataMin, useUTC) {\n                var time = this.chart.time,\n                    min,\n                    now = new time.Date(dataMax),\n                    year = time.get('FullYear',\n                    now),\n                    startOfYear = useUTC ?\n                        time.Date.UTC(year, 0, 1) : // eslint-disable-line new-cap\n                        +new time.Date(year, 0, 1);\n                min = Math.max(dataMin, startOfYear);\n                var ts = now.getTime();\n                return {\n                    max: Math.min(dataMax || ts, ts),\n                    min: min\n                };\n            };\n            /**\n             * Render the range selector including the buttons and the inputs. The first\n             * time render is called, the elements are created and positioned. On\n             * subsequent calls, they are moved and updated.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#render\n             * @param {number} [min]\n             *        X axis minimum\n             * @param {number} [max]\n             *        X axis maximum\n             */\n            RangeSelector.prototype.render = function (min, max) {\n                var chart = this.chart,\n                    renderer = chart.renderer,\n                    container = chart.container,\n                    chartOptions = chart.options,\n                    options = chartOptions.rangeSelector, \n                    // Place inputs above the container\n                    inputsZIndex = pick(chartOptions.chart.style &&\n                        chartOptions.chart.style.zIndex, 0) + 1,\n                    inputEnabled = options.inputEnabled,\n                    rendered = this.rendered;\n                if (options.enabled === false) {\n                    return;\n                }\n                // create the elements\n                if (!rendered) {\n                    this.group = renderer.g('range-selector-group')\n                        .attr({\n                        zIndex: 7\n                    })\n                        .add();\n                    this.div = createElement('div', void 0, {\n                        position: 'relative',\n                        height: 0,\n                        zIndex: inputsZIndex\n                    });\n                    if (this.buttonOptions.length) {\n                        this.renderButtons();\n                    }\n                    // First create a wrapper outside the container in order to make\n                    // the inputs work and make export correct\n                    if (container.parentNode) {\n                        container.parentNode.insertBefore(this.div, container);\n                    }\n                    if (inputEnabled) {\n                        // Create the group to keep the inputs\n                        this.inputGroup = renderer.g('input-group').add(this.group);\n                        var minElems = this.drawInput('min');\n                        this.minDateBox = minElems.dateBox;\n                        this.minLabel = minElems.label;\n                        this.minInput = minElems.input;\n                        var maxElems = this.drawInput('max');\n                        this.maxDateBox = maxElems.dateBox;\n                        this.maxLabel = maxElems.label;\n                        this.maxInput = maxElems.input;\n                    }\n                }\n                if (inputEnabled) {\n                    // Set or reset the input values\n                    this.setInputValue('min', min);\n                    this.setInputValue('max', max);\n                    var unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || chart.xAxis[0] || {};\n                    if (defined(unionExtremes.dataMin) &&\n                        defined(unionExtremes.dataMax)) {\n                        var minRange = chart.xAxis[0].minRange || 0;\n                        this.setInputExtremes('min', unionExtremes.dataMin, Math.min(unionExtremes.dataMax, this.getInputValue('max')) - minRange);\n                        this.setInputExtremes('max', Math.max(unionExtremes.dataMin, this.getInputValue('min')) + minRange, unionExtremes.dataMax);\n                    }\n                    // Reflow\n                    if (this.inputGroup) {\n                        var x_1 = 0;\n                        [\n                            this.minLabel,\n                            this.minDateBox,\n                            this.maxLabel,\n                            this.maxDateBox\n                        ].forEach(function (label) {\n                            if (label) {\n                                var width = label.getBBox().width;\n                                if (width) {\n                                    label.attr({ x: x_1 });\n                                    x_1 += width + options.inputSpacing;\n                                }\n                            }\n                        });\n                    }\n                }\n                this.alignElements();\n                this.rendered = true;\n            };\n            /**\n             * Render the range buttons. This only runs the first time, later the\n             * positioning is laid out in alignElements.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#renderButtons\n             */\n            RangeSelector.prototype.renderButtons = function () {\n                var _this = this;\n                var _a = this,\n                    buttons = _a.buttons,\n                    chart = _a.chart,\n                    options = _a.options;\n                var lang = defaultOptions.lang;\n                var renderer = chart.renderer;\n                var buttonTheme = merge(options.buttonTheme);\n                var states = buttonTheme && buttonTheme.states;\n                // Prevent the button from resetting the width when the button state\n                // changes since we need more control over the width when collapsing\n                // the buttons\n                var width = buttonTheme.width || 28;\n                delete buttonTheme.width;\n                delete buttonTheme.states;\n                this.buttonGroup = renderer.g('range-selector-buttons').add(this.group);\n                var dropdown = this.dropdown = createElement('select',\n                    void 0, {\n                        position: 'absolute',\n                        width: '1px',\n                        height: '1px',\n                        padding: 0,\n                        border: 0,\n                        top: '-9999em',\n                        cursor: 'pointer',\n                        opacity: 0.0001\n                    },\n                    this.div);\n                // Prevent page zoom on iPhone\n                addEvent(dropdown, 'touchstart', function () {\n                    dropdown.style.fontSize = '16px';\n                });\n                // Forward events from select to button\n                [\n                    [H.isMS ? 'mouseover' : 'mouseenter'],\n                    [H.isMS ? 'mouseout' : 'mouseleave'],\n                    ['change', 'click']\n                ].forEach(function (_a) {\n                    var from = _a[0],\n                        to = _a[1];\n                    addEvent(dropdown, from, function () {\n                        var button = buttons[_this.currentButtonIndex()];\n                        if (button) {\n                            fireEvent(button.element, to || from);\n                        }\n                    });\n                });\n                this.zoomText = renderer\n                    .label((lang && lang.rangeSelectorZoom) || '', 0)\n                    .attr({\n                    padding: options.buttonTheme.padding,\n                    height: options.buttonTheme.height,\n                    paddingLeft: 0,\n                    paddingRight: 0\n                })\n                    .add(this.buttonGroup);\n                if (!this.chart.styledMode) {\n                    this.zoomText.css(options.labelStyle);\n                    buttonTheme['stroke-width'] = pick(buttonTheme['stroke-width'], 0);\n                }\n                createElement('option', {\n                    textContent: this.zoomText.textStr,\n                    disabled: true\n                }, void 0, dropdown);\n                this.buttonOptions.forEach(function (rangeOptions, i) {\n                    createElement('option', {\n                        textContent: rangeOptions.title || rangeOptions.text\n                    }, void 0, dropdown);\n                    buttons[i] = renderer\n                        .button(rangeOptions.text, 0, 0, function (e) {\n                        // extract events from button object and call\n                        var buttonEvents = (rangeOptions.events &&\n                                rangeOptions.events.click),\n                            callDefaultEvent;\n                        if (buttonEvents) {\n                            callDefaultEvent =\n                                buttonEvents.call(rangeOptions, e);\n                        }\n                        if (callDefaultEvent !== false) {\n                            _this.clickButton(i);\n                        }\n                        _this.isActive = true;\n                    }, buttonTheme, states && states.hover, states && states.select, states && states.disabled)\n                        .attr({\n                        'text-align': 'center',\n                        width: width\n                    })\n                        .add(_this.buttonGroup);\n                    if (rangeOptions.title) {\n                        buttons[i].attr('title', rangeOptions.title);\n                    }\n                });\n            };\n            /**\n             * Align the elements horizontally and vertically.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#alignElements\n             */\n            RangeSelector.prototype.alignElements = function () {\n                var _this = this;\n                var _a = this,\n                    buttonGroup = _a.buttonGroup,\n                    buttons = _a.buttons,\n                    chart = _a.chart,\n                    group = _a.group,\n                    inputGroup = _a.inputGroup,\n                    options = _a.options,\n                    zoomText = _a.zoomText;\n                var chartOptions = chart.options;\n                var navButtonOptions = (chartOptions.exporting &&\n                        chartOptions.exporting.enabled !== false &&\n                        chartOptions.navigation &&\n                        chartOptions.navigation.buttonOptions);\n                var buttonPosition = options.buttonPosition,\n                    inputPosition = options.inputPosition,\n                    verticalAlign = options.verticalAlign;\n                // Get the X offset required to avoid overlapping with the exporting\n                // button. This is is used both by the buttonGroup and the inputGroup.\n                var getXOffsetForExportButton = function (group,\n                    position) {\n                        if (navButtonOptions &&\n                            _this.titleCollision(chart) &&\n                            verticalAlign === 'top' &&\n                            position.align === 'right' && ((position.y -\n                            group.getBBox().height - 12) <\n                            ((navButtonOptions.y || 0) +\n                                (navButtonOptions.height || 0) +\n                                chart.spacing[0]))) {\n                            return -40;\n                    }\n                    return 0;\n                };\n                var plotLeft = chart.plotLeft;\n                if (group && buttonPosition && inputPosition) {\n                    var translateX = buttonPosition.x - chart.spacing[3];\n                    if (buttonGroup) {\n                        this.positionButtons();\n                        if (!this.initialButtonGroupWidth) {\n                            var width_1 = 0;\n                            if (zoomText) {\n                                width_1 += zoomText.getBBox().width + 5;\n                            }\n                            buttons.forEach(function (button, i) {\n                                width_1 += button.width;\n                                if (i !== buttons.length - 1) {\n                                    width_1 += options.buttonSpacing;\n                                }\n                            });\n                            this.initialButtonGroupWidth = width_1;\n                        }\n                        plotLeft -= chart.spacing[3];\n                        this.updateButtonStates();\n                        // Detect collision between button group and exporting\n                        var xOffsetForExportButton_1 = getXOffsetForExportButton(buttonGroup,\n                            buttonPosition);\n                        this.alignButtonGroup(xOffsetForExportButton_1);\n                        // Skip animation\n                        group.placed = buttonGroup.placed = chart.hasLoaded;\n                    }\n                    var xOffsetForExportButton = 0;\n                    if (inputGroup) {\n                        // Detect collision between the input group and exporting button\n                        xOffsetForExportButton = getXOffsetForExportButton(inputGroup, inputPosition);\n                        if (inputPosition.align === 'left') {\n                            translateX = plotLeft;\n                        }\n                        else if (inputPosition.align === 'right') {\n                            translateX = -Math.max(chart.axisOffset[1], -xOffsetForExportButton);\n                        }\n                        // Update the alignment to the updated spacing box\n                        inputGroup.align({\n                            y: inputPosition.y,\n                            width: inputGroup.getBBox().width,\n                            align: inputPosition.align,\n                            // fix wrong getBBox() value on right align\n                            x: inputPosition.x + translateX - 2\n                        }, true, chart.spacingBox);\n                        // Skip animation\n                        inputGroup.placed = chart.hasLoaded;\n                    }\n                    this.handleCollision(xOffsetForExportButton);\n                    // Vertical align\n                    group.align({\n                        verticalAlign: verticalAlign\n                    }, true, chart.spacingBox);\n                    var alignTranslateY = group.alignAttr.translateY;\n                    // Set position\n                    var groupHeight = group.getBBox().height + 20; // # 20 padding\n                        var translateY = 0;\n                    // Calculate bottom position\n                    if (verticalAlign === 'bottom') {\n                        var legendOptions = chart.legend && chart.legend.options;\n                        var legendHeight = (legendOptions &&\n                                legendOptions.verticalAlign === 'bottom' &&\n                                legendOptions.enabled &&\n                                !legendOptions.floating ?\n                                (chart.legend.legendHeight +\n                                    pick(legendOptions.margin, 10)) :\n                                0);\n                        groupHeight = groupHeight + legendHeight - 20;\n                        translateY = (alignTranslateY -\n                            groupHeight -\n                            (options.floating ? 0 : options.y) -\n                            (chart.titleOffset ? chart.titleOffset[2] : 0) -\n                            10 // 10 spacing\n                        );\n                    }\n                    if (verticalAlign === 'top') {\n                        if (options.floating) {\n                            translateY = 0;\n                        }\n                        if (chart.titleOffset && chart.titleOffset[0]) {\n                            translateY = chart.titleOffset[0];\n                        }\n                        translateY += ((chart.margin[0] - chart.spacing[0]) || 0);\n                    }\n                    else if (verticalAlign === 'middle') {\n                        if (inputPosition.y === buttonPosition.y) {\n                            translateY = alignTranslateY;\n                        }\n                        else if (inputPosition.y || buttonPosition.y) {\n                            if (inputPosition.y < 0 ||\n                                buttonPosition.y < 0) {\n                                translateY -= Math.min(inputPosition.y, buttonPosition.y);\n                            }\n                            else {\n                                translateY = alignTranslateY - groupHeight;\n                            }\n                        }\n                    }\n                    group.translate(options.x, options.y + Math.floor(translateY));\n                    // Translate HTML inputs\n                    var _b = this,\n                        minInput = _b.minInput,\n                        maxInput = _b.maxInput,\n                        dropdown = _b.dropdown;\n                    if (options.inputEnabled && minInput && maxInput) {\n                        minInput.style.marginTop = group.translateY + 'px';\n                        maxInput.style.marginTop = group.translateY + 'px';\n                    }\n                    if (dropdown) {\n                        dropdown.style.marginTop = group.translateY + 'px';\n                    }\n                }\n            };\n            /**\n             * Align the button group horizontally and vertically.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#alignButtonGroup\n             * @param {number} xOffsetForExportButton\n             * @param {number} [width]\n             */\n            RangeSelector.prototype.alignButtonGroup = function (xOffsetForExportButton, width) {\n                var _a = this,\n                    chart = _a.chart,\n                    options = _a.options,\n                    buttonGroup = _a.buttonGroup,\n                    buttons = _a.buttons;\n                var buttonPosition = options.buttonPosition;\n                var plotLeft = chart.plotLeft - chart.spacing[3];\n                var translateX = buttonPosition.x - chart.spacing[3];\n                if (buttonPosition.align === 'right') {\n                    translateX += xOffsetForExportButton - plotLeft; // #13014\n                }\n                else if (buttonPosition.align === 'center') {\n                    translateX -= plotLeft / 2;\n                }\n                if (buttonGroup) {\n                    // Align button group\n                    buttonGroup.align({\n                        y: buttonPosition.y,\n                        width: pick(width, this.initialButtonGroupWidth),\n                        align: buttonPosition.align,\n                        x: translateX\n                    }, true, chart.spacingBox);\n                }\n            };\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#positionButtons\n             */\n            RangeSelector.prototype.positionButtons = function () {\n                var _a = this,\n                    buttons = _a.buttons,\n                    chart = _a.chart,\n                    options = _a.options,\n                    zoomText = _a.zoomText;\n                var verb = chart.hasLoaded ? 'animate' : 'attr';\n                var buttonPosition = options.buttonPosition;\n                var plotLeft = chart.plotLeft;\n                var buttonLeft = plotLeft;\n                if (zoomText && zoomText.visibility !== 'hidden') {\n                    // #8769, allow dynamically updating margins\n                    zoomText[verb]({\n                        x: pick(plotLeft + buttonPosition.x, plotLeft)\n                    });\n                    // Button start position\n                    buttonLeft += buttonPosition.x +\n                        zoomText.getBBox().width + 5;\n                }\n                this.buttonOptions.forEach(function (rangeOptions, i) {\n                    if (buttons[i].visibility !== 'hidden') {\n                        buttons[i][verb]({ x: buttonLeft });\n                        // increase button position for the next button\n                        buttonLeft += buttons[i].width + options.buttonSpacing;\n                    }\n                    else {\n                        buttons[i][verb]({ x: plotLeft });\n                    }\n                });\n            };\n            /**\n             * Handle collision between the button group and the input group\n             *\n             * @private\n             * @function Highcharts.RangeSelector#handleCollision\n             *\n             * @param  {number} xOffsetForExportButton\n             *                  The X offset of the group required to make room for the\n             *                  exporting button\n             */\n            RangeSelector.prototype.handleCollision = function (xOffsetForExportButton) {\n                var _this = this;\n                var _a = this,\n                    chart = _a.chart,\n                    buttonGroup = _a.buttonGroup,\n                    inputGroup = _a.inputGroup;\n                var _b = this.options,\n                    buttonPosition = _b.buttonPosition,\n                    dropdown = _b.dropdown,\n                    inputPosition = _b.inputPosition;\n                var maxButtonWidth = function () {\n                        var buttonWidth = 0;\n                    _this.buttons.forEach(function (button) {\n                        var bBox = button.getBBox();\n                        if (bBox.width > buttonWidth) {\n                            buttonWidth = bBox.width;\n                        }\n                    });\n                    return buttonWidth;\n                };\n                var groupsOverlap = function (buttonGroupWidth) {\n                        if (inputGroup && buttonGroup) {\n                            var inputGroupX = (inputGroup.alignAttr.translateX +\n                                inputGroup.alignOptions.x -\n                                xOffsetForExportButton +\n                                // getBBox for detecing left margin\n                                inputGroup.getBBox().x +\n                                // 2px padding to not overlap input and label\n                                2);\n                        var inputGroupWidth = inputGroup.alignOptions.width;\n                        var buttonGroupX = buttonGroup.alignAttr.translateX +\n                                buttonGroup.getBBox().x;\n                        return (buttonGroupX + buttonGroupWidth > inputGroupX) &&\n                            (inputGroupX + inputGroupWidth > buttonGroupX) &&\n                            (buttonPosition.y <\n                                (inputPosition.y +\n                                    inputGroup.getBBox().height));\n                    }\n                    return false;\n                };\n                var moveInputsDown = function () {\n                        if (inputGroup && buttonGroup) {\n                            inputGroup.attr({\n                                translateX: inputGroup.alignAttr.translateX + (chart.axisOffset[1] >= -xOffsetForExportButton ?\n                                    0 :\n                                    -xOffsetForExportButton),\n                                translateY: inputGroup.alignAttr.translateY +\n                                    buttonGroup.getBBox().height + 10\n                            });\n                    }\n                };\n                if (buttonGroup) {\n                    if (dropdown === 'always') {\n                        this.collapseButtons(xOffsetForExportButton);\n                        if (groupsOverlap(maxButtonWidth())) {\n                            // Move the inputs down if there is still a collision\n                            // after collapsing the buttons\n                            moveInputsDown();\n                        }\n                        return;\n                    }\n                    if (dropdown === 'never') {\n                        this.expandButtons();\n                    }\n                }\n                // Detect collision\n                if (inputGroup && buttonGroup) {\n                    if ((inputPosition.align === buttonPosition.align) ||\n                        // 20 is minimal spacing between elements\n                        groupsOverlap(this.initialButtonGroupWidth + 20)) {\n                        if (dropdown === 'responsive') {\n                            this.collapseButtons(xOffsetForExportButton);\n                            if (groupsOverlap(maxButtonWidth())) {\n                                moveInputsDown();\n                            }\n                        }\n                        else {\n                            moveInputsDown();\n                        }\n                    }\n                    else if (dropdown === 'responsive') {\n                        this.expandButtons();\n                    }\n                }\n                else if (buttonGroup && dropdown === 'responsive') {\n                    if (this.initialButtonGroupWidth > chart.plotWidth) {\n                        this.collapseButtons(xOffsetForExportButton);\n                    }\n                    else {\n                        this.expandButtons();\n                    }\n                }\n            };\n            /**\n             * Collapse the buttons and put the select element on top.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#collapseButtons\n             * @param {number} xOffsetForExportButton\n             */\n            RangeSelector.prototype.collapseButtons = function (xOffsetForExportButton) {\n                var _a = this,\n                    buttons = _a.buttons,\n                    buttonOptions = _a.buttonOptions,\n                    chart = _a.chart,\n                    dropdown = _a.dropdown,\n                    options = _a.options,\n                    zoomText = _a.zoomText;\n                var userButtonTheme = (chart.userOptions.rangeSelector &&\n                        chart.userOptions.rangeSelector.buttonTheme) || {};\n                var getAttribs = function (text) { return ({\n                        text: text ? text + \" \\u25BE\" : '▾',\n                        width: 'auto',\n                        paddingLeft: pick(options.buttonTheme.paddingLeft,\n                    userButtonTheme.padding, 8),\n                        paddingRight: pick(options.buttonTheme.paddingRight,\n                    userButtonTheme.padding, 8)\n                    }); };\n                if (zoomText) {\n                    zoomText.hide();\n                }\n                var hasActiveButton = false;\n                buttonOptions.forEach(function (rangeOptions, i) {\n                    var button = buttons[i];\n                    if (button.state !== 2) {\n                        button.hide();\n                    }\n                    else {\n                        button.show();\n                        button.attr(getAttribs(rangeOptions.text));\n                        hasActiveButton = true;\n                    }\n                });\n                if (!hasActiveButton) {\n                    if (dropdown) {\n                        dropdown.selectedIndex = 0;\n                    }\n                    buttons[0].show();\n                    buttons[0].attr(getAttribs(this.zoomText && this.zoomText.textStr));\n                }\n                var align = options.buttonPosition.align;\n                this.positionButtons();\n                if (align === 'right' || align === 'center') {\n                    this.alignButtonGroup(xOffsetForExportButton, buttons[this.currentButtonIndex()].getBBox().width);\n                }\n                this.showDropdown();\n            };\n            /**\n             * Show all the buttons and hide the select element.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#expandButtons\n             */\n            RangeSelector.prototype.expandButtons = function () {\n                var _a = this,\n                    buttons = _a.buttons,\n                    buttonOptions = _a.buttonOptions,\n                    options = _a.options,\n                    zoomText = _a.zoomText;\n                this.hideDropdown();\n                if (zoomText) {\n                    zoomText.show();\n                }\n                buttonOptions.forEach(function (rangeOptions, i) {\n                    var button = buttons[i];\n                    button.show();\n                    button.attr({\n                        text: rangeOptions.text,\n                        width: options.buttonTheme.width || 28,\n                        paddingLeft: pick(options.buttonTheme.paddingLeft, 'unset'),\n                        paddingRight: pick(options.buttonTheme.paddingRight, 'unset')\n                    });\n                    if (button.state < 2) {\n                        button.setState(0);\n                    }\n                });\n                this.positionButtons();\n            };\n            /**\n             * Get the index of the visible button when the buttons are collapsed.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#currentButtonIndex\n             */\n            RangeSelector.prototype.currentButtonIndex = function () {\n                var dropdown = this.dropdown;\n                if (dropdown && dropdown.selectedIndex > 0) {\n                    return dropdown.selectedIndex - 1;\n                }\n                return 0;\n            };\n            /**\n             * Position the select element on top of the button.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#showDropdown\n             */\n            RangeSelector.prototype.showDropdown = function () {\n                var _a = this,\n                    buttonGroup = _a.buttonGroup,\n                    buttons = _a.buttons,\n                    chart = _a.chart,\n                    dropdown = _a.dropdown;\n                if (buttonGroup && dropdown) {\n                    var translateX = buttonGroup.translateX,\n                        translateY = buttonGroup.translateY;\n                    var bBox = buttons[this.currentButtonIndex()].getBBox();\n                    css(dropdown, {\n                        left: (chart.plotLeft + translateX) + 'px',\n                        top: (translateY + 0.5) + 'px',\n                        width: bBox.width + 'px',\n                        height: bBox.height + 'px'\n                    });\n                    this.hasVisibleDropdown = true;\n                }\n            };\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#hideDropdown\n             */\n            RangeSelector.prototype.hideDropdown = function () {\n                var dropdown = this.dropdown;\n                if (dropdown) {\n                    css(dropdown, {\n                        top: '-9999em',\n                        width: '1px',\n                        height: '1px'\n                    });\n                    this.hasVisibleDropdown = false;\n                }\n            };\n            /**\n             * Extracts height of range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getHeight\n             * @return {number}\n             * Returns rangeSelector height\n             */\n            RangeSelector.prototype.getHeight = function () {\n                var rangeSelector = this,\n                    options = rangeSelector.options,\n                    rangeSelectorGroup = rangeSelector.group,\n                    inputPosition = options.inputPosition,\n                    buttonPosition = options.buttonPosition,\n                    yPosition = options.y,\n                    buttonPositionY = buttonPosition.y,\n                    inputPositionY = inputPosition.y,\n                    rangeSelectorHeight = 0,\n                    minPosition;\n                if (options.height) {\n                    return options.height;\n                }\n                // Align the elements before we read the height in case we're switching\n                // between wrapped and non-wrapped layout\n                this.alignElements();\n                rangeSelectorHeight = rangeSelectorGroup ?\n                    // 13px to keep back compatibility\n                    (rangeSelectorGroup.getBBox(true).height) + 13 +\n                        yPosition :\n                    0;\n                minPosition = Math.min(inputPositionY, buttonPositionY);\n                if ((inputPositionY < 0 && buttonPositionY < 0) ||\n                    (inputPositionY > 0 && buttonPositionY > 0)) {\n                    rangeSelectorHeight += Math.abs(minPosition);\n                }\n                return rangeSelectorHeight;\n            };\n            /**\n             * Detect collision with title or subtitle\n             *\n             * @private\n             * @function Highcharts.RangeSelector#titleCollision\n             * @return {boolean}\n             * Returns collision status\n             */\n            RangeSelector.prototype.titleCollision = function (chart) {\n                return !(chart.options.title.text ||\n                    chart.options.subtitle.text);\n            };\n            /**\n             * Update the range selector with new options\n             *\n             * @private\n             * @function Highcharts.RangeSelector#update\n             * @param {Highcharts.RangeSelectorOptions} options\n             */\n            RangeSelector.prototype.update = function (options) {\n                var chart = this.chart;\n                merge(true, chart.options.rangeSelector, options);\n                this.destroy();\n                this.init(chart);\n                this.render();\n            };\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#destroy\n             */\n            RangeSelector.prototype.destroy = function () {\n                var rSelector = this,\n                    minInput = rSelector.minInput,\n                    maxInput = rSelector.maxInput;\n                if (rSelector.eventsToUnbind) {\n                    rSelector.eventsToUnbind.forEach(function (unbind) { return unbind(); });\n                    rSelector.eventsToUnbind = void 0;\n                }\n                // Destroy elements in collections\n                destroyObjectProperties(rSelector.buttons);\n                // Clear input element events\n                if (minInput) {\n                    minInput.onfocus = minInput.onblur = minInput.onchange = null;\n                }\n                if (maxInput) {\n                    maxInput.onfocus = maxInput.onblur = maxInput.onchange = null;\n                }\n                // Destroy HTML and SVG elements\n                objectEach(rSelector, function (val, key) {\n                    if (val && key !== 'chart') {\n                        if (val instanceof SVGElement) {\n                            // SVGElement\n                            val.destroy();\n                        }\n                        else if (val instanceof window.HTMLElement) {\n                            // HTML element\n                            discardElement(val);\n                        }\n                    }\n                    if (val !== RangeSelector.prototype[key]) {\n                        rSelector[key] = null;\n                    }\n                }, this);\n            };\n            return RangeSelector;\n        }());\n        /**\n         * The default buttons for pre-selecting time frames\n         */\n        RangeSelector.prototype.defaultButtons = [{\n                type: 'month',\n                count: 1,\n                text: '1m',\n                title: 'View 1 month'\n            }, {\n                type: 'month',\n                count: 3,\n                text: '3m',\n                title: 'View 3 months'\n            }, {\n                type: 'month',\n                count: 6,\n                text: '6m',\n                title: 'View 6 months'\n            }, {\n                type: 'ytd',\n                text: 'YTD',\n                title: 'View year to date'\n            }, {\n                type: 'year',\n                count: 1,\n                text: '1y',\n                title: 'View 1 year'\n            }, {\n                type: 'all',\n                text: 'All',\n                title: 'View all'\n            }];\n        /**\n         * The date formats to use when setting min, max and value on date inputs\n         */\n        RangeSelector.prototype.inputTypeFormats = {\n            'datetime-local': '%Y-%m-%dT%H:%M:%S',\n            'date': '%Y-%m-%d',\n            'time': '%H:%M:%S'\n        };\n        /**\n         * Get the preferred input type based on a date format string.\n         *\n         * @private\n         * @function preferredInputType\n         */\n        function preferredInputType(format) {\n            var ms = format.indexOf('%L') !== -1;\n            if (ms) {\n                return 'text';\n            }\n            var date = ['a', 'A', 'd', 'e', 'w', 'b', 'B', 'm', 'o', 'y', 'Y']\n                    .some(function (char) { return format.indexOf('%' + char) !== -1; });\n            var time = ['H', 'k', 'I', 'l', 'M', 'S'].some(function (char) {\n                    return format.indexOf('%' + char) !== -1;\n            });\n            if (date && time) {\n                return 'datetime-local';\n            }\n            if (date) {\n                return 'date';\n            }\n            if (time) {\n                return 'time';\n            }\n            return 'text';\n        }\n        /**\n         * Get the axis min value based on the range option and the current max. For\n         * stock charts this is extended via the {@link RangeSelector} so that if the\n         * selected range is a multiple of months or years, it is compensated for\n         * various month lengths.\n         *\n         * @private\n         * @function Highcharts.Axis#minFromRange\n         * @return {number|undefined}\n         *         The new minimum value.\n         */\n        Axis.prototype.minFromRange = function () {\n            var rangeOptions = this.range,\n                type = rangeOptions.type,\n                min,\n                max = this.max,\n                dataMin,\n                range,\n                time = this.chart.time, \n                // Get the true range from a start date\n                getTrueRange = function (base,\n                count) {\n                    var timeName = type === 'year' ?\n                        'FullYear' : 'Month';\n                var date = new time.Date(base);\n                var basePeriod = time.get(timeName,\n                    date);\n                time.set(timeName, date, basePeriod + count);\n                if (basePeriod === time.get(timeName, date)) {\n                    time.set('Date', date, 0); // #6537\n                }\n                return date.getTime() - base;\n            };\n            if (isNumber(rangeOptions)) {\n                min = max - rangeOptions;\n                range = rangeOptions;\n            }\n            else {\n                min = max + getTrueRange(max, -rangeOptions.count);\n                // Let the fixedRange reflect initial settings (#5930)\n                if (this.chart) {\n                    this.chart.fixedRange = max - min;\n                }\n            }\n            dataMin = pick(this.dataMin, Number.MIN_VALUE);\n            if (!isNumber(min)) {\n                min = dataMin;\n            }\n            if (min <= dataMin) {\n                min = dataMin;\n                if (typeof range === 'undefined') { // #4501\n                    range = getTrueRange(min, rangeOptions.count);\n                }\n                this.newMax = Math.min(min + range, this.dataMax);\n            }\n            if (!isNumber(max)) {\n                min = void 0;\n            }\n            return min;\n        };\n        if (!H.RangeSelector) {\n            var chartDestroyEvents_1 = [];\n            var initRangeSelector_1 = function (chart) {\n                    var extremes,\n                rangeSelector = chart.rangeSelector,\n                legend,\n                alignTo,\n                verticalAlign;\n                /**\n                 * @private\n                 */\n                function render() {\n                    if (rangeSelector) {\n                        extremes = chart.xAxis[0].getExtremes();\n                        legend = chart.legend;\n                        verticalAlign = (rangeSelector &&\n                            rangeSelector.options.verticalAlign);\n                        if (isNumber(extremes.min)) {\n                            rangeSelector.render(extremes.min, extremes.max);\n                        }\n                        // Re-align the legend so that it's below the rangeselector\n                        if (legend.display &&\n                            verticalAlign === 'top' &&\n                            verticalAlign === legend.options.verticalAlign) {\n                            // Create a new alignment box for the legend.\n                            alignTo = merge(chart.spacingBox);\n                            if (legend.options.layout === 'vertical') {\n                                alignTo.y = chart.plotTop;\n                            }\n                            else {\n                                alignTo.y += rangeSelector.getHeight();\n                            }\n                            legend.group.placed = false; // Don't animate the alignment.\n                            legend.align(alignTo);\n                        }\n                    }\n                }\n                if (rangeSelector) {\n                    var events = find(chartDestroyEvents_1,\n                        function (e) { return e[0] === chart; });\n                    if (!events) {\n                        chartDestroyEvents_1.push([chart, [\n                                // redraw the scroller on setExtremes\n                                addEvent(chart.xAxis[0], 'afterSetExtremes', function (e) {\n                                    if (rangeSelector) {\n                                        rangeSelector.render(e.min, e.max);\n                                    }\n                                }),\n                                // redraw the scroller chart resize\n                                addEvent(chart, 'redraw', render)\n                            ]]);\n                    }\n                    // do it now\n                    render();\n                }\n            };\n            // Initialize rangeselector for stock charts\n            addEvent(Chart, 'afterGetContainer', function () {\n                if (this.options.rangeSelector &&\n                    this.options.rangeSelector.enabled) {\n                    this.rangeSelector = new RangeSelector(this);\n                }\n            });\n            addEvent(Chart, 'beforeRender', function () {\n                var chart = this,\n                    axes = chart.axes,\n                    rangeSelector = chart.rangeSelector,\n                    verticalAlign;\n                if (rangeSelector) {\n                    if (isNumber(rangeSelector.deferredYTDClick)) {\n                        rangeSelector.clickButton(rangeSelector.deferredYTDClick);\n                        delete rangeSelector.deferredYTDClick;\n                    }\n                    axes.forEach(function (axis) {\n                        axis.updateNames();\n                        axis.setScale();\n                    });\n                    chart.getAxisMargins();\n                    rangeSelector.render();\n                    verticalAlign = rangeSelector.options.verticalAlign;\n                    if (!rangeSelector.options.floating) {\n                        if (verticalAlign === 'bottom') {\n                            this.extraBottomMargin = true;\n                        }\n                        else if (verticalAlign !== 'middle') {\n                            this.extraTopMargin = true;\n                        }\n                    }\n                }\n            });\n            addEvent(Chart, 'update', function (e) {\n                var chart = this,\n                    options = e.options,\n                    optionsRangeSelector = options.rangeSelector,\n                    rangeSelector = chart.rangeSelector,\n                    verticalAlign,\n                    extraBottomMarginWas = this.extraBottomMargin,\n                    extraTopMarginWas = this.extraTopMargin;\n                if (optionsRangeSelector &&\n                    optionsRangeSelector.enabled &&\n                    !defined(rangeSelector) &&\n                    this.options.rangeSelector) {\n                    this.options.rangeSelector.enabled = true;\n                    this.rangeSelector = rangeSelector = new RangeSelector(this);\n                }\n                this.extraBottomMargin = false;\n                this.extraTopMargin = false;\n                if (rangeSelector) {\n                    initRangeSelector_1(this);\n                    verticalAlign = (optionsRangeSelector &&\n                        optionsRangeSelector.verticalAlign) || (rangeSelector.options && rangeSelector.options.verticalAlign);\n                    if (!rangeSelector.options.floating) {\n                        if (verticalAlign === 'bottom') {\n                            this.extraBottomMargin = true;\n                        }\n                        else if (verticalAlign !== 'middle') {\n                            this.extraTopMargin = true;\n                        }\n                    }\n                    if (this.extraBottomMargin !== extraBottomMarginWas ||\n                        this.extraTopMargin !== extraTopMarginWas) {\n                        this.isDirtyBox = true;\n                    }\n                }\n            });\n            addEvent(Chart, 'render', function () {\n                var chart = this,\n                    rangeSelector = chart.rangeSelector,\n                    verticalAlign;\n                if (rangeSelector && !rangeSelector.options.floating) {\n                    rangeSelector.render();\n                    verticalAlign = rangeSelector.options.verticalAlign;\n                    if (verticalAlign === 'bottom') {\n                        this.extraBottomMargin = true;\n                    }\n                    else if (verticalAlign !== 'middle') {\n                        this.extraTopMargin = true;\n                    }\n                }\n            });\n            addEvent(Chart, 'getMargins', function () {\n                var rangeSelector = this.rangeSelector,\n                    rangeSelectorHeight;\n                if (rangeSelector) {\n                    rangeSelectorHeight = rangeSelector.getHeight();\n                    if (this.extraTopMargin) {\n                        this.plotTop += rangeSelectorHeight;\n                    }\n                    if (this.extraBottomMargin) {\n                        this.marginBottom += rangeSelectorHeight;\n                    }\n                }\n            });\n            Chart.prototype.callbacks.push(initRangeSelector_1);\n            // Remove resize/afterSetExtremes at chart destroy\n            addEvent(Chart, 'destroy', function destroyEvents() {\n                for (var i = 0; i < chartDestroyEvents_1.length; i++) {\n                    var events = chartDestroyEvents_1[i];\n                    if (events[0] === this) {\n                        events[1].forEach(function (unbind) { return unbind(); });\n                        chartDestroyEvents_1.splice(i, 1);\n                        return;\n                    }\n                }\n            });\n            H.RangeSelector = RangeSelector;\n        }\n\n        return RangeSelector;\n    });\n    _registerModule(_modules, 'Core/Chart/StockChart.js', [_modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Axis/Axis.js'], _modules['Core/Chart/Chart.js'], _modules['Core/FormatUtilities.js'], _modules['Core/DefaultOptions.js'], _modules['Core/Series/Series.js'], _modules['Core/Renderer/SVG/SVGRenderer.js'], _modules['Core/Utilities.js']], function (A, Axis, Chart, F, D, Series, SVGRenderer, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var animObject = A.animObject;\n        var format = F.format;\n        var getOptions = D.getOptions;\n        var addEvent = U.addEvent,\n            clamp = U.clamp,\n            defined = U.defined,\n            extend = U.extend,\n            find = U.find,\n            isNumber = U.isNumber,\n            isString = U.isString,\n            merge = U.merge,\n            pick = U.pick,\n            splat = U.splat;\n        // Has a dependency on Navigator due to the use of\n        // defaultOptions.navigator\n        // Has a dependency on Scrollbar due to the use of\n        // defaultOptions.scrollbar\n        // Has a dependency on RangeSelector due to the use of\n        // defaultOptions.rangeSelector\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Stock-optimized chart. Use {@link Highcharts.Chart|Chart} for common charts.\n         *\n         * @requires modules/stock\n         *\n         * @class\n         * @name Highcharts.StockChart\n         * @extends Highcharts.Chart\n         */\n        var StockChart = /** @class */ (function (_super) {\n                __extends(StockChart, _super);\n            function StockChart() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            /**\n             * Initializes the chart. The constructor's arguments are passed on\n             * directly.\n             *\n             * @function Highcharts.StockChart#init\n             *\n             * @param {Highcharts.Options} userOptions\n             *        Custom options.\n             *\n             * @param {Function} [callback]\n             *        Function to run when the chart has loaded and and all external\n             *        images are loaded.\n             *\n             *\n             * @emits Highcharts.StockChart#event:init\n             * @emits Highcharts.StockChart#event:afterInit\n             */\n            StockChart.prototype.init = function (userOptions, callback) {\n                var defaultOptions = getOptions(),\n                    xAxisOptions = userOptions.xAxis,\n                    yAxisOptions = userOptions.yAxis, \n                    // Always disable startOnTick:true on the main axis when the\n                    // navigator is enabled (#1090)\n                    navigatorEnabled = pick(userOptions.navigator && userOptions.navigator.enabled,\n                    defaultOptions.navigator.enabled,\n                    true);\n                // Avoid doing these twice\n                userOptions.xAxis = userOptions.yAxis = void 0;\n                var options = merge({\n                        chart: {\n                            panning: {\n                                enabled: true,\n                                type: 'x'\n                            },\n                            pinchType: 'x'\n                        },\n                        navigator: {\n                            enabled: navigatorEnabled\n                        },\n                        scrollbar: {\n                            // #4988 - check if setOptions was called\n                            enabled: pick((defaultOptions.scrollbar &&\n                                defaultOptions.scrollbar.enabled),\n                    true)\n                        },\n                        rangeSelector: {\n                            // #4988 - check if setOptions was called\n                            enabled: pick(defaultOptions.rangeSelector.enabled,\n                    true)\n                        },\n                        title: {\n                            text: null\n                        },\n                        tooltip: {\n                            split: pick(defaultOptions.tooltip.split,\n                    true),\n                            crosshairs: true\n                        },\n                        legend: {\n                            enabled: false\n                        }\n                    },\n                    userOptions, // user's options\n                    {\n                        isStock: true // internal flag\n                    });\n                userOptions.xAxis = xAxisOptions;\n                userOptions.yAxis = yAxisOptions;\n                // apply X axis options to both single and multi y axes\n                options.xAxis = splat(userOptions.xAxis || {}).map(function (xAxisOptions, i) {\n                    return merge(getDefaultAxisOptions('xAxis', xAxisOptions), defaultOptions.xAxis, // #3802\n                    // #7690\n                    defaultOptions.xAxis && defaultOptions.xAxis[i], xAxisOptions, // user options\n                    getForcedAxisOptions('xAxis', userOptions));\n                });\n                // apply Y axis options to both single and multi y axes\n                options.yAxis = splat(userOptions.yAxis || {}).map(function (yAxisOptions, i) {\n                    return merge(getDefaultAxisOptions('yAxis', yAxisOptions), defaultOptions.yAxis, // #3802\n                    // #7690\n                    defaultOptions.yAxis && defaultOptions.yAxis[i], yAxisOptions // user options\n                    );\n                });\n                _super.prototype.init.call(this, options, callback);\n            };\n            /**\n             * Factory for creating different axis types.\n             * Extended to add stock defaults.\n             *\n             * @private\n             * @function Highcharts.StockChart#createAxis\n             * @param {string} type\n             * An axis type.\n             * @param {Chart.CreateAxisOptionsObject} options\n             * The axis creation options.\n             */\n            StockChart.prototype.createAxis = function (type, options) {\n                options.axis = merge(getDefaultAxisOptions(type, options.axis), options.axis, getForcedAxisOptions(type, this.userOptions));\n                return _super.prototype.createAxis.call(this, type, options);\n            };\n            return StockChart;\n        }(Chart));\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        (function (StockChart) {\n            /**\n             * Factory function for creating new stock charts. Creates a new\n             * {@link Highcharts.StockChart|StockChart} object with different default\n             * options than the basic Chart.\n             *\n             * @example\n             * let chart = Highcharts.stockChart('container', {\n             *     series: [{\n             *         data: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n             *         pointInterval: 24 * 60 * 60 * 1000\n             *     }]\n             * });\n             *\n             * @function Highcharts.stockChart\n             *\n             * @param {string|Highcharts.HTMLDOMElement} [renderTo]\n             *        The DOM element to render to, or its id.\n             *\n             * @param {Highcharts.Options} options\n             *        The chart options structure as described in the\n             *        [options reference](https://api.highcharts.com/highstock).\n             *\n             * @param {Highcharts.ChartCallbackFunction} [callback]\n             *        A function to execute when the chart object is finished loading\n             *        and rendering. In most cases the chart is built in one thread,\n             *        but in Internet Explorer version 8 or less the chart is sometimes\n             *        initialized before the document is ready, and in these cases the\n             *        chart object will not be finished synchronously. As a\n             *        consequence, code that relies on the newly built Chart object\n             *        should always run in the callback. Defining a\n             *        [chart.events.load](https://api.highcharts.com/highstock/chart.events.load)\n             *        handler is equivalent.\n             *\n             * @return {Highcharts.StockChart}\n             *         The chart object.\n             */\n            function stockChart(a, b, c) {\n                return new StockChart(a, b, c);\n            }\n            StockChart.stockChart = stockChart;\n        })(StockChart || (StockChart = {}));\n        /**\n         * Get stock-specific default axis options.\n         *\n         * @private\n         * @function getDefaultAxisOptions\n         */\n        function getDefaultAxisOptions(type, options) {\n            if (type === 'xAxis') {\n                return {\n                    minPadding: 0,\n                    maxPadding: 0,\n                    overscroll: 0,\n                    ordinal: true,\n                    title: {\n                        text: null\n                    },\n                    labels: {\n                        overflow: 'justify'\n                    },\n                    showLastLabel: true\n                };\n            }\n            if (type === 'yAxis') {\n                return {\n                    labels: {\n                        y: -2\n                    },\n                    opposite: pick(options.opposite, true),\n                    /**\n                     * @default {highcharts} true\n                     * @default {highstock} false\n                     * @apioption yAxis.showLastLabel\n                     *\n                     * @private\n                     */\n                    showLastLabel: !!(\n                    // #6104, show last label by default for category axes\n                    options.categories ||\n                        options.type === 'category'),\n                    title: {\n                        text: null\n                    }\n                };\n            }\n            return {};\n        }\n        /**\n         * Get stock-specific forced axis options.\n         *\n         * @private\n         * @function getForcedAxisOptions\n         */\n        function getForcedAxisOptions(type, chartOptions) {\n            if (type === 'xAxis') {\n                var defaultOptions = getOptions(), \n                    // Always disable startOnTick:true on the main axis when the\n                    // navigator is enabled (#1090)\n                    navigatorEnabled = pick(chartOptions.navigator && chartOptions.navigator.enabled,\n                    defaultOptions.navigator.enabled,\n                    true);\n                var axisOptions = {\n                        type: 'datetime',\n                        categories: void 0\n                    };\n                if (navigatorEnabled) {\n                    axisOptions.startOnTick = false;\n                    axisOptions.endOnTick = false;\n                }\n                return axisOptions;\n            }\n            return {};\n        }\n        /* *\n         *\n         *  Compositions\n         *\n         * */\n        // Handle som Stock-specific series defaults, override the plotOptions before\n        // series options are handled.\n        addEvent(Series, 'setOptions', function (e) {\n            var overrides;\n            if (this.chart.options.isStock) {\n                if (this.is('column') || this.is('columnrange')) {\n                    overrides = {\n                        borderWidth: 0,\n                        shadow: false\n                    };\n                }\n                else if (!this.is('scatter') && !this.is('sma')) {\n                    overrides = {\n                        marker: {\n                            enabled: false,\n                            radius: 2\n                        }\n                    };\n                }\n                if (overrides) {\n                    e.plotOptions[this.type] = merge(e.plotOptions[this.type], overrides);\n                }\n            }\n        });\n        // Override the automatic label alignment so that the first Y axis' labels\n        // are drawn on top of the grid line, and subsequent axes are drawn outside\n        addEvent(Axis, 'autoLabelAlign', function (e) {\n            var chart = this.chart,\n                options = this.options,\n                panes = chart._labelPanes = chart._labelPanes || {},\n                key,\n                labelOptions = this.options.labels;\n            if (this.chart.options.isStock && this.coll === 'yAxis') {\n                key = options.top + ',' + options.height;\n                // do it only for the first Y axis of each pane\n                if (!panes[key] && labelOptions.enabled) {\n                    if (labelOptions.x === 15) { // default\n                        labelOptions.x = 0;\n                    }\n                    if (typeof labelOptions.align === 'undefined') {\n                        labelOptions.align = 'right';\n                    }\n                    panes[key] = this;\n                    e.align = 'right';\n                    e.preventDefault();\n                }\n            }\n        });\n        // Clear axis from label panes (#6071)\n        addEvent(Axis, 'destroy', function () {\n            var chart = this.chart, key = this.options && (this.options.top + ',' + this.options.height);\n            if (key && chart._labelPanes && chart._labelPanes[key] === this) {\n                delete chart._labelPanes[key];\n            }\n        });\n        // Override getPlotLinePath to allow for multipane charts\n        addEvent(Axis, 'getPlotLinePath', function (e) {\n            var axis = this,\n                series = (this.isLinked && !this.series ?\n                    this.linkedParent.series :\n                    this.series),\n                chart = axis.chart,\n                renderer = chart.renderer,\n                axisLeft = axis.left,\n                axisTop = axis.top,\n                x1,\n                y1,\n                x2,\n                y2,\n                result = [],\n                axes = [], // #3416 need a default array\n                axes2,\n                uniqueAxes,\n                translatedValue = e.translatedValue,\n                value = e.value,\n                force = e.force,\n                transVal;\n            /**\n             * Return the other axis based on either the axis option or on related\n             * series.\n             * @private\n             */\n            function getAxis(coll) {\n                var otherColl = coll === 'xAxis' ? 'yAxis' : 'xAxis',\n                    opt = axis.options[otherColl];\n                // Other axis indexed by number\n                if (isNumber(opt)) {\n                    return [chart[otherColl][opt]];\n                }\n                // Other axis indexed by id (like navigator)\n                if (isString(opt)) {\n                    return [chart.get(opt)];\n                }\n                // Auto detect based on existing series\n                return series.map(function (s) {\n                    return s[otherColl];\n                });\n            }\n            if ( // For stock chart, by default render paths across the panes\n            // except the case when `acrossPanes` is disabled by user (#6644)\n            (chart.options.isStock && e.acrossPanes !== false) &&\n                // Ignore in case of colorAxis or zAxis. #3360, #3524, #6720\n                axis.coll === 'xAxis' || axis.coll === 'yAxis') {\n                e.preventDefault();\n                // Get the related axes based on series\n                axes = getAxis(axis.coll);\n                // Get the related axes based options.*Axis setting #2810\n                axes2 = (axis.isXAxis ? chart.yAxis : chart.xAxis);\n                axes2.forEach(function (A) {\n                    if (defined(A.options.id) ?\n                        A.options.id.indexOf('navigator') === -1 :\n                        true) {\n                        var a = (A.isXAxis ? 'yAxis' : 'xAxis'),\n                            rax = (defined(A.options[a]) ?\n                                chart[a][A.options[a]] :\n                                chart[a][0]);\n                        if (axis === rax) {\n                            axes.push(A);\n                        }\n                    }\n                });\n                // Remove duplicates in the axes array. If there are no axes in the axes\n                // array, we are adding an axis without data, so we need to populate\n                // this with grid lines (#2796).\n                uniqueAxes = axes.length ?\n                    [] :\n                    [axis.isXAxis ? chart.yAxis[0] : chart.xAxis[0]]; // #3742\n                axes.forEach(function (axis2) {\n                    if (uniqueAxes.indexOf(axis2) === -1 &&\n                        // Do not draw on axis which overlap completely. #5424\n                        !find(uniqueAxes, function (unique) {\n                            return unique.pos === axis2.pos && unique.len === axis2.len;\n                        })) {\n                        uniqueAxes.push(axis2);\n                    }\n                });\n                transVal = pick(translatedValue, axis.translate(value, null, null, e.old));\n                if (isNumber(transVal)) {\n                    if (axis.horiz) {\n                        uniqueAxes.forEach(function (axis2) {\n                            var skip;\n                            y1 = axis2.pos;\n                            y2 = y1 + axis2.len;\n                            x1 = x2 = Math.round(transVal + axis.transB);\n                            // outside plot area\n                            if (force !== 'pass' &&\n                                (x1 < axisLeft || x1 > axisLeft + axis.width)) {\n                                if (force) {\n                                    x1 = x2 = clamp(x1, axisLeft, axisLeft + axis.width);\n                                }\n                                else {\n                                    skip = true;\n                                }\n                            }\n                            if (!skip) {\n                                result.push(['M', x1, y1], ['L', x2, y2]);\n                            }\n                        });\n                    }\n                    else {\n                        uniqueAxes.forEach(function (axis2) {\n                            var skip;\n                            x1 = axis2.pos;\n                            x2 = x1 + axis2.len;\n                            y1 = y2 = Math.round(axisTop + axis.height - transVal);\n                            // outside plot area\n                            if (force !== 'pass' &&\n                                (y1 < axisTop || y1 > axisTop + axis.height)) {\n                                if (force) {\n                                    y1 = y2 = clamp(y1, axisTop, axisTop + axis.height);\n                                }\n                                else {\n                                    skip = true;\n                                }\n                            }\n                            if (!skip) {\n                                result.push(['M', x1, y1], ['L', x2, y2]);\n                            }\n                        });\n                    }\n                }\n                e.path = result.length > 0 ?\n                    renderer.crispPolyLine(result, e.lineWidth || 1) :\n                    // #3557 getPlotLinePath in regular Highcharts also returns null\n                    null;\n            }\n        });\n        /**\n         * Function to crisp a line with multiple segments\n         *\n         * @private\n         * @function Highcharts.SVGRenderer#crispPolyLine\n         */\n        SVGRenderer.prototype.crispPolyLine = function (points, width) {\n            // points format: [['M', 0, 0], ['L', 100, 0]]\n            // normalize to a crisp line\n            for (var i = 0; i < points.length; i = i + 2) {\n                var start = points[i],\n                    end = points[i + 1];\n                if (start[1] === end[1]) {\n                    // Substract due to #1129. Now bottom and left axis gridlines behave\n                    // the same.\n                    start[1] = end[1] =\n                        Math.round(start[1]) - (width % 2 / 2);\n                }\n                if (start[2] === end[2]) {\n                    start[2] = end[2] =\n                        Math.round(start[2]) + (width % 2 / 2);\n                }\n            }\n            return points;\n        };\n        // Wrapper to hide the label\n        addEvent(Axis, 'afterHideCrosshair', function () {\n            if (this.crossLabel) {\n                this.crossLabel = this.crossLabel.hide();\n            }\n        });\n        // Extend crosshairs to also draw the label\n        addEvent(Axis, 'afterDrawCrosshair', function (event) {\n            // Check if the label has to be drawn\n            if (!this.crosshair ||\n                !this.crosshair.label ||\n                !this.crosshair.label.enabled ||\n                !this.cross ||\n                !isNumber(this.min) ||\n                !isNumber(this.max)) {\n                return;\n            }\n            var chart = this.chart, log = this.logarithmic, options = this.crosshair.label, // the label's options\n                horiz = this.horiz, // axis orientation\n                opposite = this.opposite, // axis position\n                left = this.left, // left position\n                top = this.top, // top position\n                crossLabel = this.crossLabel, // the svgElement\n                posx, posy, crossBox, formatOption = options.format, formatFormat = '', limit, align, tickInside = this.options.tickPosition === 'inside', snap = this.crosshair.snap !== false, offset = 0, \n                // Use last available event (#5287)\n                e = event.e || (this.cross && this.cross.e), point = event.point, min = this.min, max = this.max;\n            if (log) {\n                min = log.lin2log(min);\n                max = log.lin2log(max);\n            }\n            align = (horiz ? 'center' : opposite ?\n                (this.labelAlign === 'right' ? 'right' : 'left') :\n                (this.labelAlign === 'left' ? 'left' : 'center'));\n            // If the label does not exist yet, create it.\n            if (!crossLabel) {\n                crossLabel = this.crossLabel = chart.renderer\n                    .label('', 0, void 0, options.shape || 'callout')\n                    .addClass('highcharts-crosshair-label highcharts-color-' + (point ?\n                    point.series.colorIndex :\n                    this.series[0] && this.series[0].colorIndex))\n                    .attr({\n                    align: options.align || align,\n                    padding: pick(options.padding, 8),\n                    r: pick(options.borderRadius, 3),\n                    zIndex: 2\n                })\n                    .add(this.labelGroup);\n                // Presentational\n                if (!chart.styledMode) {\n                    crossLabel\n                        .attr({\n                        fill: options.backgroundColor ||\n                            point && point.series && point.series.color || // #14888\n                            \"#666666\" /* neutralColor60 */,\n                        stroke: options.borderColor || '',\n                        'stroke-width': options.borderWidth || 0\n                    })\n                        .css(extend({\n                        color: \"#ffffff\" /* backgroundColor */,\n                        fontWeight: 'normal',\n                        fontSize: '11px',\n                        textAlign: 'center'\n                    }, options.style || {}));\n                }\n            }\n            if (horiz) {\n                posx = snap ? (point.plotX || 0) + left : e.chartX;\n                posy = top + (opposite ? 0 : this.height);\n            }\n            else {\n                posx = opposite ? this.width + left : 0;\n                posy = snap ? (point.plotY || 0) + top : e.chartY;\n            }\n            if (!formatOption && !options.formatter) {\n                if (this.dateTime) {\n                    formatFormat = '%b %d, %Y';\n                }\n                formatOption =\n                    '{value' + (formatFormat ? ':' + formatFormat : '') + '}';\n            }\n            // Show the label\n            var value = snap ?\n                    (this.isXAxis ? point.x : point.y) :\n                    this.toValue(horiz ? e.chartX : e.chartY);\n            // Crosshair should be rendered within Axis range (#7219). Also, the point\n            // of currentPriceIndicator should be inside the plot area, #14879.\n            var isInside = point ?\n                    point.series.isPointInside(point) :\n                    (isNumber(value) && value > min && value < max);\n            var text = '';\n            if (formatOption) {\n                text = format(formatOption, { value: value }, chart);\n            }\n            else if (options.formatter && isNumber(value)) {\n                text = options.formatter.call(this, value);\n            }\n            crossLabel.attr({\n                text: text,\n                x: posx,\n                y: posy,\n                visibility: isInside ? 'visible' : 'hidden'\n            });\n            crossBox = crossLabel.getBBox();\n            // now it is placed we can correct its position\n            if (isNumber(crossLabel.y)) {\n                if (horiz) {\n                    if ((tickInside && !opposite) || (!tickInside && opposite)) {\n                        posy = crossLabel.y - crossBox.height;\n                    }\n                }\n                else {\n                    posy = crossLabel.y - (crossBox.height / 2);\n                }\n            }\n            // check the edges\n            if (horiz) {\n                limit = {\n                    left: left - crossBox.x,\n                    right: left + this.width - crossBox.x\n                };\n            }\n            else {\n                limit = {\n                    left: this.labelAlign === 'left' ? left : 0,\n                    right: this.labelAlign === 'right' ?\n                        left + this.width :\n                        chart.chartWidth\n                };\n            }\n            // left edge\n            if (crossLabel.translateX < limit.left) {\n                offset = limit.left - crossLabel.translateX;\n            }\n            // right edge\n            if (crossLabel.translateX + crossBox.width >= limit.right) {\n                offset = -(crossLabel.translateX + crossBox.width - limit.right);\n            }\n            // show the crosslabel\n            crossLabel.attr({\n                x: posx + offset,\n                y: posy,\n                // First set x and y, then anchorX and anchorY, when box is actually\n                // calculated, #5702\n                anchorX: horiz ?\n                    posx :\n                    (this.opposite ? 0 : chart.chartWidth),\n                anchorY: horiz ?\n                    (this.opposite ? chart.chartHeight : 0) :\n                    posy + crossBox.height / 2\n            });\n        });\n        /**\n         * Based on the data grouping options decides whether\n         * the data should be cropped while processing.\n         *\n         * @ignore\n         * @function Highcharts.Series#forceCropping\n         */\n        Series.prototype.forceCropping = function () {\n            var chart = this.chart,\n                options = this.options,\n                dataGroupingOptions = options.dataGrouping,\n                groupingEnabled = this.allowDG !== false && dataGroupingOptions &&\n                    pick(dataGroupingOptions.enabled,\n                chart.options.isStock);\n            return groupingEnabled;\n        };\n        addEvent(Chart, 'update', function (e) {\n            var options = e.options;\n            // Use case: enabling scrollbar from a disabled state.\n            // Scrollbar needs to be initialized from a controller, Navigator in this\n            // case (#6615)\n            if ('scrollbar' in options && this.navigator) {\n                merge(true, this.options.scrollbar, options.scrollbar);\n                this.navigator.update({}, false);\n                delete options.scrollbar;\n            }\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return StockChart;\n    });\n    _registerModule(_modules, 'masters/modules/stock.src.js', [_modules['Core/Globals.js'], _modules['Core/Axis/OrdinalAxis.js'], _modules['Series/DataModifyComposition.js'], _modules['Core/Scrollbar.js'], _modules['Core/Chart/StockChart.js']], function (Highcharts, OrdinalAxis, DataModifyComposition, Scrollbar, StockChart) {\n\n        var G = Highcharts;\n        // Classes\n        G.Scrollbar = Scrollbar;\n        G.StockChart = G.stockChart = StockChart.stockChart;\n        // Compositions\n        Scrollbar.compose(G.Axis);\n        OrdinalAxis.compose(G.Axis, G.Series, G.Chart);\n        DataModifyComposition.compose(G.Series, G.Axis, G.Point);\n\n    });\n}));"],"names":["f","v","e","h","m","hasOwnProperty","apply","_modules","this","__extends","c","b","a","Object","setPrototypeOf","__proto__","Array","k","constructor","prototype","create","l","seriesTypes","line","p","addEvent","t","error","g","extend","d","isArray","merge","pick","splat","w","arguments","data","dataEventsToUnbind","linkedParent","options","points","destroy","forEach","getName","name","nameComponents","push","params","nameSuffixes","nameBase","type","toUpperCase","join","getValues","period","xData","yData","length","x","B","index","values","init","call","linkedTo","recalculateValues","calculateOn","xAxis","chart","processedYData","order","eventsToUnbind","hasGroupedData","visible","cropped","n","min","max","cropData","concat","indexOf","shift","updateData","processedXData","isDirty","redraw","isDirtyData","processData","compareToMain","dataModify","compareValue","defaultOptions","tooltip","valueDecimals","hasDerivedData","useCommonDataGrouping","registerSeriesType","sma","correctFloat","accumulatePeriodPoints","calculateEma","r","populateAverage","volumeSeriesID","get","noop","column","drawGraph","greaterBarColor","lowerBarColor","userOptions","color","y","A","q","u","threshold","groupPadding","pointPadding","crisp","states","hover","halo","size","markerAttribs","getColumnMetrics","crispCol","translate","drawPoints","defined","fillGraph","nextPoints","getGraphPath","slice","L","linesApiNames","areaLinesNames","graph","gapSize","getTranslatedLinesNames","pointValKey","z","plotX","plotY","isNull","fillColor","area","styles","pointArrayMap","charAt","modifyValue","yAxis","toPixels","compose","toYData","map","marker","enabled","pointFormat","aroonDown","lineWidth","lineColor","dataGrouping","approximation","aroon","Math","abs","topLine","bottomLine","standardDeviation","sqrt","reduce","volumeSeries","isValid","getMoneyFlow","calculateDM","calculateDI","calculateDX","smoothValues","getTR","plusDILine","minusDILine","parallelArrays","floor","ad","ema","periods","isNumber","EMApercent","getEMA","J","getTemaPoint","level1","level2","level3","F","Q","prevLevel3","tema","Infinity","high","low","indicator","senkouSpan","gap","parse","objectEach","approximations","average","graphCollection","graphsenkouSpan","ikhMap","tenkanLine","kijunLine","chikouLine","senkouSpanA","fill","setOpacity","senkouSpanB","tenkanSen","kijunSen","chikouSpan","tooltipPos","K","S","O","negativeColor","R","D","intersectPoint","splice","unshift","periodTenkan","periodSenkouSpanB","series","xIncrement","periodATR","multiplierATR","atr","calculateTrend","isValidData","every","slowAvgPeriod","getCM","getDM","getVolumeForce","getSMA","fastAvgPeriod","C","N","signalPeriod","signalLine","currentLineZone","graphmacd","graphsignal","macdZones","signalZones","macdLine","zones","startIndex","resetZones","signal","MACD","plotMACD","plotSignal","getZonesGraphs","applyZones","hide","longPeriod","shortPeriod","minPointLength","decimals","parseFloat","toFixed","valueSuffix","pointClass","element","P","pivotLine","destroyElements","endPoint","plotEndPoint","drawDataLabels","dataLabels","dataLabel","algorithm","getPivotAndHLC","standardPlacement","camarillaPlacement","fibonacciPlacement","enableMouseTracking","format","split","getArrayExtremes","Number","MAX_VALUE","colors","top","middle","bottom","plotTop","plotBottom","topBand","bottomBand","maxAccelerationFactor","increment","initialAccelerationFactor","lineWidthPlus","smoothedLine","stochastic","close","cropThreshold","E","G","H","I","intersect","fallingTrendColor","dashStyle","risingTrendColor","changeTrendLine","multiplier","negativeGraphic","animObject","arrayMax","arrayMin","negWidths","posWidths","priceZones","rangeStep","volumeDataArray","zoneStarts","zoneLinesSVG","addCustomEvents","setData","animate","inverted","group","left","translateY","translateX","animation","step","attr","scaleX","pos","volumeDivision","posNegVolume","graphic","shapeArgs","width","wholeVolumeData","positiveVolumeData","negativeVolumeData","positiveColor","zoneLines","plotWidth","barX","start","reversed","pointWidth","volumeNeg","volumePos","volumeAll","drawZones","ranges","specifyZones","end","volumePerZone","renderer","crispLine","path","stroke","dashstyle","zIndex","add","animationLimit","allowOverlap","padding","style","fontSize","verticalAlign","calculateVWAPValues","lowIndex","highIndex","deviation","M","getRegressionLineParameters","pow","slope","intercept","getEndPointY","transformXData","findClosestDistance","xAxisUnit","regressionLineParameters","linearRegression","slopeToAngle","PI","atan","factor","isNaN","averageIndicator","calculateDisparityIndex","module","exports","define","Highcharts","isOpen","renderTo","browserProps","requestFullscreen","fullscreenChange","exitFullscreen","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","container","ownerDocument","Document","unbindFullscreenEvent","setSize","origWidth","origHeight","origWidthOption","height","origHeightOption","setButtonText","open","chartWidth","chartHeight","alert","exportDivElements","exporting","buttons","contextButton","menuItems","lang","menuItemDefinitions","viewFullscreen","setElementHTML","text","toggle","Fullscreen","fullscreen","css","timeUnits","tickPixelInterval","time","ordinal","breaks","getTimeTicks","info","unitRange","hour","dateFormat","higherRanks","segmentStarts","sort","positions","old","transA","minPixelPadding","len","extendedOrdinalPositions","getExtendedPositions","getIndexOfPoint","ceil","Additions","findIndexOf","isXAxis","overscroll","dataMax","mouseIsDown","isInternal","eventArgs","trigger","userMin","horiz","isOrdinal","navigator","adaptToUpdatedData","beforeSetTickPositions","tickInterval","postProcessTickInterval","originalEvent","chartX","panning","mouseDownX","getExtremes","hoverPoints","closestPointRange","overscrollPointsRange","translationSlope","index2val","val2lin","setState","fixedRange","navigatorAxis","toFixedRange","dataMin","setExtremes","cursor","test","preventDefault","offset","lin2val","ordinal2lin","axis","ignoreHiddenSeries","takeOrdinalPosition","keepOrdinalPadding","forceOrdinal","getOverscrollPositions","groupIntervalFactor","currentDataGrouping","count","unitName","getGroupPixelWidth","getGroupIntervalFactor","destroyGroupedData","getProcessedData","applyGrouping","firstAnchor","anchor","lastAnchor","forced","units","basePointRange","tooltipFormatter","isString","setCompare","setCumulative","numberFormatter","replace","tooltipOptions","changeDecimals","change","cumulativeSum","compare","cumulative","initCompare","initCumulative","dataExtremes","activeYData","getCumulativeExtremes","update","compareStart","setModifier","compareBase","find","fireEvent","brokenAxis","setBreaks","hasBreaks","tickPositions","isInAnyBreak","connectNulls","drawBreaks","breakArray","from","to","point","brk","gapUnit","stacking","stacks","stackKey","stackLabels","stack","total","keepProps","gappedPath","isInBreak","repeat","inclusive","lin2Val","val2Lin","findBreakAt","showPoints","forceRedraw","setAxisTranslation","unitLength","pointRangePadding","userMax","value","move","breakSize","staticScale","minPointOffset","Axis","Series","sum","hasNulls","averages","hlc","ohlc","range","groupAll","getDGApproximation","dataGroupInfo","cropStart","optionsToObject","applyOptions","groupedXData","groupedYData","groupMap","groupData","generatePoints","groupPixelWidth","dateTimeLabelFormats","millisecond","second","minute","day","week","month","year","spline","areaspline","arearange","columnrange","candlestick","heikinashi","defaultDataGroupingUnits","is","allowDG","isStock","requireSorting","isCartesian","plotSizeX","normalizeTimeTickInterval","startOfWeek","smoothed","firstPoint","lastPoint","totalRange","allGroupedData","preventGraphAnimation","groupedData","hasProcessed","hasExtemesChanged","setDataGrouping","dataGroup","labelConfig","xDateFormat","isFooter","key","dateTime","getXDateFormat","styledMode","styledModeFormat","plotOptions","rangeSelector","selected","buttonOptions","plotClose","extendStem","getPointPath","strokeWidth","round","yBottom","plotHigh","drawSinglePoint","pointAttribs","addClass","getClassName","stickyTracking","directTouch","pointAttrToOptions","plotOpen","resolveUpColor","upColor","resolveColor","getZone","useOhlcData","id","upLineColor","shadow","hasNewShapeType","shape","symbolKey","stableSort","getPlotBox","onSeries","onKey","pointXOffset","barW","substr","opposite","stackIndex","anchorX","anchorY","circle","symbols","flag","getRendererType","circlepin","squarepin","distribute","wrap","setClip","stackDistance","label","useHTML","markerGroup","div","isNew","align","textAlign","allowOverlapX","title","target","on","drawTracker","unbindMouseOver","raised","_y","clip","sharedClipKey","sharedClips","pointRange","fontWeight","forceCrop","invertible","noSharedTooltip","sorted","trackerGroups","buildKDTree","invertGroups","composed","axisMin","axisMax","scrollMin","scrollMax","scrollbar","vertical","startOnTick","endOnTick","shouldUpdateExtremes","DOMType","setRange","axisTitleMargin","titleOffset","scrollbarsOffsets","margin","position","axisOffset","isTouchDevice","barBorderRadius","buttonBorderRadius","liveRedraw","minWidth","barBackgroundColor","barBorderWidth","barBorderColor","buttonArrowColor","buttonBackgroundColor","buttonBorderColor","buttonBorderWidth","rifleColor","trackBackgroundColor","trackBorderColor","trackBorderWidth","destroyObjectProperties","removeEvent","_events","chartY","scrollbarButtons","scrollbarGroup","scrollbarLeft","scrollbarRifles","scrollbarStrokeWidth","scrollbarTop","track","swapXY","addEvents","mouseDownHandler","bind","mouseMoveHandler","mouseUpHandler","buttonToMinClick","buttonToMaxClick","trackClick","hasTouch","updatePosition","DOMEvent","cursorToScrollbarPosition","calculatedWidth","xOffset","barWidth","yOffset","scroller","removeEvents","drawScrollbarButton","rect","render","pointer","normalize","initPositions","grabbedCenter","touches","hasDragged","rendered","trackBorderRadius","show","showFull","svg","isBoosting","pinchType","zoomType","zoomed","previousZoom","newMin","newMax","AdditionsClass","clamp","erase","filter","maskInside","handles","backgroundColor","borderColor","maskFill","outlineColor","outlineWidth","fillOpacity","className","tickLength","gridLineColor","gridLineWidth","labels","crosshair","minPadding","maxPadding","tickWidth","zoomedMin","zoomedMax","shades","outlineHeight","outline","navigatorSize","navigatorSeries","navigatorOptions","navigatorGroup","navigatorEnabled","baseSeries","drawHandle","parseInt","drawOutline","scrollbarHeight","drawMasks","renderElements","visibility","symbol","fake","minRange","maxRange","plotLeft","plotHeight","toValue","grabbedLeft","grabbedRight","fixedWidth","addMouseEvents","onMouseMove","onMouseUp","getPartsEvents","modifyNavigatorAxisExtremes","shadesMousedown","dragOffset","reversedExtremes","getUnionExtremes","handlesMousedown","otherHandlePos","fixedExtreme","pageX","setTimeout","triggerOp","keys","removeBaseSeriesEvents","updatedDataHandler","modifyBaseAxisExtremes","setBaseSeries","scrollbarEnabled","scrollbarOptions","isDirtyBox","isX","zoomEnabled","offsets","alignTicks","updateNavigatorSeries","unbindRedraw","addBaseSeriesEvents","addChartEvents","showInNavigator","padXAxis","showInLegend","inactive","opacity","hasNavigatorData","initSeries","setVisible","remove","getBaseSeriesMin","stickToMin","stickToMax","shouldStickToMin","pointStart","axes","Navigator","legend","spacing","extraBottomMargin","getHeight","layout","floating","legendHeight","setAxisSize","callbacks","createElement","discardElement","pad","pInt","allButtonsEnabled","buttonSpacing","dropdown","buttonTheme","inputBoxBorderColor","inputBoxHeight","inputBoxWidth","inputDateFormat","inputDateParser","inputEditDateFormat","inputEnabled","inputPosition","inputSpacing","buttonPosition","inputStyle","labelStyle","rangeSelectorZoom","rangeSelectorFrom","rangeSelectorTo","defaultButtons","initialButtonGroupWidth","clickButton","_range","setSelected","forcedDataGrouping","frozenStates","preserveDataGrouping","minFromRange","deferredYTDClick","MIN_VALUE","getYTDExtremes","useUTC","_offsetMin","_offsetMax","selectedIndex","rangeSelectorButton","minInput","maxInput","blur","computeButtonRange","updateButtonStates","hasVisibleSeries","state","disabled","offsetMin","offsetMax","getInputValue","defaultInputDateParser","setInputValue","minDateBox","maxDateBox","getAttribute","setAttribute","inputTypeFormats","setInputExtremes","showInput","inputGroup","border","offsetWidth","offsetHeight","hideInput","isSafari","lastIndexOf","Date","getTimezoneOffset","UTC","drawInput","focus","some","boxShadow","fontFamily","onfocus","onblur","doc","activeElement","onchange","onkeypress","keyCode","onkeydown","onkeyup","dateBox","input","getPosition","buttonTop","inputTop","getTime","renderButtons","parentNode","insertBefore","minLabel","maxLabel","getBBox","alignElements","buttonGroup","isMS","currentButtonIndex","zoomText","paddingLeft","paddingRight","textContent","textStr","button","events","click","isActive","select","navigation","titleCollision","positionButtons","alignButtonGroup","placed","hasLoaded","spacingBox","handleCollision","alignAttr","marginTop","alignOptions","collapseButtons","expandButtons","showDropdown","hideDropdown","hasVisibleDropdown","subtitle","window","HTMLElement","date","set","RangeSelector","display","updateNames","setScale","getAxisMargins","extraTopMargin","marginBottom","overflow","showLastLabel","categories","getOptions","crosshairs","createAxis","stockChart","borderWidth","radius","_labelPanes","coll","isLinked","translatedValue","force","acrossPanes","transB","crispPolyLine","crossLabel","cross","logarithmic","tickPosition","snap","lin2log","labelAlign","colorIndex","borderRadius","labelGroup","formatter","isPointInside","forceCropping","Scrollbar","StockChart","Chart","Point"],"sourceRoot":""}