{"version":3,"file":"static/js/6990.b513a0cc.chunk.js","mappings":"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","sources":["modules/logo/components/ComboBox.tsx","modules/logo/components/ConfigDrawer.tsx","modules/logo/components/Display.tsx","modules/logo/components/InputField.tsx","modules/logo/pages/MainPage.tsx","modules/logo/state/index.ts","modules/logo/state/initialState.ts","modules/logo/state/reducers.ts"],"sourcesContent":["import { Combobox, IComboboxProps } from \"@faharmony/form\";\r\nimport { theme } from \"@faharmony/theme\";\r\nimport { Text } from \"@faharmony/components\";\r\n\r\n/**\r\n * @author Siddhant Gupta <siddhant@fasolutions.com>\r\n */\r\nexport const ComboBox = (props: IComboboxProps) => {\r\n  return (\r\n    <div>\r\n      {props.label && (\r\n        <div style={{ marginLeft: theme.spacing.sm }}>\r\n          <Text value={props.label} variant=\"h5\" />\r\n        </div>\r\n      )}\r\n      <Combobox {...props} name={props.label} />\r\n      {props.helpText && (\r\n        <Text value={props.helpText} variant=\"small\" color=\"secondary\" />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ComboBox;\r\n","import React from \"react\";\r\nimport { SummaryView } from \"@faharmony/views\";\r\nimport { theme, Box } from \"@faharmony/theme\";\r\nimport { insertQueryParam } from \"@faharmony/router\";\r\n\r\nimport { useModuleState, useDispatch, ModuleActions } from \"../state\";\r\nimport { ComboBox } from \"./ComboBox\";\r\nimport { InputField } from \"./InputField\";\r\n\r\ninterface Obj {\r\n  value: string;\r\n  label: string;\r\n}\r\n\r\nconst configurationOptions = {\r\n  variants: [\r\n    { value: \"all\", label: \"All\" },\r\n    { value: \"company\", label: \"Company branding\" },\r\n    { value: \"platform\", label: \"Apps branding\" },\r\n  ],\r\n  icon: [\r\n    { value: \"all\", label: \"All\" },\r\n    { value: \"transparent\", label: \"Transparent\" },\r\n    { value: \"opaque\", label: \"Opaque\" },\r\n  ],\r\n};\r\n\r\nconst getCurrentOption = (\r\n  option: keyof typeof configurationOptions,\r\n  value: string\r\n) =>\r\n  configurationOptions[option].find((o) => o.value === value) ||\r\n  configurationOptions[option][0];\r\n\r\nconst ColorPicker = ({ onChange }: { onChange: (o: Obj) => void }) => {\r\n  const {\r\n    config: { color },\r\n  } = useModuleState();\r\n  const [value, setValue] = React.useState(color.primary);\r\n  const handleChange = (val: string) => {\r\n    setValue(val);\r\n    onChange({ value: val, label: \"\" });\r\n  };\r\n  return <InputField handleChange={handleChange} value={value} type=\"color\" />;\r\n};\r\n\r\n/**\r\n * @author Siddhant Gupta <siddhant@fasolutions.com>\r\n */\r\nexport const ConfigDrawer = () => {\r\n  const dispatch = useDispatch();\r\n  const { isConfigDrawerOpen, config } = useModuleState();\r\n  const { variant, icon } = config;\r\n\r\n  const handleChange = (\r\n    action: Function,\r\n    option: any,\r\n    defaultValue = \"all\"\r\n  ) => {\r\n    const key = action.toString().split(\"set\")[1];\r\n    const value = option?.value || defaultValue;\r\n    dispatch(action(value));\r\n    insertQueryParam(key, value);\r\n  };\r\n\r\n  return isConfigDrawerOpen ? (\r\n    <SummaryView\r\n      caption=\"Logo\"\r\n      heading=\"Configuration\"\r\n      onClose={() => dispatch(ModuleActions.toggleConfigDrawer())}\r\n    >\r\n      <Box\r\n        direction=\"column\"\r\n        alignItems=\"normal\"\r\n        style={{ padding: theme.spacing.md }}\r\n      >\r\n        <ComboBox\r\n          label=\"Variant\"\r\n          placeholder=\"Select variant...\"\r\n          options={configurationOptions.variants}\r\n          defaultValue={getCurrentOption(\"variants\", variant)}\r\n          onChange={(o: any) => handleChange(ModuleActions.setVariant, o)}\r\n        />\r\n        <ComboBox\r\n          label=\"Icon style\"\r\n          placeholder=\"Select icon style...\"\r\n          options={configurationOptions.icon}\r\n          defaultValue={getCurrentOption(\"icon\", icon)}\r\n          onChange={(o: any) => handleChange(ModuleActions.setIcon, o)}\r\n        />\r\n        <ColorPicker\r\n          onChange={(o: any) => handleChange(ModuleActions.setColor, o)}\r\n        />\r\n      </Box>\r\n    </SummaryView>\r\n  ) : null;\r\n};\r\n\r\nexport default ConfigDrawer;\r\n","import { Accordion, Text, Preloader } from \"@faharmony/components\";\r\n\r\nimport { useModuleState } from \"../state\";\r\n\r\n/**\r\n * @author Siddhant Gupta <siddhant@fasolutions.com>\r\n */\r\nexport const Display = () => {\r\n  const state = useModuleState();\r\n  //   const dispatch = useDispatch();\r\n  if (state.loading) return <Preloader />;\r\n  else\r\n    return (\r\n      <div>\r\n        <Text\r\n          value=\"All generated logos will appear here. They can be configured using side-drawer.\"\r\n          color=\"disabled\"\r\n        />\r\n        <br />\r\n        <br />\r\n        <Accordion\r\n          independent\r\n          panels={[\r\n            {\r\n              id: \"standard\",\r\n              heading: \"Standard logos\",\r\n              defaultActive: true,\r\n              content: <div />,\r\n            },\r\n            {\r\n              id: \"custom\",\r\n              heading: \"Customized logos\",\r\n              defaultActive: true,\r\n              content: <div />,\r\n            },\r\n          ]}\r\n        />\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Display;\r\n","import React from \"react\";\r\nimport { theme, styled } from \"@faharmony/theme\";\r\nimport { Text } from \"@faharmony/components\";\r\n\r\nexport interface IInputFieldProps {\r\n  label?: string;\r\n  helpText?: string;\r\n  value: string;\r\n  placeholder?: string;\r\n  handleChange: (value: string) => void;\r\n  type: string;\r\n}\r\n\r\nconst StyledInput = styled.input`\r\n  height: 36px;\r\n`;\r\n\r\n/**\r\n * @author Siddhant Gupta <siddhant@fasolutions.com>\r\n */\r\nexport const InputField = (props: IInputFieldProps) => {\r\n  const { label, helpText, handleChange } = props;\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) =>\r\n    handleChange(e.target.value);\r\n  return (\r\n    <div>\r\n      {label && (\r\n        <div style={{ marginLeft: theme.spacing.sm }}>\r\n          <Text value={label} variant=\"h5\" />\r\n        </div>\r\n      )}\r\n      <StyledInput {...props} onChange={onChange} />\r\n      {helpText && <Text value={helpText} variant=\"small\" color=\"secondary\" />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputField;\r\n","// {{Sample}}:MainView\r\n\r\nimport { PageView, PrimaryWithSidebarLayout } from \"@faharmony/views\";\r\nimport { useModuleTranslation } from \"@faharmony/module\";\r\nimport { Box } from \"@faharmony/theme\";\r\nimport { Button } from \"@faharmony/components\";\r\nimport { useLocation } from \"@faharmony/router\";\r\nimport { ModuleActions, useModuleState, useDispatch } from \"../state\";\r\nimport { ConfigDrawer, Display } from \"../components\";\r\n\r\nconst PageActions = () => {\r\n  const state = useModuleState();\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Box>\r\n      <Button\r\n        value=\"Configure logo\"\r\n        disabled={state.isConfigDrawerOpen}\r\n        onClick={() => dispatch(ModuleActions.toggleConfigDrawer())}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst useSetState = (): void => {\r\n  const dispatch = useDispatch();\r\n  const search = new URLSearchParams(useLocation().search);\r\n  search.delete(\"tab\");\r\n  if (search.toString()) {\r\n    const jsonString =\r\n      '\"' +\r\n      decodeURI(search.toString())\r\n        .replace(/\"/g, '\\\\\"')\r\n        .replace(/&/g, '\",\"')\r\n        .replace(/=/g, '\":\"') +\r\n      '\"';\r\n    const params = JSON.parse(`{${jsonString}}`);\r\n    Object.entries(params).forEach(([key, val]: [string, any]) => {\r\n      dispatch({ type: `logo/set${key}`, payload: decodeURIComponent(val) });\r\n    });\r\n  }\r\n  dispatch(ModuleActions.setLoading(false));\r\n};\r\n\r\n/**\r\n * Default page of module\r\n * @author Siddhant Gupta <siddhant@fasolutions.com>\r\n */\r\nexport const MainPage = () => {\r\n  const t = useModuleTranslation();\r\n  useSetState();\r\n  return (\r\n    <PageView heading={t(\"moduleName\")} actions={<PageActions />}>\r\n      <PrimaryWithSidebarLayout\r\n        primaryNode={<Display />}\r\n        secondaryNode={<ConfigDrawer />}\r\n      />\r\n    </PageView>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","/**\r\n * State\r\n * ---\r\n *\r\n * This directory contains module state.\r\n * Harmony uses the Redux-Toolkit setup and\r\n * treats each Module as a Slice.\r\n *\r\n * Use other files like `store.ts` and `reducers.ts`\r\n * to maintain the functionality of ModuleState.\r\n * This file is responsible for combining them.\r\n *\r\n * There is no need for separately creating or\r\n * maintaining `actions` as they are generated\r\n * using slice's case reducers.\r\n *\r\n * @readonly No edit required in this file unless\r\n * ModuleId changes.\r\n */\r\n\r\nimport {\r\n  createModuleState,\r\n  createUseModuleStateHook,\r\n  useDispatch,\r\n} from \"@faharmony/state\";\r\nimport initialState, { IModuleState } from \"./initialState\";\r\nimport * as reducers from \"./reducers\";\r\n\r\nconst ModuleID = \"logo\";\r\n\r\n/** Create Module's state using wrapper of createSlice(). */\r\nconst ModuleState = createModuleState({\r\n  /** name should be exact same as Module ID. */\r\n  name: ModuleID,\r\n  /** Initial value of Module's state. */\r\n  initialState,\r\n  /** Object of case reducers to modify Module's state. */\r\n  reducers,\r\n});\r\n\r\nconst {\r\n  useModuleState,\r\n  useModuleStateSelector,\r\n} = createUseModuleStateHook<IModuleState>(ModuleID);\r\n\r\n// Extract `actions` from Module's state\r\nconst { actions: ModuleActions } = ModuleState;\r\n// Export state for Module config and actions for dispatch usage.\r\nexport { ModuleState, ModuleActions, useModuleState, useModuleStateSelector };\r\n// Export State type definition\r\nexport * from \"./initialState\";\r\n\r\nexport { useDispatch };\r\n","/**\r\n * InitialState\r\n * ---\r\n * This file maintains the type definition\r\n * and the actual initialState of the Module.\r\n */\r\n\r\n/** Type definition of the Module's state */\r\nexport interface IModuleState {\r\n  loading: boolean;\r\n  isConfigDrawerOpen: boolean;\r\n  config: {\r\n    size: number;\r\n    color: { primary: string; secondary: string };\r\n    text: string;\r\n    variant: \"all\" | \"company\" | \"platform\";\r\n    icon: \"all\" | \"transparent\" | \"opaque\";\r\n  };\r\n}\r\n\r\nexport const colors = { brand: \"#AE001A\" };\r\n\r\n/** Initial state of Module */\r\nexport default {\r\n  loading: true,\r\n  isConfigDrawerOpen: true,\r\n  config: {\r\n    size: 200,\r\n    color: { primary: colors.brand, secondary: \"\" },\r\n    text: \"\",\r\n    variant: \"all\",\r\n    icon: \"all\",\r\n  },\r\n} as IModuleState;\r\n","/**\r\n * Reducers\r\n * ---\r\n * This file maintains all the reducers (modifiers)\r\n * for the Module's state. The name of reducer will\r\n * become the name of the action.\r\n *\r\n * A case reducer can choose to mutate the passed-in\r\n * state value directly instead of returning a new state.\r\n * This does not actually cause the store state to be\r\n * mutated directly; instead, thanks to immer, the\r\n * mutations are translated to copy operations that\r\n * result in a new state.\r\n */\r\nimport { CaseReducer, PayloadAction } from \"@faharmony/state\";\r\nimport { IModuleState } from \"./initialState\";\r\n\r\n// Generic types for ease-of-use\r\ntype Reducer = CaseReducer<IModuleState>;\r\ntype ReducerWithPayload<T> = CaseReducer<IModuleState, PayloadAction<T>>;\r\ntype Config = IModuleState[\"config\"];\r\n\r\n// -------------------\r\n// Edit reducers below\r\n\r\n/** Reducer without required payload.\r\n * @example dispatch(toggleLoading()) */\r\nexport const toggleLoading: Reducer = (state) => {\r\n  state.loading = !state.loading;\r\n};\r\n\r\n/** Reducer with required payload.\r\n * @example dispatch(setLoading(true)) */\r\nexport const setLoading: ReducerWithPayload<boolean> = (state, { payload }) => {\r\n  state.loading = payload;\r\n};\r\n\r\n/** Reducer with to toggle ConfigDrawer.*/\r\nexport const toggleConfigDrawer: Reducer = (state) => {\r\n  state.isConfigDrawerOpen = !state.isConfigDrawerOpen;\r\n};\r\n\r\nexport const setVariant: ReducerWithPayload<Config[\"variant\"]> = (\r\n  state,\r\n  { payload }\r\n) => {\r\n  state.config.variant = payload;\r\n};\r\n\r\nexport const setIcon: ReducerWithPayload<Config[\"icon\"]> = (\r\n  state,\r\n  { payload }\r\n) => {\r\n  state.config.icon = payload;\r\n};\r\n\r\nexport const setColor: ReducerWithPayload<Config[\"color\"] | string> = (\r\n  state,\r\n  { payload }\r\n) => {\r\n  if (typeof payload === \"string\") {\r\n    const colors = payload.split(\"@\");\r\n    state.config.color.primary = colors[0];\r\n    colors.length > 0 && (state.config.color.secondary = colors[1]);\r\n  } else state.config.color = { ...state.config.color, ...payload };\r\n};\r\n"],"names":["ComboBox","props","_jsxs","children","label","_jsx","style","marginLeft","theme","Text","value","variant","Combobox","_objectSpread","name","helpText","color","configurationOptions","variants","icon","getCurrentOption","option","find","o","ColorPicker","_ref","onChange","useModuleState","config","_React$useState","React","primary","_React$useState2","_slicedToArray","setValue","InputField","handleChange","val","type","ConfigDrawer","dispatch","useDispatch","_useModuleState2","isConfigDrawerOpen","action","defaultValue","arguments","length","undefined","key","toString","split","insertQueryParam","SummaryView","caption","heading","onClose","ModuleActions","Box","direction","alignItems","padding","placeholder","options","Display","loading","Preloader","Accordion","independent","panels","id","defaultActive","content","StyledInput","styled","_templateObject","_taggedTemplateLiteral","e","target","PageActions","state","Button","disabled","onClick","MainPage","t","useModuleTranslation","search","URLSearchParams","useLocation","delete","jsonString","decodeURI","replace","params","JSON","parse","concat","Object","entries","forEach","_ref2","payload","decodeURIComponent","useSetState","PageView","actions","PrimaryWithSidebarLayout","primaryNode","secondaryNode","ModuleID","ModuleState","createModuleState","initialState","reducers","_createUseModuleState","createUseModuleStateHook","useModuleStateSelector","colors","brand","size","secondary","text","toggleLoading","setLoading","toggleConfigDrawer","setVariant","setIcon","_ref3","setColor","_ref4"],"sourceRoot":""}