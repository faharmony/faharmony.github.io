{"version":3,"file":"static/js/4291.261bb64e.chunk.js","mappings":"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","sources":["modules/logo/components/ComboBox.tsx","modules/logo/components/ConfigDrawer.tsx","modules/logo/components/InputField.tsx","modules/logo/state/index.ts","modules/logo/state/initialState.ts","modules/logo/state/reducers.ts"],"sourcesContent":["import { Combobox, IComboboxProps } from \"@faharmony/form\";\r\nimport { theme } from \"@faharmony/theme\";\r\nimport { Text } from \"@faharmony/components\";\r\n\r\n/**\r\n * @author Siddhant Gupta <siddhant@fasolutions.com>\r\n */\r\nexport const ComboBox = (props: IComboboxProps) => {\r\n  return (\r\n    <div>\r\n      {props.label && (\r\n        <div style={{ marginLeft: theme.spacing.sm }}>\r\n          <Text value={props.label} variant=\"h5\" />\r\n        </div>\r\n      )}\r\n      <Combobox {...props} name={props.label} />\r\n      {props.helpText && (\r\n        <Text value={props.helpText} variant=\"small\" color=\"secondary\" />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ComboBox;\r\n","import React from \"react\";\r\nimport { SummaryView } from \"@faharmony/views\";\r\nimport { theme, Box } from \"@faharmony/theme\";\r\nimport { insertQueryParam } from \"@faharmony/router\";\r\n\r\nimport { useModuleState, useDispatch, ModuleActions } from \"../state\";\r\nimport { ComboBox } from \"./ComboBox\";\r\nimport { InputField } from \"./InputField\";\r\n\r\ninterface Obj {\r\n  value: string;\r\n  label: string;\r\n}\r\n\r\nconst configurationOptions = {\r\n  variants: [\r\n    { value: \"all\", label: \"All\" },\r\n    { value: \"company\", label: \"Company branding\" },\r\n    { value: \"platform\", label: \"Apps branding\" },\r\n  ],\r\n  icon: [\r\n    { value: \"all\", label: \"All\" },\r\n    { value: \"transparent\", label: \"Transparent\" },\r\n    { value: \"opaque\", label: \"Opaque\" },\r\n  ],\r\n};\r\n\r\nconst getCurrentOption = (\r\n  option: keyof typeof configurationOptions,\r\n  value: string\r\n) =>\r\n  configurationOptions[option].find((o) => o.value === value) ||\r\n  configurationOptions[option][0];\r\n\r\nconst ColorPicker = ({ onChange }: { onChange: (o: Obj) => void }) => {\r\n  const {\r\n    config: { color },\r\n  } = useModuleState();\r\n  const [value, setValue] = React.useState(color.primary);\r\n  const handleChange = (val: string) => {\r\n    setValue(val);\r\n    onChange({ value: val, label: \"\" });\r\n  };\r\n  return <InputField handleChange={handleChange} value={value} type=\"color\" />;\r\n};\r\n\r\n/**\r\n * @author Siddhant Gupta <siddhant@fasolutions.com>\r\n */\r\nexport const ConfigDrawer = () => {\r\n  const dispatch = useDispatch();\r\n  const { isConfigDrawerOpen, config } = useModuleState();\r\n  const { variant, icon } = config;\r\n\r\n  const handleChange = (\r\n    action: Function,\r\n    option: any,\r\n    defaultValue = \"all\"\r\n  ) => {\r\n    const key = action.toString().split(\"set\")[1];\r\n    const value = option?.value || defaultValue;\r\n    dispatch(action(value));\r\n    insertQueryParam(key, value);\r\n  };\r\n\r\n  return isConfigDrawerOpen ? (\r\n    <SummaryView\r\n      caption=\"Logo\"\r\n      heading=\"Configuration\"\r\n      onClose={() => dispatch(ModuleActions.toggleConfigDrawer())}\r\n    >\r\n      <Box\r\n        direction=\"column\"\r\n        alignItems=\"normal\"\r\n        style={{ padding: theme.spacing.md }}\r\n      >\r\n        <ComboBox\r\n          label=\"Variant\"\r\n          placeholder=\"Select variant...\"\r\n          options={configurationOptions.variants}\r\n          defaultValue={getCurrentOption(\"variants\", variant)}\r\n          onChange={(o: any) => handleChange(ModuleActions.setVariant, o)}\r\n        />\r\n        <ComboBox\r\n          label=\"Icon style\"\r\n          placeholder=\"Select icon style...\"\r\n          options={configurationOptions.icon}\r\n          defaultValue={getCurrentOption(\"icon\", icon)}\r\n          onChange={(o: any) => handleChange(ModuleActions.setIcon, o)}\r\n        />\r\n        <ColorPicker\r\n          onChange={(o: any) => handleChange(ModuleActions.setColor, o)}\r\n        />\r\n      </Box>\r\n    </SummaryView>\r\n  ) : null;\r\n};\r\n\r\nexport default ConfigDrawer;\r\n","import React from \"react\";\r\nimport { theme, styled } from \"@faharmony/theme\";\r\nimport { Text } from \"@faharmony/components\";\r\n\r\nexport interface IInputFieldProps {\r\n  label?: string;\r\n  helpText?: string;\r\n  value: string;\r\n  placeholder?: string;\r\n  handleChange: (value: string) => void;\r\n  type: string;\r\n}\r\n\r\nconst StyledInput = styled.input`\r\n  height: 36px;\r\n`;\r\n\r\n/**\r\n * @author Siddhant Gupta <siddhant@fasolutions.com>\r\n */\r\nexport const InputField = (props: IInputFieldProps) => {\r\n  const { label, helpText, handleChange } = props;\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) =>\r\n    handleChange(e.target.value);\r\n  return (\r\n    <div>\r\n      {label && (\r\n        <div style={{ marginLeft: theme.spacing.sm }}>\r\n          <Text value={label} variant=\"h5\" />\r\n        </div>\r\n      )}\r\n      <StyledInput {...props} onChange={onChange} />\r\n      {helpText && <Text value={helpText} variant=\"small\" color=\"secondary\" />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputField;\r\n","/**\r\n * State\r\n * ---\r\n *\r\n * This directory contains module state.\r\n * Harmony uses the Redux-Toolkit setup and\r\n * treats each Module as a Slice.\r\n *\r\n * Use other files like `store.ts` and `reducers.ts`\r\n * to maintain the functionality of ModuleState.\r\n * This file is responsible for combining them.\r\n *\r\n * There is no need for separately creating or\r\n * maintaining `actions` as they are generated\r\n * using slice's case reducers.\r\n *\r\n * @readonly No edit required in this file unless\r\n * ModuleId changes.\r\n */\r\n\r\nimport {\r\n  createModuleState,\r\n  createUseModuleStateHook,\r\n  useDispatch,\r\n} from \"@faharmony/state\";\r\nimport initialState, { IModuleState } from \"./initialState\";\r\nimport * as reducers from \"./reducers\";\r\n\r\nconst ModuleID = \"logo\";\r\n\r\n/** Create Module's state using wrapper of createSlice(). */\r\nconst ModuleState = createModuleState({\r\n  /** name should be exact same as Module ID. */\r\n  name: ModuleID,\r\n  /** Initial value of Module's state. */\r\n  initialState,\r\n  /** Object of case reducers to modify Module's state. */\r\n  reducers,\r\n});\r\n\r\nconst {\r\n  useModuleState,\r\n  useModuleStateSelector,\r\n} = createUseModuleStateHook<IModuleState>(ModuleID);\r\n\r\n// Extract `actions` from Module's state\r\nconst { actions: ModuleActions } = ModuleState;\r\n// Export state for Module config and actions for dispatch usage.\r\nexport { ModuleState, ModuleActions, useModuleState, useModuleStateSelector };\r\n// Export State type definition\r\nexport * from \"./initialState\";\r\n\r\nexport { useDispatch };\r\n","/**\r\n * InitialState\r\n * ---\r\n * This file maintains the type definition\r\n * and the actual initialState of the Module.\r\n */\r\n\r\n/** Type definition of the Module's state */\r\nexport interface IModuleState {\r\n  loading: boolean;\r\n  isConfigDrawerOpen: boolean;\r\n  config: {\r\n    size: number;\r\n    color: { primary: string; secondary: string };\r\n    text: string;\r\n    variant: \"all\" | \"company\" | \"platform\";\r\n    icon: \"all\" | \"transparent\" | \"opaque\";\r\n  };\r\n}\r\n\r\nexport const colors = { brand: \"#AE001A\" };\r\n\r\n/** Initial state of Module */\r\nexport default {\r\n  loading: true,\r\n  isConfigDrawerOpen: true,\r\n  config: {\r\n    size: 200,\r\n    color: { primary: colors.brand, secondary: \"\" },\r\n    text: \"\",\r\n    variant: \"all\",\r\n    icon: \"all\",\r\n  },\r\n} as IModuleState;\r\n","/**\r\n * Reducers\r\n * ---\r\n * This file maintains all the reducers (modifiers)\r\n * for the Module's state. The name of reducer will\r\n * become the name of the action.\r\n *\r\n * A case reducer can choose to mutate the passed-in\r\n * state value directly instead of returning a new state.\r\n * This does not actually cause the store state to be\r\n * mutated directly; instead, thanks to immer, the\r\n * mutations are translated to copy operations that\r\n * result in a new state.\r\n */\r\nimport { CaseReducer, PayloadAction } from \"@faharmony/state\";\r\nimport { IModuleState } from \"./initialState\";\r\n\r\n// Generic types for ease-of-use\r\ntype Reducer = CaseReducer<IModuleState>;\r\ntype ReducerWithPayload<T> = CaseReducer<IModuleState, PayloadAction<T>>;\r\ntype Config = IModuleState[\"config\"];\r\n\r\n// -------------------\r\n// Edit reducers below\r\n\r\n/** Reducer without required payload.\r\n * @example dispatch(toggleLoading()) */\r\nexport const toggleLoading: Reducer = (state) => {\r\n  state.loading = !state.loading;\r\n};\r\n\r\n/** Reducer with required payload.\r\n * @example dispatch(setLoading(true)) */\r\nexport const setLoading: ReducerWithPayload<boolean> = (state, { payload }) => {\r\n  state.loading = payload;\r\n};\r\n\r\n/** Reducer with to toggle ConfigDrawer.*/\r\nexport const toggleConfigDrawer: Reducer = (state) => {\r\n  state.isConfigDrawerOpen = !state.isConfigDrawerOpen;\r\n};\r\n\r\nexport const setVariant: ReducerWithPayload<Config[\"variant\"]> = (\r\n  state,\r\n  { payload }\r\n) => {\r\n  state.config.variant = payload;\r\n};\r\n\r\nexport const setIcon: ReducerWithPayload<Config[\"icon\"]> = (\r\n  state,\r\n  { payload }\r\n) => {\r\n  state.config.icon = payload;\r\n};\r\n\r\nexport const setColor: ReducerWithPayload<Config[\"color\"] | string> = (\r\n  state,\r\n  { payload }\r\n) => {\r\n  if (typeof payload === \"string\") {\r\n    const colors = payload.split(\"@\");\r\n    state.config.color.primary = colors[0];\r\n    colors.length > 0 && (state.config.color.secondary = colors[1]);\r\n  } else state.config.color = { ...state.config.color, ...payload };\r\n};\r\n"],"names":["ComboBox","props","_jsxs","children","label","_jsx","style","marginLeft","theme","spacing","sm","Text","value","variant","Combobox","name","helpText","color","configurationOptions","variants","icon","getCurrentOption","option","find","o","ColorPicker","_ref","onChange","config","useModuleState","setValue","React","primary","InputField","handleChange","val","type","ConfigDrawer","dispatch","useDispatch","isConfigDrawerOpen","action","defaultValue","arguments","length","undefined","key","toString","split","insertQueryParam","SummaryView","caption","heading","onClose","ModuleActions","toggleConfigDrawer","Box","direction","alignItems","padding","md","placeholder","options","setVariant","setIcon","setColor","StyledInput","styled","input","_templateObject","_taggedTemplateLiteral","e","target","ModuleID","ModuleState","createModuleState","initialState","reducers","useModuleStateSelector","createUseModuleStateHook","actions","colors","brand","loading","size","secondary","text","toggleLoading","state","setLoading","payload","_ref2","_ref3","_ref4"],"sourceRoot":""}