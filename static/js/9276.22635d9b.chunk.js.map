{"version":3,"file":"static/js/9276.22635d9b.chunk.js","mappings":"+wnGAUA,MAaMA,EAASC,IAA6B,IAADC,EAAAC,EACzC,MAAMC,GAAMC,EAAAA,EAAAA,QAAuB,MAC7BC,EAA2B,YAAfL,EAAMM,KAAqBC,EAAQC,GAC9CC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,IAC/BC,GAAWC,EAAAA,EAAAA,UAAQ,IAChBC,OAAOC,KAAKV,GAChBI,QACEO,GACgC,oBAAxBX,EAAUW,SACOC,IAAxBZ,EAAUW,KACTA,EAASE,MAAM,mBAAqBF,EAASE,MAAM,cACxCD,IAAXR,GACmB,KAAlBA,EAAOU,QACPH,EAASI,cAAcF,MAAMT,EAAOY,wBAEzCC,QAAO,CAACC,EAAaC,EAAMC,KAC1B,MAAMC,EAAaC,KAAKC,MAAMH,EAAQ,IAKtC,OAJKF,EAAYG,KACfH,EAAYG,GAAc,IAE5BH,EAAYG,GAAYG,KAAKL,GACtBD,CAAW,GACjB,KACJ,CAAClB,EAAWI,IAETqB,GAAUC,EAAAA,EAAAA,OACb/B,IAEGgC,EAAAA,EAAAA,KAACC,EAAAA,GAAG,CACFC,UAAU,MACVC,MAAO,IACFnC,EAAMmC,MACTC,eAAgB,aAChBC,WAAY,cACZC,SAEDtC,EAAMuC,KAAKvC,EAAMyB,OAAOe,KAAKxB,IAC5B,MAAMQ,EAAOnB,EAAUW,GACvB,OACEgB,EAAAA,EAAAA,KAACS,EAAAA,GAAO,CAENC,MAAO1B,EAAS2B,QAAQ,iBAAkB,IAAIL,UAE9CN,EAAAA,EAAAA,KAACC,EAAAA,GAAG,CAACE,MAAO,CAAES,YAAa,GAAIC,MAAO,QAASP,UAC7CN,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAACtB,KAAMA,OAJTR,EAMG,OAMpB+B,EAAAA,WAGKC,EAAQC,IAAatC,EAAAA,EAAAA,UAAS,GAMrC,OAJAuC,EAAAA,EAAAA,kBAAgB,KAAO,IAADC,EAAAC,EACpBH,GAAa,OAAH9C,QAAG,IAAHA,GAAY,QAATgD,EAAHhD,EAAKkD,eAAO,IAAAF,GAAe,QAAfC,EAAZD,EAAcG,qBAAa,IAAAF,OAAxB,EAAHA,EAA6BG,eAAgB,IAAI,GAC1D,CAAI,OAAHpD,QAAG,IAAHA,GAAY,QAATF,EAAHE,EAAKkD,eAAO,IAAApD,GAAe,QAAfC,EAAZD,EAAcqD,qBAAa,IAAApD,OAAxB,EAAHA,EAA6BqD,gBAG/BC,EAAAA,EAAAA,MAACvB,EAAAA,GAAG,CAACC,UAAU,SAAS/B,IAAKA,EAAKgC,MAAO,CAAEa,OAAQ,QAASV,SAAA,EAC1DN,EAAAA,EAAAA,KAACC,EAAAA,GAAG,CAACY,MAAO,GAAGP,UACbN,EAAAA,EAAAA,KAACyB,EAAAA,GAAS,CACRC,YAAY,SACZhB,MAAOjC,EACPkD,SAAWC,IACTlD,EAAUkD,EAAEC,cAAcnB,MAAM,EAElCoB,aAAa,EACbC,WAAYxD,EAAAA,cAGhByB,EAAAA,EAAAA,KAACgC,EAAAA,cAAI,CACHhB,OAAQA,EACRiB,UAAWrD,EAASsD,OACpBC,SAAUvD,EACVwD,SAAU,GACVvB,MAAO,MAAMP,SAEZR,MAEC,EAIV,EApGauC,KACX,MAAMC,EAAqB,CAAC,UAAW,SAAS9B,KAAI,CAAC+B,EAAI9C,KAAK,CAC5D8C,KACAC,MAAM,GAADC,OAAKF,GACVG,cAAyB,IAAVjD,EACfkD,SAAS3C,EAAAA,EAAAA,KAACjC,EAAK,CAACO,KAAMiE,QAGxB,OACEvC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAQ,CAACC,QAAQ,QAAQC,SAAS,SAASR,KAAM,IAAIA,IAAkB,C","sources":["modules/components/pages/Icons.tsx"],"sourcesContent":["import { PageView } from \"@faharmony/views\";\r\nimport { Icon, Tooltip } from \"@faharmony/components\";\r\nimport * as icons from \"@faharmony/icons\";\r\nimport * as solidIcons from \"@faharmony/icons/solid\";\r\nimport { memo, useMemo, useState, useRef, useLayoutEffect } from \"react\";\r\nimport { Box } from \"@faharmony/theme\";\r\nimport { ITabsProps } from \"@faharmony/navigation\";\r\nimport { FixedSizeList as List, areEqual } from \"react-window\";\r\nimport { TextField } from \"@faharmony/form\";\r\n\r\nconst Page = () => {\r\n  const tabs: ITabsProps[] = [\"Regular\", \"Solid\"].map((id, index) => ({\r\n    id,\r\n    label: `${id}`,\r\n    defaultActive: index === 0,\r\n    content: <Icons type={id}></Icons>,\r\n  }));\r\n\r\n  return (\r\n    <PageView heading=\"Icons\" overflow=\"scroll\" tabs={[...tabs]}></PageView>\r\n  );\r\n};\r\n\r\nconst Icons = (props: { type: string }) => {\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  const iconLists = props.type === \"Regular\" ? icons : solidIcons;\r\n  const [filter, setFilter] = useState(\"\");\r\n  const iconRows = useMemo(() => {\r\n    return Object.keys(iconLists)\r\n      .filter(\r\n        (iconName) =>\r\n          typeof iconLists[iconName] !== \"function\" &&\r\n          iconLists[iconName] !== undefined &&\r\n          (iconName.match(\"IconDefinition\") || iconName.match(\"fa\")) &&\r\n          (filter === undefined ||\r\n            filter.trim() === \"\" ||\r\n            iconName.toLowerCase().match(filter.toLocaleLowerCase()))\r\n      )\r\n      .reduce((resultArray, icon, index) => {\r\n        const chunkIndex = Math.floor(index / 12);\r\n        if (!resultArray[chunkIndex]) {\r\n          resultArray[chunkIndex] = [];\r\n        }\r\n        resultArray[chunkIndex].push(icon);\r\n        return resultArray;\r\n      }, [] as string[][]);\r\n  }, [iconLists, filter]);\r\n\r\n  const IconRow = memo(\r\n    (props: { data: string[][]; index: number; style: any }) => {\r\n      return (\r\n        <Box\r\n          direction=\"row\"\r\n          style={{\r\n            ...props.style,\r\n            justifyContent: \"flex-start\",\r\n            alignItems: \"flex-start\",\r\n          }}\r\n        >\r\n          {props.data[props.index].map((iconName) => {\r\n            const icon = iconLists[iconName];\r\n            return (\r\n              <Tooltip\r\n                key={iconName}\r\n                value={iconName.replace(\"IconDefinition\", \"\")}\r\n              >\r\n                <Box style={{ marginRight: 75, width: \"auto\" }}>\r\n                  <Icon icon={icon}></Icon>\r\n                </Box>\r\n              </Tooltip>\r\n            );\r\n          })}\r\n        </Box>\r\n      );\r\n    },\r\n    areEqual\r\n  );\r\n\r\n  const [height, setHeight] = useState(0);\r\n\r\n  useLayoutEffect(() => {\r\n    setHeight(ref?.current?.parentElement?.offsetHeight || 800);\r\n  }, [ref?.current?.parentElement?.offsetHeight]);\r\n\r\n  return (\r\n    <Box direction=\"column\" ref={ref} style={{ height: \"100%\" }}>\r\n      <Box width={10}>\r\n        <TextField\r\n          placeholder=\"Search\"\r\n          value={filter}\r\n          onChange={(e) => {\r\n            setFilter(e.currentTarget.value);\r\n          }}\r\n          isClearable={true}\r\n          suffixIcon={icons.faSearch}\r\n        ></TextField>\r\n      </Box>\r\n      <List\r\n        height={height}\r\n        itemCount={iconRows.length}\r\n        itemData={iconRows}\r\n        itemSize={35}\r\n        width={\"99%\"}\r\n      >\r\n        {IconRow}\r\n      </List>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["Icons","props","_ref$current2","_ref$current2$parentE","ref","useRef","iconLists","type","icons","solidIcons","filter","setFilter","useState","iconRows","useMemo","Object","keys","iconName","undefined","match","trim","toLowerCase","toLocaleLowerCase","reduce","resultArray","icon","index","chunkIndex","Math","floor","push","IconRow","memo","_jsx","Box","direction","style","justifyContent","alignItems","children","data","map","Tooltip","value","replace","marginRight","width","Icon","areEqual","height","setHeight","useLayoutEffect","_ref$current","_ref$current$parentEl","current","parentElement","offsetHeight","_jsxs","TextField","placeholder","onChange","e","currentTarget","isClearable","suffixIcon","List","itemCount","length","itemData","itemSize","Page","tabs","id","label","concat","defaultActive","content","PageView","heading","overflow"],"sourceRoot":""}