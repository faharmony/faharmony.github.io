{"version":3,"file":"static/js/5986.413de445.chunk.js","mappings":"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","sources":["modules/components/pages/Stepper.tsx"],"sourcesContent":["import { FC, useState, useRef } from \"react\";\r\n\r\nimport { PageView, SummaryView } from \"@faharmony/views\";\r\nimport {\r\n  IStepProps,\r\n  IStepperProps,\r\n  IStepButtonRef,\r\n} from \"@faharmony/navigation\";\r\nimport { Button, useModal } from \"@faharmony/components\";\r\nimport {\r\n  FormControl,\r\n  TextField,\r\n  useForm,\r\n  useFormContext,\r\n  SubmitHandler,\r\n  resetFormValues,\r\n} from \"@faharmony/form\";\r\nimport { Box } from \"@faharmony/theme\";\r\nimport { addToast } from \"@faharmony/core\";\r\n\r\ninterface UserFormInputs {\r\n  firstName: string;\r\n  lastName: string;\r\n  address?: {};\r\n  phone?: string;\r\n  email?: string;\r\n  username: string | undefined;\r\n  password: string | undefined;\r\n}\r\nconst userFormDefaultValues: Partial<UserFormInputs> = {\r\n  firstName: undefined,\r\n  lastName: undefined,\r\n  address: {},\r\n  phone: \"\",\r\n  email: \"\",\r\n  username: \"\",\r\n  password: \"\",\r\n};\r\n\r\nconst UserFirstNameField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label=\"First name\"\r\n        errorText={errors.firstName?.message}\r\n        helpText=\"Firstname of the user.\"\r\n        required\r\n      >\r\n        <TextField\r\n          name=\"firstName\"\r\n          placeholder=\"Enter full name\"\r\n          error={!!errors.firstName}\r\n          ref={register({\r\n            required: \"Firstname is required\",\r\n            minLength: { value: 3, message: \"At least 3 characters required.\" },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst UserLastNameField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label=\"Lastname\"\r\n        helpText=\"Lastname of the user.\"\r\n        errorText={errors.lastName?.message}\r\n        required\r\n      >\r\n        <TextField\r\n          name=\"lastName\"\r\n          placeholder=\"Enter lastname\"\r\n          error={!!errors.lastName}\r\n          ref={register({\r\n            required: \"Lastname is required\",\r\n            minLength: { value: 3, message: \"At least 3 characters required.\" },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst AddressField = ({ i }: { i: number }) => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label={\"Address \" + i}\r\n        errorText={errors.address ? errors.address[i].message : \"\"}\r\n      >\r\n        <TextField\r\n          name={\"address.\" + i}\r\n          placeholder={\"Enter address line \" + i}\r\n          error={errors.address ? !!errors.address[i] : false}\r\n          ref={register}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst PhoneField = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl label=\"Phone\" errorText={errors.phone?.message}>\r\n        <TextField\r\n          name={\"phone\"}\r\n          placeholder=\"Enter phone number\"\r\n          error={!!errors.phone}\r\n          ref={register({\r\n            pattern: {\r\n              value: /^\\d{10}$/,\r\n              message: \"Only 10 digits phone number is allowed \",\r\n            },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst EmailField = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl label=\"Email\" errorText={errors.email?.message}>\r\n        <TextField\r\n          name={\"email\"}\r\n          placeholder=\"Enter email\"\r\n          error={!!errors.email}\r\n          ref={register({\r\n            pattern: {\r\n              value: /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/,\r\n              message: \"Invalid email\",\r\n            },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst UserFormUsernameField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label=\"Username\"\r\n        helpText=\"Login username for the user.\"\r\n        errorText={errors.username?.message}\r\n        required\r\n      >\r\n        <TextField\r\n          name=\"username\"\r\n          placeholder=\"Enter username\"\r\n          error={!!errors.username}\r\n          ref={register({\r\n            required: \"Username is required\",\r\n            minLength: { value: 4, message: \"At least 4 characters required.\" },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst UserFormPasswordField: FC = () => {\r\n  const { register, errors } = useFormContext<UserFormInputs>();\r\n  return (\r\n    <Box direction=\"column\">\r\n      <FormControl\r\n        label=\"Password\"\r\n        helpText=\"Login password for the user.\"\r\n        errorText={errors.password?.message}\r\n        required\r\n      >\r\n        <TextField\r\n          name=\"password\"\r\n          placeholder=\"Enter password\"\r\n          error={!!errors.password}\r\n          ref={register({\r\n            required: \"Passsword is required\",\r\n            minLength: { value: 8, message: \"At least 8 characters required.\" },\r\n          })}\r\n        />\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst Page = () => {\r\n  // https://stackoverflow.com/questions/61380289/react-hook-form-field-value-get-lost-when-i-collapse-add-or-delete-panel\r\n  const [open, setOpen] = useState(true);\r\n\r\n  const [ModalWrapper, openModal, closeModal, isOpen] = useModal(false);\r\n\r\n  const steps: IStepProps[] = [\r\n    {\r\n      label: \"Basic Information and a veryVeryLongWord\",\r\n      completed: false,\r\n      state: \"active\",\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <UserFirstNameField />\r\n          <UserLastNameField />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      label: \"Address\",\r\n      completed: false,\r\n      state: \"active\",\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <AddressField i={0} />\r\n          <AddressField i={1} />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      label: \"Contact\",\r\n      completed: false,\r\n      state: \"active\",\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <PhoneField />\r\n          <EmailField />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      label: \"Credentials\",\r\n      completed: false,\r\n      state: \"active\",\r\n      content: (\r\n        <Box direction=\"column\">\r\n          <UserFormUsernameField />\r\n          <UserFormPasswordField />\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      label: \"Dummy Step\",\r\n      completed: false,\r\n      state: \"active\",\r\n    },\r\n    {\r\n      label: \"Dummy Step 2\",\r\n      completed: false,\r\n      state: \"active\",\r\n    },\r\n  ];\r\n\r\n  const formMethods = useForm<UserFormInputs>({\r\n    defaultValues: userFormDefaultValues,\r\n    shouldUnregister: false,\r\n    mode: \"onBlur\",\r\n  });\r\n\r\n  const { control } = formMethods;\r\n\r\n  const submitButtonRef = useRef<IStepButtonRef>(null);\r\n  const backButtonRef = useRef<IStepButtonRef>(null);\r\n  const nextButtonRef = useRef<IStepButtonRef>(null);\r\n\r\n  const disableButtons = (disable: boolean) => {\r\n    const setSubmitting = submitButtonRef?.current?.setSubmitting;\r\n    setSubmitting && setSubmitting(disable);\r\n\r\n    const back = backButtonRef?.current?.setDisabled;\r\n    back && back(disable);\r\n\r\n    const next = nextButtonRef?.current?.setDisabled;\r\n    next && next(disable);\r\n  };\r\n\r\n  const onSubmit: SubmitHandler<UserFormInputs> = async (\r\n    values: UserFormInputs\r\n  ) => {\r\n    console.log(\"Sent values: \" + JSON.stringify(values));\r\n\r\n    disableButtons(true);\r\n\r\n    await setTimeout(() => {\r\n      addToast({\r\n        id: \"submit\",\r\n        title: \"Information saved\",\r\n        variant: \"positive\",\r\n        persist: false,\r\n      });\r\n      resetFormValues(control);\r\n\r\n      disableButtons(false);\r\n    }, 5000);\r\n  };\r\n\r\n  const stepper: IStepperProps = {\r\n    steps: steps,\r\n    currentStep: 0,\r\n    formMethods: formMethods,\r\n    handleSubmitButton: onSubmit,\r\n    editMode: true,\r\n    submitButtonRef: submitButtonRef,\r\n    backButtonRef: backButtonRef,\r\n    nextButtonRef: nextButtonRef,\r\n  };\r\n\r\n  return (\r\n    <PageView\r\n      heading=\"Stepper component\"\r\n      actions={\r\n        <>\r\n          <Button\r\n            value=\"Open SummaryView\"\r\n            onClick={() => setOpen(true)}\r\n            disabled={open}\r\n          />\r\n\r\n          <Button\r\n            value=\"Open As Modal\"\r\n            onClick={() => {\r\n              openModal();\r\n              setOpen(false); //Close the summary view otherwise it will go on infinite render due to duplicate form.\r\n            }}\r\n            disabled={isOpen}\r\n          />\r\n        </>\r\n      }\r\n    >\r\n      {open && (\r\n        <SummaryView\r\n          caption=\"FA user\"\r\n          heading=\"New user\"\r\n          onClose={() => setOpen(false)}\r\n          stepper={stepper}\r\n        ></SummaryView>\r\n      )}\r\n      <ModalWrapper style={{ height: \"90vh\", width: \"30vw\" }}>\r\n        <SummaryView\r\n          caption=\"FA user\"\r\n          heading=\"New user\"\r\n          onClose={() => closeModal()}\r\n          stepper={stepper}\r\n        ></SummaryView>\r\n      </ModalWrapper>\r\n    </PageView>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["userFormDefaultValues","firstName","undefined","lastName","address","phone","email","username","password","UserFirstNameField","useFormContext","register","errors","direction","label","errorText","message","helpText","required","name","placeholder","error","ref","minLength","value","UserLastNameField","AddressField","i","PhoneField","pattern","EmailField","UserFormUsernameField","UserFormPasswordField","useState","open","setOpen","useModal","ModalWrapper","openModal","closeModal","isOpen","steps","completed","state","content","formMethods","useForm","defaultValues","shouldUnregister","mode","control","submitButtonRef","useRef","backButtonRef","nextButtonRef","disableButtons","disable","setSubmitting","current","back","setDisabled","next","onSubmit","values","console","log","JSON","stringify","setTimeout","addToast","id","title","variant","persist","resetFormValues","stepper","currentStep","handleSubmitButton","editMode","heading","actions","onClick","disabled","caption","onClose","style","height","width"],"sourceRoot":""}