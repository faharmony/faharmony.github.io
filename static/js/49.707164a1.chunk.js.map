{"version":3,"sources":["modules/logo/services/axios.ts","modules/logo/services/api.ts"],"names":["apiInstance","axios","create","baseURL","interceptors","request","use","config","headers","Authorization","getAuthToken","error","Promise","reject","returnStatus","res","status","returnJSON","data","result","console","warn","statusText","returnSuccess","success","displayResult","dir","returnWarning","sampleRestApi","cancelToken","get","then","catch"],"mappings":"8GAAA,iSAMaA,EAAcC,IAAMC,OAAO,CACtCC,QAAQ,2BAKVH,EAAYI,aAAaC,QAAQC,KAC/B,SAACC,GAGC,OADAA,EAAOC,QAASC,cAAhB,iBAA0CC,eAAkB,IACrDH,KAET,SAACI,GAAD,OAAWC,QAAQC,OAAOF,MAGbX,YAQR,IAAMc,EAAe,SAACC,GAAD,OAC1BA,EAAIC,SACY,MAAfD,EAAIC,QAAiC,MAAfD,EAAIC,QAAiC,MAAfD,EAAIC,SAGtCC,EAAa,SAACF,GAAD,OACxBD,EAAaC,GAAOA,EAAIG,KAAKC,OAASC,QAAQC,KAAKN,EAAIO,aAG5CC,EAAgB,SAACR,GAAD,OAC3BD,EAAaC,GAAOA,EAAIG,KAAKC,OAAOK,QAAUJ,QAAQC,KAAKN,EAAIO,aAGpDG,EAAgBL,QAAQM,IAGxBC,EAAgBP,QAAQT,O,iCC7CrC,kEAiBaiB,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,OAC3B7B,UACG8B,IADH,WACmB,CAAED,gBAClBE,KAAKR,iBACLS,MAAML","file":"static/js/49.707164a1.chunk.js","sourcesContent":["// Axios is used for managing REST API calls\r\n// Axios Documentation: https://github.com/axios/axios\r\nimport { getAuthToken, axios, CancelToken } from \"@faharmony/service\";\r\n\r\n// Base API\r\n// Axios instance initialized with common information like baseURL and headers.\r\nexport const apiInstance = axios.create({\r\n  baseURL: `/services/service-name`,\r\n});\r\n\r\n// Interceptor to add current authentication bearer token\r\n// Comment this if no bearer token is required.\r\napiInstance.interceptors.request.use(\r\n  (config) => {\r\n    // Read token from in-memory.\r\n    config.headers!.Authorization = `Bearer ${getAuthToken() || \"\"}`;\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\nexport default apiInstance;\r\n\r\n///////////////////////////\r\n\r\n/**\r\n * Return functions for API call\r\n */\r\n// Return whether request was successful or not.\r\nexport const returnStatus = (res: any): boolean =>\r\n  res.status &&\r\n  (res.status === 200 || res.status === 201 || res.status === 204);\r\n\r\n// Returns JSON data if found, else undefined.\r\nexport const returnJSON = (res: any) =>\r\n  returnStatus(res) ? res.data.result : console.warn(res.statusText);\r\n\r\n// Returns Boolean: True if success\r\nexport const returnSuccess = (res: any): boolean =>\r\n  returnStatus(res) ? res.data.result.success : console.warn(res.statusText);\r\n\r\n// Display return data in console\r\nexport const displayResult = console.dir;\r\n\r\n// Warning for API catch\r\nexport const returnWarning = console.error;\r\n\r\n/**\r\n * TypeDefinitions for API props\r\n */\r\n\r\n/**\r\n * Base interface for all API.\r\n * Extend it to create your own interfaces.\r\n */\r\nexport interface ICancelTokenProps {\r\n  cancelToken?: CancelToken;\r\n}\r\n","/**\r\n * List of all REST API used in this module.\r\n */\r\nimport apiInstance, {\r\n  ICancelTokenProps,\r\n  returnSuccess,\r\n  returnWarning,\r\n} from \"./axios\";\r\n\r\n// The following API functions use an initialized instance of Axios\r\n// @see axios.ts\r\n// @param cancelToken is optional and can be used to interrupt api call.\r\n\r\n/**\r\n * Get all files/folders in a directory\r\n * @returns Array of file objects\r\n */\r\nexport const sampleRestApi = ({ cancelToken }: ICancelTokenProps) =>\r\n  apiInstance\r\n    .get(`endpoint`, { cancelToken })\r\n    .then(returnSuccess)\r\n    .catch(returnWarning);\r\n"],"sourceRoot":""}