{"version":3,"sources":["../../src/style.ts","../../src/components/SingleRowActionMenu.tsx","../../src/components/CheckedIcon.tsx","../../src/plugins/addColumns.tsx","../../src/plugins/useExportData.ts","../../src/plugins/utils.tsx","../../src/table/TableFoot.tsx","../../src/actions/common.ts","../../src/table/TableHead.tsx","../../src/table/TableBody.tsx","../../src/table/TablePagination.tsx","../../src/components/filters.tsx","../../src/index.tsx","../../src/actions/index.tsx","../../src/actions/useExportAction.tsx","../../src/actions/useColumnSelectAction.tsx","../../src/actions/rowActions.tsx","modules/components/pages/Table.tsx"],"names":["Styles","styled","div","Theme","colorBackground","colorOutline","spacing","colorText","radius","p","handleRowClick","handleRowDblClick","SingleRowActionMenu","singleRowActions","rowObject","row","original","tableProps","singleRowActionList","React","ButtonPopover","icon","faEllipsisHAlt","popoverMenuItems","map","action","id","label","tooltip","onClick","tint","variant","CheckedIcon","onChange","checked","indeterminate","title","style","e","preventDefault","stopPropagation","Icon","faMinusSquare","faCheckSquare","faSquare","systemColumnsIds","defaultGetExportFileName","all","defaultGetExportHeaderValue","col","name","Header","defaultGetExportCellValue","values","useInstance","instance","rows","initialRows","allColumns","disableExport","getExportFileName","forEach","column","canExport","args","i","length","getFirstDefined","undefined","exportData","useCallback","type","fileType","fileName","colHeader","filter","isVisible","includes","getExportHeaderValue","columnObj","console","warn","exportableRows","data","getExportCellValue","fileBlob","csvString","unparse","Blob","dataUrl","URL","createObjectURL","link","document","createElement","download","href","click","fields","Object","assign","useExportData","hooks","push","pluginName","commonButtonOptions","outline","TableHead","enableFilter","tableInstance","headerGroups","toggleAllRowsExpanded","isAllRowsExpanded","enableSorting","enableMultipleRowSelect","renderRowSubComponent","enableExpand","subRows","headerGroup","Fragment","key","uuid","getHeaderGroupProps","headers","index","sortColumn","disableSortBy","getHeaderProps","width","minWidth","maxWidth","textAlign","align","Grid","gridTemplate","className","cursor","faCaretDown","faCaretRight","render","isSorted","isSortedDesc","clearSortBy","toggleSortBy","faSortAmountDown","faSortAmountUpAlt","color","faSortAlt","canFilter","TableBody","singleClickTimer","getTableBodyProps","page","prepareRow","toggleAllRowsSelected","toggleRowSelected","toggleRowExpanded","visibleColumns","handleRowContextClick","enablePagination","visibleRows","clickCount","getRowProps","setTimeout","clearTimeout","onContextMenu","isSelected","cells","cell","getCellProps","canExpand","paddingLeft","depth","isExpanded","paddingTop","colSpan","TableFooter","columns","footerGroups","empty","Footer","group","getFooterGroupProps","getFooterProps","padding","calcShowingRows","pageSize","pageIndex","totalRows","end","TablePagination","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","state","isLoading","targetRef","useRef","wideEnough","useElementDimensions","StyledPagination","ref","Box","Text","value","justifyContent","Button","faAngleDoubleLeft","disabled","faAngleLeft","marginTop","min","placeholder","step","max","target","Number","faAngleRight","faAngleDoubleRight","DefaultColumnFilter","props","filterValue","setFilter","TextField","autoFocus","defaultValue","fuzzyTextFilterFn","matchSorter","keys","autoRemove","val","Table","defaultRowsOnPage","tableHeading","borderless","hideHeader","disableSubRowSelect","tableData","useMemo","Array","fill","tableColumns","Cell","Skeleton","height","defaultColumn","Filter","Filters","hiddenColumns","hidden","useTable","selectMultipleRows","selectSubRows","initialState","getSubRows","useFilters","useSortBy","useExpanded","usePagination","useRowSelect","getToggleAllRowsSelectedProps","every","Boolean","isAllRowsSelected","selectedRowIds","startColumns","endColumns","disableFilters","getToggleRowSelectedProps","useEffect","toggleHideColumn","enableFiltering","tableActions","exportTable","enableColumnVisibilitySelector","setAllFilters","useState","exportAction","exportActions","isArray","indexOf","faFileCsv","faShare","columnSelectAction","useModal","ModalWrapper","openModal","closeModal","hiddenCols","some","hid","toString","shownCols","faColumns","ContentView","headerTitle","headerActions","Close","TransferShuttle","shuttle1","heading","items","handleAcceptTransfer","item","shuttle2","actions","selectedFlatRows","multipleRowActions","selectedRowIdsList","entries","isRowSelected","selectedRows","rowActionList","Divider","vertical","rowActions","fasFilter","falFilter","prev","tableKey","table","customStyle","getTableProps","TableFoot","stretchHeight","headerHidden","footerContent","overflow","TableView","showContent","setShowContent","useTimeout","age","category","accessor","disableFilter","log","alert","faTerminal"],"mappings":"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","file":"static/js/1.cf6b6ec9.chunk.js","sourcesContent":["/* eslint-disable react/display-name */\n//https://github.com/tannerlinsley/react-table/\n\nimport { styled, Theme } from \"@faharmony/theme\";\n\ninterface StyleProps {\n  handleRowClick: any;\n  handleRowDblClick: any;\n}\n\nexport const Styles = styled.div<StyleProps>`\n  /* This is required to make the table full-width */\n  display: block;\n  max-width: 100%;\n  width: 100%;\n  height: 100%;\n  min-height: 120px;\n  background-color: ${() => Theme.colorBackground(\"base\")};\n\n  table {\n    table-layout: fixed;\n    width: auto;\n    min-width: 100%;\n    border-spacing: 0;\n    position: relative;\n\n    thead {\n      tr {\n        min-height: 40px;        \n\n        th {\n          position: sticky;\n          top: 0;\n          background-color: ${() => Theme.colorBackground(\"disabled\")};\n          border-bottom: 1px solid ${() => Theme.colorOutline(\"border\")};\n          border-right: 1px solid ${() => Theme.colorOutline(\"border\")};\n          min-height: 40px;\n          z-index: 200;\n\n          margin: 0;\n          text-align: left;\n          padding: ${() => Theme.spacing()};\n\n          :last-child {\n            border-right: 0;\n          }\n\n          &.fixedColumnStart,\n          &.fixedColumnEnd {\n            position: sticky;\n            z-index: 250;\n          }\n          &.fixedColumnStart {\n            left: 0;\n          }\n          &.fixedColumnEnd {\n            right: 0;\n          }\n\n          .table-header-sort {\n            /* position: absolute;\n            right: ${() => Theme.spacing(\"sm\")};\n            top: ${() => Theme.spacing()}; */\n            color: ${() => Theme.colorText(\"disabled\")};\n            opacity: 0.5;\n            cursor: pointer;\n\n            :hover {\n              opacity: 1;\n            }\n          }\n        }\n      }\n\n      .filterRow {\n        th {\n          position: sticky;\n          top: 40px;\n          padding: ${() => Theme.spacing(\"sm\")};\n          background-color: ${() => Theme.colorBackground(\"disabled\")};\n          z-index: 250;\n\n          input,\n          button,\n          select {\n            font-family: inherit;\n            color: ${() => Theme.colorText(\"primary\")};\n            background-color: ${() => Theme.colorBackground(\"base\")};\n            border-radius: ${() => Theme.radius(\"xs\")};\n            height: 28px;\n            border: 1px solid ${() => Theme.colorOutline(\"border\")};\n            padding: 0 4px;\n          }\n\n          button {\n            width: 28px;\n          }\n        }\n      }\n    }\n\n    tbody tr {\n      position: relative;\n      z-index: 100;\n      cursor: ${(p) =>\n        p.handleRowClick || p.handleRowDblClick ? \"pointer\" : \"initial\"};\n\n      td {\n        margin: 0;\n        text-align: left;\n        padding: ${() => Theme.spacing()};\n        background-color: ${() => Theme.colorBackground(\"base\")};\n\n        :last-child {\n          border-right: 0;\n        }\n\n        &.fixedColumnStart,\n        &.fixedColumnEnd {\n          position: sticky;\n          z-index: 150;\n        }\n        &.fixedColumnStart {\n          left: 0;\n        }\n        &.fixedColumnEnd {\n          right: 0;\n        }\n      }\n\n      &:nth-of-type(odd),\n      &:nth-of-type(odd) td {\n        background-color: ${() => Theme.colorBackground(\"rowAlt\")};\n      }\n\n      &:last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n\n      &.selected,\n      &.selected td {\n        background-color: ${() => Theme.colorBackground(\"selected\")} !important;\n      }\n\n      &:hover,\n      &:hover td {\n        background-color: ${() => Theme.colorBackground(\"hover\")} !important;\n      }\n\n      &.subComponent td {\n        padding: 0;\n        margin: 0;\n        background-color: ${() => Theme.colorBackground(\"elevated\")} !important;\n      }\n    }\n\n    tfoot {\n      position: sticky;\n      z-index: 200;\n      bottom: 0;\n      background-color: ${() => Theme.colorBackground(\"base\")};\n      z-index: 200;\n\n      tr:first-of-type {\n        td {\n          border-top: 1px solid ${() => Theme.colorOutline(\"border\")};\n          border-right: 1px solid ${() => Theme.colorOutline(\"border\")};\n          :last-child {\n            border-right: 0;\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Styles;\n","import React from \"react\";\nimport { faEllipsisHAlt } from \"@faharmony/icons\";\nimport { Row } from \"react-table\";\nimport { ButtonPopover } from \"@faharmony/components\";\n\nimport { ITableProps } from \"../types\";\n\nconst SingleRowActionMenu = <T extends object>({\n  row: { original: rowObject },\n  tableProps: { singleRowActions },\n}: {\n  row: Row<T>;\n  tableProps: ITableProps<T>;\n}) => {\n  const singleRowActionList =\n    (singleRowActions && singleRowActions(rowObject)) || [];\n\n  return (\n    <ButtonPopover\n      icon={faEllipsisHAlt}\n      spacing=\"xs\"\n      popoverMenuItems={singleRowActionList.map((action) => ({\n        id: action.id,\n        label: action.tooltip || \"\",\n        icon: action.icon,\n        onClick: () => action.onClick,\n        tint: action.variant,\n      }))}\n    />\n  );\n};\n\nexport default SingleRowActionMenu;\n","import React from \"react\";\nimport { Icon } from \"@faharmony/components\";\nimport { faSquare } from \"@faharmony/icons\";\nimport { faCheckSquare, faMinusSquare } from \"@faharmony/icons/solid\";\nimport { CSSProperties } from \"@faharmony/theme\";\n\ninterface ICheckedIconProps {\n  onChange?: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  checked?: boolean;\n  title?: string;\n  indeterminate?: boolean;\n  style?: CSSProperties;\n}\n\nexport const CheckedIcon = ({\n  onChange,\n  checked,\n  indeterminate,\n  title,\n  style,\n}: ICheckedIconProps) => (\n  <div\n    onClick={(e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      onChange && onChange(e);\n    }}\n    title={title}\n    style={style}\n  >\n    <Icon\n      icon={indeterminate ? faMinusSquare : checked ? faCheckSquare : faSquare}\n    />\n  </div>\n);\n\nexport default CheckedIcon;\n","import React from \"react\";\nimport { Column, Hooks } from \"react-table\";\nimport ITableProps from \"../types\";\nimport SingleRowActionMenu from \"../components/SingleRowActionMenu\";\nimport CheckedIcon from \"../components/CheckedIcon\";\n\nexport const systemColumnsIds = [\"rowActions\", \"selection\", \"expander\"];\n\nexport const addColumns = <T extends object>(\n  hooks: Hooks<T>,\n  props: ITableProps<T>\n) => {\n  // Change function on `getToggleAllRowsSelectedProps` if disableSubRowSelect={true}\n  if (props.disableSubRowSelect)\n    hooks.getToggleAllRowsSelectedProps = [\n      (props, { instance }) => [\n        props,\n        {\n          onChange: () => {\n            instance.rows.forEach((row) =>\n              row.toggleRowSelected(\n                !instance.rows.every((row) => row.isSelected)\n              )\n            );\n          },\n          checked:\n            instance.rows.length > 0 &&\n            instance.rows.every((row) => row.isSelected),\n          title: \"Toggle All Rows Selected\",\n          indeterminate: Boolean(\n            !instance.isAllRowsSelected &&\n              Object.keys(instance.state.selectedRowIds).length\n          ),\n        },\n      ],\n    ];\n\n  hooks.visibleColumns.push((columns) => {\n    const startColumns: Column<T>[] = [];\n    const endColumns: Column<T>[] = [];\n    // Add row to show checkbox for multi-row-select\n    props.enableMultipleRowSelect &&\n      startColumns.push({\n        id: \"selection\",\n        width: 40,\n        disableSortBy: true,\n        disableFilters: true,\n        className: \"fixedColumnStart\",\n        // eslint-disable-next-line react/display-name\n        Header: (row) => (\n          <CheckedIcon {...row.getToggleAllRowsSelectedProps()} />\n        ),\n        // eslint-disable-next-line react/display-name\n        Cell: ({ row }: any) => {\n          return props.disableSubRowSelect && row.depth > 0 ? null : (\n            <CheckedIcon {...row.getToggleRowSelectedProps()} />\n          );\n        },\n      });\n\n    // Add column to show actions dropdown\n    props.singleRowActions &&\n      endColumns.push({\n        id: \"rowActions\",\n        width: 40,\n        disableSortBy: true,\n        disableFilters: true,\n        className: \"fixedColumnEnd\",\n        // eslint-disable-next-line react/display-name\n        Cell: ({ row }: any) => (\n          <SingleRowActionMenu row={row} tableProps={props} />\n        ),\n      });\n\n    return [...startColumns, ...columns, ...endColumns];\n  });\n};\n\nexport default addColumns;\n","import React from \"react\";\nimport { TableInstance, Hooks, ColumnInstance, Row } from \"react-table\";\nimport { unparse } from \"papaparse\";\n\nimport { systemColumnsIds } from \"../plugins/addColumns\";\nimport { getFirstDefined } from \"./utils\";\n\ntype HeaderName = string | number | object | undefined;\n\ntype FileType = \"csv\";\n\ninterface ExportFile {\n  data: { fields: HeaderName[]; data: any[][] };\n  fileName: string;\n  type: string;\n}\n\nexport interface UseExportDataColumnProps<T extends object> {\n  canExport: boolean;\n  disableExport: boolean;\n  getExportHeaderValue: (col: ColumnInstance<T>) => HeaderName;\n  getExportCellValue: (\n    row: Row<T>,\n    col: { id: string; name: HeaderName; columnObj: ColumnInstance<T> }\n  ) => any;\n}\n\nexport interface UseExportDataInstanceProps {\n  exportData: ({\n    all,\n    type,\n    fileName,\n  }: {\n    all?: boolean;\n    type?: FileType;\n    fileName?: string;\n  }) => void;\n}\n\n// Get exported file name(do not specify extension here)\nconst defaultGetExportFileName = ({\n  all,\n}: {\n  fileType: string;\n  all: boolean;\n}): string => {\n  return `${all ? \"all-\" : \"\"}data`;\n};\n\n// To get column name while exporting\nconst defaultGetExportHeaderValue = <T extends object>(\n  col: ColumnInstance<T>\n) => {\n  let name = col.Header;\n  if (typeof name === \"object\" || typeof name === \"function\") {\n    name = col.id;\n  }\n  return name;\n};\n\n// To get cell value while exporting\nconst defaultGetExportCellValue = <T extends object>(\n  row: Row<T>,\n  col: { id: string; name: HeaderName; columnObj: ColumnInstance<T> }\n) => {\n  return row.values[col.id];\n};\n\nfunction getCsvBlob(data: ExportFile[\"data\"]) {\n  const csvString = unparse(data);\n  return new Blob([csvString], { type: \"text/csv\" });\n}\n\nfunction downloadFileViaBlob(fileBlob: Blob, fileName: string, type: string) {\n  if (fileBlob) {\n    const dataUrl = URL.createObjectURL(fileBlob);\n    const link = document.createElement(\"a\");\n    link.download = `${fileName}.${type}`;\n    link.href = dataUrl;\n    link.click();\n  }\n}\n\nfunction exportFile({ data, fileName, type }: ExportFile) {\n  let fileBlob = null;\n\n  if (type === \"csv\") {\n    fileBlob = getCsvBlob(data);\n  } else if (type === \"xlsx\") {\n    // Todo\n  } else if (type === \"pdf\") {\n    // Todo\n  }\n  // keep on adding support for different file types here\n  else {\n    console.warn(\"Not Supported File Type\");\n  }\n\n  fileBlob && downloadFileViaBlob(fileBlob, fileName, type);\n}\n\nfunction useInstance<D extends object>(instance: TableInstance<D>) {\n  const {\n    rows,\n    initialRows,\n    allColumns,\n    disableExport,\n    getExportFileName = defaultGetExportFileName,\n  } = instance;\n\n  // Adding `canExport` meta data\n  allColumns.forEach((column) => {\n    const canExport = column.id\n      ? getFirstDefined(\n          column.disableExport === true ? false : undefined,\n          disableExport === true ? false : undefined,\n          true\n        )\n      : false;\n\n    column.canExport = canExport;\n  });\n\n  // This method will enable export of data on `instance` object\n  const exportData = React.useCallback(\n    ({ all = false, type: fileType = \"csv\", fileName = \"\" } = {}) => {\n      const colHeader = allColumns\n        .filter(\n          (col) =>\n            col.canExport &&\n            (all || col.isVisible) &&\n            !systemColumnsIds.includes(col.id)\n        )\n        .map((col) => {\n          const { getExportHeaderValue = defaultGetExportHeaderValue } = col;\n          return {\n            id: col.id,\n            name: getExportHeaderValue(col),\n            columnObj: col,\n          };\n        });\n\n      if (colHeader.length === 0) {\n        console.warn(\"No exportable columns are available\");\n      }\n\n      let exportableRows = rows;\n      if (all) {\n        exportableRows = initialRows;\n      }\n\n      const data = exportableRows.map((row) => {\n        return colHeader.map((col) => {\n          const {\n            getExportCellValue = defaultGetExportCellValue,\n          } = col.columnObj;\n\n          return getExportCellValue(row, col);\n        });\n      });\n\n      const headerNames = colHeader.map((col) => col.name);\n\n      const exportData = { fields: headerNames, data };\n\n      const name: string =\n        fileName !== \"\" ? fileName : getExportFileName({ fileType, all });\n\n      exportFile({ data: exportData, fileName: name, type: fileType });\n    },\n    [getExportFileName, initialRows, rows, allColumns]\n  );\n\n  Object.assign(instance, {\n    exportData,\n  });\n}\n\n/**\n * @author Rohit Garg <> (https://github.com/gargroh)\n * @author Siddhant Gupta <siddhant@fasolutions.com>\n */\nexport const useExportData = <D extends object = {}>(hooks: Hooks<D>) => {\n  hooks.useInstance.push(useInstance);\n};\n\nuseExportData.pluginName = \"useExportData\";\n\nexport default useExportData;\n","export function getFirstDefined(...args: any[]) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i];\n    }\n  }\n}\n","import React from \"react\";\nimport { uuid } from \"@faharmony/helpers\";\nimport { Column } from \"react-table\";\nimport { TableChildrenProps } from \"../types\";\nimport { Theme } from \"@faharmony/theme\";\n\nconst isFooterEmpty = <T extends object>(columns: Column<T>[]): boolean => {\n  let empty = true;\n  columns.forEach((column) => {\n    if (column.Footer !== undefined) empty = false;\n  });\n  return empty;\n};\n\nexport const TableFooter = <T extends object>({\n  tableInstance,\n  tableProps,\n}: TableChildrenProps<T>) => {\n  const { columns, enableMultipleRowSelect } = tableProps;\n  const { footerGroups } = tableInstance;\n\n  if (isFooterEmpty<T>(columns)) return null;\n\n  return (\n    <tfoot key={uuid()}>\n      {footerGroups.map((group) => (\n        <tr {...group.getFooterGroupProps()} key={uuid()}>\n          {group.headers.map((column, index) => {\n            return (\n              <td {...column.getFooterProps()} key={uuid()}>\n                <div\n                  style={{\n                    textAlign:\n                      index === (enableMultipleRowSelect ? 1 : 0)\n                        ? undefined\n                        : column.align,\n                    padding: Theme.spacing(),\n                  }}\n                >\n                  {column.render(\"Footer\")}\n                </div>\n              </td>\n            );\n          })}\n        </tr>\n      ))}\n    </tfoot>\n  );\n};\n\nexport default TableFooter;\n","import { SMLType } from \"@faharmony/theme\";\n\nexport const commonButtonOptions: { spacing: SMLType; outline: boolean } = {\n  spacing: \"sm\",\n  outline: true,\n};\n","import React from \"react\";\nimport { uuid } from \"@faharmony/helpers\";\nimport { faCaretRight, faCaretDown } from \"@faharmony/icons/solid\";\nimport { ColumnInstance } from \"react-table\";\nimport {\n  faSortAlt,\n  faSortAmountDown,\n  faSortAmountUpAlt,\n} from \"@faharmony/icons\";\nimport { Theme } from \"@faharmony/theme\";\nimport { Icon, Grid } from \"@faharmony/components\";\nimport { TableChildrenProps } from \"../types\";\n\n// enableSorting ? column.getSortByToggleProps() : {}\ninterface TableHeadProps<T extends object> extends TableChildrenProps<T> {\n  enableFilter: boolean;\n}\n\nconst handleSort = <T extends object>(column: ColumnInstance<T>) => {\n  if (column.isSorted) {\n    if (column.isSortedDesc) column.clearSortBy();\n    else column.toggleSortBy(true, false);\n  } else column.toggleSortBy(false, false);\n};\n\nexport const TableHead = <T extends object>({\n  tableInstance,\n  tableProps,\n  enableFilter,\n}: TableHeadProps<T>) => {\n  const {\n    headerGroups,\n    toggleAllRowsExpanded,\n    isAllRowsExpanded,\n  } = tableInstance;\n  const {\n    enableSorting = false,\n    enableMultipleRowSelect,\n    data,\n    renderRowSubComponent,\n  } = tableProps;\n\n  const enableExpand =\n    data.filter((row: any) => (row.subRows ? true : false)).length > 0 ||\n    renderRowSubComponent;\n\n  return (\n    <thead>\n      {headerGroups.map((headerGroup) => (\n        <React.Fragment key={uuid()}>\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column, index) => {\n              const sortColumn = enableSorting && !column.disableSortBy;\n              return (\n                <th\n                  {...column.getHeaderProps()}\n                  title=\"\"\n                  style={{\n                    width: column.width !== 150 ? `${column.width}px` : \"auto\",\n                    minWidth: column.minWidth + \"px\",\n                    maxWidth: column.maxWidth + \"px\",\n                    textAlign:\n                      index === (enableMultipleRowSelect ? 1 : 0)\n                        ? undefined\n                        : column.align,\n                  }}\n                >\n                  <Grid\n                    gridTemplate=\"auto / 1fr max-content\"\n                    className={column.className}\n                  >\n                    <div className=\"h5\">\n                      {enableExpand &&\n                      ((enableMultipleRowSelect && index === 1) ||\n                        (!enableMultipleRowSelect && index === 0)) ? (\n                        // Row which can expand\n                        <Grid gridTemplate=\"1fr / max-content 1fr\">\n                          <div\n                            style={{ cursor: \"pointer\" }}\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              toggleAllRowsExpanded();\n                            }}\n                          >\n                            <Icon\n                              icon={\n                                isAllRowsExpanded ? faCaretDown : faCaretRight\n                              }\n                            />\n                          </div>\n                          {column.render(\"Header\")}\n                        </Grid>\n                      ) : (\n                        column.render(\"Header\")\n                      )}\n                    </div>\n\n                    {sortColumn && (\n                      <div\n                        className=\"table-header-sort\"\n                        title=\"Sort column\"\n                        onClick={() => handleSort<T>(column)}\n                      >\n                        {column.isSorted ? (\n                          <Icon\n                            icon={\n                              column.isSortedDesc\n                                ? faSortAmountDown\n                                : faSortAmountUpAlt\n                            }\n                            color={Theme.colorText(\"primary\")}\n                          />\n                        ) : (\n                          <Icon icon={faSortAlt} />\n                        )}\n                      </div>\n                    )}\n                  </Grid>\n                </th>\n              );\n            })}\n          </tr>\n          {enableFilter ? (\n            <tr className=\"filterRow\" key={\"filterRow\"}>\n              {headerGroup.headers.map((column) => (\n                <th key={uuid()}>\n                  {column.canFilter ? column.render(\"Filter\") : null}\n                </th>\n              ))}\n            </tr>\n          ) : null}\n        </React.Fragment>\n      ))}\n    </thead>\n  );\n};\n\nexport default TableHead;\n","import React from \"react\";\nimport { Row } from \"react-table\";\nimport { faCaretRight, faCaretDown } from \"@faharmony/icons/solid\";\nimport { uuid } from \"@faharmony/helpers\";\nimport { Theme } from \"@faharmony/theme\";\nimport { Icon, Grid } from \"@faharmony/components\";\n\nimport { TableChildrenProps } from \"../types\";\n\nexport const TableBody = <T extends Record<string, any>>({\n  tableInstance,\n  tableProps,\n}: TableChildrenProps<T>) => {\n  const {\n    getTableBodyProps,\n    rows,\n    page,\n    prepareRow,\n    toggleAllRowsSelected,\n    toggleRowSelected,\n    toggleRowExpanded,\n    visibleColumns,\n  } = tableInstance;\n  const {\n    handleRowDblClick,\n    handleRowClick,\n    handleRowContextClick,\n    enablePagination,\n    enableMultipleRowSelect,\n    data,\n    renderRowSubComponent,\n  } = tableProps;\n\n  const visibleRows = enablePagination ? page : rows;\n  const enableExpand =\n    data.filter((row: any) => (row.subRows ? true : false)).length > 0 ||\n    renderRowSubComponent;\n\n  // HANDLE CLICK\n  const timeWaitForDoubleClick = 400;\n  let clickCount = 0;\n  let singleClickTimer: NodeJS.Timeout;\n  function handleRowClickAndDblClick(row: Row<T>) {\n    clickCount++;\n    if (clickCount === 1) {\n      singleClickTimer = setTimeout(() => {\n        clickCount = 0;\n        // Selected Row Effect\n        if (!enableMultipleRowSelect) {\n          toggleAllRowsSelected(false);\n          toggleRowSelected(row.id);\n        }\n        // Execute Single Click\n        if (handleRowClick) handleRowClick(row.original);\n      }, timeWaitForDoubleClick);\n    } else if (clickCount === 2) {\n      clearTimeout(singleClickTimer);\n      clickCount = 0;\n      // Execute Double Click\n      if (handleRowDblClick) handleRowDblClick(row.original);\n    }\n  }\n\n  return (\n    <tbody {...getTableBodyProps()}>\n      {visibleRows.map((row) => {\n        prepareRow(row);\n        return (\n          <React.Fragment key={row.id || uuid()}>\n            <tr\n              {...row.getRowProps()}\n              onClick={() => handleRowClickAndDblClick(row)}\n              onContextMenu={(e) => {\n                if (handleRowContextClick) {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  handleRowContextClick(row.original);\n                }\n              }}\n              className={row.isSelected ? \"selected\" : \"\"}\n            >\n              {row.cells.map((cell, index) => {\n                return (\n                  <td\n                    {...cell.getCellProps()}\n                    className={cell.column.className}\n                  >\n                    {enableExpand &&\n                    ((enableMultipleRowSelect && index === 1) ||\n                      (!enableMultipleRowSelect && index === 0)) ? (\n                      // First column with content\n                      row.canExpand || renderRowSubComponent ? (\n                        // Row which can expand\n                        <Grid\n                          gridTemplate=\"auto / max-content auto\"\n                          style={{\n                            paddingLeft: `calc(${row.depth} * ${Theme.spacing(\n                              \"xl\"\n                            )})`,\n                          }}\n                        >\n                          <span\n                            style={{ cursor: \"pointer\" }}\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              toggleRowExpanded([row.id], !row.isExpanded);\n                            }}\n                          >\n                            <Icon\n                              icon={row.isExpanded ? faCaretDown : faCaretRight}\n                            />\n                          </span>\n                          <span style={{ paddingTop: Theme.spacing(\"xs\") }}>\n                            {cell.render(\"Cell\")}\n                          </span>\n                        </Grid>\n                      ) : (\n                        // Row which cannot expand further\n                        <div\n                          style={{\n                            paddingLeft: `calc(${\n                              row.depth + 2\n                            } * ${Theme.spacing(\"xl\")})`,\n                          }}\n                        >\n                          {cell.render(\"Cell\")}\n                        </div>\n                      )\n                    ) : (\n                      // Normal cell\n                      <div\n                        style={{\n                          textAlign:\n                            index === (enableMultipleRowSelect ? 1 : 0)\n                              ? undefined\n                              : cell.column.align,\n                        }}\n                      >\n                        {cell.render(\"Cell\")}\n                      </div>\n                    )}\n                  </td>\n                );\n              })}\n            </tr>\n            {/* SubComponent */}\n            {renderRowSubComponent && !row.canExpand && row.isExpanded && (\n              <tr key=\"subComponent\" className=\"subComponent\">\n                <td colSpan={visibleColumns.length}>\n                  {renderRowSubComponent(row.original)}\n                </td>\n              </tr>\n            )}\n          </React.Fragment>\n        );\n      })}\n    </tbody>\n  );\n};\n\nexport default TableBody;\n","import React, { useRef } from \"react\";\nimport { styled, Theme } from \"@faharmony/theme\";\nimport {\n  faAngleDoubleLeft,\n  faAngleLeft,\n  faAngleRight,\n  faAngleDoubleRight,\n} from \"@faharmony/icons\";\nimport { Text, Box, Button } from \"@faharmony/components\";\nimport { useElementDimensions } from \"@faharmony/helpers\";\nimport { TableChildrenProps } from \"../types\";\n\nconst calcShowingRows = (\n  pageSize: number,\n  pageIndex: number,\n  totalRows: number\n) => {\n  const start = pageIndex * pageSize + 1;\n  const end = pageIndex * pageSize + pageSize;\n  return `${start} - ${end > totalRows ? totalRows : end}`;\n};\n\nexport const TablePagination = <T extends object>({\n  tableInstance,\n  tableProps,\n}: TableChildrenProps<T>) => {\n  const {\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    rows,\n    state,\n  } = tableInstance;\n  const { pageIndex, pageSize } = state;\n\n  const { isLoading } = tableProps;\n\n  const targetRef = useRef<HTMLDivElement>(null);\n  const { width: elWidth } = useElementDimensions(targetRef);\n  const wideEnough = elWidth > 550;\n\n  const StyledPagination = styled.div`\n    display: ${wideEnough ? \"grid\" : \"block\"};\n    background-color: ${() => Theme.colorBackground(\"base\")};\n    grid-template-columns: auto max-content;\n    justify-content: space-between;\n\n    input,\n    select {\n      font-family: inherit;\n      font-weight: bold;\n      font-size: 0.9rem;\n      color: ${() => Theme.colorText(\"primary\")};\n      background-color: ${() => Theme.colorBackground(\"elevated\")};\n      border-radius: ${() => Theme.radius(\"sm\")};\n      height: 28px;\n      border: 1px solid ${() => Theme.colorOutline(\"border\")};\n      padding: 0 4px;\n      text-align: center;\n    }\n  `;\n\n  return (\n    <StyledPagination className=\"pagination\" ref={targetRef}>\n      {wideEnough && (\n        <Box style={{ paddingTop: Theme.spacing(\"sm\") }}>\n          {isLoading ? (\n            <Text value={`Loading...`} color=\"disabled\" />\n          ) : rows.length > 0 ? (\n            <Text\n              value={`Showing ${calcShowingRows(\n                pageSize,\n                pageIndex,\n                rows.length\n              )} of ${rows.length} entries`}\n              color=\"secondary\"\n            />\n          ) : (\n            <Text value={`There are 0 entries`} color=\"disabled\" />\n          )}\n        </Box>\n      )}\n      <Box justifyContent={wideEnough ? \"flex-end\" : \"space-around\"}>\n        <Box justifyContent=\"flex-start\">\n          <Button\n            icon={faAngleDoubleLeft}\n            onClick={() => gotoPage(0)}\n            disabled={!canPreviousPage}\n            spacing=\"sm\"\n            outline\n          />\n          <Button\n            icon={faAngleLeft}\n            onClick={() => previousPage()}\n            disabled={!canPreviousPage}\n            spacing=\"sm\"\n            outline\n          />\n        </Box>\n        <Box\n          justifyContent=\"center\"\n          style={{ paddingTop: Theme.spacing(\"sm\") }}\n          spacing=\"sm\"\n        >\n          <Text value={\"Page\"} />\n          <div style={{ marginTop: \"-4px\" }}>\n            <input\n              type=\"number\"\n              min={1}\n              disabled={!canNextPage && !canPreviousPage}\n              placeholder={\"Page\"}\n              step={1}\n              value={pageIndex + 1}\n              max={pageOptions.length}\n              onChange={(e) => {\n                const page = e.target.value ? Number(e.target.value) - 1 : 0;\n                gotoPage(page);\n              }}\n              style={{ width: \"48px\", maxWidth: \"100px\" }}\n            />\n          </div>\n          <Text value={\"of\"} />\n          <Text value={`${pageOptions.length}`} variant=\"h5\" />\n        </Box>\n        <Box justifyContent=\"flex-end\">\n          <Button\n            icon={faAngleRight}\n            onClick={() => nextPage()}\n            disabled={!canNextPage}\n            spacing=\"sm\"\n            outline\n          />\n          <Button\n            icon={faAngleDoubleRight}\n            onClick={() => gotoPage(pageCount - 1)}\n            disabled={!canNextPage}\n            spacing=\"sm\"\n            outline\n          />\n        </Box>\n      </Box>\n    </StyledPagination>\n  );\n};\n\nexport default TablePagination;\n","import * as React from \"react\";\nimport { TableInstance } from \"react-table\";\nimport matchSorter from \"match-sorter\";\nimport { TextField } from \"@faharmony/form\";\n\n// Define a default UI for filtering\nexport function DefaultColumnFilter(props: TableInstance<any>) {\n  // const count = preFilteredRows.length;\n  const { column } = props;\n  const { filterValue, setFilter } = column;\n  return (\n    <TextField\n      autoFocus={filterValue}\n      defaultValue={filterValue || \"\"}\n      onChange={\n        (e) => setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n      }\n      spacing=\"sm\"\n      placeholder={`Filter...`}\n      textAlign={column.align}\n    />\n  );\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nexport function SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}: any) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach((row: any) => {\n      options.add(row.values[id]);\n    });\n    //@ts-ignore\n    return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  // Render a multi-select box\n  return (\n    <select\n      value={filterValue}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined);\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option: any, i: number) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  );\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nexport function SliderColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}: any) {\n  // Calculate the min and max\n  // using the preFilteredRows\n\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row: any) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <div style={{ display: \"grid\", gridTemplateColumns: \"auto max-content\" }}>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={filterValue || min}\n        onChange={(e) => {\n          setFilter(parseInt(e.target.value, 10));\n        }}\n      />\n      <button onClick={() => setFilter(undefined)}>X</button>\n    </div>\n  );\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nexport function NumberRangeColumnFilter({\n  column: { filterValue = [], preFilteredRows, setFilter, id },\n}: any) {\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row: any) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: \"max-content max-content max-content\",\n        gridGap: \"2px\",\n      }}\n    >\n      <input\n        autoFocus={filterValue[0]}\n        value={filterValue[0] || \"\"}\n        type=\"number\"\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old: any = []) => [\n            val ? parseInt(val, 10) : undefined,\n            old[1],\n          ]);\n        }}\n        placeholder={`Min (${min})`}\n        style={{\n          width: \"70px\",\n          marginRight: \"0rem\",\n        }}\n      />\n      <input\n        autoFocus={filterValue[1]}\n        value={filterValue[1] || \"\"}\n        type=\"number\"\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old: any = []) => [\n            old[0],\n            val ? parseInt(val, 10) : undefined,\n          ]);\n        }}\n        placeholder={`Max (${max})`}\n        style={{\n          width: \"70px\",\n          marginLeft: \"0rem\",\n        }}\n      />\n      <button onClick={() => setFilter(undefined)}>X</button>\n    </div>\n  );\n}\n\nexport function fuzzyTextFilterFn(rows: any, id: any, filterValue: any) {\n  return matchSorter(rows, filterValue, {\n    keys: [(row: any) => row.values[id]],\n  });\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val: any) => !val;\n","//https://github.com/tannerlinsley/react-table/\n\nimport React from \"react\";\nimport {\n  useTable,\n  useSortBy,\n  useFilters,\n  usePagination,\n  useRowSelect,\n  useExpanded,\n  ColumnInterface,\n  IdType,\n} from \"react-table\";\n\nimport { uuid } from \"@faharmony/helpers\";\nimport { Theme } from \"@faharmony/theme\";\nimport { Box, Skeleton } from \"@faharmony/components\";\nimport { ContentView } from \"@faharmony/views\";\n\nimport Styles from \"./style\";\nimport ITableProps, { IColumnProps } from \"./types\";\nimport useExportData from \"./plugins/useExportData\";\nimport addColumns from \"./plugins/addColumns\";\n\nimport UseTableActions from \"./actions\";\nimport TableHead from \"./table/TableHead\";\nimport TableBody from \"./table/TableBody\";\nimport TableFoot from \"./table/TableFoot\";\nimport TablePagination from \"./table/TablePagination\";\n\nimport * as Filters from \"./components/filters\";\n\n/**\n * Table\n * ---\n * @author Siddhant Gupta <siddhant@fasolutions.com>\n *\n * @example\n * <Table<RowProp> data={[]} columns={[]} />;\n */\nconst Table = <T extends object>(props: ITableProps<T>) => {\n  const {\n    columns,\n    data,\n    enableMultipleRowSelect = false,\n    defaultRowsOnPage = 100,\n    enablePagination = false,\n    tableHeading = \"\",\n    borderless = false,\n    hideHeader = false,\n    disableSubRowSelect = false,\n    isLoading = false,\n  } = props;\n\n  // Loading\n  const tableData = React.useMemo(\n    () => (isLoading ? Array(30).fill({} as T) : data),\n    [isLoading, data]\n  );\n\n  // Loading\n  const tableColumns = React.useMemo(\n    () =>\n      isLoading\n        ? columns.map((column) => ({\n            ...column,\n            Cell: <Skeleton height=\"20px\" />,\n          }))\n        : columns,\n    [isLoading, columns]\n  );\n\n  const defaultColumn: ColumnInterface<T> = React.useMemo(\n    () => ({\n      Filter: Filters.DefaultColumnFilter,\n    }),\n    []\n  );\n\n  const hiddenColumns: IdType<T>[] = React.useMemo(\n    () =>\n      columns\n        .filter((column) => column.hidden === true)\n        .map((column) => column.id || \"\"),\n    [columns]\n  );\n\n  const tableInstance = useTable<T>(\n    {\n      columns: tableColumns,\n      data: tableData,\n      defaultColumn,\n      selectMultipleRows: enableMultipleRowSelect,\n      selectSubRows: !disableSubRowSelect,\n      initialState: {\n        pageIndex: 0,\n        pageSize: defaultRowsOnPage,\n        hiddenColumns,\n      },\n      getSubRows: (row: any) => row.subRows,\n    },\n    useFilters,\n    useSortBy,\n    useExpanded,\n    usePagination,\n    useRowSelect,\n    useExportData,\n    (hooks) => addColumns<T>(hooks, props)\n  );\n\n  React.useEffect(() => {\n    tableInstance.toggleHideColumn(\"selection\", !enableMultipleRowSelect);\n  }, [enableMultipleRowSelect]);\n\n  const { actions, enableFilter } = UseTableActions<T>({\n    tableProps: props,\n    tableInstance,\n  });\n\n  const [tableKey] = React.useState(uuid());\n\n  const table = (\n    <Styles\n      style={{ ...props.customStyle }}\n      id={tableKey}\n      className=\"Table\"\n      handleRowClick={props.handleRowClick}\n      handleRowDblClick={props.handleRowDblClick}\n    >\n      <table {...tableInstance.getTableProps()}>\n        <TableHead<T>\n          tableInstance={tableInstance}\n          tableProps={props}\n          enableFilter={enableFilter}\n        />\n        <TableBody<T> tableInstance={tableInstance} tableProps={props} />\n        <TableFoot<T> tableInstance={tableInstance} tableProps={props} />\n      </table>\n    </Styles>\n  );\n\n  if (borderless) return table;\n\n  return (\n    <ContentView\n      headerTitle={tableHeading || \"\"}\n      stretchHeight\n      headerHidden={hideHeader}\n      headerActions={\n        <Box style={{ paddingTop: Theme.spacing(\"xs\") }}>{actions}</Box>\n      }\n      footerContent={\n        enablePagination && (\n          <TablePagination<T>\n            tableInstance={tableInstance}\n            tableProps={props}\n          />\n        )\n      }\n      overflow={isLoading ? \"hidden\" : \"auto\"}\n    >\n      {table}\n    </ContentView>\n  );\n};\n\nexport { Table, Filters as ColumnFilters, ITableProps, IColumnProps };\n","//https://github.com/tannerlinsley/react-table/\n\nimport React, { useEffect } from \"react\";\nimport { faFilter as falFilter } from \"@faharmony/icons\";\nimport { faFilter as fasFilter } from \"@faharmony/icons/solid\";\nimport { ButtonPopover, Button } from \"@faharmony/components\";\n\nimport { TableChildrenProps } from \"../types\";\nimport { commonButtonOptions } from \"./common\";\nimport { useExportAction } from \"./useExportAction\";\nimport { rowActions } from \"./rowActions\";\nimport { useColumnSelectAction } from \"./useColumnSelectAction\";\n\nexport const useTableActions = <T extends object>({\n  tableInstance,\n  tableProps,\n}: TableChildrenProps<T>) => {\n  const {\n    enableFiltering = false,\n    tableActions = [],\n    exportTable,\n    enableColumnVisibilitySelector = false,\n  } = tableProps;\n  const { setAllFilters } = tableInstance;\n  const [enableFilter, setFilter] = React.useState(false);\n  const exportAction = useExportAction({ tableInstance, tableProps });\n  const columnSelectAction = useColumnSelectAction({\n    tableInstance,\n    tableProps,\n  });\n\n  // Reset all filters\n  useEffect(() => {\n    setAllFilters([]);\n  }, [enableFilter]);\n\n  // Initiate all actions with Row actions.\n  const actions = [...rowActions({ tableInstance, tableProps })];\n\n  // Add custom table actions\n  if (tableActions && Array.isArray(tableActions))\n    tableActions.map((action) =>\n      actions.push(\n        <ButtonPopover {...action} {...commonButtonOptions} key={action.id} />\n      )\n    );\n\n  // Add default table actions\n\n  // Export button\n  if (exportTable) actions.push(exportAction);\n\n  // Column Select button\n  if (enableColumnVisibilitySelector) actions.push(columnSelectAction);\n\n  // Filter Button\n  if (enableFiltering)\n    actions.push(\n      <Button\n        key=\"Filter\"\n        icon={enableFilter ? fasFilter : falFilter}\n        tooltip={\"Filter\"}\n        onClick={() => setFilter((prev: boolean) => !prev)}\n        {...commonButtonOptions}\n      />\n    );\n\n  return { actions, enableFilter };\n};\n\nexport default useTableActions;\n","import React from \"react\";\nimport { faFileCsv, faShare } from \"@faharmony/icons\";\nimport { ButtonPopover } from \"@faharmony/components\";\n\nimport { TableChildrenProps } from \"../types\";\nimport { commonButtonOptions } from \"./common\";\n\nexport const useExportAction = <T extends object>({\n  tableInstance,\n  tableProps,\n}: TableChildrenProps<T>) => {\n  const { exportTable = false, tableHeading } = tableProps;\n  const { exportData } = tableInstance;\n  const exportCSV =\n    exportTable === true ||\n    (Array.isArray(exportTable) && exportTable.indexOf(\"csv\") !== -1);\n  // const exportPDF = exportTable === true || (Array.isArray(exportTable) && exportTable.indexOf('pdf') !== -1);\n  // const exportXLS = exportTable === true || (Array.isArray(exportTable) && exportTable.indexOf('excel') !== -1);\n\n  const exportActions = [];\n  if (exportCSV)\n    exportActions.push({\n      id: \"csv\",\n      label: \"Download CSV\",\n      onClick: () => exportData({ type: \"csv\", fileName: tableHeading }),\n      icon: faFileCsv,\n    });\n\n  return (\n    <div key={\"exportAction\"}>\n      <ButtonPopover\n        icon={faShare}\n        tooltip={\"Export\"}\n        {...commonButtonOptions}\n        popoverMenuItems={exportActions}\n      />\n    </div>\n  );\n};\n\nexport default useExportAction;\n","//https://github.com/tannerlinsley/react-table/\n\nimport React, { useMemo } from \"react\";\nimport { faColumns } from \"@faharmony/icons\";\nimport { Theme } from \"@faharmony/theme\";\nimport { ContentView } from \"@faharmony/views\";\nimport { Button, useModal } from \"@faharmony/components\";\nimport { TransferShuttle } from \"@faharmony/form\";\n\ninterface ItemProps {\n  id: string;\n  value: string;\n}\n\nimport { TableChildrenProps } from \"../types\";\nimport { systemColumnsIds } from \"../plugins/addColumns\";\n\nimport { commonButtonOptions } from \"./common\";\n\nexport const useColumnSelectAction = <T extends object>({\n  tableInstance,\n}: TableChildrenProps<T>) => {\n  const { state, toggleHideColumn, visibleColumns, allColumns } = tableInstance;\n  const { hiddenColumns } = state;\n  const [ModalWrapper, openModal, closeModal] = useModal();\n\n  const hiddenCols: ItemProps[] = useMemo(\n    () =>\n      hiddenColumns\n        ? allColumns\n            .filter(\n              (column) =>\n                hiddenColumns.some((hid) => hid === column.id) &&\n                !systemColumnsIds.includes(column.id)\n            )\n            .map((column) => ({\n              id: column.id.toString(),\n              value: column.Header?.toString() || \"\",\n            }))\n        : [],\n    [allColumns, hiddenColumns]\n  );\n\n  const shownCols: ItemProps[] = useMemo(\n    () =>\n      visibleColumns\n        ? visibleColumns\n            .filter((column) => !systemColumnsIds.includes(column.id))\n            .map((column) => ({\n              id: column.id.toString(),\n              value: column.Header?.toString() || \"\",\n            }))\n        : [],\n    [visibleColumns]\n  );\n\n  const hideColumns = (items: ItemProps[]) => {\n    items.forEach((item) => toggleHideColumn(item.id, true));\n  };\n  const showColumns = (items: ItemProps[]) => {\n    items.forEach((item) => toggleHideColumn(item.id, false));\n  };\n\n  return (\n    <div key={\"columnSelectAction\"}>\n      <Button\n        icon={faColumns}\n        tooltip={\"Select visible columns\"}\n        {...commonButtonOptions}\n        onClick={openModal}\n      />\n      <ModalWrapper>\n        <ContentView\n          headerTitle=\"Select columns\"\n          headerActions={<Button.Close onClick={closeModal} />}\n        >\n          <div style={{ padding: Theme.spacing(), height: \"360px\" }}>\n            <TransferShuttle\n              shuttle1={{\n                heading: \"Available columns\",\n                items: hiddenCols,\n                handleAcceptTransfer: hideColumns,\n              }}\n              shuttle2={{\n                heading: \"Visible columns\",\n                items: shownCols,\n                handleAcceptTransfer: showColumns,\n              }}\n            />\n          </div>\n        </ContentView>\n      </ModalWrapper>\n    </div>\n  );\n};\n\nexport default useColumnSelectAction;\n","//https://github.com/tannerlinsley/react-table/\n\nimport React from \"react\";\nimport { Theme } from \"@faharmony/theme\";\nimport { ButtonPopover, Text, Divider } from \"@faharmony/components\";\n\nimport { TableChildrenProps } from \"../types\";\nimport { commonButtonOptions } from \"./common\";\n\nexport const rowActions = <T extends object>({\n  tableInstance,\n  tableProps,\n}: TableChildrenProps<T>) => {\n  const { selectedFlatRows = [], state } = tableInstance;\n  const { selectedRowIds } = state;\n  const {\n    multipleRowActions,\n    singleRowActions,\n    enableMultipleRowSelect: selectMultipleRows,\n  } = tableProps;\n\n  const selectedRowIdsList = Object.entries(selectedRowIds);\n  const isRowSelected = selectedRowIdsList.length > 0;\n  const selectedRows = selectedFlatRows.map((row) => row.original);\n\n  // If multipleRows enabled, show multipleRowActions, else singleRowActions\n  const rowActionList = selectMultipleRows\n    ? (multipleRowActions && multipleRowActions(selectedRows)) || []\n    : (singleRowActions && singleRowActions(selectedRows[0])) || [];\n\n  const actions = [];\n  if (rowActionList.length > 0) {\n    isRowSelected &&\n      selectMultipleRows &&\n      actions.push(\n        <div key=\"rowSelectedText\" style={{ paddingTop: Theme.spacing(\"sm\") }}>\n          <Text\n            value={`${selectedRowIdsList.length} selected`}\n            color=\"disabled\"\n          />\n        </div>\n      );\n\n    rowActionList.map((action) =>\n      actions.push(\n        <ButtonPopover\n          key={action.id}\n          {...action}\n          {...commonButtonOptions}\n          disabled={!isRowSelected}\n          variant={isRowSelected ? action.variant : \"default\"}\n        />\n      )\n    );\n\n    actions.push(<Divider key={\"actionDivider\"} vertical />);\n  }\n  return actions;\n};\n\nexport default rowActions;\n","import React from \"react\";\nimport { PageView } from \"@faharmony/views\";\nimport { Table } from \"@faharmony/table\";\nimport { useTimeout } from \"@faharmony/helpers\";\nimport { Tag } from \"@faharmony/components\";\nimport { faTerminal } from \"@faharmony/icons\";\n\ninterface IDataProps {\n  name: string;\n  age: number;\n  category: string;\n}\n\nconst TableView = () => {\n  const [showContent, setShowContent] = React.useState(false);\n  useTimeout(() => setShowContent(true), 1000);\n\n  const tableData: IDataProps[] = React.useMemo(\n    () =>\n      showContent\n        ? [\n            {\n              name: \"Siddhant Gupta\",\n              age: 25,\n              category: \"Developer\",\n              subRows: [\n                {\n                  name: \"Shobhit Gupta\",\n                  age: 25,\n                  category: \"Developer\",\n                },\n                { name: \"Other person\", age: 35, category: \"Misc\" },\n              ],\n            },\n            {\n              name: \"Other person\",\n              age: 35,\n              category: \"Misc\",\n              subRows: [\n                {\n                  name: \"Shobhit Gupta\",\n                  age: 25,\n                  category: \"Developer\",\n                },\n                { name: \"Other person\", age: 35, category: \"Misc\" },\n              ],\n            },\n          ]\n        : [],\n    [showContent]\n  );\n\n  const tableColumns: any[] = React.useMemo(\n    () => [\n      {\n        accessor: \"name\",\n        Header: \"Full name\",\n        disableFilter: false,\n      },\n      {\n        accessor: \"category\",\n        Header: \"Category\",\n        disableFilter: true,\n        Cell: ({ value }: any) => <Tag>{value}</Tag>,\n      },\n      {\n        accessor: \"age\",\n        Header: \"Age\",\n        disableFilter: true,\n        align: \"right\",\n      },\n    ],\n    []\n  );\n\n  const handleRowClick = (rowObject: IDataProps) => console.log(rowObject);\n  const handleRowDblClick = (rowObject: IDataProps) => alert(rowObject);\n\n  const singleRowActions = (rowObject: IDataProps) => [\n    {\n      id: \"log\",\n      icon: faTerminal,\n      tooltip: \"Log\",\n      onClick: () => console.log(rowObject),\n    },\n  ];\n\n  return (\n    // <PageView heading=\"Table\">\n    <Table<IDataProps>\n      tableHeading=\"Table\"\n      data={tableData}\n      columns={tableColumns}\n      handleRowClick={handleRowClick}\n      handleRowDblClick={handleRowDblClick}\n      singleRowActions={singleRowActions}\n      enableSorting\n      enableFiltering\n      enablePagination\n      enableMultipleRowSelect\n      enableColumnVisibilitySelector\n      exportTable\n      isLoading={!showContent}\n    />\n    // </PageView>\n  );\n};\n\nexport default () => (\n  <PageView heading=\"Table\">\n    <TableView />\n  </PageView>\n);\n"],"sourceRoot":""}