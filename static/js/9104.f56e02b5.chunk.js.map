{"version":3,"file":"static/js/9104.f56e02b5.chunk.js","mappings":"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","sources":["../../node_modules/highcharts/indicators/indicators-all.src.js","../../node_modules/highcharts/modules/full-screen.src.js","../../node_modules/highcharts/modules/stock.src.js"],"sourcesContent":["/**\n * @license Highstock JS v9.3.3 (2022-02-01)\n *\n * All technical indicators for Highcharts Stock\n *\n * (c) 2010-2021 Pawel Fus\n *\n * License: www.highcharts.com/license\n */\n'use strict';\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/indicators/indicators-all', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n        }\n    }\n    _registerModule(_modules, 'Stock/Indicators/SMA/SMAComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var Series = SeriesRegistry.series,\n            ohlcProto = SeriesRegistry.seriesTypes.ohlc.prototype;\n        var addEvent = U.addEvent,\n            extend = U.extend;\n\n    });\n    _registerModule(_modules, 'Stock/Indicators/SMA/SMAIndicator.js', [_modules['Core/Chart/Chart.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (Chart, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var LineSeries = SeriesRegistry.seriesTypes.line;\n        var addEvent = U.addEvent,\n            error = U.error,\n            extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge,\n            pick = U.pick,\n            splat = U.splat;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The SMA series type.\n         *\n         * @private\n         */\n        var SMAIndicator = /** @class */ (function (_super) {\n                __extends(SMAIndicator, _super);\n            function SMAIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.dataEventsToUnbind = void 0;\n                _this.linkedParent = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            SMAIndicator.prototype.destroy = function () {\n                this.dataEventsToUnbind.forEach(function (unbinder) {\n                    unbinder();\n                });\n                _super.prototype.destroy.apply(this, arguments);\n            };\n            /**\n             * @private\n             */\n            SMAIndicator.prototype.getName = function () {\n                var name = this.name,\n                    params = [];\n                if (!name) {\n                    (this.nameComponents || []).forEach(function (component, index) {\n                        params.push(this.options.params[component] +\n                            pick(this.nameSuffixes[index], ''));\n                    }, this);\n                    name = (this.nameBase || this.type.toUpperCase()) +\n                        (this.nameComponents ? ' (' + params.join(', ') + ')' : '');\n                }\n                return name;\n            };\n            /**\n             * @private\n             */\n            SMAIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal.length,\n                    range = 0,\n                    sum = 0,\n                    SMA = [],\n                    xData = [],\n                    yData = [],\n                    index = -1,\n                    i,\n                    SMAPoint;\n                if (xVal.length < period) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    index = params.index ? params.index : 0;\n                }\n                // Accumulate first N-points\n                while (range < period - 1) {\n                    sum += index < 0 ? yVal[range] : yVal[range][index];\n                    range++;\n                }\n                // Calculate value one-by-one for each period in visible data\n                for (i = range; i < yValLen; i++) {\n                    sum += index < 0 ? yVal[i] : yVal[i][index];\n                    SMAPoint = [xVal[i], sum / period];\n                    SMA.push(SMAPoint);\n                    xData.push(SMAPoint[0]);\n                    yData.push(SMAPoint[1]);\n                    sum -= (index < 0 ?\n                        yVal[i - range] :\n                        yVal[i - range][index]);\n                }\n                return {\n                    values: SMA,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * @private\n             */\n            SMAIndicator.prototype.init = function (chart, options) {\n                var indicator = this;\n                _super.prototype.init.call(indicator, chart, options);\n                // Only after series are linked indicator can be processed.\n                var linkedSeriesUnbiner = addEvent(Chart, 'afterLinkSeries',\n                    function () {\n                        var hasEvents = !!indicator.dataEventsToUnbind.length;\n                    if (indicator.linkedParent) {\n                        if (!hasEvents) {\n                            // No matter which indicator, always recalculate after\n                            // updating the data.\n                            indicator.dataEventsToUnbind.push(addEvent(indicator.linkedParent, 'updatedData', function () {\n                                indicator.recalculateValues();\n                            }));\n                            // Some indicators (like VBP) requires an additional\n                            // event (afterSetExtremes) to properly show the data.\n                            if (indicator.calculateOn.xAxis) {\n                                indicator.dataEventsToUnbind.push(addEvent(indicator.linkedParent.xAxis, indicator.calculateOn.xAxis, function () {\n                                    indicator.recalculateValues();\n                                }));\n                            }\n                        }\n                        // Most indicators are being calculated on chart's init.\n                        if (indicator.calculateOn.chart === 'init') {\n                            if (!indicator.processedYData) {\n                                indicator.recalculateValues();\n                            }\n                        }\n                        else if (!hasEvents) {\n                            // Some indicators (like VBP) has to recalculate their\n                            // values after other chart's events (render).\n                            var unbinder_1 = addEvent(indicator.chart,\n                                indicator.calculateOn.chart,\n                                function () {\n                                    indicator.recalculateValues();\n                                // Call this just once.\n                                unbinder_1();\n                            });\n                        }\n                    }\n                    else {\n                        return error('Series ' +\n                            indicator.options.linkedTo +\n                            ' not found! Check `linkedTo`.', false, chart);\n                    }\n                }, {\n                    order: 0\n                });\n                // Make sure we find series which is a base for an indicator\n                // chart.linkSeries();\n                indicator.dataEventsToUnbind = [];\n                indicator.eventsToUnbind.push(linkedSeriesUnbiner);\n            };\n            /**\n             * @private\n             */\n            SMAIndicator.prototype.recalculateValues = function () {\n                var indicator = this,\n                    oldData = indicator.points || [],\n                    oldDataLength = (indicator.xData || []).length,\n                    processedData = (indicator.getValues(indicator.linkedParent,\n                    indicator.options.params) || {\n                        values: [],\n                        xData: [],\n                        yData: []\n                    }),\n                    croppedDataValues = [],\n                    overwriteData = true,\n                    oldFirstPointIndex,\n                    oldLastPointIndex,\n                    croppedData,\n                    min,\n                    max,\n                    i;\n                // We need to update points to reflect changes in all,\n                // x and y's, values. However, do it only for non-grouped\n                // data - grouping does it for us (#8572)\n                if (oldDataLength &&\n                    !indicator.hasGroupedData &&\n                    indicator.visible &&\n                    indicator.points) {\n                    // When data is cropped update only avaliable points (#9493)\n                    if (indicator.cropped) {\n                        if (indicator.xAxis) {\n                            min = indicator.xAxis.min;\n                            max = indicator.xAxis.max;\n                        }\n                        croppedData = indicator.cropData(processedData.xData, processedData.yData, min, max);\n                        for (i = 0; i < croppedData.xData.length; i++) {\n                            // (#10774)\n                            croppedDataValues.push([\n                                croppedData.xData[i]\n                            ].concat(splat(croppedData.yData[i])));\n                        }\n                        oldFirstPointIndex = processedData.xData.indexOf(indicator.xData[0]);\n                        oldLastPointIndex = processedData.xData.indexOf(indicator.xData[indicator.xData.length - 1]);\n                        // Check if indicator points should be shifted (#8572)\n                        if (oldFirstPointIndex === -1 &&\n                            oldLastPointIndex === processedData.xData.length - 2) {\n                            if (croppedDataValues[0][0] === oldData[0].x) {\n                                croppedDataValues.shift();\n                            }\n                        }\n                        indicator.updateData(croppedDataValues);\n                        // Omit addPoint() and removePoint() cases\n                    }\n                    else if (processedData.xData.length !== oldDataLength - 1 &&\n                        processedData.xData.length !== oldDataLength + 1) {\n                        overwriteData = false;\n                        indicator.updateData(processedData.values);\n                    }\n                }\n                if (overwriteData) {\n                    indicator.xData = processedData.xData;\n                    indicator.yData = processedData.yData;\n                    indicator.options.data = processedData.values;\n                }\n                // Removal of processedXData property is required because on\n                // first translate processedXData array is empty\n                if (indicator.calculateOn.xAxis && indicator.processedXData) {\n                    delete indicator.processedXData;\n                    indicator.isDirty = true;\n                    indicator.redraw();\n                }\n                indicator.isDirtyData = false;\n            };\n            /**\n             * @private\n             */\n            SMAIndicator.prototype.processData = function () {\n                var series = this,\n                    compareToMain = series.options.compareToMain,\n                    linkedParent = series.linkedParent;\n                _super.prototype.processData.apply(series, arguments);\n                if (series.dataModify &&\n                    linkedParent &&\n                    linkedParent.dataModify &&\n                    linkedParent.dataModify.compareValue &&\n                    compareToMain) {\n                    series.dataModify.compareValue =\n                        linkedParent.dataModify.compareValue;\n                }\n                return;\n            };\n            /**\n             * The parameter allows setting line series type and use OHLC indicators.\n             * Data in OHLC format is required.\n             *\n             * @sample {highstock} stock/indicators/use-ohlc-data\n             *         Use OHLC data format to plot line chart\n             *\n             * @type      {boolean}\n             * @product   highstock\n             * @apioption plotOptions.line.useOhlcData\n             */\n            /**\n             * Simple moving average indicator (SMA). This series requires `linkedTo`\n             * option to be set.\n             *\n             * @sample stock/indicators/sma\n             *         Simple moving average indicator\n             *\n             * @extends      plotOptions.line\n             * @since        6.0.0\n             * @excluding    allAreas, colorAxis, dragDrop, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking, useOhlcData\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @optionparent plotOptions.sma\n             */\n            SMAIndicator.defaultOptions = merge(LineSeries.defaultOptions, {\n                /**\n                 * The name of the series as shown in the legend, tooltip etc. If not\n                 * set, it will be based on a technical indicator type and default\n                 * params.\n                 *\n                 * @type {string}\n                 */\n                name: void 0,\n                tooltip: {\n                    /**\n                     * Number of decimals in indicator series.\n                     */\n                    valueDecimals: 4\n                },\n                /**\n                 * The main series ID that indicator will be based on. Required for this\n                 * indicator.\n                 *\n                 * @type {string}\n                 */\n                linkedTo: void 0,\n                /**\n                 * Whether to compare indicator to the main series values\n                 * or indicator values.\n                 *\n                 * @sample {highstock} stock/plotoptions/series-comparetomain/\n                 *         Difference between comparing SMA values to the main series\n                 *         and its own values.\n                 *\n                 * @type {boolean}\n                 */\n                compareToMain: false,\n                /**\n                 * Paramters used in calculation of regression series' points.\n                 */\n                params: {\n                    /**\n                     * The point index which indicator calculations will base. For\n                     * example using OHLC data, index=2 means the indicator will be\n                     * calculated using Low values.\n                     */\n                    index: 3,\n                    /**\n                     * The base period for indicator calculations. This is the number of\n                     * data points which are taken into account for the indicator\n                     * calculations.\n                     */\n                    period: 14\n                }\n            });\n            return SMAIndicator;\n        }(LineSeries));\n        extend(SMAIndicator.prototype, {\n            calculateOn: {\n                chart: 'init'\n            },\n            hasDerivedData: true,\n            nameComponents: ['period'],\n            nameSuffixes: [],\n            useCommonDataGrouping: true\n        });\n        SeriesRegistry.registerSeriesType('sma', SMAIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `SMA` series. If the [type](#series.sma.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.sma\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL, useOhlcData\n         * @requires  stock/indicators/indicators\n         * @apioption series.sma\n         */\n        ''; // adds doclet above to the transpiled file\n\n        return SMAIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/EMA/EMAIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var correctFloat = U.correctFloat,\n            isArray = U.isArray,\n            merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The EMA series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ema\n         *\n         * @augments Highcharts.Series\n         */\n        var EMAIndicator = /** @class */ (function (_super) {\n                __extends(EMAIndicator, _super);\n            function EMAIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            EMAIndicator.prototype.accumulatePeriodPoints = function (period, index, yVal) {\n                var sum = 0,\n                    i = 0,\n                    y = 0;\n                while (i < period) {\n                    y = index < 0 ? yVal[i] : yVal[i][index];\n                    sum = sum + y;\n                    i++;\n                }\n                return sum;\n            };\n            EMAIndicator.prototype.calculateEma = function (xVal, yVal, i, EMApercent, calEMA, index, SMA) {\n                var x = xVal[i - 1],\n                    yValue = index < 0 ?\n                        yVal[i - 1] :\n                        yVal[i - 1][index],\n                    y;\n                y = typeof calEMA === 'undefined' ?\n                    SMA : correctFloat((yValue * EMApercent) +\n                    (calEMA * (1 - EMApercent)));\n                return [x, y];\n            };\n            EMAIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    EMApercent = 2 / (period + 1),\n                    sum = 0,\n                    EMA = [],\n                    xData = [],\n                    yData = [],\n                    index = -1,\n                    SMA = 0,\n                    calEMA,\n                    EMAPoint,\n                    i;\n                // Check period, if bigger than points length, skip\n                if (yValLen < period) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    index = params.index ? params.index : 0;\n                }\n                // Accumulate first N-points\n                sum = this.accumulatePeriodPoints(period, index, yVal);\n                // first point\n                SMA = sum / period;\n                // Calculate value one-by-one for each period in visible data\n                for (i = period; i < yValLen + 1; i++) {\n                    EMAPoint = this.calculateEma(xVal, yVal, i, EMApercent, calEMA, index, SMA);\n                    EMA.push(EMAPoint);\n                    xData.push(EMAPoint[0]);\n                    yData.push(EMAPoint[1]);\n                    calEMA = EMAPoint[1];\n                }\n                return {\n                    values: EMA,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Exponential moving average indicator (EMA). This series requires the\n             * `linkedTo` option to be set.\n             *\n             * @sample stock/indicators/ema\n             * Exponential moving average indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @optionparent plotOptions.ema\n             */\n            EMAIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    /**\n                     * The point index which indicator calculations will base. For\n                     * example using OHLC data, index=2 means the indicator will be\n                     * calculated using Low values.\n                     *\n                     * By default index value used to be set to 0. Since\n                     * Highcharts Stock 7 by default index is set to 3\n                     * which means that the ema indicator will be\n                     * calculated using Close values.\n                     */\n                    index: 3,\n                    period: 9 // @merge 14 in v6.2\n                }\n            });\n            return EMAIndicator;\n        }(SMAIndicator));\n        SeriesRegistry.registerSeriesType('ema', EMAIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `EMA` series. If the [type](#series.ema.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ema\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @apioption series.ema\n         */\n        ''; // adds doclet above to the transpiled file\n\n        return EMAIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/AD/ADIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var error = U.error,\n            extend = U.extend,\n            merge = U.merge;\n        /**\n         * The AD series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ad\n         *\n         * @augments Highcharts.Series\n         */\n        var ADIndicator = /** @class */ (function (_super) {\n                __extends(ADIndicator, _super);\n            function ADIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            ADIndicator.populateAverage = function (xVal, yVal, yValVolume, i, _period) {\n                var high = yVal[i][1],\n                    low = yVal[i][2],\n                    close = yVal[i][3],\n                    volume = yValVolume[i],\n                    adY = close === high && close === low || high === low ?\n                        0 :\n                        ((2 * close - low - high) / (high - low)) * volume,\n                    adX = xVal[i];\n                return [adX, adY];\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            ADIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    volumeSeriesID = params.volumeSeriesID,\n                    volumeSeries = series.chart.get(volumeSeriesID),\n                    yValVolume = volumeSeries && volumeSeries.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    AD = [],\n                    xData = [],\n                    yData = [],\n                    len,\n                    i,\n                    ADPoint;\n                if (xVal.length <= period &&\n                    yValLen &&\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                if (!volumeSeries) {\n                    error('Series ' +\n                        volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, series.chart);\n                    return;\n                }\n                // i = period <-- skip first N-points\n                // Calculate value one-by-one for each period in visible data\n                for (i = period; i < yValLen; i++) {\n                    len = AD.length;\n                    ADPoint = ADIndicator.populateAverage(xVal, yVal, yValVolume, i, period);\n                    if (len > 0) {\n                        ADPoint[1] += AD[len - 1][1];\n                    }\n                    AD.push(ADPoint);\n                    xData.push(ADPoint[0]);\n                    yData.push(ADPoint[1]);\n                }\n                return {\n                    values: AD,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Accumulation Distribution (AD). This series requires `linkedTo` option to\n             * be set.\n             *\n             * @sample stock/indicators/accumulation-distribution\n             *         Accumulation/Distribution indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/accumulation-distribution\n             * @optionparent plotOptions.ad\n             */\n            ADIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    /**\n                     * The id of volume series which is mandatory.\n                     * For example using OHLC data, volumeSeriesID='volume' means\n                     * the indicator will be calculated using OHLC and volume values.\n                     *\n                     * @since 6.0.0\n                     */\n                    volumeSeriesID: 'volume'\n                }\n            });\n            return ADIndicator;\n        }(SMAIndicator));\n        extend(ADIndicator.prototype, {\n            nameComponents: false,\n            nameBase: 'Accumulation/Distribution'\n        });\n        SeriesRegistry.registerSeriesType('ad', ADIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `AD` series. If the [type](#series.ad.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ad\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/accumulation-distribution\n         * @apioption series.ad\n         */\n        ''; // add doclet above to transpiled file\n\n        return ADIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/AO/AOIndicator.js', [_modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (H, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var noop = H.noop;\n        var _a = SeriesRegistry.seriesTypes,\n            SMAIndicator = _a.sma,\n            ColumnSeries = _a.column;\n        var extend = U.extend,\n            merge = U.merge,\n            correctFloat = U.correctFloat,\n            isArray = U.isArray;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The AO series type\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ao\n         *\n         * @augments Highcharts.Series\n         */\n        var AOIndicator = /** @class */ (function (_super) {\n                __extends(AOIndicator, _super);\n            function AOIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /**\n                 *\n                 * Properties\n                 *\n                 */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /**\n             *\n             * Functions\n             *\n             */\n            AOIndicator.prototype.drawGraph = function () {\n                var indicator = this,\n                    options = indicator.options,\n                    points = indicator.points,\n                    userColor = indicator.userOptions.color,\n                    positiveColor = options.greaterBarColor,\n                    negativeColor = options.lowerBarColor,\n                    firstPoint = points[0],\n                    i;\n                if (!userColor && firstPoint) {\n                    firstPoint.color = positiveColor;\n                    for (i = 1; i < points.length; i++) {\n                        if (points[i].y > points[i - 1].y) {\n                            points[i].color = positiveColor;\n                        }\n                        else if (points[i].y < points[i - 1].y) {\n                            points[i].color = negativeColor;\n                        }\n                        else {\n                            points[i].color = points[i - 1].color;\n                        }\n                    }\n                }\n            };\n            AOIndicator.prototype.getValues = function (series) {\n                var shortPeriod = 5,\n                    longPeriod = 34,\n                    xVal = series.xData || [],\n                    yVal = series.yData || [],\n                    yValLen = yVal.length,\n                    AO = [], // 0- date, 1- Awesome Oscillator\n                    xData = [],\n                    yData = [],\n                    high = 1,\n                    low = 2,\n                    shortSum = 0,\n                    longSum = 0,\n                    shortSMA, // Shorter Period SMA\n                    longSMA, // Longer Period SMA\n                    awesome,\n                    shortLastIndex,\n                    longLastIndex,\n                    price,\n                    i,\n                    j;\n                if (xVal.length <= longPeriod ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                for (i = 0; i < longPeriod - 1; i++) {\n                    price = (yVal[i][high] + yVal[i][low]) / 2;\n                    if (i >= longPeriod - shortPeriod) {\n                        shortSum = correctFloat(shortSum + price);\n                    }\n                    longSum = correctFloat(longSum + price);\n                }\n                for (j = longPeriod - 1; j < yValLen; j++) {\n                    price = (yVal[j][high] + yVal[j][low]) / 2;\n                    shortSum = correctFloat(shortSum + price);\n                    longSum = correctFloat(longSum + price);\n                    shortSMA = shortSum / shortPeriod;\n                    longSMA = longSum / longPeriod;\n                    awesome = correctFloat(shortSMA - longSMA);\n                    AO.push([xVal[j], awesome]);\n                    xData.push(xVal[j]);\n                    yData.push(awesome);\n                    shortLastIndex = j + 1 - shortPeriod;\n                    longLastIndex = j + 1 - longPeriod;\n                    shortSum = correctFloat(shortSum -\n                        (yVal[shortLastIndex][high] +\n                            yVal[shortLastIndex][low]) / 2);\n                    longSum = correctFloat(longSum -\n                        (yVal[longLastIndex][high] +\n                            yVal[longLastIndex][low]) / 2);\n                }\n                return {\n                    values: AO,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Awesome Oscillator. This series requires the `linkedTo` option to\n             * be set and should be loaded after the `stock/indicators/indicators.js`\n             *\n             * @sample {highstock} stock/indicators/ao\n             *         Awesome\n             *\n             * @extends      plotOptions.sma\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n             *               params, pointInterval, pointIntervalUnit, pointPlacement,\n             *               pointRange, pointStart, showInNavigator, stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/ao\n             * @optionparent plotOptions.ao\n             */\n            AOIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    // Index and period are unchangeable, do not inherit (#15362)\n                    index: void 0,\n                    period: void 0\n                },\n                /**\n                 * Color of the Awesome oscillator series bar that is greater than the\n                 * previous one. Note that if a `color` is defined, the `color`\n                 * takes precedence and the `greaterBarColor` is ignored.\n                 *\n                 * @sample {highstock} stock/indicators/ao/\n                 *         greaterBarColor\n                 *\n                 * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @since 7.0.0\n                 */\n                greaterBarColor: \"#06b535\" /* positiveColor */,\n                /**\n                 * Color of the Awesome oscillator series bar that is lower than the\n                 * previous one. Note that if a `color` is defined, the `color`\n                 * takes precedence and the `lowerBarColor` is ignored.\n                 *\n                 * @sample {highstock} stock/indicators/ao/\n                 *         lowerBarColor\n                 *\n                 * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @since 7.0.0\n                 */\n                lowerBarColor: \"#f21313\" /* negativeColor */,\n                threshold: 0,\n                groupPadding: 0.2,\n                pointPadding: 0.2,\n                crisp: false,\n                states: {\n                    hover: {\n                        halo: {\n                            size: 0\n                        }\n                    }\n                }\n            });\n            return AOIndicator;\n        }(SMAIndicator));\n        extend(AOIndicator.prototype, {\n            nameBase: 'AO',\n            nameComponents: false,\n            // Columns support:\n            markerAttribs: noop,\n            getColumnMetrics: ColumnSeries.prototype.getColumnMetrics,\n            crispCol: ColumnSeries.prototype.crispCol,\n            translate: ColumnSeries.prototype.translate,\n            drawPoints: ColumnSeries.prototype.drawPoints\n        });\n        SeriesRegistry.registerSeriesType('ao', AOIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * An `AO` series. If the [type](#series.ao.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ao\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/ao\n         * @apioption series.ao\n         */\n        ''; // for including the above in the doclets\n\n        return AOIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/MultipleLinesComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2021 Wojciech Chmiel\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var defined = U.defined,\n            error = U.error,\n            merge = U.merge;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Composition useful for all indicators that have more than one line. Compose\n         * it with your implementation where you will provide the `getValues` method\n         * appropriate to your indicator and `pointArrayMap`, `pointValKey`,\n         * `linesApiNames` properties. Notice that `pointArrayMap` should be consistent\n         * with the amount of lines calculated in the `getValues` method.\n         *\n         * @private\n         * @mixin multipleLinesMixin\n         */\n        var MultipleLinesComposition;\n        (function (MultipleLinesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            var composedClasses = [];\n            /**\n             * Additional lines DOCS names. Elements of linesApiNames array should\n             * be consistent with DOCS line names defined in your implementation.\n             * Notice that linesApiNames should have decreased amount of elements\n             * relative to pointArrayMap (without pointValKey).\n             *\n             * @private\n             * @name multipleLinesMixin.linesApiNames\n             * @type {Array<string>}\n             */\n            var linesApiNames = ['bottomLine'];\n            /**\n             * Lines ids. Required to plot appropriate amount of lines.\n             * Notice that pointArrayMap should have more elements than\n             * linesApiNames, because it contains main line and additional lines ids.\n             * Also it should be consistent with amount of lines calculated in\n             * getValues method from your implementation.\n             *\n             * @private\n             * @name multipleLinesMixin.pointArrayMap\n             * @type {Array<string>}\n             */\n            var pointArrayMap = ['top', 'bottom'];\n            /**\n             * Names of the lines, bewteen which the area should be plotted.\n             * If the drawing of the area should\n             * be disabled for some indicators, leave this option as an empty array.\n             * Names should be the same as the names in the pointArrayMap.\n             * @private\n             * @name multipleLinesMixin.areaLinesNames\n             * @type {Array<string>}\n             */\n            var areaLinesNames = ['top'];\n            /**\n             * Main line id.\n             *\n             * @private\n             * @name multipleLinesMixin.pointValKey\n             * @type {string}\n             */\n            var pointValKey = 'top';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(IndicatorClass) {\n                if (composedClasses.indexOf(IndicatorClass) === -1) {\n                    composedClasses.push(IndicatorClass);\n                    var proto = IndicatorClass.prototype;\n                    proto.linesApiNames = (proto.linesApiNames ||\n                        linesApiNames.slice());\n                    proto.pointArrayMap = (proto.pointArrayMap ||\n                        pointArrayMap.slice());\n                    proto.pointValKey = (proto.pointValKey ||\n                        pointValKey);\n                    proto.areaLinesNames = (proto.areaLinesNames ||\n                        areaLinesNames.slice());\n                    proto.drawGraph = drawGraph;\n                    proto.getGraphPath = getGraphPath;\n                    proto.toYData = toYData;\n                    proto.translate = translate;\n                    proto.getTranslatedLinesNames = getTranslatedLinesNames;\n                }\n                return IndicatorClass;\n            }\n            MultipleLinesComposition.compose = compose;\n            /**\n             * Create the path based on points provided as argument.\n             * If indicator.nextPoints option is defined, create the areaFill.\n             *\n             * @param points Points on which the path should be created\n             */\n            function getGraphPath(points) {\n                var indicator = this;\n                var areaPath,\n                    path = [],\n                    higherAreaPath = [];\n                points = points || this.points;\n                // Render Span\n                if (indicator.fillGraph && indicator.nextPoints) {\n                    areaPath = SMAIndicator.prototype.getGraphPath.call(indicator, indicator.nextPoints);\n                    if (areaPath && areaPath.length) {\n                        areaPath[0][0] = 'L';\n                        path = SMAIndicator.prototype.getGraphPath.call(indicator, points);\n                        higherAreaPath = areaPath.slice(0, path.length);\n                        // Reverse points, so that the areaFill will start from the end:\n                        for (var i = higherAreaPath.length - 1; i >= 0; i--) {\n                            path.push(higherAreaPath[i]);\n                        }\n                    }\n                }\n                else {\n                    path = SMAIndicator.prototype.getGraphPath.apply(indicator, arguments);\n                }\n                return path;\n            }\n            /**\n             * Draw main and additional lines.\n             *\n             * @private\n             * @function multipleLinesMixin.drawGraph\n             */\n            function drawGraph() {\n                var indicator = this,\n                    pointValKey = indicator.pointValKey,\n                    linesApiNames = indicator.linesApiNames,\n                    areaLinesNames = indicator.areaLinesNames,\n                    mainLinePoints = indicator.points,\n                    mainLineOptions = indicator.options,\n                    mainLinePath = indicator.graph,\n                    gappedExtend = {\n                        options: {\n                            gapSize: mainLineOptions.gapSize\n                        }\n                    }, \n                    // additional lines point place holders:\n                    secondaryLines = [],\n                    secondaryLinesNames = indicator.getTranslatedLinesNames(pointValKey);\n                var pointsLength = mainLinePoints.length,\n                    point;\n                // Generate points for additional lines:\n                secondaryLinesNames.forEach(function (plotLine, index) {\n                    // create additional lines point place holders\n                    secondaryLines[index] = [];\n                    while (pointsLength--) {\n                        point = mainLinePoints[pointsLength];\n                        secondaryLines[index].push({\n                            x: point.x,\n                            plotX: point.plotX,\n                            plotY: point[plotLine],\n                            isNull: !defined(point[plotLine])\n                        });\n                    }\n                    pointsLength = mainLinePoints.length;\n                });\n                // Modify options and generate area fill:\n                if (this.userOptions.fillColor && areaLinesNames.length) {\n                    var index = secondaryLinesNames.indexOf(getLineName(areaLinesNames[0])),\n                        secondLinePoints = secondaryLines[index],\n                        firstLinePoints = areaLinesNames.length === 1 ?\n                            mainLinePoints :\n                            secondaryLines[secondaryLinesNames.indexOf(getLineName(areaLinesNames[1]))],\n                        originalColor = indicator.color;\n                    indicator.points = firstLinePoints;\n                    indicator.nextPoints = secondLinePoints;\n                    indicator.color = this.userOptions.fillColor;\n                    indicator.options = merge(mainLinePoints, gappedExtend);\n                    indicator.graph = indicator.area;\n                    indicator.fillGraph = true;\n                    SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(indicator);\n                    indicator.area = indicator.graph;\n                    // Clean temporary properties:\n                    delete indicator.nextPoints;\n                    delete indicator.fillGraph;\n                    indicator.color = originalColor;\n                }\n                // Modify options and generate additional lines:\n                linesApiNames.forEach(function (lineName, i) {\n                    if (secondaryLines[i]) {\n                        indicator.points = secondaryLines[i];\n                        if (mainLineOptions[lineName]) {\n                            indicator.options = merge(mainLineOptions[lineName].styles, gappedExtend);\n                        }\n                        else {\n                            error('Error: \"There is no ' + lineName +\n                                ' in DOCS options declared. Check if linesApiNames' +\n                                ' are consistent with your DOCS line names.\"' +\n                                ' at mixin/multiple-line.js:34');\n                        }\n                        indicator.graph = indicator['graph' + lineName];\n                        SMAIndicator.prototype.drawGraph.call(indicator);\n                        // Now save lines:\n                        indicator['graph' + lineName] = indicator.graph;\n                    }\n                    else {\n                        error('Error: \"' + lineName + ' doesn\\'t have equivalent ' +\n                            'in pointArrayMap. To many elements in linesApiNames ' +\n                            'relative to pointArrayMap.\"');\n                    }\n                });\n                // Restore options and draw a main line:\n                indicator.points = mainLinePoints;\n                indicator.options = mainLineOptions;\n                indicator.graph = mainLinePath;\n                SMAIndicator.prototype.drawGraph.call(indicator);\n            }\n            /**\n             * Create translatedLines Collection based on pointArrayMap.\n             *\n             * @private\n             * @function multipleLinesMixin.getTranslatedLinesNames\n             * @param {string} [excludedValue]\n             *        Main line id\n             * @return {Array<string>}\n             *         Returns translated lines names without excluded value.\n             */\n            function getTranslatedLinesNames(excludedValue) {\n                var translatedLines = [];\n                (this.pointArrayMap || []).forEach(function (propertyName) {\n                    if (propertyName !== excludedValue) {\n                        translatedLines.push(getLineName(propertyName));\n                    }\n                });\n                return translatedLines;\n            }\n            /**\n             * Generate the API name of the line\n             * @param propertyName name of the line\n             */\n            function getLineName(propertyName) {\n                return ('plot' +\n                    propertyName.charAt(0).toUpperCase() +\n                    propertyName.slice(1));\n            }\n            /**\n             * @private\n             * @function multipleLinesMixin.toYData\n             * @param {Highcharts.Point} point\n             *        Indicator point\n             * @return {Array<number>}\n             *         Returns point Y value for all lines\n             */\n            function toYData(point) {\n                var pointColl = [];\n                (this.pointArrayMap || []).forEach(function (propertyName) {\n                    pointColl.push(point[propertyName]);\n                });\n                return pointColl;\n            }\n            /**\n             * Add lines plot pixel values.\n             *\n             * @private\n             * @function multipleLinesMixin.translate\n             */\n            function translate() {\n                var indicator = this,\n                    pointArrayMap = indicator.pointArrayMap;\n                var LinesNames = [],\n                    value;\n                LinesNames = indicator.getTranslatedLinesNames();\n                SMAIndicator.prototype.translate.apply(indicator, arguments);\n                indicator.points.forEach(function (point) {\n                    pointArrayMap.forEach(function (propertyName, i) {\n                        value = point[propertyName];\n                        // If the modifier, like for example compare exists,\n                        // modified the original value by that method, #15867.\n                        if (indicator.dataModify) {\n                            value = indicator.dataModify.modifyValue(value);\n                        }\n                        if (value !== null) {\n                            point[LinesNames[i]] = indicator.yAxis.toPixels(value, true);\n                        }\n                    });\n                });\n            }\n        })(MultipleLinesComposition || (MultipleLinesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MultipleLinesComposition;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Aroon/AroonIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var extend = U.extend,\n            merge = U.merge,\n            pick = U.pick;\n        /* eslint-disable valid-jsdoc */\n        // Utils\n        // Index of element with extreme value from array (min or max)\n        /**\n         * @private\n         */\n        function getExtremeIndexInArray(arr, extreme) {\n            var extremeValue = arr[0],\n                valueIndex = 0,\n                i;\n            for (i = 1; i < arr.length; i++) {\n                if (extreme === 'max' && arr[i] >= extremeValue ||\n                    extreme === 'min' && arr[i] <= extremeValue) {\n                    extremeValue = arr[i];\n                    valueIndex = i;\n                }\n            }\n            return valueIndex;\n        }\n        /* eslint-enable valid-jsdoc */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Aroon series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.aroon\n         *\n         * @augments Highcharts.Series\n         */\n        var AroonIndicator = /** @class */ (function (_super) {\n                __extends(AroonIndicator, _super);\n            function AroonIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            AroonIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0, \n                    // 0- date, 1- Aroon Up, 2- Aroon Down\n                    AR = [],\n                    xData = [],\n                    yData = [],\n                    slicedY,\n                    low = 2,\n                    high = 1,\n                    aroonUp,\n                    aroonDown,\n                    xLow,\n                    xHigh,\n                    i;\n                // For a N-period, we start from N-1 point, to calculate Nth point\n                // That is why we later need to comprehend slice() elements list\n                // with (+1)\n                for (i = period - 1; i < yValLen; i++) {\n                    slicedY = yVal.slice(i - period + 1, i + 2);\n                    xLow = getExtremeIndexInArray(slicedY.map(function (elem) {\n                        return pick(elem[low], elem);\n                    }), 'min');\n                    xHigh = getExtremeIndexInArray(slicedY.map(function (elem) {\n                        return pick(elem[high], elem);\n                    }), 'max');\n                    aroonUp = (xHigh / period) * 100;\n                    aroonDown = (xLow / period) * 100;\n                    if (xVal[i + 1]) {\n                        AR.push([xVal[i + 1], aroonUp, aroonDown]);\n                        xData.push(xVal[i + 1]);\n                        yData.push([aroonUp, aroonDown]);\n                    }\n                }\n                return {\n                    values: AR,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Aroon. This series requires the `linkedTo` option to be\n             * set and should be loaded after the `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/aroon\n             *         Aroon\n             *\n             * @extends      plotOptions.sma\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/aroon\n             * @optionparent plotOptions.aroon\n             */\n            AroonIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Paramters used in calculation of aroon series points.\n                 *\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    period: 25\n                },\n                marker: {\n                    enabled: false\n                },\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b><br/>Aroon Up: {point.y}<br/>Aroon Down: {point.aroonDown}<br/>'\n                },\n                /**\n                 * aroonDown line options.\n                 */\n                aroonDown: {\n                    /**\n                     * Styles for an aroonDown line.\n                     */\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line. If not set, it's inherited from\n                         * [plotOptions.aroon.color](#plotOptions.aroon.color).\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return AroonIndicator;\n        }(SMAIndicator));\n        extend(AroonIndicator.prototype, {\n            areaLinesNames: [],\n            linesApiNames: ['aroonDown'],\n            nameBase: 'Aroon',\n            pointArrayMap: ['y', 'aroonDown'],\n            pointValKey: 'y'\n        });\n        MultipleLinesComposition.compose(AroonIndicator);\n        SeriesRegistry.registerSeriesType('aroon', AroonIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A Aroon indicator. If the [type](#series.aroon.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.aroon\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/aroon\n         * @apioption series.aroon\n         */\n        ''; // to avoid removal of the above jsdoc\n\n        return AroonIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/AroonOscillator/AroonOscillatorIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var AroonIndicator = SeriesRegistry.seriesTypes.aroon;\n        var extend = U.extend,\n            merge = U.merge;\n        var AROON = SeriesRegistry.seriesTypes.aroon;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Aroon Oscillator series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.aroonoscillator\n         *\n         * @augments Highcharts.Series\n         */\n        var AroonOscillatorIndicator = /** @class */ (function (_super) {\n                __extends(AroonOscillatorIndicator, _super);\n            function AroonOscillatorIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            AroonOscillatorIndicator.prototype.getValues = function (series, params) {\n                // 0- date, 1- Aroon Oscillator\n                var ARO = [],\n                    xData = [],\n                    yData = [],\n                    aroon,\n                    aroonUp,\n                    aroonDown,\n                    oscillator,\n                    i;\n                aroon = AROON.prototype.getValues.call(this, series, params);\n                for (i = 0; i < aroon.yData.length; i++) {\n                    aroonUp = aroon.yData[i][0];\n                    aroonDown = aroon.yData[i][1];\n                    oscillator = aroonUp - aroonDown;\n                    ARO.push([aroon.xData[i], oscillator]);\n                    xData.push(aroon.xData[i]);\n                    yData.push(oscillator);\n                }\n                return {\n                    values: ARO,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Aroon Oscillator. This series requires the `linkedTo` option to be set\n             * and should be loaded after the `stock/indicators/indicators.js` and\n             * `stock/indicators/aroon.js`.\n             *\n             * @sample {highstock} stock/indicators/aroon-oscillator\n             *         Aroon Oscillator\n             *\n             * @extends      plotOptions.aroon\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, aroonDown, colorAxis, compare, compareBase,\n             *               joinBy, keys, navigatorOptions, pointInterval,\n             *               pointIntervalUnit, pointPlacement, pointRange, pointStart,\n             *               showInNavigator, stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/aroon\n             * @requires     stock/indicators/aroon-oscillator\n             * @optionparent plotOptions.aroonoscillator\n             */\n            AroonOscillatorIndicator.defaultOptions = merge(AroonIndicator.defaultOptions, {\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b>: {point.y}'\n                }\n            });\n            return AroonOscillatorIndicator;\n        }(AroonIndicator));\n        extend(AroonOscillatorIndicator.prototype, {\n            nameBase: 'Aroon Oscillator',\n            linesApiNames: [],\n            pointArrayMap: ['y'],\n            pointValKey: 'y'\n        });\n        MultipleLinesComposition.compose(AroonIndicator);\n        SeriesRegistry.registerSeriesType('aroonoscillator', AroonOscillatorIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * An `Aroon Oscillator` series. If the [type](#series.aroonoscillator.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.aroonoscillator\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, aroonDown, colorAxis, compare, compareBase, dataParser,\n         *            dataURL, joinBy, keys, navigatorOptions, pointInterval,\n         *            pointIntervalUnit, pointPlacement, pointRange, pointStart,\n         *            showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/aroon\n         * @requires  stock/indicators/aroon-oscillator\n         * @apioption series.aroonoscillator\n         */\n        ''; // adds doclet above to the transpiled file\n\n        return AroonOscillatorIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/ATR/ATRIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var isArray = U.isArray,\n            merge = U.merge;\n        /* eslint-disable valid-jsdoc */\n        // Utils:\n        /**\n         * @private\n         */\n        function accumulateAverage(points, xVal, yVal, i) {\n            var xValue = xVal[i],\n                yValue = yVal[i];\n            points.push([xValue, yValue]);\n        }\n        /**\n         * @private\n         */\n        function getTR(currentPoint, prevPoint) {\n            var pointY = currentPoint, prevY = prevPoint, HL = pointY[1] - pointY[2], HCp = typeof prevY === 'undefined' ? 0 : Math.abs(pointY[1] - prevY[3]), LCp = typeof prevY === 'undefined' ? 0 : Math.abs(pointY[2] - prevY[3]), TR = Math.max(HL, HCp, LCp);\n            return TR;\n        }\n        /**\n         * @private\n         */\n        function populateAverage(points, xVal, yVal, i, period, prevATR) {\n            var x = xVal[i - 1],\n                TR = getTR(yVal[i - 1],\n                yVal[i - 2]),\n                y;\n            y = (((prevATR * (period - 1)) + TR) / period);\n            return [x, y];\n        }\n        /* eslint-enable valid-jsdoc */\n        /* *\n         *\n         * Class\n         *\n         * */\n        /**\n         * The ATR series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.atr\n         *\n         * @augments Highcharts.Series\n         */\n        var ATRIndicator = /** @class */ (function (_super) {\n                __extends(ATRIndicator, _super);\n            function ATRIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            ATRIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    xValue = xVal[0],\n                    yValue = yVal[0],\n                    range = 1,\n                    prevATR = 0,\n                    TR = 0,\n                    ATR = [],\n                    xData = [],\n                    yData = [],\n                    point,\n                    i,\n                    points;\n                points = [[xValue, yValue]];\n                if ((xVal.length <= period) ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                for (i = 1; i <= yValLen; i++) {\n                    accumulateAverage(points, xVal, yVal, i);\n                    if (period < range) {\n                        point = populateAverage(points, xVal, yVal, i, period, prevATR);\n                        prevATR = point[1];\n                        ATR.push(point);\n                        xData.push(point[0]);\n                        yData.push(point[1]);\n                    }\n                    else if (period === range) {\n                        prevATR = TR / (i - 1);\n                        ATR.push([xVal[i - 1], prevATR]);\n                        xData.push(xVal[i - 1]);\n                        yData.push(prevATR);\n                        range++;\n                    }\n                    else {\n                        TR += getTR(yVal[i - 1], yVal[i - 2]);\n                        range++;\n                    }\n                }\n                return {\n                    values: ATR,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Average true range indicator (ATR). This series requires `linkedTo`\n             * option to be set.\n             *\n             * @sample stock/indicators/atr\n             *         ATR indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/atr\n             * @optionparent plotOptions.atr\n             */\n            ATRIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0 // unused index, do not inherit (#15362)\n                }\n            });\n            return ATRIndicator;\n        }(SMAIndicator));\n        SeriesRegistry.registerSeriesType('atr', ATRIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `ATR` series. If the [type](#series.atr.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.atr\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/atr\n         * @apioption series.atr\n         */\n        ''; // to include the above in the js output\n\n        return ATRIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/BB/BBIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /**\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* eslint-disable valid-jsdoc */\n        // Utils:\n        /**\n         * @private\n         */\n        function getStandardDeviation(arr, index, isOHLC, mean) {\n            var variance = 0,\n                arrLen = arr.length,\n                std = 0,\n                i = 0,\n                value;\n            for (; i < arrLen; i++) {\n                value = (isOHLC ? arr[i][index] : arr[i]) - mean;\n                variance += value * value;\n            }\n            variance = variance / (arrLen - 1);\n            std = Math.sqrt(variance);\n            return std;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Bollinger Bands series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.bb\n         *\n         * @augments Highcharts.Series\n         */\n        var BBIndicator = /** @class */ (function (_super) {\n                __extends(BBIndicator, _super);\n            function BBIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            BBIndicator.prototype.init = function () {\n                SeriesRegistry.seriesTypes.sma.prototype.init.apply(this, arguments);\n                // Set default color for lines:\n                this.options = merge({\n                    topLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    },\n                    bottomLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    }\n                }, this.options);\n            };\n            BBIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    standardDeviation = params.standardDeviation,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0, \n                    // 0- date, 1-middle line, 2-top line, 3-bottom line\n                    BB = [], \n                    // middle line, top line and bottom line\n                    ML,\n                    TL,\n                    BL,\n                    date,\n                    xData = [],\n                    yData = [],\n                    slicedX,\n                    slicedY,\n                    stdDev,\n                    isOHLC,\n                    point,\n                    i;\n                if (xVal.length < period) {\n                    return;\n                }\n                isOHLC = isArray(yVal[0]);\n                for (i = period; i <= yValLen; i++) {\n                    slicedX = xVal.slice(i - period, i);\n                    slicedY = yVal.slice(i - period, i);\n                    point = SeriesRegistry.seriesTypes.sma.prototype.getValues.call(this, {\n                        xData: slicedX,\n                        yData: slicedY\n                    }, params);\n                    date = point.xData[0];\n                    ML = point.yData[0];\n                    stdDev = getStandardDeviation(slicedY, params.index, isOHLC, ML);\n                    TL = ML + standardDeviation * stdDev;\n                    BL = ML - standardDeviation * stdDev;\n                    BB.push([date, TL, ML, BL]);\n                    xData.push(date);\n                    yData.push([TL, ML, BL]);\n                }\n                return {\n                    values: BB,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Bollinger bands (BB). This series requires the `linkedTo` option to be\n             * set and should be loaded after the `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/bollinger-bands\n             *         Bollinger bands\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/bollinger-bands\n             * @optionparent plotOptions.bb\n             */\n            BBIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Option for fill color between lines in Bollinger Bands Indicator.\n                 *\n                 * @sample {highstock} stock/indicators/indicator-area-fill\n                 *      Background fill between lines.\n                 *\n                 * @type      {Highcharts.Color}\n                 * @since 9.3.2\n                 * @apioption plotOptions.bb.fillColor\n                 *\n                 */\n                params: {\n                    period: 20,\n                    /**\n                     * Standard deviation for top and bottom bands.\n                     */\n                    standardDeviation: 2,\n                    index: 3\n                },\n                /**\n                 * Bottom line options.\n                 */\n                bottomLine: {\n                    /**\n                     * Styles for a bottom line.\n                     */\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line. If not set, it's inherited from\n                         * [plotOptions.bb.color](#plotOptions.bb.color).\n                         *\n                         * @type  {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * Top line options.\n                 *\n                 * @extends plotOptions.bb.bottomLine\n                 */\n                topLine: {\n                    styles: {\n                        lineWidth: 1,\n                        /**\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b><br/>Top: {point.top}<br/>Middle: {point.middle}<br/>Bottom: {point.bottom}<br/>'\n                },\n                marker: {\n                    enabled: false\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return BBIndicator;\n        }(SMAIndicator));\n        extend(BBIndicator.prototype, {\n            areaLinesNames: ['top', 'bottom'],\n            pointArrayMap: ['top', 'middle', 'bottom'],\n            pointValKey: 'middle',\n            nameComponents: ['period', 'standardDeviation'],\n            linesApiNames: ['topLine', 'bottomLine']\n        });\n        MultipleLinesComposition.compose(BBIndicator);\n        SeriesRegistry.registerSeriesType('bb', BBIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A bollinger bands indicator. If the [type](#series.bb.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.bb\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/bollinger-bands\n         * @apioption series.bb\n         */\n        ''; // to include the above in the js output\n\n        return BBIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/CCI/CCIIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var isArray = U.isArray,\n            merge = U.merge;\n        /* eslint-disable valid-jsdoc */\n        // Utils:\n        /**\n         * @private\n         */\n        function sumArray(array) {\n            return array.reduce(function (prev, cur) {\n                return prev + cur;\n            }, 0);\n        }\n        /**\n         * @private\n         */\n        function meanDeviation(arr, sma) {\n            var len = arr.length,\n                sum = 0,\n                i;\n            for (i = 0; i < len; i++) {\n                sum += Math.abs(sma - (arr[i]));\n            }\n            return sum;\n        }\n        /* eslint-enable valid-jsdoc */\n        /* *\n         *\n         * Class\n         *\n         * */\n        /**\n         * The CCI series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.cci\n         *\n         * @augments Highcharts.Series\n         */\n        var CCIIndicator = /** @class */ (function (_super) {\n                __extends(CCIIndicator, _super);\n            function CCIIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            CCIIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    TP = [],\n                    periodTP = [],\n                    range = 1,\n                    CCI = [],\n                    xData = [],\n                    yData = [],\n                    CCIPoint,\n                    p,\n                    len,\n                    smaTP,\n                    TPtemp,\n                    meanDev,\n                    i;\n                // CCI requires close value\n                if (xVal.length <= period ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                // accumulate first N-points\n                while (range < period) {\n                    p = yVal[range - 1];\n                    TP.push((p[1] + p[2] + p[3]) / 3);\n                    range++;\n                }\n                for (i = period; i <= yValLen; i++) {\n                    p = yVal[i - 1];\n                    TPtemp = (p[1] + p[2] + p[3]) / 3;\n                    len = TP.push(TPtemp);\n                    periodTP = TP.slice(len - period);\n                    smaTP = sumArray(periodTP) / period;\n                    meanDev = meanDeviation(periodTP, smaTP) / period;\n                    CCIPoint = ((TPtemp - smaTP) / (0.015 * meanDev));\n                    CCI.push([xVal[i - 1], CCIPoint]);\n                    xData.push(xVal[i - 1]);\n                    yData.push(CCIPoint);\n                }\n                return {\n                    values: CCI,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Commodity Channel Index (CCI). This series requires `linkedTo` option to\n             * be set.\n             *\n             * @sample stock/indicators/cci\n             *         CCI indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/cci\n             * @optionparent plotOptions.cci\n             */\n            CCIIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0 // unused index, do not inherit (#15362)\n                }\n            });\n            return CCIIndicator;\n        }(SMAIndicator));\n        SeriesRegistry.registerSeriesType('cci', CCIIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `CCI` series. If the [type](#series.cci.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.cci\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/cci\n         * @apioption series.cci\n         */\n        ''; // to include the above in the js output\n\n        return CCIIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/CMF/CMFIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Highsoft AS\n         *\n         *  Author: Sebastian Domas\n         *\n         *  Chaikin Money Flow indicator for Highcharts Stock\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var merge = U.merge;\n        /**\n         * The CMF series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.cmf\n         *\n         * @augments Highcharts.Series\n         */\n        var CMFIndicator = /** @class */ (function (_super) {\n                __extends(CMFIndicator, _super);\n            function CMFIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                _this.volumeSeries = void 0;\n                _this.linkedParent = void 0;\n                _this.yData = void 0;\n                _this.nameBase = 'Chaikin Money Flow';\n                return _this;\n            }\n            /**\n             * Checks if the series and volumeSeries are accessible, number of\n             * points.x is longer than period, is series has OHLC data\n             * @private\n             * @param {Highcharts.CMFIndicator} this indicator to use.\n             * @return {boolean} True if series is valid and can be computed,\n             * otherwise false.\n             */\n            CMFIndicator.prototype.isValid = function () {\n                var chart = this.chart,\n                    options = this.options,\n                    series = this.linkedParent,\n                    volumeSeries = (this.volumeSeries ||\n                        (this.volumeSeries =\n                            chart.get(options.params.volumeSeriesID))),\n                    isSeriesOHLC = (series &&\n                        series.yData &&\n                        series.yData[0].length === 4);\n                /**\n                 * @private\n                 * @param {Highcharts.Series} serie to check length validity on.\n                 * @return {boolean|undefined} true if length is valid.\n                 */\n                function isLengthValid(serie) {\n                    return serie.xData &&\n                        serie.xData.length >= options.params.period;\n                }\n                return !!(series &&\n                    volumeSeries &&\n                    isLengthValid(series) &&\n                    isLengthValid(volumeSeries) && isSeriesOHLC);\n            };\n            /**\n             * Returns indicator's data.\n             * @private\n             * @param {Highcharts.CMFIndicator} this indicator to use.\n             * @param {Highcharts.Series} series to calculate values from\n             * @param {Highcharts.CMFIndicatorParamsOptions} params to pass\n             * @return {boolean|Highcharts.IndicatorNullableValuesObject} Returns false if the\n             * indicator is not valid, otherwise returns Values object.\n             */\n            CMFIndicator.prototype.getValues = function (series, params) {\n                if (!this.isValid()) {\n                    return;\n                }\n                return this.getMoneyFlow(series.xData, series.yData, this.volumeSeries.yData, params.period);\n            };\n            /**\n             * @private\n             *\n             * @param {Array<number>} xData\n             * x timestamp values\n             *\n             * @param {Array<number>} seriesYData\n             * yData of basic series\n             *\n             * @param {Array<number>} volumeSeriesYData\n             * yData of volume series\n             *\n             * @param {number} period\n             * indicator's param\n             *\n             * @return {Highcharts.IndicatorNullableValuesObject}\n             * object containing computed money flow data\n             */\n            CMFIndicator.prototype.getMoneyFlow = function (xData, seriesYData, volumeSeriesYData, period) {\n                var len = seriesYData.length,\n                    moneyFlowVolume = [],\n                    sumVolume = 0,\n                    sumMoneyFlowVolume = 0,\n                    moneyFlowXData = [],\n                    moneyFlowYData = [],\n                    values = [],\n                    i,\n                    point,\n                    nullIndex = -1;\n                /**\n                 * Calculates money flow volume, changes i, nullIndex vars from\n                 * upper scope!\n                 *\n                 * @private\n                 *\n                 * @param {Array<number>} ohlc\n                 * OHLC point\n                 *\n                 * @param {number} volume\n                 * Volume point's y value\n                 *\n                 * @return {number|null}\n                 * Volume * moneyFlowMultiplier\n                 */\n                function getMoneyFlowVolume(ohlc, volume) {\n                    var high = ohlc[1],\n                        low = ohlc[2],\n                        close = ohlc[3],\n                        isValid = volume !== null &&\n                            high !== null &&\n                            low !== null &&\n                            close !== null &&\n                            high !== low;\n                    /**\n                     * @private\n                     * @param {number} h\n                     * High value\n                     * @param {number} l\n                     * Low value\n                     * @param {number} c\n                     * Close value\n                     * @return {number}\n                     * Calculated multiplier for the point\n                     */\n                    function getMoneyFlowMultiplier(h, l, c) {\n                        return ((c - l) - (h - c)) / (h - l);\n                    }\n                    return isValid ?\n                        getMoneyFlowMultiplier(high, low, close) * volume :\n                        ((nullIndex = i), null);\n                }\n                if (period > 0 && period <= len) {\n                    for (i = 0; i < period; i++) {\n                        moneyFlowVolume[i] = getMoneyFlowVolume(seriesYData[i], volumeSeriesYData[i]);\n                        sumVolume += volumeSeriesYData[i];\n                        sumMoneyFlowVolume += moneyFlowVolume[i];\n                    }\n                    moneyFlowXData.push(xData[i - 1]);\n                    moneyFlowYData.push(i - nullIndex >= period && sumVolume !== 0 ?\n                        sumMoneyFlowVolume / sumVolume :\n                        null);\n                    values.push([moneyFlowXData[0], moneyFlowYData[0]]);\n                    for (; i < len; i++) {\n                        moneyFlowVolume[i] = getMoneyFlowVolume(seriesYData[i], volumeSeriesYData[i]);\n                        sumVolume -= volumeSeriesYData[i - period];\n                        sumVolume += volumeSeriesYData[i];\n                        sumMoneyFlowVolume -= moneyFlowVolume[i - period];\n                        sumMoneyFlowVolume += moneyFlowVolume[i];\n                        point = [\n                            xData[i],\n                            i - nullIndex >= period ?\n                                sumMoneyFlowVolume / sumVolume :\n                                null\n                        ];\n                        moneyFlowXData.push(point[0]);\n                        moneyFlowYData.push(point[1]);\n                        values.push([point[0], point[1]]);\n                    }\n                }\n                return {\n                    values: values,\n                    xData: moneyFlowXData,\n                    yData: moneyFlowYData\n                };\n            };\n            /**\n             * Chaikin Money Flow indicator (cmf).\n             *\n             * @sample stock/indicators/cmf/\n             *         Chaikin Money Flow indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @excluding    animationLimit\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/cmf\n             * @optionparent plotOptions.cmf\n             */\n            CMFIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    /**\n                     * The id of another series to use its data as volume data for the\n                     * indiator calculation.\n                     */\n                    volumeSeriesID: 'volume'\n                }\n            });\n            return CMFIndicator;\n        }(SMAIndicator));\n        SeriesRegistry.registerSeriesType('cmf', CMFIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `CMF` series. If the [type](#series.cmf.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.cmf\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/cmf\n         * @apioption series.cmf\n         */\n        ''; // adds doclet above to the transpiled file\n\n        return CMFIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/DMI/DMIIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *  (c) 2010-2021 Rafal Sebestjanski\n         *\n         *  Directional Movement Index (DMI) indicator for Highcharts Stock\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var correctFloat = U.correctFloat,\n            extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Directional Movement Index (DMI) series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.dmi\n         *\n         * @augments Highcharts.Series\n         */\n        var DMIIndicator = /** @class */ (function (_super) {\n                __extends(DMIIndicator, _super);\n            function DMIIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.options = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            DMIIndicator.prototype.calculateDM = function (yVal, i, isPositiveDM) {\n                var currentHigh = yVal[i][1],\n                    currentLow = yVal[i][2],\n                    previousHigh = yVal[i - 1][1],\n                    previousLow = yVal[i - 1][2];\n                var DM;\n                if (currentHigh - previousHigh > previousLow - currentLow) {\n                    // for +DM\n                    DM = isPositiveDM ? Math.max(currentHigh - previousHigh, 0) : 0;\n                }\n                else {\n                    // for -DM\n                    DM = !isPositiveDM ? Math.max(previousLow - currentLow, 0) : 0;\n                }\n                return correctFloat(DM);\n            };\n            DMIIndicator.prototype.calculateDI = function (smoothedDM, tr) {\n                return smoothedDM / tr * 100;\n            };\n            DMIIndicator.prototype.calculateDX = function (plusDI, minusDI) {\n                return correctFloat(Math.abs(plusDI - minusDI) / Math.abs(plusDI + minusDI) * 100);\n            };\n            DMIIndicator.prototype.smoothValues = function (accumulatedValues, currentValue, period) {\n                return correctFloat(accumulatedValues - accumulatedValues / period + currentValue);\n            };\n            DMIIndicator.prototype.getTR = function (currentPoint, prevPoint) {\n                return correctFloat(Math.max(\n                // currentHigh - currentLow\n                currentPoint[1] - currentPoint[2], \n                // currentHigh - previousClose\n                !prevPoint ? 0 : Math.abs(currentPoint[1] - prevPoint[3]), \n                // currentLow - previousClose\n                !prevPoint ? 0 : Math.abs(currentPoint[2] - prevPoint[3])));\n            };\n            DMIIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    DMI = [],\n                    xData = [],\n                    yData = [];\n                if (\n                // Check period, if bigger than points length, skip\n                (xVal.length <= period) ||\n                    // Only ohlc data is valid\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                var prevSmoothedPlusDM = 0,\n                    prevSmoothedMinusDM = 0,\n                    prevSmoothedTR = 0,\n                    i;\n                for (i = 1; i < yValLen; i++) {\n                    var smoothedPlusDM = void 0,\n                        smoothedMinusDM = void 0,\n                        smoothedTR = void 0,\n                        plusDM = void 0, // +DM\n                        minusDM = void 0, // -DM\n                        TR = void 0,\n                        plusDI = void 0, // +DI\n                        minusDI = void 0, // -DI\n                        DX = void 0;\n                    if (i <= period) {\n                        plusDM = this.calculateDM(yVal, i, true);\n                        minusDM = this.calculateDM(yVal, i);\n                        TR = this.getTR(yVal[i], yVal[i - 1]);\n                        // Accumulate first period values to smooth them later\n                        prevSmoothedPlusDM += plusDM;\n                        prevSmoothedMinusDM += minusDM;\n                        prevSmoothedTR += TR;\n                        // Get all values for the first point\n                        if (i === period) {\n                            plusDI = this.calculateDI(prevSmoothedPlusDM, prevSmoothedTR);\n                            minusDI = this.calculateDI(prevSmoothedMinusDM, prevSmoothedTR);\n                            DX = this.calculateDX(prevSmoothedPlusDM, prevSmoothedMinusDM);\n                            DMI.push([xVal[i], DX, plusDI, minusDI]);\n                            xData.push(xVal[i]);\n                            yData.push([DX, plusDI, minusDI]);\n                        }\n                    }\n                    else {\n                        // Calculate current values\n                        plusDM = this.calculateDM(yVal, i, true);\n                        minusDM = this.calculateDM(yVal, i);\n                        TR = this.getTR(yVal[i], yVal[i - 1]);\n                        // Smooth +DM, -DM and TR\n                        smoothedPlusDM = this.smoothValues(prevSmoothedPlusDM, plusDM, period);\n                        smoothedMinusDM = this.smoothValues(prevSmoothedMinusDM, minusDM, period);\n                        smoothedTR = this.smoothValues(prevSmoothedTR, TR, period);\n                        // Save current smoothed values for the next step\n                        prevSmoothedPlusDM = smoothedPlusDM;\n                        prevSmoothedMinusDM = smoothedMinusDM;\n                        prevSmoothedTR = smoothedTR;\n                        // Get all next points (except the first one calculated above)\n                        plusDI = this.calculateDI(prevSmoothedPlusDM, prevSmoothedTR);\n                        minusDI = this.calculateDI(prevSmoothedMinusDM, prevSmoothedTR);\n                        DX = this.calculateDX(prevSmoothedPlusDM, prevSmoothedMinusDM);\n                        DMI.push([xVal[i], DX, plusDI, minusDI]);\n                        xData.push(xVal[i]);\n                        yData.push([DX, plusDI, minusDI]);\n                    }\n                }\n                return {\n                    values: DMI,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Directional Movement Index (DMI).\n             * This series requires the `linkedTo` option to be set and should\n             * be loaded after the `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/dmi\n             *         DMI indicator\n             *\n             * @extends      plotOptions.sma\n             * @since 9.1.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n             *               pointInterval, pointIntervalUnit, pointPlacement,\n             *               pointRange, pointStart, showInNavigator, stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/dmi\n             * @optionparent plotOptions.dmi\n             */\n            DMIIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0 // unused index, do not inherit (#15362)\n                },\n                marker: {\n                    enabled: false\n                },\n                tooltip: {\n                    pointFormat: '<span style=\"color: {point.color}\">' +\n                        '\\u25CF</span><b> {series.name}</b><br/>' +\n                        '<span style=\"color: {point.color}\">DX</span>: {point.y}<br/>' +\n                        '<span style=\"color: ' +\n                        '{point.series.options.plusDILine.styles.lineColor}\">' +\n                        '+DI</span>: {point.plusDI}<br/>' +\n                        '<span style=\"color: ' +\n                        '{point.series.options.minusDILine.styles.lineColor}\">' +\n                        '-DI</span>: {point.minusDI}<br/>'\n                },\n                /**\n                 * +DI line options.\n                 */\n                plusDILine: {\n                    /**\n                     * Styles for the +DI line.\n                     */\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: \"#06b535\" /* positiveColor */ // green-ish\n                    }\n                },\n                /**\n                 * -DI line options.\n                 */\n                minusDILine: {\n                    /**\n                     * Styles for the -DI line.\n                     */\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: \"#f21313\" /* negativeColor */ // red-ish\n                    }\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return DMIIndicator;\n        }(SMAIndicator));\n        extend(DMIIndicator.prototype, {\n            areaLinesNames: [],\n            nameBase: 'DMI',\n            linesApiNames: ['plusDILine', 'minusDILine'],\n            pointArrayMap: ['y', 'plusDI', 'minusDI'],\n            parallelArrays: ['x', 'y', 'plusDI', 'minusDI'],\n            pointValKey: 'y'\n        });\n        MultipleLinesComposition.compose(DMIIndicator);\n        SeriesRegistry.registerSeriesType('dmi', DMIIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * The Directional Movement Index (DMI) indicator series.\n         * If the [type](#series.dmi.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.dmi\n         * @since 9.1.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis,  dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/dmi\n         * @apioption series.dmi\n         */\n        ''; // to include the above in the js output\n\n        return DMIIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/DPO/DPOIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var extend = U.extend,\n            merge = U.merge,\n            correctFloat = U.correctFloat,\n            pick = U.pick;\n        /* eslint-disable valid-jsdoc */\n        // Utils:\n        /**\n         * @private\n         */\n        function accumulatePoints(sum, yVal, i, index, subtract) {\n            var price = pick(yVal[i][index],\n                yVal[i]);\n            if (subtract) {\n                return correctFloat(sum - price);\n            }\n            return correctFloat(sum + price);\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The DPO series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.dpo\n         *\n         * @augments Highcharts.Series\n         */\n        var DPOIndicator = /** @class */ (function (_super) {\n                __extends(DPOIndicator, _super);\n            function DPOIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                *\n                *   Properties\n                *\n                * */\n                _this.options = void 0;\n                _this.data = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @lends Highcharts.Series#\n             */\n            DPOIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    index = params.index,\n                    offset = Math.floor(period / 2 + 1),\n                    range = period + offset,\n                    xVal = series.xData || [],\n                    yVal = series.yData || [],\n                    yValLen = yVal.length, \n                    // 0- date, 1- Detrended Price Oscillator\n                    DPO = [],\n                    xData = [],\n                    yData = [],\n                    sum = 0,\n                    oscillator,\n                    periodIndex,\n                    rangeIndex,\n                    price,\n                    i,\n                    j;\n                if (xVal.length <= range) {\n                    return;\n                }\n                // Accumulate first N-points for SMA\n                for (i = 0; i < period - 1; i++) {\n                    sum = accumulatePoints(sum, yVal, i, index);\n                }\n                // Detrended Price Oscillator formula:\n                // DPO = Price - Simple moving average [from (n / 2 + 1) days ago]\n                for (j = 0; j <= yValLen - range; j++) {\n                    periodIndex = j + period - 1;\n                    rangeIndex = j + range - 1;\n                    // adding the last period point\n                    sum = accumulatePoints(sum, yVal, periodIndex, index);\n                    price = pick(yVal[rangeIndex][index], yVal[rangeIndex]);\n                    oscillator = price - sum / period;\n                    // substracting the first period point\n                    sum = accumulatePoints(sum, yVal, j, index, true);\n                    DPO.push([xVal[rangeIndex], oscillator]);\n                    xData.push(xVal[rangeIndex]);\n                    yData.push(oscillator);\n                }\n                return {\n                    values: DPO,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Detrended Price Oscillator. This series requires the `linkedTo` option to\n             * be set and should be loaded after the `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/dpo\n             *         Detrended Price Oscillator\n             *\n             * @extends      plotOptions.sma\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/dpo\n             * @optionparent plotOptions.dpo\n             */\n            DPOIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Parameters used in calculation of Detrended Price Oscillator series\n                 * points.\n                 */\n                params: {\n                    index: 0,\n                    /**\n                     * Period for Detrended Price Oscillator\n                     */\n                    period: 21\n                }\n            });\n            return DPOIndicator;\n        }(SMAIndicator));\n        extend(DPOIndicator.prototype, {\n            nameBase: 'DPO'\n        });\n        SeriesRegistry.registerSeriesType('dpo', DPOIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A Detrended Price Oscillator. If the [type](#series.dpo.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.dpo\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/dpo\n         * @apioption series.dpo\n         */\n        ''; // to include the above in the js output'\n\n        return DPOIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Chaikin/ChaikinIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var _a = SeriesRegistry.seriesTypes,\n            AD = _a.ad,\n            EMAIndicator = _a.ema;\n        var correctFloat = U.correctFloat,\n            extend = U.extend,\n            merge = U.merge,\n            error = U.error;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Chaikin series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.chaikin\n         *\n         * @augments Highcharts.Series\n         */\n        var ChaikinIndicator = /** @class */ (function (_super) {\n                __extends(ChaikinIndicator, _super);\n            function ChaikinIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            ChaikinIndicator.prototype.getValues = function (series, params) {\n                var periods = params.periods,\n                    period = params.period, \n                    // Accumulation Distribution Line data\n                    ADL, \n                    // 0- date, 1- Chaikin Oscillator\n                    CHA = [],\n                    xData = [],\n                    yData = [],\n                    periodsOffset, \n                    // Shorter Period EMA\n                    SPE, \n                    // Longer Period EMA\n                    LPE,\n                    oscillator,\n                    i;\n                // Check if periods are correct\n                if (periods.length !== 2 || periods[1] <= periods[0]) {\n                    error('Error: \"Chaikin requires two periods. Notice, first ' +\n                        'period should be lower than the second one.\"');\n                    return;\n                }\n                ADL = AD.prototype.getValues.call(this, series, {\n                    volumeSeriesID: params.volumeSeriesID,\n                    period: period\n                });\n                // Check if adl is calculated properly, if not skip\n                if (!ADL) {\n                    return;\n                }\n                SPE = EMAIndicator.prototype.getValues.call(this, ADL, {\n                    period: periods[0]\n                });\n                LPE = EMAIndicator.prototype.getValues.call(this, ADL, {\n                    period: periods[1]\n                });\n                // Check if ema is calculated properly, if not skip\n                if (!SPE || !LPE) {\n                    return;\n                }\n                periodsOffset = periods[1] - periods[0];\n                for (i = 0; i < LPE.yData.length; i++) {\n                    oscillator = correctFloat(SPE.yData[i + periodsOffset] -\n                        LPE.yData[i]);\n                    CHA.push([LPE.xData[i], oscillator]);\n                    xData.push(LPE.xData[i]);\n                    yData.push(oscillator);\n                }\n                return {\n                    values: CHA,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Chaikin Oscillator. This series requires the `linkedTo` option to\n             * be set and should be loaded after the `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/chaikin\n             *         Chaikin Oscillator\n             *\n             * @extends      plotOptions.ema\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n             *               pointInterval, pointIntervalUnit, pointPlacement,\n             *               pointRange, pointStart, showInNavigator, stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/chaikin\n             * @optionparent plotOptions.chaikin\n             */\n            ChaikinIndicator.defaultOptions = merge(EMAIndicator.defaultOptions, {\n                /**\n                 * Paramters used in calculation of Chaikin Oscillator\n                 * series points.\n                 *\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    /**\n                     * The id of volume series which is mandatory.\n                     * For example using OHLC data, volumeSeriesID='volume' means\n                     * the indicator will be calculated using OHLC and volume values.\n                     */\n                    volumeSeriesID: 'volume',\n                    /**\n                     * Parameter used indirectly for calculating the `AD` indicator.\n                     * Decides about the number of data points that are taken\n                     * into account for the indicator calculations.\n                     */\n                    period: 9,\n                    /**\n                     * Periods for Chaikin Oscillator calculations.\n                     *\n                     * @type    {Array<number>}\n                     * @default [3, 10]\n                     */\n                    periods: [3, 10]\n                }\n            });\n            return ChaikinIndicator;\n        }(EMAIndicator));\n        extend(ChaikinIndicator.prototype, {\n            nameBase: 'Chaikin Osc',\n            nameComponents: ['periods']\n        });\n        SeriesRegistry.registerSeriesType('chaikin', ChaikinIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `Chaikin Oscillator` series. If the [type](#series.chaikin.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.chaikin\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, stacking, showInNavigator\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/chaikin\n         * @apioption series.chaikin\n         */\n        ''; // to include the above in the js output\n\n        return ChaikinIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/CMO/CMOIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var isNumber = U.isNumber,\n            merge = U.merge;\n        /* eslint-enable require-jsdoc */\n        /**\n         * The CMO series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.cmo\n         *\n         * @augments Highcharts.Series\n         */\n        var CMOIndicator = /** @class */ (function (_super) {\n                __extends(CMOIndicator, _super);\n            function CMOIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            CMOIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    CMO = [],\n                    xData = [],\n                    yData = [];\n                var i,\n                    index = params.index,\n                    values;\n                if (xVal.length < period) {\n                    return;\n                }\n                if (isNumber(yVal[0])) {\n                    values = yVal;\n                }\n                else {\n                    // In case of the situation, where the series type has data length\n                    // shorter then 4 (HLC, range), this ensures that we are not trying\n                    // to reach the index out of bounds\n                    index = Math.min(index, yVal[0].length - 1);\n                    values = yVal.map(function (value) { return value[index]; });\n                }\n                var firstAddedSum = 0,\n                    sumOfHigherValues = 0,\n                    sumOfLowerValues = 0,\n                    y;\n                // Calculate first point, check if the first value\n                // was added to sum of higher/lower values, and what was the value.\n                for (var j = period; j > 0; j--) {\n                    if (values[j] > values[j - 1]) {\n                        sumOfHigherValues += values[j] - values[j - 1];\n                    }\n                    else if (values[j] < values[j - 1]) {\n                        sumOfLowerValues += values[j - 1] - values[j];\n                    }\n                }\n                // You might devide by 0 if all values are equal,\n                // so return 0 in this case.\n                y =\n                    sumOfHigherValues + sumOfLowerValues > 0 ?\n                        (100 * (sumOfHigherValues - sumOfLowerValues)) /\n                            (sumOfHigherValues + sumOfLowerValues) :\n                        0;\n                xData.push(xVal[period]);\n                yData.push(y);\n                CMO.push([xVal[period], y]);\n                for (i = period + 1; i < yValLen; i++) {\n                    firstAddedSum = Math.abs(values[i - period - 1] - values[i - period]);\n                    if (values[i] > values[i - 1]) {\n                        sumOfHigherValues += values[i] - values[i - 1];\n                    }\n                    else if (values[i] < values[i - 1]) {\n                        sumOfLowerValues += values[i - 1] - values[i];\n                    }\n                    // Check, to which sum was the first value added to,\n                    // and substract this value from given sum.\n                    if (values[i - period] > values[i - period - 1]) {\n                        sumOfHigherValues -= firstAddedSum;\n                    }\n                    else {\n                        sumOfLowerValues -= firstAddedSum;\n                    }\n                    // Same as above.\n                    y =\n                        sumOfHigherValues + sumOfLowerValues > 0 ?\n                            (100 * (sumOfHigherValues - sumOfLowerValues)) /\n                                (sumOfHigherValues + sumOfLowerValues) :\n                            0;\n                    xData.push(xVal[i]);\n                    yData.push(y);\n                    CMO.push([xVal[i], y]);\n                }\n                return {\n                    values: CMO,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Chande Momentum Oscilator (CMO) technical indicator. This series\n             * requires the `linkedTo` option to be set and should be loaded after\n             * the `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/cmo\n             *         CMO indicator\n             *\n             * @extends      plotOptions.sma\n             * @since 9.1.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/cmo\n             * @optionparent plotOptions.cmo\n             */\n            CMOIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    period: 20,\n                    index: 3\n                }\n            });\n            return CMOIndicator;\n        }(SMAIndicator));\n        SeriesRegistry.registerSeriesType('cmo', CMOIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `CMO` series. If the [type](#series.cmo.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.cmo\n         * @since 9.1.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/cmo\n         * @apioption series.cmo\n         */\n        (''); // to include the above in the js output\n\n        return CMOIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/DEMA/DEMAIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var EMAIndicator = SeriesRegistry.seriesTypes.ema;\n        var correctFloat = U.correctFloat,\n            isArray = U.isArray,\n            merge = U.merge;\n        /**\n         * The DEMA series Type\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.dema\n         *\n         * @augments Highcharts.Series\n         */\n        var DEMAIndicator = /** @class */ (function (_super) {\n                __extends(DEMAIndicator, _super);\n            function DEMAIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.EMApercent = void 0;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            DEMAIndicator.prototype.getEMA = function (yVal, prevEMA, SMA, index, i, xVal) {\n                return EMAIndicator.prototype.calculateEma(xVal || [], yVal, typeof i === 'undefined' ? 1 : i, this.EMApercent, prevEMA, typeof index === 'undefined' ? -1 : index, SMA);\n            };\n            DEMAIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    doubledPeriod = 2 * period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    index = -1,\n                    accumulatePeriodPoints = 0,\n                    SMA = 0,\n                    DEMA = [],\n                    xDataDema = [],\n                    yDataDema = [],\n                    EMA = 0, \n                    // EMA(EMA)\n                    EMAlevel2, \n                    // EMA of previous point\n                    prevEMA,\n                    prevEMAlevel2, \n                    // EMA values array\n                    EMAvalues = [],\n                    i,\n                    DEMAPoint;\n                this.EMApercent = (2 / (period + 1));\n                // Check period, if bigger than EMA points length, skip\n                if (yValLen < 2 * period - 1) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    index = params.index ? params.index : 0;\n                }\n                // Accumulate first N-points\n                accumulatePeriodPoints =\n                    EMAIndicator.prototype.accumulatePeriodPoints(period, index, yVal);\n                // first point\n                SMA = accumulatePeriodPoints / period;\n                accumulatePeriodPoints = 0;\n                // Calculate value one-by-one for each period in visible data\n                for (i = period; i < yValLen + 2; i++) {\n                    if (i < yValLen + 1) {\n                        EMA = this.getEMA(yVal, prevEMA, SMA, index, i)[1];\n                        EMAvalues.push(EMA);\n                    }\n                    prevEMA = EMA;\n                    // Summing first period points for EMA(EMA)\n                    if (i < doubledPeriod) {\n                        accumulatePeriodPoints += EMA;\n                    }\n                    else {\n                        // Calculate DEMA\n                        // First DEMA point\n                        if (i === doubledPeriod) {\n                            SMA = accumulatePeriodPoints / period;\n                        }\n                        EMA = EMAvalues[i - period - 1];\n                        EMAlevel2 = this.getEMA([EMA], prevEMAlevel2, SMA)[1];\n                        DEMAPoint = [\n                            xVal[i - 2],\n                            correctFloat(2 * EMA - EMAlevel2)\n                        ];\n                        DEMA.push(DEMAPoint);\n                        xDataDema.push(DEMAPoint[0]);\n                        yDataDema.push(DEMAPoint[1]);\n                        prevEMAlevel2 = EMAlevel2;\n                    }\n                }\n                return {\n                    values: DEMA,\n                    xData: xDataDema,\n                    yData: yDataDema\n                };\n            };\n            /**\n             * Double exponential moving average (DEMA) indicator. This series requires\n             * `linkedTo` option to be set and should be loaded after the\n             * `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/dema\n             *         DEMA indicator\n             *\n             * @extends      plotOptions.ema\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/dema\n             * @optionparent plotOptions.dema\n             */\n            DEMAIndicator.defaultOptions = merge(EMAIndicator.defaultOptions);\n            return DEMAIndicator;\n        }(EMAIndicator));\n        SeriesRegistry.registerSeriesType('dema', DEMAIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `DEMA` series. If the [type](#series.dema.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.dema\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/dema\n         * @apioption series.dema\n         */\n        ''; // adds doclet above to the transpiled file\n\n        return DEMAIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/TEMA/TEMAIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var EMAIndicator = SeriesRegistry.seriesTypes.ema;\n        var correctFloat = U.correctFloat,\n            isArray = U.isArray,\n            merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The TEMA series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.tema\n         *\n         * @augments Highcharts.Series\n         */\n        var TEMAIndicator = /** @class */ (function (_super) {\n                __extends(TEMAIndicator, _super);\n            function TEMAIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.EMApercent = void 0;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            TEMAIndicator.prototype.getEMA = function (yVal, prevEMA, SMA, index, i, xVal) {\n                return EMAIndicator.prototype.calculateEma(xVal || [], yVal, typeof i === 'undefined' ? 1 : i, this.EMApercent, prevEMA, typeof index === 'undefined' ? -1 : index, SMA);\n            };\n            TEMAIndicator.prototype.getTemaPoint = function (xVal, tripledPeriod, EMAlevels, i) {\n                var TEMAPoint = [\n                        xVal[i - 3],\n                        correctFloat(3 * EMAlevels.level1 -\n                            3 * EMAlevels.level2 + EMAlevels.level3)\n                    ];\n                return TEMAPoint;\n            };\n            TEMAIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    doubledPeriod = 2 * period,\n                    tripledPeriod = 3 * period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    index = -1,\n                    accumulatePeriodPoints = 0,\n                    SMA = 0,\n                    TEMA = [],\n                    xDataTema = [],\n                    yDataTema = [], \n                    // EMA of previous point\n                    prevEMA,\n                    prevEMAlevel2, \n                    // EMA values array\n                    EMAvalues = [],\n                    EMAlevel2values = [],\n                    i,\n                    TEMAPoint, \n                    // This object contains all EMA EMAlevels calculated like below\n                    // EMA = level1\n                    // EMA(EMA) = level2,\n                    // EMA(EMA(EMA)) = level3,\n                    EMAlevels = {};\n                this.EMApercent = (2 / (period + 1));\n                // Check period, if bigger than EMA points length, skip\n                if (yValLen < 3 * period - 2) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    index = params.index ? params.index : 0;\n                }\n                // Accumulate first N-points\n                accumulatePeriodPoints =\n                    EMAIndicator.prototype.accumulatePeriodPoints(period, index, yVal);\n                // first point\n                SMA = accumulatePeriodPoints / period;\n                accumulatePeriodPoints = 0;\n                // Calculate value one-by-one for each period in visible data\n                for (i = period; i < yValLen + 3; i++) {\n                    if (i < yValLen + 1) {\n                        EMAlevels.level1 = this.getEMA(yVal, prevEMA, SMA, index, i)[1];\n                        EMAvalues.push(EMAlevels.level1);\n                    }\n                    prevEMA = EMAlevels.level1;\n                    // Summing first period points for ema(ema)\n                    if (i < doubledPeriod) {\n                        accumulatePeriodPoints += EMAlevels.level1;\n                    }\n                    else {\n                        // Calculate dema\n                        // First dema point\n                        if (i === doubledPeriod) {\n                            SMA = accumulatePeriodPoints / period;\n                            accumulatePeriodPoints = 0;\n                        }\n                        EMAlevels.level1 = EMAvalues[i - period - 1];\n                        EMAlevels.level2 = this.getEMA([EMAlevels.level1], prevEMAlevel2, SMA)[1];\n                        EMAlevel2values.push(EMAlevels.level2);\n                        prevEMAlevel2 = EMAlevels.level2;\n                        // Summing first period points for ema(ema(ema))\n                        if (i < tripledPeriod) {\n                            accumulatePeriodPoints += EMAlevels.level2;\n                        }\n                        else {\n                            // Calculate tema\n                            // First tema point\n                            if (i === tripledPeriod) {\n                                SMA = accumulatePeriodPoints / period;\n                            }\n                            if (i === yValLen + 1) {\n                                // Calculate the last ema and emaEMA points\n                                EMAlevels.level1 = EMAvalues[i - period - 1];\n                                EMAlevels.level2 = this.getEMA([EMAlevels.level1], prevEMAlevel2, SMA)[1];\n                                EMAlevel2values.push(EMAlevels.level2);\n                            }\n                            EMAlevels.level1 = EMAvalues[i - period - 2];\n                            EMAlevels.level2 = EMAlevel2values[i - 2 * period - 1];\n                            EMAlevels.level3 = this.getEMA([EMAlevels.level2], EMAlevels.prevLevel3, SMA)[1];\n                            TEMAPoint = this.getTemaPoint(xVal, tripledPeriod, EMAlevels, i);\n                            // Make sure that point exists (for TRIX oscillator)\n                            if (TEMAPoint) {\n                                TEMA.push(TEMAPoint);\n                                xDataTema.push(TEMAPoint[0]);\n                                yDataTema.push(TEMAPoint[1]);\n                            }\n                            EMAlevels.prevLevel3 = EMAlevels.level3;\n                        }\n                    }\n                }\n                return {\n                    values: TEMA,\n                    xData: xDataTema,\n                    yData: yDataTema\n                };\n            };\n            /**\n             * Triple exponential moving average (TEMA) indicator. This series requires\n             * `linkedTo` option to be set and should be loaded after the\n             * `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/tema\n             *         TEMA indicator\n             *\n             * @extends      plotOptions.ema\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/tema\n             * @optionparent plotOptions.tema\n             */\n            TEMAIndicator.defaultOptions = merge(EMAIndicator.defaultOptions);\n            return TEMAIndicator;\n        }(EMAIndicator));\n        SeriesRegistry.registerSeriesType('tema', TEMAIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `TEMA` series. If the [type](#series.tema.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.tema\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/tema\n         * @apioption series.tema\n         */\n        ''; // to include the above in the js output\n\n        return TEMAIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/TRIX/TRIXIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var TEMAIndicator = SeriesRegistry.seriesTypes.tema;\n        var correctFloat = U.correctFloat,\n            merge = U.merge;\n        /**\n         * The TRIX series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.trix\n         *\n         * @augments Highcharts.Series\n         */\n        var TRIXIndicator = /** @class */ (function (_super) {\n                __extends(TRIXIndicator, _super);\n            function TRIXIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            // TRIX is calculated using TEMA so we just extend getTemaPoint method.\n            TRIXIndicator.prototype.getTemaPoint = function (xVal, tripledPeriod, EMAlevels, i) {\n                if (i > tripledPeriod) {\n                    return [\n                        xVal[i - 3],\n                        EMAlevels.prevLevel3 !== 0 ?\n                            correctFloat(EMAlevels.level3 - EMAlevels.prevLevel3) /\n                                EMAlevels.prevLevel3 * 100 : null\n                    ];\n                }\n            };\n            /**\n             * Triple exponential average (TRIX) oscillator. This series requires\n             * `linkedTo` option to be set.\n             *\n             * @sample {highstock} stock/indicators/trix\n             * TRIX indicator\n             *\n             * @extends      plotOptions.tema\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/tema\n             * @requires     stock/indicators/trix\n             * @optionparent plotOptions.trix\n             */\n            TRIXIndicator.defaultOptions = merge(TEMAIndicator.defaultOptions);\n            return TRIXIndicator;\n        }(TEMAIndicator));\n        SeriesRegistry.registerSeriesType('trix', TRIXIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `TRIX` series. If the [type](#series.trix.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.trix\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/tema\n         * @apioption series.trix\n         */\n        ''; // to include the above in the js output\n\n        return TRIXIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/APO/APOIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var EMAIndicator = SeriesRegistry.seriesTypes.ema;\n        var extend = U.extend,\n            merge = U.merge,\n            error = U.error;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The APO series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.apo\n         *\n         * @augments Highcharts.Series\n         */\n        var APOIndicator = /** @class */ (function (_super) {\n                __extends(APOIndicator, _super);\n            function APOIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            APOIndicator.prototype.getValues = function (series, params) {\n                var periods = params.periods,\n                    index = params.index, \n                    // 0- date, 1- Absolute price oscillator\n                    APO = [],\n                    xData = [],\n                    yData = [],\n                    periodsOffset, \n                    // Shorter Period EMA\n                    SPE, \n                    // Longer Period EMA\n                    LPE,\n                    oscillator,\n                    i;\n                // Check if periods are correct\n                if (periods.length !== 2 || periods[1] <= periods[0]) {\n                    error('Error: \"APO requires two periods. Notice, first period ' +\n                        'should be lower than the second one.\"');\n                    return;\n                }\n                SPE = EMAIndicator.prototype.getValues.call(this, series, {\n                    index: index,\n                    period: periods[0]\n                });\n                LPE = EMAIndicator.prototype.getValues.call(this, series, {\n                    index: index,\n                    period: periods[1]\n                });\n                // Check if ema is calculated properly, if not skip\n                if (!SPE || !LPE) {\n                    return;\n                }\n                periodsOffset = periods[1] - periods[0];\n                for (i = 0; i < LPE.yData.length; i++) {\n                    oscillator = (SPE.yData[i + periodsOffset] -\n                        LPE.yData[i]);\n                    APO.push([LPE.xData[i], oscillator]);\n                    xData.push(LPE.xData[i]);\n                    yData.push(oscillator);\n                }\n                return {\n                    values: APO,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Absolute Price Oscillator. This series requires the `linkedTo` option to\n             * be set and should be loaded after the `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/apo\n             *         Absolute Price Oscillator\n             *\n             * @extends      plotOptions.ema\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n             *               pointInterval, pointIntervalUnit, pointPlacement,\n             *               pointRange, pointStart, showInNavigator, stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/apo\n             * @optionparent plotOptions.apo\n             */\n            APOIndicator.defaultOptions = merge(EMAIndicator.defaultOptions, {\n                /**\n                 * Paramters used in calculation of Absolute Price Oscillator\n                 * series points.\n                 *\n                 * @excluding period\n                 */\n                params: {\n                    period: void 0,\n                    /**\n                     * Periods for Absolute Price Oscillator calculations.\n                     *\n                     * @type    {Array<number>}\n                     * @default [10, 20]\n                     * @since   7.0.0\n                     */\n                    periods: [10, 20]\n                }\n            });\n            return APOIndicator;\n        }(EMAIndicator));\n        extend(APOIndicator.prototype, {\n            nameBase: 'APO',\n            nameComponents: ['periods']\n        });\n        SeriesRegistry.registerSeriesType('apo', APOIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * An `Absolute Price Oscillator` series. If the [type](#series.apo.type) option\n         * is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.apo\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/apo\n         * @apioption series.apo\n         */\n        ''; // to include the above in the js output\n\n        return APOIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/IKH/IKHIndicator.js', [_modules['Core/Color/Color.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (Color, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var color = Color.parse;\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var defined = U.defined,\n            extend = U.extend,\n            isArray = U.isArray,\n            isNumber = U.isNumber,\n            merge = U.merge,\n            objectEach = U.objectEach;\n        /* eslint-disable require-jsdoc */\n        // Utils:\n        function maxHigh(arr) {\n            return arr.reduce(function (max, res) {\n                return Math.max(max, res[1]);\n            }, -Infinity);\n        }\n        function minLow(arr) {\n            return arr.reduce(function (min, res) {\n                return Math.min(min, res[2]);\n            }, Infinity);\n        }\n        function highlowLevel(arr) {\n            return {\n                high: maxHigh(arr),\n                low: minLow(arr)\n            };\n        }\n        function getClosestPointRange(axis) {\n            var closestDataRange,\n                loopLength,\n                distance,\n                xData,\n                i;\n            axis.series.forEach(function (series) {\n                if (series.xData) {\n                    xData = series.xData;\n                    loopLength = series.xIncrement ? 1 : xData.length - 1;\n                    for (i = loopLength; i > 0; i--) {\n                        distance = xData[i] - xData[i - 1];\n                        if (typeof closestDataRange === 'undefined' ||\n                            distance < closestDataRange) {\n                            closestDataRange = distance;\n                        }\n                    }\n                }\n            });\n            return closestDataRange;\n        }\n        // Check two lines intersection (line a1-a2 and b1-b2)\n        // Source: https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection\n        function checkLineIntersection(a1, a2, b1, b2) {\n            if (a1 && a2 && b1 && b2) {\n                var saX = a2.plotX - a1.plotX, // Auxiliary section a2-a1 X\n                    saY = a2.plotY - a1.plotY, // Auxiliary section a2-a1 Y\n                    sbX = b2.plotX - b1.plotX, // Auxiliary section b2-b1 X\n                    sbY = b2.plotY - b1.plotY, // Auxiliary section b2-b1 Y\n                    sabX = a1.plotX - b1.plotX, // Auxiliary section a1-b1 X\n                    sabY = a1.plotY - b1.plotY, // Auxiliary section a1-b1 Y\n                    // First degree Bézier parameters\n                    u = void 0,\n                    t = void 0;\n                u = (-saY * sabX + saX * sabY) / (-sbX * saY + saX * sbY);\n                t = (sbX * sabY - sbY * sabX) / (-sbX * saY + saX * sbY);\n                if (u >= 0 && u <= 1 && t >= 0 && t <= 1) {\n                    return {\n                        plotX: a1.plotX + t * saX,\n                        plotY: a1.plotY + t * saY\n                    };\n                }\n            }\n            return false;\n        }\n        // Parameter opt (indicator options object) include indicator, points,\n        // nextPoints, color, options, gappedExtend and graph properties\n        function drawSenkouSpan(opt) {\n            var indicator = opt.indicator;\n            indicator.points = opt.points;\n            indicator.nextPoints = opt.nextPoints;\n            indicator.color = opt.color;\n            indicator.options = merge(opt.options.senkouSpan.styles, opt.gap);\n            indicator.graph = opt.graph;\n            indicator.fillGraph = true;\n            SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(indicator);\n        }\n        // Data integrity in Ichimoku is different than default 'averages':\n        // Point: [undefined, value, value, ...] is correct\n        // Point: [undefined, undefined, undefined, ...] is incorrect\n        H.approximations['ichimoku-averages'] = function () {\n            var ret = [],\n                isEmptyRange;\n            [].forEach.call(arguments, function (arr, i) {\n                ret.push(H.approximations.average(arr));\n                isEmptyRange = !isEmptyRange && typeof ret[i] === 'undefined';\n            });\n            // Return undefined when first elem. is undefined and let\n            // sum method handle null (#7377)\n            return isEmptyRange ? void 0 : ret;\n        };\n        /* eslint-enable require-jsdoc */\n        /**\n         * The IKH series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ikh\n         *\n         * @augments Highcharts.Series\n         */\n        /* *\n        *\n        * Class\n        *\n        * */\n        var IKHIndicator = /** @class */ (function (_super) {\n                __extends(IKHIndicator, _super);\n            function IKHIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                *\n                *  Properties\n                *\n                * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                _this.graphCollection = void 0;\n                _this.graphsenkouSpan = void 0;\n                _this.ikhMap = void 0;\n                _this.nextPoints = void 0;\n                return _this;\n            }\n            /* *\n            *\n            * Functions\n            *\n            * */\n            IKHIndicator.prototype.init = function () {\n                SeriesRegistry.seriesTypes.sma.prototype.init.apply(this, arguments);\n                // Set default color for lines:\n                this.options = merge({\n                    tenkanLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    },\n                    kijunLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    },\n                    chikouLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    },\n                    senkouSpanA: {\n                        styles: {\n                            lineColor: this.color,\n                            fill: color(this.color).setOpacity(0.5).get()\n                        }\n                    },\n                    senkouSpanB: {\n                        styles: {\n                            lineColor: this.color,\n                            fill: color(this.color).setOpacity(0.5).get()\n                        }\n                    },\n                    senkouSpan: {\n                        styles: {\n                            fill: color(this.color).setOpacity(0.2).get()\n                        }\n                    }\n                }, this.options);\n            };\n            IKHIndicator.prototype.toYData = function (point) {\n                return [\n                    point.tenkanSen,\n                    point.kijunSen,\n                    point.chikouSpan,\n                    point.senkouSpanA,\n                    point.senkouSpanB\n                ];\n            };\n            IKHIndicator.prototype.translate = function () {\n                var indicator = this;\n                SeriesRegistry.seriesTypes.sma.prototype.translate.apply(indicator);\n                indicator.points.forEach(function (point) {\n                    indicator.pointArrayMap.forEach(function (key) {\n                        var pointValue = point[key];\n                        if (isNumber(pointValue)) {\n                            point['plot' + key] = indicator.yAxis.toPixels(pointValue, true);\n                            // Add extra parameters for support tooltip in moved\n                            // lines\n                            point.plotY = point['plot' + key];\n                            point.tooltipPos = [\n                                point.plotX,\n                                point['plot' + key]\n                            ];\n                            point.isNull = false;\n                        }\n                    });\n                });\n            };\n            IKHIndicator.prototype.drawGraph = function () {\n                var indicator = this,\n                    mainLinePoints = indicator.points,\n                    pointsLength = mainLinePoints.length,\n                    mainLineOptions = indicator.options,\n                    mainLinePath = indicator.graph,\n                    mainColor = indicator.color,\n                    gappedExtend = {\n                        options: {\n                            gapSize: mainLineOptions.gapSize\n                        }\n                    },\n                    pointArrayMapLength = indicator.pointArrayMap.length,\n                    allIchimokuPoints = [\n                        [],\n                        [],\n                        [],\n                        [],\n                        [],\n                        []\n                    ],\n                    ikhMap = {\n                        tenkanLine: allIchimokuPoints[0],\n                        kijunLine: allIchimokuPoints[1],\n                        chikouLine: allIchimokuPoints[2],\n                        senkouSpanA: allIchimokuPoints[3],\n                        senkouSpanB: allIchimokuPoints[4],\n                        senkouSpan: allIchimokuPoints[5]\n                    },\n                    intersectIndexColl = [],\n                    senkouSpanOptions = indicator\n                        .options.senkouSpan,\n                    color = senkouSpanOptions.color ||\n                        senkouSpanOptions.styles.fill,\n                    negativeColor = senkouSpanOptions.negativeColor, \n                    // Points to create color and negativeColor senkouSpan\n                    points = [\n                        [],\n                        [] // Points negative color\n                    ], \n                    // For span, we need an access to the next points, used in\n                    // getGraphPath()\n                    nextPoints = [\n                        [],\n                        [] // NextPoints negative color\n                    ],\n                    lineIndex = 0,\n                    position,\n                    point,\n                    i,\n                    startIntersect,\n                    endIntersect,\n                    sectionPoints,\n                    sectionNextPoints,\n                    pointsPlotYSum,\n                    nextPointsPlotYSum,\n                    senkouSpanTempColor,\n                    concatArrIndex,\n                    j,\n                    k;\n                indicator.ikhMap = ikhMap;\n                // Generate points for all lines and spans lines:\n                while (pointsLength--) {\n                    point = mainLinePoints[pointsLength];\n                    for (i = 0; i < pointArrayMapLength; i++) {\n                        position = indicator.pointArrayMap[i];\n                        if (defined(point[position])) {\n                            allIchimokuPoints[i].push({\n                                plotX: point.plotX,\n                                plotY: point['plot' + position],\n                                isNull: false\n                            });\n                        }\n                    }\n                    if (negativeColor && pointsLength !== mainLinePoints.length - 1) {\n                        // Check if lines intersect\n                        var index = ikhMap.senkouSpanB.length - 1,\n                            intersect = checkLineIntersection(ikhMap.senkouSpanA[index - 1],\n                            ikhMap.senkouSpanA[index],\n                            ikhMap.senkouSpanB[index - 1],\n                            ikhMap.senkouSpanB[index]),\n                            intersectPointObj = {\n                                plotX: intersect.plotX,\n                                plotY: intersect.plotY,\n                                isNull: false,\n                                intersectPoint: true\n                            };\n                        if (intersect) {\n                            // Add intersect point to ichimoku points collection\n                            // Create senkouSpan sections\n                            ikhMap.senkouSpanA.splice(index, 0, intersectPointObj);\n                            ikhMap.senkouSpanB.splice(index, 0, intersectPointObj);\n                            intersectIndexColl.push(index);\n                        }\n                    }\n                }\n                // Modify options and generate lines:\n                objectEach(ikhMap, function (values, lineName) {\n                    if (mainLineOptions[lineName] &&\n                        lineName !== 'senkouSpan') {\n                        // First line is rendered by default option\n                        indicator.points = allIchimokuPoints[lineIndex];\n                        indicator.options = merge(mainLineOptions[lineName].styles, gappedExtend);\n                        indicator.graph = indicator['graph' + lineName];\n                        indicator.fillGraph = false;\n                        indicator.color = mainColor;\n                        SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(indicator);\n                        // Now save line\n                        indicator['graph' + lineName] = indicator.graph;\n                    }\n                    lineIndex++;\n                });\n                // Generate senkouSpan area:\n                // If graphColection exist then remove svg\n                // element and indicator property\n                if (indicator.graphCollection) {\n                    indicator.graphCollection.forEach(function (graphName) {\n                        indicator[graphName].destroy();\n                        delete indicator[graphName];\n                    });\n                }\n                // Clean grapCollection or initialize it\n                indicator.graphCollection = [];\n                // When user set negativeColor property\n                if (negativeColor && ikhMap.senkouSpanA[0] && ikhMap.senkouSpanB[0]) {\n                    // Add first and last point to senkouSpan area sections\n                    intersectIndexColl.unshift(0);\n                    intersectIndexColl.push(ikhMap.senkouSpanA.length - 1);\n                    // Populate points and nextPoints arrays\n                    for (j = 0; j < intersectIndexColl.length - 1; j++) {\n                        startIntersect = intersectIndexColl[j];\n                        endIntersect = intersectIndexColl[j + 1];\n                        sectionPoints = ikhMap.senkouSpanB.slice(startIntersect, endIntersect + 1);\n                        sectionNextPoints = ikhMap.senkouSpanA.slice(startIntersect, endIntersect + 1);\n                        // Add points to color or negativeColor arrays\n                        // Check the middle point (if exist)\n                        if (Math.floor(sectionPoints.length / 2) >= 1) {\n                            var x = Math.floor(sectionPoints.length / 2);\n                            // When middle points has equal values\n                            // Compare all ponints plotY value sum\n                            if (sectionPoints[x].plotY === sectionNextPoints[x].plotY) {\n                                pointsPlotYSum = 0;\n                                nextPointsPlotYSum = 0;\n                                for (k = 0; k < sectionPoints.length; k++) {\n                                    pointsPlotYSum += sectionPoints[k].plotY;\n                                    nextPointsPlotYSum += sectionNextPoints[k].plotY;\n                                }\n                                concatArrIndex =\n                                    pointsPlotYSum > nextPointsPlotYSum ? 0 : 1;\n                                points[concatArrIndex] = points[concatArrIndex].concat(sectionPoints);\n                                nextPoints[concatArrIndex] = nextPoints[concatArrIndex].concat(sectionNextPoints);\n                            }\n                            else {\n                                // Compare middle point of the section\n                                concatArrIndex = (sectionPoints[x].plotY > sectionNextPoints[x].plotY) ? 0 : 1;\n                                points[concatArrIndex] = points[concatArrIndex].concat(sectionPoints);\n                                nextPoints[concatArrIndex] = nextPoints[concatArrIndex].concat(sectionNextPoints);\n                            }\n                        }\n                        else {\n                            // Compare first point of the section\n                            concatArrIndex = (sectionPoints[0].plotY > sectionNextPoints[0].plotY) ? 0 : 1;\n                            points[concatArrIndex] = points[concatArrIndex].concat(sectionPoints);\n                            nextPoints[concatArrIndex] = nextPoints[concatArrIndex].concat(sectionNextPoints);\n                        }\n                    }\n                    // Render color and negativeColor paths\n                    ['graphsenkouSpanColor', 'graphsenkouSpanNegativeColor'].forEach(function (areaName, i) {\n                        if (points[i].length && nextPoints[i].length) {\n                            senkouSpanTempColor = i === 0 ? color : negativeColor;\n                            drawSenkouSpan({\n                                indicator: indicator,\n                                points: points[i],\n                                nextPoints: nextPoints[i],\n                                color: senkouSpanTempColor,\n                                options: mainLineOptions,\n                                gap: gappedExtend,\n                                graph: indicator[areaName]\n                            });\n                            // Now save line\n                            indicator[areaName] = indicator.graph;\n                            indicator.graphCollection.push(areaName);\n                        }\n                    });\n                }\n                else {\n                    // When user set only senkouSpan style.fill property\n                    drawSenkouSpan({\n                        indicator: indicator,\n                        points: ikhMap.senkouSpanB,\n                        nextPoints: ikhMap.senkouSpanA,\n                        color: color,\n                        options: mainLineOptions,\n                        gap: gappedExtend,\n                        graph: indicator.graphsenkouSpan\n                    });\n                    // Now save line\n                    indicator.graphsenkouSpan = indicator.graph;\n                }\n                // Clean temporary properties:\n                delete indicator.nextPoints;\n                delete indicator.fillGraph;\n                // Restore options and draw the Tenkan line:\n                indicator.points = mainLinePoints;\n                indicator.options = mainLineOptions;\n                indicator.graph = mainLinePath;\n                indicator.color = mainColor;\n            };\n            IKHIndicator.prototype.getGraphPath = function (points) {\n                var indicator = this,\n                    path = [],\n                    spanA,\n                    spanAarr = [];\n                points = points || this.points;\n                // Render Senkou Span\n                if (indicator.fillGraph && indicator.nextPoints) {\n                    spanA = SeriesRegistry.seriesTypes.sma.prototype.getGraphPath.call(indicator, \n                    // Reverse points, so Senkou Span A will start from the end:\n                    indicator.nextPoints);\n                    if (spanA && spanA.length) {\n                        spanA[0][0] = 'L';\n                        path = SeriesRegistry.seriesTypes.sma.prototype.getGraphPath\n                            .call(indicator, points);\n                        spanAarr = spanA.slice(0, path.length);\n                        for (var i = spanAarr.length - 1; i >= 0; i--) {\n                            path.push(spanAarr[i]);\n                        }\n                    }\n                }\n                else {\n                    path = SeriesRegistry.seriesTypes.sma.prototype.getGraphPath\n                        .apply(indicator, arguments);\n                }\n                return path;\n            };\n            IKHIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    periodTenkan = params.periodTenkan,\n                    periodSenkouSpanB = params.periodSenkouSpanB,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    xAxis = series.xAxis,\n                    yValLen = (yVal && yVal.length) || 0,\n                    closestPointRange = getClosestPointRange(xAxis),\n                    IKH = [],\n                    xData = [],\n                    dateStart,\n                    date,\n                    slicedTSY,\n                    slicedKSY,\n                    slicedSSBY,\n                    pointTS,\n                    pointKS,\n                    pointSSB,\n                    i,\n                    TS,\n                    KS,\n                    CS,\n                    SSA,\n                    SSB;\n                // Ikh requires close value\n                if (xVal.length <= period ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                // Add timestamps at the beginning\n                dateStart = xVal[0] - period * closestPointRange;\n                for (i = 0; i < period; i++) {\n                    xData.push(dateStart + i * closestPointRange);\n                }\n                for (i = 0; i < yValLen; i++) {\n                    // Tenkan Sen\n                    if (i >= periodTenkan) {\n                        slicedTSY = yVal.slice(i - periodTenkan, i);\n                        pointTS = highlowLevel(slicedTSY);\n                        TS = (pointTS.high + pointTS.low) / 2;\n                    }\n                    if (i >= period) {\n                        slicedKSY = yVal.slice(i - period, i);\n                        pointKS = highlowLevel(slicedKSY);\n                        KS = (pointKS.high + pointKS.low) / 2;\n                        SSA = (TS + KS) / 2;\n                    }\n                    if (i >= periodSenkouSpanB) {\n                        slicedSSBY = yVal.slice(i - periodSenkouSpanB, i);\n                        pointSSB = highlowLevel(slicedSSBY);\n                        SSB = (pointSSB.high + pointSSB.low) / 2;\n                    }\n                    CS = yVal[i][3];\n                    date = xVal[i];\n                    if (typeof IKH[i] === 'undefined') {\n                        IKH[i] = [];\n                    }\n                    if (typeof IKH[i + period] === 'undefined') {\n                        IKH[i + period] = [];\n                    }\n                    IKH[i + period][0] = TS;\n                    IKH[i + period][1] = KS;\n                    IKH[i + period][2] = void 0;\n                    IKH[i][2] = CS;\n                    if (i <= period) {\n                        IKH[i + period][3] = void 0;\n                        IKH[i + period][4] = void 0;\n                    }\n                    if (typeof IKH[i + 2 * period] === 'undefined') {\n                        IKH[i + 2 * period] = [];\n                    }\n                    IKH[i + 2 * period][3] = SSA;\n                    IKH[i + 2 * period][4] = SSB;\n                    xData.push(date);\n                }\n                // Add timestamps for further points\n                for (i = 1; i <= period; i++) {\n                    xData.push(date + i * closestPointRange);\n                }\n                return {\n                    values: IKH,\n                    xData: xData,\n                    yData: IKH\n                };\n            };\n            /**\n             * Ichimoku Kinko Hyo (IKH). This series requires `linkedTo` option to be\n             * set.\n             *\n             * @sample stock/indicators/ichimoku-kinko-hyo\n             *         Ichimoku Kinko Hyo indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/ichimoku-kinko-hyo\n             * @optionparent plotOptions.ikh\n             */\n            IKHIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    period: 26,\n                    /**\n                     * The base period for Tenkan calculations.\n                     */\n                    periodTenkan: 9,\n                    /**\n                     * The base period for Senkou Span B calculations\n                     */\n                    periodSenkouSpanB: 52\n                },\n                marker: {\n                    enabled: false\n                },\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> <b> {series.name}</b><br/>' +\n                        'TENKAN SEN: {point.tenkanSen:.3f}<br/>' +\n                        'KIJUN SEN: {point.kijunSen:.3f}<br/>' +\n                        'CHIKOU SPAN: {point.chikouSpan:.3f}<br/>' +\n                        'SENKOU SPAN A: {point.senkouSpanA:.3f}<br/>' +\n                        'SENKOU SPAN B: {point.senkouSpanB:.3f}<br/>'\n                },\n                /**\n                 * The styles for Tenkan line\n                 */\n                tenkanLine: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * The styles for Kijun line\n                 */\n                kijunLine: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * The styles for Chikou line\n                 */\n                chikouLine: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * The styles for Senkou Span A line\n                 */\n                senkouSpanA: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * The styles for Senkou Span B line\n                 */\n                senkouSpanB: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * The styles for area between Senkou Span A and B.\n                 */\n                senkouSpan: {\n                    /**\n                     * Color of the area between Senkou Span A and B,\n                     * when Senkou Span A is above Senkou Span B. Note that if\n                     * a `style.fill` is defined, the `color` takes precedence and\n                     * the `style.fill` is ignored.\n                     *\n                     * @see [senkouSpan.styles.fill](#series.ikh.senkouSpan.styles.fill)\n                     *\n                     * @sample stock/indicators/ichimoku-kinko-hyo\n                     *         Ichimoku Kinko Hyo color\n                     *\n                     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since     7.0.0\n                     * @apioption plotOptions.ikh.senkouSpan.color\n                     */\n                    /**\n                     * Color of the area between Senkou Span A and B,\n                     * when Senkou Span A is under Senkou Span B.\n                     *\n                     * @sample stock/indicators/ikh-negative-color\n                     *         Ichimoku Kinko Hyo negativeColor\n                     *\n                     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since     7.0.0\n                     * @apioption plotOptions.ikh.senkouSpan.negativeColor\n                     */\n                    styles: {\n                        /**\n                         * Color of the area between Senkou Span A and B.\n                         *\n                         * @deprecated\n                         * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                         */\n                        fill: 'rgba(255, 0, 0, 0.5)'\n                    }\n                },\n                dataGrouping: {\n                    approximation: 'ichimoku-averages'\n                }\n            });\n            return IKHIndicator;\n        }(SMAIndicator));\n        extend(IKHIndicator.prototype, {\n            pointArrayMap: [\n                'tenkanSen',\n                'kijunSen',\n                'chikouSpan',\n                'senkouSpanA',\n                'senkouSpanB'\n            ],\n            pointValKey: 'tenkanSen',\n            nameComponents: ['periodSenkouSpanB', 'period', 'periodTenkan']\n        });\n        SeriesRegistry.registerSeriesType('ikh', IKHIndicator);\n        /**\n         * A `IKH` series. If the [type](#series.ikh.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ikh\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/ichimoku-kinko-hyo\n         * @apioption series.ikh\n         */\n        (''); // add doclet above to transpiled file\n\n        return IKHIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/KeltnerChannels/KeltnerChannelsIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var correctFloat = U.correctFloat,\n            extend = U.extend,\n            merge = U.merge;\n        /**\n         * The Keltner Channels series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.keltnerchannels\n         *\n         * @augments Highcharts.Series\n         */\n        var KeltnerChannelsIndicator = /** @class */ (function (_super) {\n                __extends(KeltnerChannelsIndicator, _super);\n            function KeltnerChannelsIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            KeltnerChannelsIndicator.prototype.init = function () {\n                SeriesRegistry.seriesTypes.sma.prototype.init.apply(this, arguments);\n                // Set default color for lines:\n                this.options = merge({\n                    topLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    },\n                    bottomLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    }\n                }, this.options);\n            };\n            KeltnerChannelsIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    periodATR = params.periodATR,\n                    multiplierATR = params.multiplierATR,\n                    index = params.index,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0, \n                    // Keltner Channels array structure:\n                    // 0-date, 1-top line, 2-middle line, 3-bottom line\n                    KC = [], \n                    // middle line, top line and bottom lineI\n                    ML,\n                    TL,\n                    BL,\n                    date,\n                    seriesEMA = SeriesRegistry.seriesTypes.ema.prototype.getValues(series, {\n                        period: period,\n                        index: index\n                    }),\n                    seriesATR = SeriesRegistry.seriesTypes.atr.prototype.getValues(series, {\n                        period: periodATR\n                    }),\n                    pointEMA,\n                    pointATR,\n                    xData = [],\n                    yData = [],\n                    i;\n                if (yValLen < period) {\n                    return;\n                }\n                for (i = period; i <= yValLen; i++) {\n                    pointEMA = seriesEMA.values[i - period];\n                    pointATR = seriesATR.values[i - periodATR];\n                    date = pointEMA[0];\n                    TL = correctFloat(pointEMA[1] + (multiplierATR * pointATR[1]));\n                    BL = correctFloat(pointEMA[1] - (multiplierATR * pointATR[1]));\n                    ML = pointEMA[1];\n                    KC.push([date, TL, ML, BL]);\n                    xData.push(date);\n                    yData.push([TL, ML, BL]);\n                }\n                return {\n                    values: KC,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Keltner Channels. This series requires the `linkedTo` option to be set\n             * and should be loaded after the `stock/indicators/indicators.js`,\n             * `stock/indicators/atr.js`, and `stock/ema/.js`.\n             *\n             * @sample {highstock} stock/indicators/keltner-channels\n             *         Keltner Channels\n             *\n             * @extends      plotOptions.sma\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart,showInNavigator,\n             *               stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/keltner-channels\n             * @optionparent plotOptions.keltnerchannels\n             */\n            KeltnerChannelsIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Option for fill color between lines in Keltner Channels Indicator.\n                 *\n                 * @sample {highstock} stock/indicators/indicator-area-fill\n                 *      Background fill between lines.\n                 *\n                 * @type {Highcharts.Color}\n                 * @since 9.3.2\n                 * @apioption plotOptions.keltnerchannels.fillColor\n                 *\n                 */\n                params: {\n                    /**\n                     * The point index which indicator calculations will base. For\n                     * example using OHLC data, index=2 means the indicator will be\n                     * calculated using Low values.\n                     */\n                    index: 0,\n                    period: 20,\n                    /**\n                     * The ATR period.\n                     */\n                    periodATR: 10,\n                    /**\n                     * The ATR multiplier.\n                     */\n                    multiplierATR: 2\n                },\n                /**\n                 * Bottom line options.\n                 *\n                 */\n                bottomLine: {\n                    /**\n                     * Styles for a bottom line.\n                     *\n                     */\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line. If not set, it's inherited from\n                         * `plotOptions.keltnerchannels.color`\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * Top line options.\n                 *\n                 * @extends plotOptions.keltnerchannels.bottomLine\n                 */\n                topLine: {\n                    styles: {\n                        lineWidth: 1,\n                        lineColor: void 0\n                    }\n                },\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b><br/>Upper Channel: {point.top}<br/>EMA({series.options.params.period}): {point.middle}<br/>Lower Channel: {point.bottom}<br/>'\n                },\n                marker: {\n                    enabled: false\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                },\n                lineWidth: 1\n            });\n            return KeltnerChannelsIndicator;\n        }(SMAIndicator));\n        extend(KeltnerChannelsIndicator.prototype, {\n            nameBase: 'Keltner Channels',\n            areaLinesNames: ['top', 'bottom'],\n            nameComponents: ['period', 'periodATR', 'multiplierATR'],\n            linesApiNames: ['topLine', 'bottomLine'],\n            pointArrayMap: ['top', 'middle', 'bottom'],\n            pointValKey: 'middle'\n        });\n        MultipleLinesComposition.compose(KeltnerChannelsIndicator);\n        SeriesRegistry.registerSeriesType('keltnerchannels', KeltnerChannelsIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A Keltner Channels indicator. If the [type](#series.keltnerchannels.type)\n         * option is not specified, it is inherited from[chart.type](#chart.type).\n         *\n         * @extends      series,plotOptions.keltnerchannels\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *               joinBy, keys, navigatorOptions, pointInterval,\n         *               pointIntervalUnit, pointPlacement, pointRange, pointStart,\n         *               stacking, showInNavigator\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/keltner-channels\n         * @apioption    series.keltnerchannels\n         */\n        ''; // to include the above in the js output\n\n        return KeltnerChannelsIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Klinger/KlingerIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var _a = SeriesRegistry.seriesTypes,\n            SMAIndicator = _a.sma,\n            EMAIndicator = _a.ema;\n        var correctFloat = U.correctFloat,\n            error = U.error,\n            extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge;\n        /**\n         * The Klinger oscillator series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.klinger\n         *\n         * @augments Highcharts.Series\n         */\n        var KlingerIndicator = /** @class */ (function (_super) {\n                __extends(KlingerIndicator, _super);\n            function KlingerIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                _this.volumeSeries = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            KlingerIndicator.prototype.calculateTrend = function (yVal, i) {\n                var isUpward = yVal[i][1] + yVal[i][2] + yVal[i][3] >\n                        yVal[i - 1][1] + yVal[i - 1][2] + yVal[i - 1][3];\n                return isUpward ? 1 : -1;\n            };\n            // Checks if the series and volumeSeries are accessible, number of\n            // points.x is longer than period, is series has OHLC data\n            KlingerIndicator.prototype.isValidData = function (firstYVal) {\n                var chart = this.chart,\n                    options = this.options,\n                    series = this.linkedParent,\n                    isSeriesOHLC = isArray(firstYVal) &&\n                        firstYVal.length === 4,\n                    volumeSeries = this.volumeSeries ||\n                        (this.volumeSeries =\n                            chart.get(options.params.volumeSeriesID));\n                if (!volumeSeries) {\n                    error('Series ' +\n                        options.params.volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, series.chart);\n                }\n                var isLengthValid = [series,\n                    volumeSeries].every(function (series) {\n                        return series && series.xData && series.xData.length >=\n                            options.params.slowAvgPeriod;\n                });\n                return !!(isLengthValid && isSeriesOHLC);\n            };\n            KlingerIndicator.prototype.getCM = function (previousCM, DM, trend, previousTrend, prevoiusDM) {\n                return correctFloat(DM + (trend === previousTrend ? previousCM : prevoiusDM));\n            };\n            KlingerIndicator.prototype.getDM = function (high, low) {\n                return correctFloat(high - low);\n            };\n            KlingerIndicator.prototype.getVolumeForce = function (yVal) {\n                var volumeForce = [];\n                var CM = 0, // cumulative measurement\n                    DM, // daily measurement\n                    force,\n                    i = 1, // start from second point\n                    previousCM = 0,\n                    previousDM = yVal[0][1] - yVal[0][2], // initial DM\n                    previousTrend = 0,\n                    trend;\n                for (i; i < yVal.length; i++) {\n                    trend = this.calculateTrend(yVal, i);\n                    DM = this.getDM(yVal[i][1], yVal[i][2]);\n                    // For the first iteration when the previousTrend doesn't exist,\n                    // previousCM doesn't exist either, but it doesn't matter becouse\n                    // it's filltered out in the getCM method in else statement,\n                    // (in this iteration, previousCM can be raplaced with the DM).\n                    CM = this.getCM(previousCM, DM, trend, previousTrend, previousDM);\n                    force = this.volumeSeries.yData[i] *\n                        trend * Math.abs(2 * ((DM / CM) - 1)) * 100;\n                    volumeForce.push([force]);\n                    // Before next iteration, assign the current as the previous.\n                    previousTrend = trend;\n                    previousCM = CM;\n                    previousDM = DM;\n                }\n                return volumeForce;\n            };\n            KlingerIndicator.prototype.getEMA = function (yVal, prevEMA, SMA, EMApercent, index, i, xVal) {\n                return EMAIndicator.prototype.calculateEma(xVal || [], yVal, typeof i === 'undefined' ? 1 : i, EMApercent, prevEMA, typeof index === 'undefined' ? -1 : index, SMA);\n            };\n            KlingerIndicator.prototype.getSMA = function (period, index, values) {\n                return EMAIndicator.prototype\n                    .accumulatePeriodPoints(period, index, values) / period;\n            };\n            KlingerIndicator.prototype.getValues = function (series, params) {\n                var Klinger = [],\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    xData = [],\n                    yData = [],\n                    calcSingal = [];\n                var KO,\n                    i = 0,\n                    fastEMA = 0,\n                    slowEMA, \n                    // signalEMA: number|undefined = void 0,\n                    previousFastEMA = void 0,\n                    previousSlowEMA = void 0,\n                    signal = null;\n                // If the necessary conditions are not fulfilled, don't proceed.\n                if (!this.isValidData(yVal[0])) {\n                    return;\n                }\n                // Calculate the Volume Force array.\n                var volumeForce = this.getVolumeForce(yVal);\n                // Calculate SMA for the first points.\n                var SMAFast = this.getSMA(params.fastAvgPeriod, 0,\n                    volumeForce),\n                    SMASlow = this.getSMA(params.slowAvgPeriod, 0,\n                    volumeForce);\n                // Calculate EMApercent for the first points.\n                var fastEMApercent = 2 / (params.fastAvgPeriod + 1),\n                    slowEMApercent = 2 / (params.slowAvgPeriod + 1);\n                // Calculate KO\n                for (i; i < yVal.length; i++) {\n                    // Get EMA for fast period.\n                    if (i >= params.fastAvgPeriod) {\n                        fastEMA = this.getEMA(volumeForce, previousFastEMA, SMAFast, fastEMApercent, 0, i, xVal)[1];\n                        previousFastEMA = fastEMA;\n                    }\n                    // Get EMA for slow period.\n                    if (i >= params.slowAvgPeriod) {\n                        slowEMA = this.getEMA(volumeForce, previousSlowEMA, SMASlow, slowEMApercent, 0, i, xVal)[1];\n                        previousSlowEMA = slowEMA;\n                        KO = correctFloat(fastEMA - slowEMA);\n                        calcSingal.push(KO);\n                        // Calculate signal SMA\n                        if (calcSingal.length >= params.signalPeriod) {\n                            signal = calcSingal.slice(-params.signalPeriod)\n                                .reduce(function (prev, curr) {\n                                return prev + curr;\n                            }) / params.signalPeriod;\n                        }\n                        Klinger.push([xVal[i], KO, signal]);\n                        xData.push(xVal[i]);\n                        yData.push([KO, signal]);\n                    }\n                }\n                return {\n                    values: Klinger,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Klinger oscillator. This series requires the `linkedTo` option to be set\n             * and should be loaded after the `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/klinger\n             *         Klinger oscillator\n             *\n             * @extends      plotOptions.sma\n             * @since 9.1.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/klinger\n             * @optionparent plotOptions.klinger\n             */\n            KlingerIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Paramters used in calculation of Klinger Oscillator.\n                 *\n                 * @excluding index, period\n                 */\n                params: {\n                    /**\n                     * The fast period for indicator calculations.\n                     */\n                    fastAvgPeriod: 34,\n                    /**\n                     * The slow period for indicator calculations.\n                     */\n                    slowAvgPeriod: 55,\n                    /**\n                     * The base period for signal calculations.\n                     */\n                    signalPeriod: 13,\n                    /**\n                     * The id of another series to use its data as volume data for the\n                     * indiator calculation.\n                     */\n                    volumeSeriesID: 'volume'\n                },\n                signalLine: {\n                    /**\n                     * Styles for a signal line.\n                     */\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line. If not set, it's inherited from\n                         * [plotOptions.klinger.color\n                         * ](#plotOptions.klinger.color).\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: '#ff0000'\n                    }\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                },\n                tooltip: {\n                    pointFormat: '<span style=\"color: {point.color}\">\\u25CF</span>' +\n                        '<b> {series.name}</b><br/>' +\n                        '<span style=\"color: {point.color}\">Klinger</span>: ' +\n                        '{point.y}<br/>' +\n                        '<span style=\"color: ' +\n                        '{point.series.options.signalLine.styles.lineColor}\">' +\n                        'Signal</span>' +\n                        ': {point.signal}<br/>'\n                }\n            });\n            return KlingerIndicator;\n        }(SMAIndicator));\n        extend(KlingerIndicator.prototype, {\n            areaLinesNames: [],\n            linesApiNames: ['signalLine'],\n            nameBase: 'Klinger',\n            nameComponents: ['fastAvgPeriod', 'slowAvgPeriod'],\n            pointArrayMap: ['y', 'signal'],\n            parallelArrays: ['x', 'y', 'signal'],\n            pointValKey: 'y'\n        });\n        MultipleLinesComposition.compose(KlingerIndicator);\n        SeriesRegistry.registerSeriesType('klinger', KlingerIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A Klinger oscillator. If the [type](#series.klinger.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.klinger\n         * @since 9.1.0\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/klinger\n         * @apioption series.klinger\n         */\n        ''; // to include the above in the js output\n\n        return KlingerIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/MACD/MACDIndicator.js', [_modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (H, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var noop = H.noop;\n        var _a = SeriesRegistry.seriesTypes,\n            SMAIndicator = _a.sma,\n            ColumnSeries = _a.column;\n        var extend = U.extend,\n            correctFloat = U.correctFloat,\n            defined = U.defined,\n            merge = U.merge;\n        /**\n         *\n         * Class\n         *\n         */\n        /**\n         * The MACD series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.macd\n         *\n         * @augments Highcharts.Series\n         */\n        var MACDIndicator = /** @class */ (function (_super) {\n                __extends(MACDIndicator, _super);\n            function MACDIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /**\n                 *\n                 * Properties\n                 *\n                 */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                _this.currentLineZone = void 0;\n                _this.graphmacd = void 0;\n                _this.graphsignal = void 0;\n                _this.macdZones = void 0;\n                _this.signalZones = void 0;\n                return _this;\n            }\n            /**\n             *\n             * Functions\n             *\n             */\n            MACDIndicator.prototype.init = function () {\n                SeriesRegistry.seriesTypes.sma.prototype.init.apply(this, arguments);\n                // Check whether series is initialized. It may be not initialized,\n                // when any of required indicators is missing.\n                if (this.options) {\n                    // Set default color for a signal line and the histogram:\n                    this.options = merge({\n                        signalLine: {\n                            styles: {\n                                lineColor: this.color\n                            }\n                        },\n                        macdLine: {\n                            styles: {\n                                color: this.color\n                            }\n                        }\n                    }, this.options);\n                    // Zones have indexes automatically calculated, we need to\n                    // translate them to support multiple lines within one indicator\n                    this.macdZones = {\n                        zones: this.options.macdLine.zones,\n                        startIndex: 0\n                    };\n                    this.signalZones = {\n                        zones: this.macdZones.zones.concat(this.options.signalLine.zones),\n                        startIndex: this.macdZones.zones.length\n                    };\n                    this.resetZones = true;\n                }\n            };\n            MACDIndicator.prototype.toYData = function (point) {\n                return [point.y, point.signal, point.MACD];\n            };\n            MACDIndicator.prototype.translate = function () {\n                var indicator = this, plotNames = ['plotSignal', 'plotMACD'];\n                H.seriesTypes.column.prototype.translate.apply(indicator);\n                indicator.points.forEach(function (point) {\n                    [point.signal, point.MACD].forEach(function (value, i) {\n                        if (value !== null) {\n                            point[plotNames[i]] =\n                                indicator.yAxis.toPixels(value, true);\n                        }\n                    });\n                });\n            };\n            MACDIndicator.prototype.destroy = function () {\n                // this.graph is null due to removing two times the same SVG element\n                this.graph = null;\n                this.graphmacd = this.graphmacd && this.graphmacd.destroy();\n                this.graphsignal = this.graphsignal && this.graphsignal.destroy();\n                SeriesRegistry.seriesTypes.sma.prototype.destroy.apply(this, arguments);\n            };\n            MACDIndicator.prototype.drawGraph = function () {\n                var indicator = this,\n                    mainLinePoints = indicator.points,\n                    pointsLength = mainLinePoints.length,\n                    mainLineOptions = indicator.options,\n                    histogramZones = indicator.zones,\n                    gappedExtend = {\n                        options: {\n                            gapSize: mainLineOptions.gapSize\n                        }\n                    },\n                    otherSignals = [[],\n                    []],\n                    point;\n                // Generate points for top and bottom lines:\n                while (pointsLength--) {\n                    point = mainLinePoints[pointsLength];\n                    if (defined(point.plotMACD)) {\n                        otherSignals[0].push({\n                            plotX: point.plotX,\n                            plotY: point.plotMACD,\n                            isNull: !defined(point.plotMACD)\n                        });\n                    }\n                    if (defined(point.plotSignal)) {\n                        otherSignals[1].push({\n                            plotX: point.plotX,\n                            plotY: point.plotSignal,\n                            isNull: !defined(point.plotMACD)\n                        });\n                    }\n                }\n                // Modify options and generate smoothing line:\n                ['macd', 'signal'].forEach(function (lineName, i) {\n                    indicator.points = otherSignals[i];\n                    indicator.options = merge(mainLineOptions[lineName + 'Line'].styles, gappedExtend);\n                    indicator.graph = indicator['graph' + lineName];\n                    // Zones extension:\n                    indicator.currentLineZone = lineName + 'Zones';\n                    indicator.zones =\n                        indicator[indicator.currentLineZone].zones;\n                    SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(indicator);\n                    indicator['graph' + lineName] = indicator.graph;\n                });\n                // Restore options:\n                indicator.points = mainLinePoints;\n                indicator.options = mainLineOptions;\n                indicator.zones = histogramZones;\n                indicator.currentLineZone = null;\n                // indicator.graph = null;\n            };\n            MACDIndicator.prototype.getZonesGraphs = function (props) {\n                var allZones = _super.prototype.getZonesGraphs.call(this,\n                    props),\n                    currentZones = allZones;\n                if (this.currentLineZone) {\n                    currentZones = allZones.splice(this[this.currentLineZone].startIndex + 1);\n                    if (!currentZones.length) {\n                        // Line has no zones, return basic graph \"zone\"\n                        currentZones = [props[0]];\n                    }\n                    else {\n                        // Add back basic prop:\n                        currentZones.splice(0, 0, props[0]);\n                    }\n                }\n                return currentZones;\n            };\n            MACDIndicator.prototype.applyZones = function () {\n                // Histogram zones are handled by drawPoints method\n                // Here we need to apply zones for all lines\n                var histogramZones = this.zones;\n                // signalZones.zones contains all zones:\n                this.zones = this.signalZones.zones;\n                SeriesRegistry.seriesTypes.sma.prototype.applyZones.call(this);\n                // applyZones hides only main series.graph, hide macd line manually\n                if (this.graphmacd && this.options.macdLine.zones.length) {\n                    this.graphmacd.hide();\n                }\n                this.zones = histogramZones;\n            };\n            MACDIndicator.prototype.getValues = function (series, params) {\n                var indexToShift = (params.longPeriod - params.shortPeriod), // #14197\n                    j = 0,\n                    MACD = [],\n                    xMACD = [],\n                    yMACD = [],\n                    signalLine = [],\n                    shortEMA,\n                    longEMA,\n                    i;\n                if (series.xData.length <\n                    params.longPeriod + params.signalPeriod) {\n                    return;\n                }\n                // Calculating the short and long EMA used when calculating the MACD\n                shortEMA = SeriesRegistry.seriesTypes.ema.prototype.getValues(series, {\n                    period: params.shortPeriod,\n                    index: params.index\n                });\n                longEMA = SeriesRegistry.seriesTypes.ema.prototype.getValues(series, {\n                    period: params.longPeriod,\n                    index: params.index\n                });\n                shortEMA = shortEMA.values;\n                longEMA = longEMA.values;\n                // Subtract each Y value from the EMA's and create the new dataset\n                // (MACD)\n                for (i = 0; i <= shortEMA.length; i++) {\n                    if (defined(longEMA[i]) &&\n                        defined(longEMA[i][1]) &&\n                        defined(shortEMA[i + indexToShift]) &&\n                        defined(shortEMA[i + indexToShift][0])) {\n                        MACD.push([\n                            shortEMA[i + indexToShift][0],\n                            0,\n                            null,\n                            shortEMA[i + indexToShift][1] -\n                                longEMA[i][1]\n                        ]);\n                    }\n                }\n                // Set the Y and X data of the MACD. This is used in calculating the\n                // signal line.\n                for (i = 0; i < MACD.length; i++) {\n                    xMACD.push(MACD[i][0]);\n                    yMACD.push([0, null, MACD[i][3]]);\n                }\n                // Setting the signalline (Signal Line: X-day EMA of MACD line).\n                signalLine = SeriesRegistry.seriesTypes.ema.prototype.getValues({\n                    xData: xMACD,\n                    yData: yMACD\n                }, {\n                    period: params.signalPeriod,\n                    index: 2\n                });\n                signalLine = signalLine.values;\n                // Setting the MACD Histogram. In comparison to the loop with pure\n                // MACD this loop uses MACD x value not xData.\n                for (i = 0; i < MACD.length; i++) {\n                    // detect the first point\n                    if (MACD[i][0] >= signalLine[0][0]) {\n                        MACD[i][2] = signalLine[j][1];\n                        yMACD[i] = [0, signalLine[j][1], MACD[i][3]];\n                        if (MACD[i][3] === null) {\n                            MACD[i][1] = 0;\n                            yMACD[i][0] = 0;\n                        }\n                        else {\n                            MACD[i][1] = correctFloat(MACD[i][3] -\n                                signalLine[j][1]);\n                            yMACD[i][0] = correctFloat(MACD[i][3] -\n                                signalLine[j][1]);\n                        }\n                        j++;\n                    }\n                }\n                return {\n                    values: MACD,\n                    xData: xMACD,\n                    yData: yMACD\n                };\n            };\n            /**\n             * Moving Average Convergence Divergence (MACD). This series requires\n             * `linkedTo` option to be set and should be loaded after the\n             * `stock/indicators/indicators.js`.\n             *\n             * @sample stock/indicators/macd\n             *         MACD indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/macd\n             * @optionparent plotOptions.macd\n             */\n            MACDIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    /**\n                     * The short period for indicator calculations.\n                     */\n                    shortPeriod: 12,\n                    /**\n                     * The long period for indicator calculations.\n                     */\n                    longPeriod: 26,\n                    /**\n                     * The base period for signal calculations.\n                     */\n                    signalPeriod: 9,\n                    period: 26\n                },\n                /**\n                 * The styles for signal line\n                 */\n                signalLine: {\n                    /**\n                     * @sample stock/indicators/macd-zones\n                     *         Zones in MACD\n                     *\n                     * @extends plotOptions.macd.zones\n                     */\n                    zones: [],\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type  {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * The styles for macd line\n                 */\n                macdLine: {\n                    /**\n                     * @sample stock/indicators/macd-zones\n                     *         Zones in MACD\n                     *\n                     * @extends plotOptions.macd.zones\n                     */\n                    zones: [],\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type  {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * @type {number|null}\n                 */\n                threshold: 0,\n                groupPadding: 0.1,\n                pointPadding: 0.1,\n                crisp: false,\n                states: {\n                    hover: {\n                        halo: {\n                            size: 0\n                        }\n                    }\n                },\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> <b> {series.name}</b><br/>' +\n                        'Value: {point.MACD}<br/>' +\n                        'Signal: {point.signal}<br/>' +\n                        'Histogram: {point.y}<br/>'\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                },\n                minPointLength: 0\n            });\n            return MACDIndicator;\n        }(SMAIndicator));\n        extend(MACDIndicator.prototype, {\n            nameComponents: ['longPeriod', 'shortPeriod', 'signalPeriod'],\n            // \"y\" value is treated as Histogram data\n            pointArrayMap: ['y', 'signal', 'MACD'],\n            parallelArrays: ['x', 'y', 'signal', 'MACD'],\n            pointValKey: 'y',\n            // Columns support:\n            markerAttribs: noop,\n            getColumnMetrics: H.seriesTypes.column.prototype.getColumnMetrics,\n            crispCol: H.seriesTypes.column.prototype.crispCol,\n            drawPoints: H.seriesTypes.column.prototype.drawPoints\n        });\n        SeriesRegistry.registerSeriesType('macd', MACDIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `MACD` series. If the [type](#series.macd.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.macd\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/macd\n         * @apioption series.macd\n         */\n        ''; // to include the above in the js output\n\n        return MACDIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/MFI/MFIIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  Money Flow Index indicator for Highcharts Stock\n         *\n         *  (c) 2010-2021 Grzegorz Blachliński\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var extend = U.extend,\n            merge = U.merge,\n            error = U.error,\n            isArray = U.isArray;\n        /* eslint-disable require-jsdoc */\n        // Utils:\n        function sumArray(array) {\n            return array.reduce(function (prev, cur) {\n                return prev + cur;\n            });\n        }\n        function toFixed(a, n) {\n            return parseFloat(a.toFixed(n));\n        }\n        function calculateTypicalPrice(point) {\n            return (point[1] + point[2] + point[3]) / 3;\n        }\n        function calculateRawMoneyFlow(typicalPrice, volume) {\n            return typicalPrice * volume;\n        }\n        /* eslint-enable require-jsdoc */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The MFI series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.mfi\n         *\n         * @augments Highcharts.Series\n         */\n        var MFIIndicator = /** @class */ (function (_super) {\n                __extends(MFIIndicator, _super);\n            function MFIIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                *\n                *  Properties\n                *\n                * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            MFIIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    decimals = params.decimals, \n                    // MFI starts calculations from the second point\n                    // Cause we need to calculate change between two points\n                    range = 1,\n                    volumeSeries = series.chart.get(params.volumeSeriesID),\n                    yValVolume = (volumeSeries && volumeSeries.yData),\n                    MFI = [],\n                    isUp = false,\n                    xData = [],\n                    yData = [],\n                    positiveMoneyFlow = [],\n                    negativeMoneyFlow = [],\n                    newTypicalPrice,\n                    oldTypicalPrice,\n                    rawMoneyFlow,\n                    negativeMoneyFlowSum,\n                    positiveMoneyFlowSum,\n                    moneyFlowRatio,\n                    MFIPoint,\n                    i;\n                if (!volumeSeries) {\n                    error('Series ' +\n                        params.volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, series.chart);\n                    return;\n                }\n                // MFI requires high low and close values\n                if ((xVal.length <= period) || !isArray(yVal[0]) ||\n                    yVal[0].length !== 4 ||\n                    !yValVolume) {\n                    return;\n                }\n                // Calculate first typical price\n                newTypicalPrice = calculateTypicalPrice(yVal[range]);\n                // Accumulate first N-points\n                while (range < period + 1) {\n                    // Calculate if up or down\n                    oldTypicalPrice = newTypicalPrice;\n                    newTypicalPrice = calculateTypicalPrice(yVal[range]);\n                    isUp = newTypicalPrice >= oldTypicalPrice;\n                    // Calculate raw money flow\n                    rawMoneyFlow = calculateRawMoneyFlow(newTypicalPrice, yValVolume[range]);\n                    // Add to array\n                    positiveMoneyFlow.push(isUp ? rawMoneyFlow : 0);\n                    negativeMoneyFlow.push(isUp ? 0 : rawMoneyFlow);\n                    range++;\n                }\n                for (i = range - 1; i < yValLen; i++) {\n                    if (i > range - 1) {\n                        // Remove first point from array\n                        positiveMoneyFlow.shift();\n                        negativeMoneyFlow.shift();\n                        // Calculate if up or down\n                        oldTypicalPrice = newTypicalPrice;\n                        newTypicalPrice = calculateTypicalPrice(yVal[i]);\n                        isUp = newTypicalPrice > oldTypicalPrice;\n                        // Calculate raw money flow\n                        rawMoneyFlow = calculateRawMoneyFlow(newTypicalPrice, yValVolume[i]);\n                        // Add to array\n                        positiveMoneyFlow.push(isUp ? rawMoneyFlow : 0);\n                        negativeMoneyFlow.push(isUp ? 0 : rawMoneyFlow);\n                    }\n                    // Calculate sum of negative and positive money flow:\n                    negativeMoneyFlowSum = sumArray(negativeMoneyFlow);\n                    positiveMoneyFlowSum = sumArray(positiveMoneyFlow);\n                    moneyFlowRatio = positiveMoneyFlowSum / negativeMoneyFlowSum;\n                    MFIPoint = toFixed(100 - (100 / (1 + moneyFlowRatio)), decimals);\n                    MFI.push([xVal[i], MFIPoint]);\n                    xData.push(xVal[i]);\n                    yData.push(MFIPoint);\n                }\n                return {\n                    values: MFI,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Money Flow Index. This series requires `linkedTo` option to be set and\n             * should be loaded after the `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/mfi\n             *         Money Flow Index Indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/mfi\n             * @optionparent plotOptions.mfi\n             */\n            MFIIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    /**\n                     * The id of volume series which is mandatory.\n                     * For example using OHLC data, volumeSeriesID='volume' means\n                     * the indicator will be calculated using OHLC and volume values.\n                     */\n                    volumeSeriesID: 'volume',\n                    /**\n                     * Number of maximum decimals that are used in MFI calculations.\n                     */\n                    decimals: 4\n                }\n            });\n            return MFIIndicator;\n        }(SMAIndicator));\n        extend(MFIIndicator.prototype, {\n            nameBase: 'Money Flow Index'\n        });\n        SeriesRegistry.registerSeriesType('mfi', MFIIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `MFI` series. If the [type](#series.mfi.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.mfi\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/mfi\n         * @apioption series.mfi\n         */\n        ''; // to include the above in the js output\n\n        return MFIIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Momentum/MomentumIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge;\n        /* eslint-disable require-jsdoc */\n        function populateAverage(xVal, yVal, i, period, index) {\n            var mmY = yVal[i - 1][index] - yVal[i - period - 1][index],\n                mmX = xVal[i - 1];\n            return [mmX, mmY];\n        }\n        /* eslint-enable require-jsdoc */\n        /**\n         * The Momentum series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.momentum\n         *\n         * @augments Highcharts.Series\n         */\n        var MomentumIndicator = /** @class */ (function (_super) {\n                __extends(MomentumIndicator, _super);\n            function MomentumIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            MomentumIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    index = params.index,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    yValue = yVal[0],\n                    MM = [],\n                    xData = [],\n                    yData = [],\n                    i,\n                    MMPoint;\n                if (xVal.length <= period) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    yValue = yVal[0][index];\n                }\n                else {\n                    return;\n                }\n                // Calculate value one-by-one for each period in visible data\n                for (i = (period + 1); i < yValLen; i++) {\n                    MMPoint = populateAverage(xVal, yVal, i, period, index);\n                    MM.push(MMPoint);\n                    xData.push(MMPoint[0]);\n                    yData.push(MMPoint[1]);\n                }\n                MMPoint = populateAverage(xVal, yVal, i, period, index);\n                MM.push(MMPoint);\n                xData.push(MMPoint[0]);\n                yData.push(MMPoint[1]);\n                return {\n                    values: MM,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Momentum. This series requires `linkedTo` option to be set.\n             *\n             * @sample stock/indicators/momentum\n             *         Momentum indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/momentum\n             * @optionparent plotOptions.momentum\n             */\n            MomentumIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    index: 3\n                }\n            });\n            return MomentumIndicator;\n        }(SMAIndicator));\n        extend(MomentumIndicator.prototype, {\n            nameBase: 'Momentum'\n        });\n        SeriesRegistry.registerSeriesType('momentum', MomentumIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `Momentum` series. If the [type](#series.momentum.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.momentum\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/momentum\n         * @apioption series.momentum\n         */\n        ''; // to include the above in the js output\n\n        return MomentumIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/NATR/NATRIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var ATRIndicator = SeriesRegistry.seriesTypes.atr;\n        var merge = U.merge,\n            extend = U.extend;\n        /**\n         * The NATR series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.natr\n         *\n         * @augments Highcharts.Series\n         */\n        var NATRIndicator = /** @class */ (function (_super) {\n                __extends(NATRIndicator, _super);\n            function NATRIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /**\n                 * @lends Highcharts.Series#\n                 */\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            NATRIndicator.prototype.getValues = function (series, params) {\n                var atrData = (ATRIndicator.prototype.getValues.apply(this,\n                    arguments)),\n                    atrLength = atrData.values.length,\n                    period = params.period - 1,\n                    yVal = series.yData,\n                    i = 0;\n                if (!atrData) {\n                    return;\n                }\n                for (; i < atrLength; i++) {\n                    atrData.yData[i] = (atrData.values[i][1] / yVal[period][3] * 100);\n                    atrData.values[i][1] = atrData.yData[i];\n                    period++;\n                }\n                return atrData;\n            };\n            /**\n             * Normalized average true range indicator (NATR). This series requires\n             * `linkedTo` option to be set and should be loaded after the\n             * `stock/indicators/indicators.js` and `stock/indicators/atr.js`.\n             *\n             * @sample {highstock} stock/indicators/natr\n             *         NATR indicator\n             *\n             * @extends      plotOptions.atr\n             * @since        7.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/natr\n             * @optionparent plotOptions.natr\n             */\n            NATRIndicator.defaultOptions = merge(ATRIndicator.defaultOptions, {\n                tooltip: {\n                    valueSuffix: '%'\n                }\n            });\n            return NATRIndicator;\n        }(ATRIndicator));\n        SeriesRegistry.registerSeriesType('natr', NATRIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `NATR` series. If the [type](#series.natr.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.natr\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/atr\n         * @requires  stock/indicators/natr\n         * @apioption series.natr\n         */\n        ''; // to include the above in the js output'\n\n        return NATRIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/OBV/OBVIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var isNumber = U.isNumber,\n            error = U.error,\n            extend = U.extend,\n            merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The OBV series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.obv\n         *\n         * @augments Highcharts.Series\n         */\n        var OBVIndicator = /** @class */ (function (_super) {\n                __extends(OBVIndicator, _super);\n            function OBVIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            OBVIndicator.prototype.getValues = function (series, params) {\n                var volumeSeries = series.chart.get(params.volumeSeriesID),\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    OBV = [],\n                    xData = [],\n                    yData = [],\n                    hasOHLC = !isNumber(yVal[0]);\n                var OBVPoint = [],\n                    i = 1,\n                    previousOBV = 0,\n                    curentOBV = 0,\n                    previousClose = 0,\n                    curentClose = 0,\n                    volume;\n                // Checks if volume series exists.\n                if (volumeSeries) {\n                    volume = volumeSeries.yData;\n                    // Add first point and get close value.\n                    OBVPoint = [xVal[0], previousOBV];\n                    previousClose = hasOHLC ?\n                        yVal[0][3] : yVal[0];\n                    OBV.push(OBVPoint);\n                    xData.push(xVal[0]);\n                    yData.push(OBVPoint[1]);\n                    for (i; i < yVal.length; i++) {\n                        curentClose = hasOHLC ?\n                            yVal[i][3] : yVal[i];\n                        if (curentClose > previousClose) { // up\n                            curentOBV = previousOBV + volume[i];\n                        }\n                        else if (curentClose === previousClose) { // constant\n                            curentOBV = previousOBV;\n                        }\n                        else { // down\n                            curentOBV = previousOBV - volume[i];\n                        }\n                        // Add point.\n                        OBVPoint = [xVal[i], curentOBV];\n                        // Assign current as previous for next iteration.\n                        previousOBV = curentOBV;\n                        previousClose = curentClose;\n                        OBV.push(OBVPoint);\n                        xData.push(xVal[i]);\n                        yData.push(OBVPoint[1]);\n                    }\n                }\n                else {\n                    error('Series ' +\n                        params.volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, series.chart);\n                    return;\n                }\n                return {\n                    values: OBV,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * On-Balance Volume (OBV) technical indicator. This series\n             * requires the `linkedTo` option to be set and should be loaded after\n             * the `stock/indicators/indicators.js` file. Through the `volumeSeriesID`\n             * there also should be linked the volume series.\n             *\n             * @sample stock/indicators/obv\n             *         OBV indicator\n             *\n             * @extends      plotOptions.sma\n             * @since 9.1.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/obv\n             * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n             *               pointInterval, pointIntervalUnit, pointPlacement,\n             *               pointRange, pointStart, showInNavigator, stacking\n             * @optionparent plotOptions.obv\n             */\n            OBVIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                marker: {\n                    enabled: false\n                },\n                /**\n                 * @excluding index, period\n                 */\n                params: {\n                    // Index and period are unchangeable, do not inherit (#15362)\n                    index: void 0,\n                    period: void 0,\n                    /**\n                     * The id of another series to use its data as volume data for the\n                     * indiator calculation.\n                     */\n                    volumeSeriesID: 'volume'\n                },\n                tooltip: {\n                    valueDecimals: 0\n                }\n            });\n            return OBVIndicator;\n        }(SMAIndicator));\n        extend(OBVIndicator.prototype, {\n            nameComponents: void 0\n        });\n        SeriesRegistry.registerSeriesType('obv', OBVIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `OBV` series. If the [type](#series.obv.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.obv\n         * @since 9.1.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/obv\n         * @apioption series.obv\n         */\n        ''; // to include the above in the js output\n\n        return OBVIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/PivotPoints/PivotPointsPoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         */\n        function destroyExtraLabels(point, functionName) {\n            var props = point.series.pointArrayMap,\n                prop,\n                i = props.length;\n            SeriesRegistry.seriesTypes.sma.prototype.pointClass.prototype[functionName].call(point);\n            while (i--) {\n                prop = 'dataLabel' + props[i];\n                // S4 dataLabel could be removed by parent method:\n                if (point[prop] && point[prop].element) {\n                    point[prop].destroy();\n                }\n                point[prop] = null;\n            }\n        }\n        /* eslint-enable valid-jsdoc */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var PivotPointsPoint = /** @class */ (function (_super) {\n                __extends(PivotPointsPoint, _super);\n            function PivotPointsPoint() {\n                /**\n                 *\n                 * Properties\n                 *\n                 */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.P = void 0;\n                _this.pivotLine = void 0;\n                _this.series = void 0;\n                return _this;\n            }\n            /**\n              *\n              * Functions\n              *\n              */\n            PivotPointsPoint.prototype.destroyElements = function () {\n                destroyExtraLabels(this, 'destroyElements');\n            };\n            // This method is called when removing points, e.g. series.update()\n            PivotPointsPoint.prototype.destroy = function () {\n                destroyExtraLabels(this, 'destroyElements');\n            };\n            return PivotPointsPoint;\n        }(SMAIndicator.prototype.pointClass));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PivotPointsPoint;\n    });\n    _registerModule(_modules, 'Stock/Indicators/PivotPoints/PivotPointsIndicator.js', [_modules['Stock/Indicators/PivotPoints/PivotPointsPoint.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (PivotPointsPoint, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var merge = U.merge,\n            extend = U.extend,\n            defined = U.defined,\n            isArray = U.isArray;\n        /**\n         *\n         *  Class\n         *\n         **/\n        /**\n         * The Pivot Points series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.pivotpoints\n         *\n         * @augments Highcharts.Series\n         */\n        var PivotPointsIndicator = /** @class */ (function (_super) {\n                __extends(PivotPointsIndicator, _super);\n            function PivotPointsIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /**\n                 *\n                 * Properties\n                 *\n                 */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                _this.endPoint = void 0;\n                _this.plotEndPoint = void 0;\n                return _this;\n            }\n            /**\n             *\n             * Functions\n             *\n             */\n            PivotPointsIndicator.prototype.toYData = function (point) {\n                return [point.P]; // The rest should not affect extremes\n            };\n            PivotPointsIndicator.prototype.translate = function () {\n                var indicator = this;\n                SeriesRegistry.seriesTypes.sma.prototype.translate.apply(indicator);\n                indicator.points.forEach(function (point) {\n                    indicator.pointArrayMap.forEach(function (value) {\n                        if (defined(point[value])) {\n                            point['plot' + value] = (indicator.yAxis.toPixels(point[value], true));\n                        }\n                    });\n                });\n                // Pivot points are rendered as horizontal lines\n                // And last point start not from the next one (as it's the last one)\n                // But from the approximated last position in a given range\n                indicator.plotEndPoint = indicator.xAxis.toPixels(indicator.endPoint, true);\n            };\n            PivotPointsIndicator.prototype.getGraphPath = function (points) {\n                var indicator = this,\n                    pointsLength = points.length,\n                    allPivotPoints = ([[],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []]),\n                    path = [],\n                    endPoint = indicator.plotEndPoint,\n                    pointArrayMapLength = indicator.pointArrayMap.length,\n                    position,\n                    point,\n                    i;\n                while (pointsLength--) {\n                    point = points[pointsLength];\n                    for (i = 0; i < pointArrayMapLength; i++) {\n                        position = indicator.pointArrayMap[i];\n                        if (defined(point[position])) {\n                            allPivotPoints[i].push({\n                                // Start left:\n                                plotX: point.plotX,\n                                plotY: point['plot' + position],\n                                isNull: false\n                            }, {\n                                // Go to right:\n                                plotX: endPoint,\n                                plotY: point['plot' + position],\n                                isNull: false\n                            }, {\n                                // And add null points in path to generate breaks:\n                                plotX: endPoint,\n                                plotY: null,\n                                isNull: true\n                            });\n                        }\n                    }\n                    endPoint = point.plotX;\n                }\n                allPivotPoints.forEach(function (pivotPoints) {\n                    path = path.concat(SeriesRegistry.seriesTypes.sma.prototype.getGraphPath.call(indicator, pivotPoints));\n                });\n                return path;\n            };\n            // TODO: Rewrite this logic to use multiple datalabels\n            PivotPointsIndicator.prototype.drawDataLabels = function () {\n                var indicator = this,\n                    pointMapping = indicator.pointArrayMap,\n                    currentLabel,\n                    pointsLength,\n                    point,\n                    i;\n                if (indicator.options.dataLabels.enabled) {\n                    pointsLength = indicator.points.length;\n                    // For every Ressitance/Support group we need to render labels.\n                    // Add one more item, which will just store dataLabels from\n                    // previous iteration\n                    pointMapping.concat([false]).forEach(function (position, k) {\n                        i = pointsLength;\n                        while (i--) {\n                            point = indicator.points[i];\n                            if (!position) {\n                                // Store S4 dataLabel too:\n                                point['dataLabel' + pointMapping[k - 1]] =\n                                    point.dataLabel;\n                            }\n                            else {\n                                point.y = point[position];\n                                point.pivotLine = position;\n                                point.plotY = point['plot' + position];\n                                currentLabel = point['dataLabel' + position];\n                                // Store previous label\n                                if (k) {\n                                    point['dataLabel' + pointMapping[k - 1]] = point.dataLabel;\n                                }\n                                if (!point.dataLabels) {\n                                    point.dataLabels = [];\n                                }\n                                point.dataLabels[0] = point.dataLabel =\n                                    currentLabel =\n                                        currentLabel && currentLabel.element ?\n                                            currentLabel :\n                                            null;\n                            }\n                        }\n                        SeriesRegistry.seriesTypes.sma.prototype.drawDataLabels\n                            .apply(indicator, arguments);\n                    });\n                }\n            };\n            PivotPointsIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    placement = this[params.algorithm + 'Placement'], \n                    // 0- from, 1- to, 2- R1, 3- R2, 4- pivot, 5- S1 etc.\n                    PP = [],\n                    endTimestamp,\n                    xData = [],\n                    yData = [],\n                    slicedXLen,\n                    slicedX,\n                    slicedY,\n                    lastPP,\n                    pivot,\n                    avg,\n                    i;\n                // Pivot Points requires high, low and close values\n                if (xVal.length < period ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                for (i = period + 1; i <= yValLen + period; i += period) {\n                    slicedX = xVal.slice(i - period - 1, i);\n                    slicedY = yVal.slice(i - period - 1, i);\n                    slicedXLen = slicedX.length;\n                    endTimestamp = slicedX[slicedXLen - 1];\n                    pivot = this.getPivotAndHLC(slicedY);\n                    avg = placement(pivot);\n                    lastPP = PP.push([endTimestamp]\n                        .concat(avg));\n                    xData.push(endTimestamp);\n                    yData.push(PP[lastPP - 1].slice(1));\n                }\n                // We don't know exact position in ordinal axis\n                // So we use simple logic:\n                // Get first point in last range, calculate visible average range\n                // and multiply by period\n                this.endPoint = slicedX[0] + ((endTimestamp - slicedX[0]) /\n                    slicedXLen) * period;\n                return {\n                    values: PP,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            PivotPointsIndicator.prototype.getPivotAndHLC = function (values) {\n                var high = -Infinity,\n                    low = Infinity,\n                    close = values[values.length - 1][3],\n                    pivot;\n                values.forEach(function (p) {\n                    high = Math.max(high, p[1]);\n                    low = Math.min(low, p[2]);\n                });\n                pivot = (high + low + close) / 3;\n                return [pivot, high, low, close];\n            };\n            PivotPointsIndicator.prototype.standardPlacement = function (values) {\n                var diff = values[1] - values[2],\n                    avg = [\n                        null,\n                        null,\n                        values[0] + diff,\n                        values[0] * 2 - values[2],\n                        values[0],\n                        values[0] * 2 - values[1],\n                        values[0] - diff,\n                        null,\n                        null\n                    ];\n                return avg;\n            };\n            PivotPointsIndicator.prototype.camarillaPlacement = function (values) {\n                var diff = values[1] - values[2],\n                    avg = [\n                        values[3] + diff * 1.5,\n                        values[3] + diff * 1.25,\n                        values[3] + diff * 1.1666,\n                        values[3] + diff * 1.0833,\n                        values[0],\n                        values[3] - diff * 1.0833,\n                        values[3] - diff * 1.1666,\n                        values[3] - diff * 1.25,\n                        values[3] - diff * 1.5\n                    ];\n                return avg;\n            };\n            PivotPointsIndicator.prototype.fibonacciPlacement = function (values) {\n                var diff = values[1] - values[2],\n                    avg = [\n                        null,\n                        values[0] + diff,\n                        values[0] + diff * 0.618,\n                        values[0] + diff * 0.382,\n                        values[0],\n                        values[0] - diff * 0.382,\n                        values[0] - diff * 0.618,\n                        values[0] - diff,\n                        null\n                    ];\n                return avg;\n            };\n            /**\n             * Pivot points indicator. This series requires the `linkedTo` option to be\n             * set and should be loaded after `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/pivot-points\n             *         Pivot points\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/pivotpoints\n             * @optionparent plotOptions.pivotpoints\n             */\n            PivotPointsIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    period: 28,\n                    /**\n                     * Algorithm used to calculate ressistance and support lines based\n                     * on pivot points. Implemented algorithms: `'standard'`,\n                     * `'fibonacci'` and `'camarilla'`\n                     */\n                    algorithm: 'standard'\n                },\n                marker: {\n                    enabled: false\n                },\n                enableMouseTracking: false,\n                dataLabels: {\n                    enabled: true,\n                    format: '{point.pivotLine}'\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return PivotPointsIndicator;\n        }(SMAIndicator));\n        extend(PivotPointsIndicator.prototype, {\n            nameBase: 'Pivot Points',\n            pointArrayMap: ['R4', 'R3', 'R2', 'R1', 'P', 'S1', 'S2', 'S3', 'S4'],\n            pointValKey: 'P',\n            pointClass: PivotPointsPoint\n        });\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        SeriesRegistry.registerSeriesType('pivotpoints', PivotPointsIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A pivot points indicator. If the [type](#series.pivotpoints.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.pivotpoints\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/pivotpoints\n         * @apioption series.pivotpoints\n         */\n        ''; // to include the above in the js output'\n\n        return PivotPointsIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/PPO/PPOIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var EMAIndicator = SeriesRegistry.seriesTypes.ema;\n        var correctFloat = U.correctFloat,\n            extend = U.extend,\n            merge = U.merge,\n            error = U.error;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The PPO series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ppo\n         *\n         * @augments Highcharts.Series\n         */\n        var PPOIndicator = /** @class */ (function (_super) {\n                __extends(PPOIndicator, _super);\n            function PPOIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                *\n                *   Properties\n                *\n                * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            PPOIndicator.prototype.getValues = function (series, params) {\n                var periods = params.periods,\n                    index = params.index, \n                    // 0- date, 1- Percentage Price Oscillator\n                    PPO = [],\n                    xData = [],\n                    yData = [],\n                    periodsOffset, \n                    // Shorter Period EMA\n                    SPE, \n                    // Longer Period EMA\n                    LPE,\n                    oscillator,\n                    i;\n                // Check if periods are correct\n                if (periods.length !== 2 || periods[1] <= periods[0]) {\n                    error('Error: \"PPO requires two periods. Notice, first period ' +\n                        'should be lower than the second one.\"');\n                    return;\n                }\n                SPE = EMAIndicator.prototype.getValues.call(this, series, {\n                    index: index,\n                    period: periods[0]\n                });\n                LPE = EMAIndicator.prototype.getValues.call(this, series, {\n                    index: index,\n                    period: periods[1]\n                });\n                // Check if ema is calculated properly, if not skip\n                if (!SPE || !LPE) {\n                    return;\n                }\n                periodsOffset = periods[1] - periods[0];\n                for (i = 0; i < LPE.yData.length; i++) {\n                    oscillator = correctFloat((SPE.yData[i + periodsOffset] -\n                        LPE.yData[i]) /\n                        LPE.yData[i] *\n                        100);\n                    PPO.push([LPE.xData[i], oscillator]);\n                    xData.push(LPE.xData[i]);\n                    yData.push(oscillator);\n                }\n                return {\n                    values: PPO,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Percentage Price Oscillator. This series requires the\n             * `linkedTo` option to be set and should be loaded after the\n             * `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/ppo\n             *         Percentage Price Oscillator\n             *\n             * @extends      plotOptions.ema\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n             *               pointInterval, pointIntervalUnit, pointPlacement,\n             *               pointRange, pointStart, showInNavigator, stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/ppo\n             * @optionparent plotOptions.ppo\n             */\n            PPOIndicator.defaultOptions = merge(EMAIndicator.defaultOptions, {\n                /**\n                 * Paramters used in calculation of Percentage Price Oscillator series\n                 * points.\n                 *\n                 * @excluding period\n                 */\n                params: {\n                    period: void 0,\n                    /**\n                     * Periods for Percentage Price Oscillator calculations.\n                     *\n                     * @type    {Array<number>}\n                     * @default [12, 26]\n                     */\n                    periods: [12, 26]\n                }\n            });\n            return PPOIndicator;\n        }(EMAIndicator));\n        extend(PPOIndicator.prototype, {\n            nameBase: 'PPO',\n            nameComponents: ['periods']\n        });\n        SeriesRegistry.registerSeriesType('ppo', PPOIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `Percentage Price Oscillator` series. If the [type](#series.ppo.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ppo\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/ppo\n         * @apioption series.ppo\n         */\n        ''; // to include the above in the js output\n\n        return PPOIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/ArrayUtilities.js', [], function () {\n        /**\n         *\n         *  (c) 2010-2021 Pawel Fus & Daniel Studencki\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get extremes of array filled by OHLC data.\n         *\n         * @private\n         *\n         * @param {Array<Array<number>>} arr\n         * Array of OHLC points (arrays).\n         *\n         * @param {number} minIndex\n         * Index of \"low\" value in point array.\n         *\n         * @param {number} maxIndex\n         * Index of \"high\" value in point array.\n         *\n         * @return {Array<number,number>}\n         * Returns array with min and max value.\n         */\n        function getArrayExtremes(arr, minIndex, maxIndex) {\n            return arr.reduce(function (prev, target) { return [\n                Math.min(prev[0], target[minIndex]),\n                Math.max(prev[1], target[maxIndex])\n            ]; }, [Number.MAX_VALUE, -Number.MAX_VALUE]);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var ArrayUtilities = {\n                getArrayExtremes: getArrayExtremes\n            };\n\n        return ArrayUtilities;\n    });\n    _registerModule(_modules, 'Stock/Indicators/PC/PCIndicator.js', [_modules['Stock/Indicators/ArrayUtilities.js'], _modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Color/Palettes.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (AU, MultipleLinesComposition, Palettes, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var merge = U.merge,\n            extend = U.extend;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Price Channel series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.pc\n         *\n         * @augments Highcharts.Series\n         */\n        var PCIndicator = /** @class */ (function (_super) {\n                __extends(PCIndicator, _super);\n            function PCIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                *\n                *  Properties\n                *\n                * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            PCIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0, \n                    // 0- date, 1-top line, 2-middle line, 3-bottom line\n                    PC = [], \n                    // middle line, top line and bottom line\n                    ML,\n                    TL,\n                    BL,\n                    date,\n                    low = 2,\n                    high = 1,\n                    xData = [],\n                    yData = [],\n                    slicedY,\n                    extremes,\n                    i;\n                if (yValLen < period) {\n                    return;\n                }\n                for (i = period; i <= yValLen; i++) {\n                    date = xVal[i - 1];\n                    slicedY = yVal.slice(i - period, i);\n                    extremes = AU.getArrayExtremes(slicedY, low, high);\n                    TL = extremes[1];\n                    BL = extremes[0];\n                    ML = (TL + BL) / 2;\n                    PC.push([date, TL, ML, BL]);\n                    xData.push(date);\n                    yData.push([TL, ML, BL]);\n                }\n                return {\n                    values: PC,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Price channel (PC). This series requires the `linkedTo` option to be\n             * set and should be loaded after the `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/price-channel\n             *         Price Channel\n             *\n             * @extends      plotOptions.sma\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/price-channel\n             * @optionparent plotOptions.pc\n             */\n            PCIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Option for fill color between lines in Price channel Indicator.\n                 *\n                 * @sample {highstock} stock/indicators/indicator-area-fill\n                 *      background fill between lines\n                 *\n                 * @type {Highcharts.Color}\n                 * @apioption plotOptions.pc.fillColor\n                 *\n                 */\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    period: 20\n                },\n                lineWidth: 1,\n                topLine: {\n                    styles: {\n                        /**\n                         * Color of the top line. If not set, it's inherited from\n                         * [plotOptions.pc.color](#plotOptions.pc.color).\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: Palettes.colors[2],\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1\n                    }\n                },\n                bottomLine: {\n                    styles: {\n                        /**\n                         * Color of the bottom line. If not set, it's inherited from\n                         * [plotOptions.pc.color](#plotOptions.pc.color).\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: Palettes.colors[8],\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1\n                    }\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return PCIndicator;\n        }(SMAIndicator));\n        extend(PCIndicator.prototype, {\n            areaLinesNames: ['top', 'bottom'],\n            nameBase: 'Price Channel',\n            nameComponents: ['period'],\n            linesApiNames: ['topLine', 'bottomLine'],\n            pointArrayMap: ['top', 'middle', 'bottom'],\n            pointValKey: 'middle'\n        });\n        MultipleLinesComposition.compose(PCIndicator);\n        SeriesRegistry.registerSeriesType('pc', PCIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A Price channel indicator. If the [type](#series.pc.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends      series,plotOptions.pc\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *               joinBy, keys, navigatorOptions, pointInterval,\n         *               pointIntervalUnit, pointPlacement, pointRange, pointStart,\n         *               showInNavigator, stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/price-channel\n         * @apioption    series.pc\n         */\n        ''; // to include the above in the js output\n\n        return PCIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/PriceEnvelopes/PriceEnvelopesIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge;\n        /**\n         * The Price Envelopes series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.priceenvelopes\n         *\n         * @augments Highcharts.Series\n         */\n        var PriceEnvelopesIndicator = /** @class */ (function (_super) {\n                __extends(PriceEnvelopesIndicator, _super);\n            function PriceEnvelopesIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            PriceEnvelopesIndicator.prototype.init = function () {\n                SeriesRegistry.seriesTypes.sma.prototype.init.apply(this, arguments);\n                // Set default color for lines:\n                this.options = merge({\n                    topLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    },\n                    bottomLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    }\n                }, this.options);\n            };\n            PriceEnvelopesIndicator.prototype.toYData = function (point) {\n                return [point.top, point.middle, point.bottom];\n            };\n            PriceEnvelopesIndicator.prototype.translate = function () {\n                var indicator = this, translatedEnvelopes = ['plotTop', 'plotMiddle', 'plotBottom'];\n                SeriesRegistry.seriesTypes.sma.prototype.translate.apply(indicator);\n                indicator.points.forEach(function (point) {\n                    [point.top, point.middle, point.bottom].forEach(function (value, i) {\n                        if (value !== null) {\n                            point[translatedEnvelopes[i]] =\n                                indicator.yAxis.toPixels(value, true);\n                        }\n                    });\n                });\n            };\n            PriceEnvelopesIndicator.prototype.drawGraph = function () {\n                var indicator = this,\n                    middleLinePoints = indicator.points,\n                    pointsLength = middleLinePoints.length,\n                    middleLineOptions = (indicator.options),\n                    middleLinePath = indicator.graph,\n                    gappedExtend = {\n                        options: {\n                            gapSize: middleLineOptions.gapSize\n                        }\n                    },\n                    deviations = [[],\n                    []], // top and bottom point place holders\n                    point;\n                // Generate points for top and bottom lines:\n                while (pointsLength--) {\n                    point = middleLinePoints[pointsLength];\n                    deviations[0].push({\n                        plotX: point.plotX,\n                        plotY: point.plotTop,\n                        isNull: point.isNull\n                    });\n                    deviations[1].push({\n                        plotX: point.plotX,\n                        plotY: point.plotBottom,\n                        isNull: point.isNull\n                    });\n                }\n                // Modify options and generate lines:\n                ['topLine', 'bottomLine'].forEach(function (lineName, i) {\n                    indicator.points = deviations[i];\n                    indicator.options = merge(middleLineOptions[lineName].styles, gappedExtend);\n                    indicator.graph = indicator['graph' + lineName];\n                    SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(indicator);\n                    // Now save lines:\n                    indicator['graph' + lineName] = indicator.graph;\n                });\n                // Restore options and draw a middle line:\n                indicator.points = middleLinePoints;\n                indicator.options = middleLineOptions;\n                indicator.graph = middleLinePath;\n                SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(indicator);\n            };\n            PriceEnvelopesIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    topPercent = params.topBand,\n                    botPercent = params.bottomBand,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0, \n                    // 0- date, 1-top line, 2-middle line, 3-bottom line\n                    PE = [], \n                    // middle line, top line and bottom line\n                    ML,\n                    TL,\n                    BL,\n                    date,\n                    xData = [],\n                    yData = [],\n                    slicedX,\n                    slicedY,\n                    point,\n                    i;\n                // Price envelopes requires close value\n                if (xVal.length < period ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                for (i = period; i <= yValLen; i++) {\n                    slicedX = xVal.slice(i - period, i);\n                    slicedY = yVal.slice(i - period, i);\n                    point = SeriesRegistry.seriesTypes.sma.prototype.getValues.call(this, {\n                        xData: slicedX,\n                        yData: slicedY\n                    }, params);\n                    date = point.xData[0];\n                    ML = point.yData[0];\n                    TL = ML * (1 + topPercent);\n                    BL = ML * (1 - botPercent);\n                    PE.push([date, TL, ML, BL]);\n                    xData.push(date);\n                    yData.push([TL, ML, BL]);\n                }\n                return {\n                    values: PE,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Price envelopes indicator based on [SMA](#plotOptions.sma) calculations.\n             * This series requires the `linkedTo` option to be set and should be loaded\n             * after the `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/price-envelopes\n             *         Price envelopes\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/price-envelopes\n             * @optionparent plotOptions.priceenvelopes\n             */\n            PriceEnvelopesIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                marker: {\n                    enabled: false\n                },\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b><br/>Top: {point.top}<br/>Middle: {point.middle}<br/>Bottom: {point.bottom}<br/>'\n                },\n                params: {\n                    period: 20,\n                    /**\n                     * Percentage above the moving average that should be displayed.\n                     * 0.1 means 110%. Relative to the calculated value.\n                     */\n                    topBand: 0.1,\n                    /**\n                     * Percentage below the moving average that should be displayed.\n                     * 0.1 means 90%. Relative to the calculated value.\n                     */\n                    bottomBand: 0.1\n                },\n                /**\n                 * Bottom line options.\n                 */\n                bottomLine: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line. If not set, it's inherited from\n                         * [plotOptions.priceenvelopes.color](\n                         * #plotOptions.priceenvelopes.color).\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                /**\n                 * Top line options.\n                 *\n                 * @extends plotOptions.priceenvelopes.bottomLine\n                 */\n                topLine: {\n                    styles: {\n                        lineWidth: 1\n                    }\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return PriceEnvelopesIndicator;\n        }(SMAIndicator));\n        extend(PriceEnvelopesIndicator.prototype, {\n            nameComponents: ['period', 'topBand', 'bottomBand'],\n            nameBase: 'Price envelopes',\n            pointArrayMap: ['top', 'middle', 'bottom'],\n            parallelArrays: ['x', 'y', 'top', 'bottom'],\n            pointValKey: 'middle'\n        });\n        SeriesRegistry.registerSeriesType('priceenvelopes', PriceEnvelopesIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A price envelopes indicator. If the [type](#series.priceenvelopes.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.priceenvelopes\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/price-envelopes\n         * @apioption series.priceenvelopes\n         */\n        ''; // to include the above in the js output\n\n        return PriceEnvelopesIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/PSAR/PSARIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  Parabolic SAR indicator for Highcharts Stock\n         *\n         *  (c) 2010-2021 Grzegorz Blachliński\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var merge = U.merge,\n            extend = U.extend;\n        /* eslint-disable require-jsdoc */\n        // Utils:\n        function toFixed(a, n) {\n            return parseFloat(a.toFixed(n));\n        }\n        function calculateDirection(previousDirection, low, high, PSAR) {\n            if ((previousDirection === 1 && low > PSAR) ||\n                (previousDirection === -1 && high > PSAR)) {\n                return 1;\n            }\n            return -1;\n        }\n        /* *\n         * Method for calculating acceleration factor\n         * dir - direction\n         * pDir - previous Direction\n         * eP - extreme point\n         * pEP - previous extreme point\n         * inc - increment for acceleration factor\n         * maxAcc - maximum acceleration factor\n         * initAcc - initial acceleration factor\n         */\n        function getAccelerationFactor(dir, pDir, eP, pEP, pAcc, inc, maxAcc, initAcc) {\n            if (dir === pDir) {\n                if (dir === 1 && (eP > pEP)) {\n                    return (pAcc === maxAcc) ? maxAcc : toFixed(pAcc + inc, 2);\n                }\n                if (dir === -1 && (eP < pEP)) {\n                    return (pAcc === maxAcc) ? maxAcc : toFixed(pAcc + inc, 2);\n                }\n                return pAcc;\n            }\n            return initAcc;\n        }\n        function getExtremePoint(high, low, previousDirection, previousExtremePoint) {\n            if (previousDirection === 1) {\n                return (high > previousExtremePoint) ? high : previousExtremePoint;\n            }\n            return (low < previousExtremePoint) ? low : previousExtremePoint;\n        }\n        function getEPMinusPSAR(EP, PSAR) {\n            return EP - PSAR;\n        }\n        function getAccelerationFactorMultiply(accelerationFactor, EPMinusSAR) {\n            return accelerationFactor * EPMinusSAR;\n        }\n        /* *\n         * Method for calculating PSAR\n         * pdir - previous direction\n         * sDir - second previous Direction\n         * PSAR - previous PSAR\n         * pACCMultiply - previous acceleration factor multiply\n         * sLow - second previous low\n         * pLow - previous low\n         * sHigh - second previous high\n         * pHigh - previous high\n         * pEP - previous extreme point\n         */\n        function getPSAR(pdir, sDir, PSAR, pACCMulti, sLow, pLow, pHigh, sHigh, pEP) {\n            if (pdir === sDir) {\n                if (pdir === 1) {\n                    return (PSAR + pACCMulti < Math.min(sLow, pLow)) ?\n                        PSAR + pACCMulti :\n                        Math.min(sLow, pLow);\n                }\n                return (PSAR + pACCMulti > Math.max(sHigh, pHigh)) ?\n                    PSAR + pACCMulti :\n                    Math.max(sHigh, pHigh);\n            }\n            return pEP;\n        }\n        /* eslint-enable require-jsdoc */\n        /* *\n         *\n         * Class\n         *\n         * */\n        /**\n         * The Parabolic SAR series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.psar\n         *\n         * @augments Highcharts.Series\n         */\n        var PSARIndicator = /** @class */ (function (_super) {\n                __extends(PSARIndicator, _super);\n            function PSARIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            PSARIndicator.prototype.getValues = function (series, params) {\n                var xVal = series.xData,\n                    yVal = series.yData, \n                    // Extreme point is the lowest low for falling and highest high\n                    // for rising psar - and we are starting with falling\n                    extremePoint = yVal[0][1],\n                    accelerationFactor = params.initialAccelerationFactor,\n                    maxAccelerationFactor = params.maxAccelerationFactor,\n                    increment = params.increment, \n                    // Set initial acc factor (for every new trend!)\n                    initialAccelerationFactor = params.initialAccelerationFactor,\n                    PSAR = yVal[0][2],\n                    decimals = params.decimals,\n                    index = params.index,\n                    PSARArr = [],\n                    xData = [],\n                    yData = [],\n                    previousDirection = 1,\n                    direction,\n                    EPMinusPSAR,\n                    accelerationFactorMultiply,\n                    newDirection,\n                    prevLow,\n                    prevPrevLow,\n                    prevHigh,\n                    prevPrevHigh,\n                    newExtremePoint,\n                    high,\n                    low,\n                    ind;\n                if (index >= yVal.length) {\n                    return;\n                }\n                for (ind = 0; ind < index; ind++) {\n                    extremePoint = Math.max(yVal[ind][1], extremePoint);\n                    PSAR = Math.min(yVal[ind][2], toFixed(PSAR, decimals));\n                }\n                direction = (yVal[ind][1] > PSAR) ? 1 : -1;\n                EPMinusPSAR = getEPMinusPSAR(extremePoint, PSAR);\n                accelerationFactor = params.initialAccelerationFactor;\n                accelerationFactorMultiply = getAccelerationFactorMultiply(accelerationFactor, EPMinusPSAR);\n                PSARArr.push([xVal[index], PSAR]);\n                xData.push(xVal[index]);\n                yData.push(toFixed(PSAR, decimals));\n                for (ind = index + 1; ind < yVal.length; ind++) {\n                    prevLow = yVal[ind - 1][2];\n                    prevPrevLow = yVal[ind - 2][2];\n                    prevHigh = yVal[ind - 1][1];\n                    prevPrevHigh = yVal[ind - 2][1];\n                    high = yVal[ind][1];\n                    low = yVal[ind][2];\n                    // Null points break PSAR\n                    if (prevPrevLow !== null &&\n                        prevPrevHigh !== null &&\n                        prevLow !== null &&\n                        prevHigh !== null &&\n                        high !== null &&\n                        low !== null) {\n                        PSAR = getPSAR(direction, previousDirection, PSAR, accelerationFactorMultiply, prevPrevLow, prevLow, prevHigh, prevPrevHigh, extremePoint);\n                        newExtremePoint = getExtremePoint(high, low, direction, extremePoint);\n                        newDirection = calculateDirection(previousDirection, low, high, PSAR);\n                        accelerationFactor = getAccelerationFactor(newDirection, direction, newExtremePoint, extremePoint, accelerationFactor, increment, maxAccelerationFactor, initialAccelerationFactor);\n                        EPMinusPSAR = getEPMinusPSAR(newExtremePoint, PSAR);\n                        accelerationFactorMultiply = getAccelerationFactorMultiply(accelerationFactor, EPMinusPSAR);\n                        PSARArr.push([xVal[ind], toFixed(PSAR, decimals)]);\n                        xData.push(xVal[ind]);\n                        yData.push(toFixed(PSAR, decimals));\n                        previousDirection = direction;\n                        direction = newDirection;\n                        extremePoint = newExtremePoint;\n                    }\n                }\n                return {\n                    values: PSARArr,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Parabolic SAR. This series requires `linkedTo`\n             * option to be set and should be loaded\n             * after `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/psar\n             *         Parabolic SAR Indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/psar\n             * @optionparent plotOptions.psar\n             */\n            PSARIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                lineWidth: 0,\n                marker: {\n                    enabled: true\n                },\n                states: {\n                    hover: {\n                        lineWidthPlus: 0\n                    }\n                },\n                /**\n                 * @excluding period\n                 */\n                params: {\n                    period: void 0,\n                    /**\n                     * The initial value for acceleration factor.\n                     * Acceleration factor is starting with this value\n                     * and increases by specified increment each time\n                     * the extreme point makes a new high.\n                     * AF can reach a maximum of maxAccelerationFactor,\n                     * no matter how long the uptrend extends.\n                     */\n                    initialAccelerationFactor: 0.02,\n                    /**\n                     * The Maximum value for acceleration factor.\n                     * AF can reach a maximum of maxAccelerationFactor,\n                     * no matter how long the uptrend extends.\n                     */\n                    maxAccelerationFactor: 0.2,\n                    /**\n                     * Acceleration factor increases by increment each time\n                     * the extreme point makes a new high.\n                     *\n                     * @since 6.0.0\n                     */\n                    increment: 0.02,\n                    /**\n                     * Index from which PSAR is starting calculation\n                     *\n                     * @since 6.0.0\n                     */\n                    index: 2,\n                    /**\n                     * Number of maximum decimals that are used in PSAR calculations.\n                     *\n                     * @since 6.0.0\n                     */\n                    decimals: 4\n                }\n            });\n            return PSARIndicator;\n        }(SMAIndicator));\n        extend(PSARIndicator.prototype, {\n            nameComponents: void 0\n        });\n        SeriesRegistry.registerSeriesType('psar', PSARIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `PSAR` series. If the [type](#series.psar.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.psar\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/psar\n         * @apioption series.psar\n         */\n        ''; // to include the above in the js output\n\n        return PSARIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/ROC/ROCIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Kacper Madej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var isArray = U.isArray,\n            merge = U.merge,\n            extend = U.extend;\n        /* eslint-disable require-jsdoc */\n        // Utils:\n        function populateAverage(xVal, yVal, i, period, index) {\n            /* Calculated as:\n\n               (Closing Price [today] - Closing Price [n days ago]) /\n                Closing Price [n days ago] * 100\n\n               Return y as null when avoiding division by zero */\n            var nDaysAgoY,\n                rocY;\n            if (index < 0) {\n                // y data given as an array of values\n                nDaysAgoY = yVal[i - period];\n                rocY = nDaysAgoY ?\n                    (yVal[i] - nDaysAgoY) / nDaysAgoY * 100 :\n                    null;\n            }\n            else {\n                // y data given as an array of arrays and the index should be used\n                nDaysAgoY = yVal[i - period][index];\n                rocY = nDaysAgoY ?\n                    (yVal[i][index] - nDaysAgoY) / nDaysAgoY * 100 :\n                    null;\n            }\n            return [xVal[i], rocY];\n        }\n        /* eslint-enable require-jsdoc */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The ROC series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.roc\n         *\n         * @augments Highcharts.Series\n         */\n        var ROCIndicator = /** @class */ (function (_super) {\n                __extends(ROCIndicator, _super);\n            function ROCIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            ROCIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    ROC = [],\n                    xData = [],\n                    yData = [],\n                    i,\n                    index = -1,\n                    ROCPoint;\n                // Period is used as a number of time periods ago, so we need more\n                // (at least 1 more) data than the period value\n                if (xVal.length <= period) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    index = params.index;\n                }\n                // i = period <-- skip first N-points\n                // Calculate value one-by-one for each period in visible data\n                for (i = period; i < yValLen; i++) {\n                    ROCPoint = populateAverage(xVal, yVal, i, period, index);\n                    ROC.push(ROCPoint);\n                    xData.push(ROCPoint[0]);\n                    yData.push(ROCPoint[1]);\n                }\n                return {\n                    values: ROC,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Rate of change indicator (ROC). The indicator value for each point\n             * is defined as:\n             *\n             * `(C - Cn) / Cn * 100`\n             *\n             * where: `C` is the close value of the point of the same x in the\n             * linked series and `Cn` is the close value of the point `n` periods\n             * ago. `n` is set through [period](#plotOptions.roc.params.period).\n             *\n             * This series requires `linkedTo` option to be set.\n             *\n             * @sample stock/indicators/roc\n             *         Rate of change indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/roc\n             * @optionparent plotOptions.roc\n             */\n            ROCIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    index: 3,\n                    period: 9\n                }\n            });\n            return ROCIndicator;\n        }(SMAIndicator));\n        extend(ROCIndicator.prototype, {\n            nameBase: 'Rate of Change'\n        });\n        SeriesRegistry.registerSeriesType('roc', ROCIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `ROC` series. If the [type](#series.wma.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * Rate of change indicator (ROC). The indicator value for each point\n         * is defined as:\n         *\n         * `(C - Cn) / Cn * 100`\n         *\n         * where: `C` is the close value of the point of the same x in the\n         * linked series and `Cn` is the close value of the point `n` periods\n         * ago. `n` is set through [period](#series.roc.params.period).\n         *\n         * This series requires `linkedTo` option to be set.\n         *\n         * @extends   series,plotOptions.roc\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/roc\n         * @apioption series.roc\n         */\n        ''; // to include the above in the js output\n\n        return ROCIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/RSI/RSIIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var isNumber = U.isNumber,\n            merge = U.merge;\n        /* eslint-disable require-jsdoc */\n        // Utils:\n        function toFixed(a, n) {\n            return parseFloat(a.toFixed(n));\n        }\n        /* eslint-enable require-jsdoc */\n        /**\n         * The RSI series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.rsi\n         *\n         * @augments Highcharts.Series\n         */\n        var RSIIndicator = /** @class */ (function (_super) {\n                __extends(RSIIndicator, _super);\n            function RSIIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            RSIIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    decimals = params.decimals, \n                    // RSI starts calculations from the second point\n                    // Cause we need to calculate change between two points\n                    range = 1,\n                    RSI = [],\n                    xData = [],\n                    yData = [],\n                    index = params.index,\n                    gain = 0,\n                    loss = 0,\n                    RSIPoint,\n                    change,\n                    avgGain,\n                    avgLoss,\n                    i,\n                    values;\n                if ((xVal.length < period)) {\n                    return;\n                }\n                if (isNumber(yVal[0])) {\n                    values = yVal;\n                }\n                else {\n                    // in case of the situation, where the series type has data length\n                    // longer then 4 (HLC, range), this ensures that we are not trying\n                    // to reach the index out of bounds\n                    index = Math.min(index, yVal[0].length - 1);\n                    values = yVal\n                        .map(function (value) { return value[index]; });\n                }\n                // Calculate changes for first N points\n                while (range < period) {\n                    change = toFixed(values[range] - values[range - 1], decimals);\n                    if (change > 0) {\n                        gain += change;\n                    }\n                    else {\n                        loss += Math.abs(change);\n                    }\n                    range++;\n                }\n                // Average for first n-1 points:\n                avgGain = toFixed(gain / (period - 1), decimals);\n                avgLoss = toFixed(loss / (period - 1), decimals);\n                for (i = range; i < yValLen; i++) {\n                    change = toFixed(values[i] - values[i - 1], decimals);\n                    if (change > 0) {\n                        gain = change;\n                        loss = 0;\n                    }\n                    else {\n                        gain = 0;\n                        loss = Math.abs(change);\n                    }\n                    // Calculate smoothed averages, RS, RSI values:\n                    avgGain = toFixed((avgGain * (period - 1) + gain) / period, decimals);\n                    avgLoss = toFixed((avgLoss * (period - 1) + loss) / period, decimals);\n                    // If average-loss is equal zero, then by definition RSI is set\n                    // to 100:\n                    if (avgLoss === 0) {\n                        RSIPoint = 100;\n                        // If average-gain is equal zero, then by definition RSI is set\n                        // to 0:\n                    }\n                    else if (avgGain === 0) {\n                        RSIPoint = 0;\n                    }\n                    else {\n                        RSIPoint = toFixed(100 - (100 / (1 + (avgGain / avgLoss))), decimals);\n                    }\n                    RSI.push([xVal[i], RSIPoint]);\n                    xData.push(xVal[i]);\n                    yData.push(RSIPoint);\n                }\n                return {\n                    values: RSI,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Relative strength index (RSI) technical indicator. This series\n             * requires the `linkedTo` option to be set and should be loaded after\n             * the `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/rsi\n             *         RSI indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/rsi\n             * @optionparent plotOptions.rsi\n             */\n            RSIIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    decimals: 4,\n                    index: 3\n                }\n            });\n            return RSIIndicator;\n        }(SMAIndicator));\n        SeriesRegistry.registerSeriesType('rsi', RSIIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `RSI` series. If the [type](#series.rsi.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.rsi\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/rsi\n         * @apioption series.rsi\n         */\n        ''; // to include the above in the js output\n\n        return RSIIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Stochastic/StochasticIndicator.js', [_modules['Stock/Indicators/ArrayUtilities.js'], _modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (AU, MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Stochastic series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.stochastic\n         *\n         * @augments Highcharts.Series\n         */\n        var StochasticIndicator = /** @class */ (function (_super) {\n                __extends(StochasticIndicator, _super);\n            function StochasticIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            StochasticIndicator.prototype.init = function () {\n                SeriesRegistry.seriesTypes.sma.prototype.init.apply(this, arguments);\n                // Set default color for lines:\n                this.options = merge({\n                    smoothedLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    }\n                }, this.options);\n            };\n            StochasticIndicator.prototype.getValues = function (series, params) {\n                var periodK = params.periods[0],\n                    periodD = params.periods[1],\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0, \n                    // 0- date, 1-%K, 2-%D\n                    SO = [],\n                    xData = [],\n                    yData = [],\n                    slicedY,\n                    close = 3,\n                    low = 2,\n                    high = 1,\n                    CL,\n                    HL,\n                    LL,\n                    K,\n                    D = null,\n                    points,\n                    extremes,\n                    i;\n                // Stochastic requires close value\n                if (yValLen < periodK ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                // For a N-period, we start from N-1 point, to calculate Nth point\n                // That is why we later need to comprehend slice() elements list\n                // with (+1)\n                for (i = periodK - 1; i < yValLen; i++) {\n                    slicedY = yVal.slice(i - periodK + 1, i + 1);\n                    // Calculate %K\n                    extremes = AU.getArrayExtremes(slicedY, low, high);\n                    LL = extremes[0]; // Lowest low in %K periods\n                    CL = yVal[i][close] - LL;\n                    HL = extremes[1] - LL;\n                    K = CL / HL * 100;\n                    xData.push(xVal[i]);\n                    yData.push([K, null]);\n                    // Calculate smoothed %D, which is SMA of %K\n                    if (i >= (periodK - 1) + (periodD - 1)) {\n                        points = SeriesRegistry.seriesTypes.sma.prototype.getValues\n                            .call(this, {\n                            xData: xData.slice(-periodD),\n                            yData: yData.slice(-periodD)\n                        }, {\n                            period: periodD\n                        });\n                        D = points.yData[0];\n                    }\n                    SO.push([xVal[i], K, D]);\n                    yData[yData.length - 1][1] = D;\n                }\n                return {\n                    values: SO,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Stochastic oscillator. This series requires the `linkedTo` option to be\n             * set and should be loaded after the `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/stochastic\n             *         Stochastic oscillator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n             *               pointInterval, pointIntervalUnit, pointPlacement,\n             *               pointRange, pointStart, showInNavigator, stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/stochastic\n             * @optionparent plotOptions.stochastic\n             */\n            StochasticIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index, period\n                 */\n                params: {\n                    // Index and period are unchangeable, do not inherit (#15362)\n                    index: void 0,\n                    period: void 0,\n                    /**\n                     * Periods for Stochastic oscillator: [%K, %D].\n                     *\n                     * @type    {Array<number,number>}\n                     * @default [14, 3]\n                     */\n                    periods: [14, 3]\n                },\n                marker: {\n                    enabled: false\n                },\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b><br/>%K: {point.y}<br/>%D: {point.smoothed}<br/>'\n                },\n                /**\n                 * Smoothed line options.\n                 */\n                smoothedLine: {\n                    /**\n                     * Styles for a smoothed line.\n                     */\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line. If not set, it's inherited from\n                         * [plotOptions.stochastic.color\n                         * ](#plotOptions.stochastic.color).\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: void 0\n                    }\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return StochasticIndicator;\n        }(SMAIndicator));\n        extend(StochasticIndicator.prototype, {\n            areaLinesNames: [],\n            nameComponents: ['periods'],\n            nameBase: 'Stochastic',\n            pointArrayMap: ['y', 'smoothed'],\n            parallelArrays: ['x', 'y', 'smoothed'],\n            pointValKey: 'y',\n            linesApiNames: ['smoothedLine']\n        });\n        MultipleLinesComposition.compose(StochasticIndicator);\n        SeriesRegistry.registerSeriesType('stochastic', StochasticIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A Stochastic indicator. If the [type](#series.stochastic.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.stochastic\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis,  dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/stochastic\n         * @apioption series.stochastic\n         */\n        ''; // to include the above in the js output\n\n        return StochasticIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/SlowStochastic/SlowStochasticIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var StochasticIndicator = SeriesRegistry.seriesTypes.stochastic;\n        var seriesTypes = SeriesRegistry.seriesTypes;\n        var extend = U.extend,\n            merge = U.merge;\n        /**\n         * The Slow Stochastic series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.slowstochastic\n         *\n         * @augments Highcharts.Series\n         */\n        var SlowStochasticIndicator = /** @class */ (function (_super) {\n                __extends(SlowStochasticIndicator, _super);\n            function SlowStochasticIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            SlowStochasticIndicator.prototype.getValues = function (series, params) {\n                var periods = params.periods,\n                    fastValues = seriesTypes.stochastic.prototype.getValues.call(this,\n                    series,\n                    params),\n                    slowValues = {\n                        values: [],\n                        xData: [],\n                        yData: []\n                    };\n                var i = 0;\n                if (!fastValues) {\n                    return;\n                }\n                slowValues.xData = fastValues.xData.slice(periods[1] - 1);\n                var fastYData = fastValues.yData.slice(periods[1] - 1);\n                // Get SMA(%D)\n                var smoothedValues = seriesTypes.sma.prototype.getValues.call(this, {\n                        xData: slowValues.xData,\n                        yData: fastYData\n                    }, {\n                        index: 1,\n                        period: periods[2]\n                    });\n                if (!smoothedValues) {\n                    return;\n                }\n                var xDataLen = slowValues.xData.length;\n                // Format data\n                for (; i < xDataLen; i++) {\n                    slowValues.yData[i] = [\n                        fastYData[i][1],\n                        smoothedValues.yData[i - periods[2] + 1] || null\n                    ];\n                    slowValues.values[i] = [\n                        slowValues.xData[i],\n                        fastYData[i][1],\n                        smoothedValues.yData[i - periods[2] + 1] || null\n                    ];\n                }\n                return slowValues;\n            };\n            /**\n             * Slow Stochastic oscillator. This series requires the `linkedTo` option\n             * to be set and should be loaded after `stock/indicators/indicators.js`\n             * and `stock/indicators/stochastic.js` files.\n             *\n             * @sample stock/indicators/slow-stochastic\n             *         Slow Stochastic oscillator\n             *\n             * @extends      plotOptions.stochastic\n             * @since        8.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/stochastic\n             * @requires     stock/indicators/slowstochastic\n             * @optionparent plotOptions.slowstochastic\n             */\n            SlowStochasticIndicator.defaultOptions = merge(StochasticIndicator.defaultOptions, {\n                params: {\n                    /**\n                     * Periods for Slow Stochastic oscillator: [%K, %D, SMA(%D)].\n                     *\n                     * @type    {Array<number,number,number>}\n                     * @default [14, 3, 3]\n                     */\n                    periods: [14, 3, 3]\n                }\n            });\n            return SlowStochasticIndicator;\n        }(StochasticIndicator));\n        extend(SlowStochasticIndicator.prototype, {\n            nameBase: 'Slow Stochastic'\n        });\n        SeriesRegistry.registerSeriesType('slowstochastic', SlowStochasticIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A Slow Stochastic indicator. If the [type](#series.slowstochastic.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.slowstochastic\n         * @since     8.0.0\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/stochastic\n         * @requires  stock/indicators/slowstochastic\n         * @apioption series.slowstochastic\n         */\n        ''; // to include the above in the js output\n\n        return SlowStochasticIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Supertrend/SupertrendIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js'], _modules['Core/Chart/StockChart.js']], function (SeriesRegistry, U, StockChart) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var _a = SeriesRegistry.seriesTypes,\n            ATRIndicator = _a.atr,\n            SMAIndicator = _a.sma;\n        var addEvent = U.addEvent,\n            correctFloat = U.correctFloat,\n            isArray = U.isArray,\n            extend = U.extend,\n            merge = U.merge,\n            objectEach = U.objectEach;\n        /* eslint-disable require-jsdoc */\n        // Utils:\n        function createPointObj(mainSeries, index, close) {\n            return {\n                index: index,\n                close: mainSeries.yData[index][close],\n                x: mainSeries.xData[index]\n            };\n        }\n        /* eslint-enable require-jsdoc */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Supertrend series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.supertrend\n         *\n         * @augments Highcharts.Series\n         */\n        var SupertrendIndicator = /** @class */ (function (_super) {\n                __extends(SupertrendIndicator, _super);\n            function SupertrendIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.linkedParent = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            SupertrendIndicator.prototype.init = function () {\n                var options,\n                    parentOptions;\n                SMAIndicator.prototype.init.apply(this, arguments);\n                var indicator = this;\n                // Only after series are linked add some additional logic/properties.\n                var unbinder = addEvent(StockChart, 'afterLinkSeries',\n                    function () {\n                        // Protection for a case where the indicator is being updated,\n                        // for a brief moment the indicator is deleted.\n                        if (indicator.options) {\n                            var options_1 = indicator.options;\n                        parentOptions = indicator.linkedParent.options;\n                        // Indicator cropThreshold has to be equal linked series one\n                        // reduced by period due to points comparison in drawGraph\n                        // (#9787)\n                        options_1.cropThreshold = (parentOptions.cropThreshold -\n                            (options_1.params.period - 1));\n                    }\n                    unbinder();\n                }, {\n                    order: 1\n                });\n            };\n            SupertrendIndicator.prototype.drawGraph = function () {\n                var indicator = this,\n                    indicOptions = indicator.options, \n                    // Series that indicator is linked to\n                    mainSeries = indicator.linkedParent,\n                    mainLinePoints = (mainSeries ? mainSeries.points : []),\n                    indicPoints = indicator.points,\n                    indicPath = indicator.graph,\n                    indicPointsLen = indicPoints.length, \n                    // Points offset between lines\n                    tempOffset = mainLinePoints.length - indicPointsLen,\n                    offset = tempOffset > 0 ? tempOffset : 0, \n                    // @todo: fix when ichi-moku indicator is merged to master.\n                    gappedExtend = {\n                        options: {\n                            gapSize: indicOptions.gapSize\n                        }\n                    }, \n                    // Sorted supertrend points array\n                    groupedPoitns = {\n                        top: [],\n                        bottom: [],\n                        intersect: [] // Change trend line points\n                    }, \n                    // Options for trend lines\n                    supertrendLineOptions = {\n                        top: {\n                            styles: {\n                                lineWidth: indicOptions.lineWidth,\n                                lineColor: (indicOptions.fallingTrendColor ||\n                                    indicOptions.color),\n                                dashStyle: indicOptions.dashStyle\n                            }\n                        },\n                        bottom: {\n                            styles: {\n                                lineWidth: indicOptions.lineWidth,\n                                lineColor: (indicOptions.risingTrendColor ||\n                                    indicOptions.color),\n                                dashStyle: indicOptions.dashStyle\n                            }\n                        },\n                        intersect: indicOptions.changeTrendLine\n                    },\n                    close = 3, \n                    // Supertrend line point\n                    point, \n                    // Supertrend line next point (has smaller x pos than point)\n                    nextPoint, \n                    // Main series points\n                    mainPoint,\n                    nextMainPoint, \n                    // Used when supertrend and main points are shifted\n                    // relative to each other\n                    prevMainPoint,\n                    prevPrevMainPoint, \n                    // Used when particular point color is set\n                    pointColor, \n                    // Temporary points that fill groupedPoitns array\n                    newPoint,\n                    newNextPoint;\n                // Loop which sort supertrend points\n                while (indicPointsLen--) {\n                    point = indicPoints[indicPointsLen];\n                    nextPoint = indicPoints[indicPointsLen - 1];\n                    mainPoint = mainLinePoints[indicPointsLen - 1 + offset];\n                    nextMainPoint = mainLinePoints[indicPointsLen - 2 + offset];\n                    prevMainPoint = mainLinePoints[indicPointsLen + offset];\n                    prevPrevMainPoint = mainLinePoints[indicPointsLen + offset + 1];\n                    pointColor = point.options.color;\n                    newPoint = {\n                        x: point.x,\n                        plotX: point.plotX,\n                        plotY: point.plotY,\n                        isNull: false\n                    };\n                    // When mainPoint is the last one (left plot area edge)\n                    // but supertrend has additional one\n                    if (!nextMainPoint &&\n                        mainPoint && mainSeries.yData[mainPoint.index - 1]) {\n                        nextMainPoint = createPointObj(mainSeries, mainPoint.index - 1, close);\n                    }\n                    // When prevMainPoint is the last one (right plot area edge)\n                    // but supertrend has additional one (and points are shifted)\n                    if (!prevPrevMainPoint &&\n                        prevMainPoint && mainSeries.yData[prevMainPoint.index + 1]) {\n                        prevPrevMainPoint = createPointObj(mainSeries, prevMainPoint.index + 1, close);\n                    }\n                    // When points are shifted (right or left plot area edge)\n                    if (!mainPoint &&\n                        nextMainPoint && mainSeries.yData[nextMainPoint.index + 1]) {\n                        mainPoint = createPointObj(mainSeries, nextMainPoint.index + 1, close);\n                    }\n                    else if (!mainPoint &&\n                        prevMainPoint && mainSeries.yData[prevMainPoint.index - 1]) {\n                        mainPoint = createPointObj(mainSeries, prevMainPoint.index - 1, close);\n                    }\n                    // Check if points are shifted relative to each other\n                    if (point &&\n                        mainPoint &&\n                        prevMainPoint &&\n                        nextMainPoint &&\n                        point.x !== mainPoint.x) {\n                        if (point.x === prevMainPoint.x) {\n                            nextMainPoint = mainPoint;\n                            mainPoint = prevMainPoint;\n                        }\n                        else if (point.x === nextMainPoint.x) {\n                            mainPoint = nextMainPoint;\n                            nextMainPoint = {\n                                close: mainSeries.yData[mainPoint.index - 1][close],\n                                x: mainSeries.xData[mainPoint.index - 1]\n                            };\n                        }\n                        else if (prevPrevMainPoint && point.x === prevPrevMainPoint.x) {\n                            mainPoint = prevPrevMainPoint;\n                            nextMainPoint = prevMainPoint;\n                        }\n                    }\n                    if (nextPoint && nextMainPoint && mainPoint) {\n                        newNextPoint = {\n                            x: nextPoint.x,\n                            plotX: nextPoint.plotX,\n                            plotY: nextPoint.plotY,\n                            isNull: false\n                        };\n                        if (point.y >= mainPoint.close &&\n                            nextPoint.y >= nextMainPoint.close) {\n                            point.color = (pointColor || indicOptions.fallingTrendColor ||\n                                indicOptions.color);\n                            groupedPoitns.top.push(newPoint);\n                        }\n                        else if (point.y < mainPoint.close &&\n                            nextPoint.y < nextMainPoint.close) {\n                            point.color = (pointColor || indicOptions.risingTrendColor ||\n                                indicOptions.color);\n                            groupedPoitns.bottom.push(newPoint);\n                        }\n                        else {\n                            groupedPoitns.intersect.push(newPoint);\n                            groupedPoitns.intersect.push(newNextPoint);\n                            // Additional null point to make a gap in line\n                            groupedPoitns.intersect.push(merge(newNextPoint, {\n                                isNull: true\n                            }));\n                            if (point.y >= mainPoint.close &&\n                                nextPoint.y < nextMainPoint.close) {\n                                point.color = (pointColor || indicOptions.fallingTrendColor ||\n                                    indicOptions.color);\n                                nextPoint.color = (pointColor || indicOptions.risingTrendColor ||\n                                    indicOptions.color);\n                                groupedPoitns.top.push(newPoint);\n                                groupedPoitns.top.push(merge(newNextPoint, {\n                                    isNull: true\n                                }));\n                            }\n                            else if (point.y < mainPoint.close &&\n                                nextPoint.y >= nextMainPoint.close) {\n                                point.color = (pointColor || indicOptions.risingTrendColor ||\n                                    indicOptions.color);\n                                nextPoint.color = (pointColor || indicOptions.fallingTrendColor ||\n                                    indicOptions.color);\n                                groupedPoitns.bottom.push(newPoint);\n                                groupedPoitns.bottom.push(merge(newNextPoint, {\n                                    isNull: true\n                                }));\n                            }\n                        }\n                    }\n                    else if (mainPoint) {\n                        if (point.y >= mainPoint.close) {\n                            point.color = (pointColor || indicOptions.fallingTrendColor ||\n                                indicOptions.color);\n                            groupedPoitns.top.push(newPoint);\n                        }\n                        else {\n                            point.color = (pointColor || indicOptions.risingTrendColor ||\n                                indicOptions.color);\n                            groupedPoitns.bottom.push(newPoint);\n                        }\n                    }\n                }\n                // Generate lines:\n                objectEach(groupedPoitns, function (values, lineName) {\n                    indicator.points = values;\n                    indicator.options = merge(supertrendLineOptions[lineName].styles, gappedExtend);\n                    indicator.graph = indicator['graph' + lineName + 'Line'];\n                    SMAIndicator.prototype.drawGraph.call(indicator);\n                    // Now save line\n                    indicator['graph' + lineName + 'Line'] = indicator.graph;\n                });\n                // Restore options:\n                indicator.points = indicPoints;\n                indicator.options = indicOptions;\n                indicator.graph = indicPath;\n            };\n            // Supertrend (Multiplier, Period) Formula:\n            // BASIC UPPERBAND = (HIGH + LOW) / 2 + Multiplier * ATR(Period)\n            // BASIC LOWERBAND = (HIGH + LOW) / 2 - Multiplier * ATR(Period)\n            // FINAL UPPERBAND =\n            //     IF(\n            //      Current BASICUPPERBAND  < Previous FINAL UPPERBAND AND\n            //      Previous Close > Previous FINAL UPPERBAND\n            //     ) THEN (Current BASIC UPPERBAND)\n            //     ELSE (Previous FINALUPPERBAND)\n            // FINAL LOWERBAND =\n            //     IF(\n            //      Current BASIC LOWERBAND  > Previous FINAL LOWERBAND AND\n            //      Previous Close < Previous FINAL LOWERBAND\n            //     ) THEN (Current BASIC LOWERBAND)\n            //     ELSE (Previous FINAL LOWERBAND)\n            // SUPERTREND =\n            //     IF(\n            //      Previous Supertrend == Previous FINAL UPPERBAND AND\n            //      Current Close < Current FINAL UPPERBAND\n            //     ) THAN Current FINAL UPPERBAND\n            //     ELSE IF(\n            //      Previous Supertrend == Previous FINAL LOWERBAND AND\n            //      Current Close < Current FINAL LOWERBAND\n            //     ) THAN Current FINAL UPPERBAND\n            //     ELSE IF(\n            //      Previous Supertrend == Previous FINAL UPPERBAND AND\n            //      Current Close > Current FINAL UPPERBAND\n            //     ) THAN Current FINAL LOWERBAND\n            //     ELSE IF(\n            //      Previous Supertrend == Previous FINAL LOWERBAND AND\n            //      Current Close > Current FINAL LOWERBAND\n            //     ) THAN Current FINAL LOWERBAND\n            SupertrendIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    multiplier = params.multiplier,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    ATRData = [], \n                    // 0- date, 1- Supertrend indicator\n                    ST = [],\n                    xData = [],\n                    yData = [],\n                    close = 3,\n                    low = 2,\n                    high = 1,\n                    periodsOffset = (period === 0) ? 0 : period - 1,\n                    basicUp,\n                    basicDown,\n                    finalUp = [],\n                    finalDown = [],\n                    supertrend,\n                    prevFinalUp,\n                    prevFinalDown,\n                    prevST, // previous Supertrend\n                    prevY,\n                    y,\n                    i;\n                if ((xVal.length <= period) || !isArray(yVal[0]) ||\n                    yVal[0].length !== 4 || period < 0) {\n                    return;\n                }\n                ATRData = ATRIndicator.prototype.getValues.call(this, series, {\n                    period: period\n                }).yData;\n                for (i = 0; i < ATRData.length; i++) {\n                    y = yVal[periodsOffset + i];\n                    prevY = yVal[periodsOffset + i - 1] || [];\n                    prevFinalUp = finalUp[i - 1];\n                    prevFinalDown = finalDown[i - 1];\n                    prevST = yData[i - 1];\n                    if (i === 0) {\n                        prevFinalUp = prevFinalDown = prevST = 0;\n                    }\n                    basicUp = correctFloat((y[high] + y[low]) / 2 + multiplier * ATRData[i]);\n                    basicDown = correctFloat((y[high] + y[low]) / 2 - multiplier * ATRData[i]);\n                    if ((basicUp < prevFinalUp) ||\n                        (prevY[close] > prevFinalUp)) {\n                        finalUp[i] = basicUp;\n                    }\n                    else {\n                        finalUp[i] = prevFinalUp;\n                    }\n                    if ((basicDown > prevFinalDown) ||\n                        (prevY[close] < prevFinalDown)) {\n                        finalDown[i] = basicDown;\n                    }\n                    else {\n                        finalDown[i] = prevFinalDown;\n                    }\n                    if (prevST === prevFinalUp && y[close] < finalUp[i] ||\n                        prevST === prevFinalDown && y[close] < finalDown[i]) {\n                        supertrend = finalUp[i];\n                    }\n                    else if (prevST === prevFinalUp && y[close] > finalUp[i] ||\n                        prevST === prevFinalDown && y[close] > finalDown[i]) {\n                        supertrend = finalDown[i];\n                    }\n                    ST.push([xVal[periodsOffset + i], supertrend]);\n                    xData.push(xVal[periodsOffset + i]);\n                    yData.push(supertrend);\n                }\n                return {\n                    values: ST,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Supertrend indicator. This series requires the `linkedTo` option to be\n             * set and should be loaded after the `stock/indicators/indicators.js` and\n             * `stock/indicators/sma.js`.\n             *\n             * @sample {highstock} stock/indicators/supertrend\n             *         Supertrend indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, cropThreshold, negativeColor, colorAxis, joinBy,\n             *               keys, navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking, threshold\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/supertrend\n             * @optionparent plotOptions.supertrend\n             */\n            SupertrendIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Paramters used in calculation of Supertrend indicator series points.\n                 *\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    /**\n                     * Multiplier for Supertrend Indicator.\n                     */\n                    multiplier: 3,\n                    /**\n                     * The base period for indicator Supertrend Indicator calculations.\n                     * This is the number of data points which are taken into account\n                     * for the indicator calculations.\n                     */\n                    period: 10\n                },\n                /**\n                 * Color of the Supertrend series line that is beneath the main series.\n                 *\n                 * @sample {highstock} stock/indicators/supertrend/\n                 *         Example with risingTrendColor\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                risingTrendColor: \"#06b535\" /* positiveColor */,\n                /**\n                 * Color of the Supertrend series line that is above the main series.\n                 *\n                 * @sample {highstock} stock/indicators/supertrend/\n                 *         Example with fallingTrendColor\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                fallingTrendColor: \"#f21313\" /* negativeColor */,\n                /**\n                 * The styles for the Supertrend line that intersect main series.\n                 *\n                 * @sample {highstock} stock/indicators/supertrend/\n                 *         Example with changeTrendLine\n                 */\n                changeTrendLine: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: \"#333333\" /* neutralColor80 */,\n                        /**\n                         * The dash or dot style of the grid lines. For possible\n                         * values, see\n                         * [this demonstration](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-dashstyle-all/).\n                         *\n                         * @sample {highcharts} highcharts/yaxis/gridlinedashstyle/\n                         *         Long dashes\n                         * @sample {highstock} stock/xaxis/gridlinedashstyle/\n                         *         Long dashes\n                         *\n                         * @type  {Highcharts.DashStyleValue}\n                         * @since 7.0.0\n                         */\n                        dashStyle: 'LongDash'\n                    }\n                }\n            });\n            return SupertrendIndicator;\n        }(SMAIndicator));\n        extend(SupertrendIndicator.prototype, {\n            nameBase: 'Supertrend',\n            nameComponents: ['multiplier', 'period']\n        });\n        SeriesRegistry.registerSeriesType('supertrend', SupertrendIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `Supertrend indicator` series. If the [type](#series.supertrend.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.supertrend\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, cropThreshold, data, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, negativeColor, pointInterval,\n         *            pointIntervalUnit, pointPlacement, pointRange, pointStart,\n         *            showInNavigator, stacking, threshold\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/supertrend\n         * @apioption series.supertrend\n         */\n        ''; // to include the above in the js output\n\n        return SupertrendIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/VBP/VBPPoint.js', [_modules['Core/Series/Point.js'], _modules['Core/Series/SeriesRegistry.js']], function (Point, SeriesRegistry) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var VBPPoint = /** @class */ (function (_super) {\n                __extends(VBPPoint, _super);\n            function VBPPoint() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            // Required for destroying negative part of volume\n            VBPPoint.prototype.destroy = function () {\n                // @todo: this.negativeGraphic doesn't seem to be used anywhere\n                if (this.negativeGraphic) {\n                    this.negativeGraphic = this.negativeGraphic.destroy();\n                }\n                return Point.prototype.destroy.apply(this, arguments);\n            };\n            return VBPPoint;\n        }(SMAIndicator.prototype.pointClass));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return VBPPoint;\n    });\n    _registerModule(_modules, 'Stock/Indicators/VBP/VBPIndicator.js', [_modules['Stock/Indicators/VBP/VBPPoint.js'], _modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js'], _modules['Core/Chart/StockChart.js']], function (VBPPoint, A, H, SeriesRegistry, U, StockChart) {\n        /* *\n         *\n         *  (c) 2010-2021 Paweł Dalek\n         *\n         *  Volume By Price (VBP) indicator for Highcharts Stock\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var animObject = A.animObject;\n        var noop = H.noop;\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var addEvent = U.addEvent,\n            arrayMax = U.arrayMax,\n            arrayMin = U.arrayMin,\n            correctFloat = U.correctFloat,\n            defined = U.defined,\n            error = U.error,\n            extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge;\n        /* eslint-disable require-jsdoc */\n        // Utils\n        function arrayExtremesOHLC(data) {\n            var dataLength = data.length,\n                min = data[0][3],\n                max = min,\n                i = 1,\n                currentPoint;\n            for (; i < dataLength; i++) {\n                currentPoint = data[i][3];\n                if (currentPoint < min) {\n                    min = currentPoint;\n                }\n                if (currentPoint > max) {\n                    max = currentPoint;\n                }\n            }\n            return {\n                min: min,\n                max: max\n            };\n        }\n        /* eslint-enable require-jsdoc */\n        var abs = Math.abs,\n            columnPrototype = SeriesRegistry.seriesTypes.column.prototype;\n        /**\n         * The Volume By Price (VBP) series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.vbp\n         *\n         * @augments Highcharts.Series\n         */\n        var VBPIndicator = /** @class */ (function (_super) {\n                __extends(VBPIndicator, _super);\n            function VBPIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.data = void 0;\n                _this.negWidths = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                _this.posWidths = void 0;\n                _this.priceZones = void 0;\n                _this.rangeStep = void 0;\n                _this.volumeDataArray = void 0;\n                _this.zoneStarts = void 0;\n                _this.zoneLinesSVG = void 0;\n                return _this;\n            }\n            VBPIndicator.prototype.init = function (chart) {\n                var indicator = this,\n                    params,\n                    baseSeries,\n                    volumeSeries;\n                H.seriesTypes.sma.prototype.init.apply(indicator, arguments);\n                // Only after series are linked add some additional logic/properties.\n                var unbinder = addEvent(StockChart, 'afterLinkSeries',\n                    function () {\n                        // Protection for a case where the indicator is being updated,\n                        // for a brief moment the indicator is deleted.\n                        if (indicator.options) {\n                            params = indicator.options.params;\n                        baseSeries = indicator.linkedParent;\n                        volumeSeries = chart.get(params.volumeSeriesID);\n                        indicator.addCustomEvents(baseSeries, volumeSeries);\n                    }\n                    unbinder();\n                }, {\n                    order: 1\n                });\n                return indicator;\n            };\n            // Adds events related with removing series\n            VBPIndicator.prototype.addCustomEvents = function (baseSeries, volumeSeries) {\n                var indicator = this;\n                /* eslint-disable require-jsdoc */\n                function toEmptyIndicator() {\n                    indicator.chart.redraw();\n                    indicator.setData([]);\n                    indicator.zoneStarts = [];\n                    if (indicator.zoneLinesSVG) {\n                        indicator.zoneLinesSVG = indicator.zoneLinesSVG.destroy();\n                    }\n                }\n                /* eslint-enable require-jsdoc */\n                // If base series is deleted, indicator series data is filled with\n                // an empty array\n                indicator.dataEventsToUnbind.push(addEvent(baseSeries, 'remove', function () {\n                    toEmptyIndicator();\n                }));\n                // If volume series is deleted, indicator series data is filled with\n                // an empty array\n                if (volumeSeries) {\n                    indicator.dataEventsToUnbind.push(addEvent(volumeSeries, 'remove', function () {\n                        toEmptyIndicator();\n                    }));\n                }\n                return indicator;\n            };\n            // Initial animation\n            VBPIndicator.prototype.animate = function (init) {\n                var series = this,\n                    inverted = series.chart.inverted,\n                    group = series.group,\n                    attr = {},\n                    position;\n                if (!init && group) {\n                    position = inverted ? series.yAxis.top : series.xAxis.left;\n                    if (inverted) {\n                        group['forceAnimate:translateY'] = true;\n                        attr.translateY = position;\n                    }\n                    else {\n                        group['forceAnimate:translateX'] = true;\n                        attr.translateX = position;\n                    }\n                    group.animate(attr, extend(animObject(series.options.animation), {\n                        step: function (val, fx) {\n                            series.group.attr({\n                                scaleX: Math.max(0.001, fx.pos)\n                            });\n                        }\n                    }));\n                }\n            };\n            VBPIndicator.prototype.drawPoints = function () {\n                var indicator = this;\n                if (indicator.options.volumeDivision.enabled) {\n                    indicator.posNegVolume(true, true);\n                    columnPrototype.drawPoints.apply(indicator, arguments);\n                    indicator.posNegVolume(false, false);\n                }\n                columnPrototype.drawPoints.apply(indicator, arguments);\n            };\n            // Function responsible for dividing volume into positive and negative\n            VBPIndicator.prototype.posNegVolume = function (initVol, pos) {\n                var indicator = this, signOrder = pos ?\n                        ['positive', 'negative'] :\n                        ['negative', 'positive'], volumeDivision = indicator.options.volumeDivision, pointLength = indicator.points.length, posWidths = [], negWidths = [], i = 0, pointWidth, priceZone, wholeVol, point;\n                if (initVol) {\n                    indicator.posWidths = posWidths;\n                    indicator.negWidths = negWidths;\n                }\n                else {\n                    posWidths = indicator.posWidths;\n                    negWidths = indicator.negWidths;\n                }\n                for (; i < pointLength; i++) {\n                    point = indicator.points[i];\n                    point[signOrder[0] + 'Graphic'] = point.graphic;\n                    point.graphic = point[signOrder[1] + 'Graphic'];\n                    if (initVol) {\n                        pointWidth = point.shapeArgs.width;\n                        priceZone = indicator.priceZones[i];\n                        wholeVol = priceZone.wholeVolumeData;\n                        if (wholeVol) {\n                            posWidths.push(pointWidth / wholeVol * priceZone.positiveVolumeData);\n                            negWidths.push(pointWidth / wholeVol * priceZone.negativeVolumeData);\n                        }\n                        else {\n                            posWidths.push(0);\n                            negWidths.push(0);\n                        }\n                    }\n                    point.color = pos ?\n                        volumeDivision.styles.positiveColor :\n                        volumeDivision.styles.negativeColor;\n                    point.shapeArgs.width = pos ?\n                        indicator.posWidths[i] :\n                        indicator.negWidths[i];\n                    point.shapeArgs.x = pos ?\n                        point.shapeArgs.x :\n                        indicator.posWidths[i];\n                }\n            };\n            VBPIndicator.prototype.translate = function () {\n                var indicator = this,\n                    options = indicator.options,\n                    chart = indicator.chart,\n                    yAxis = indicator.yAxis,\n                    yAxisMin = yAxis.min,\n                    zoneLinesOptions = indicator.options.zoneLines,\n                    priceZones = (indicator.priceZones),\n                    yBarOffset = 0,\n                    indicatorPoints,\n                    volumeDataArray,\n                    maxVolume,\n                    primalBarWidth,\n                    barHeight,\n                    barHeightP,\n                    oldBarHeight,\n                    barWidth,\n                    pointPadding,\n                    chartPlotTop,\n                    barX,\n                    barY;\n                columnPrototype.translate.apply(indicator);\n                indicatorPoints = indicator.points;\n                // Do translate operation when points exist\n                if (indicatorPoints.length) {\n                    pointPadding = options.pointPadding < 0.5 ?\n                        options.pointPadding :\n                        0.1;\n                    volumeDataArray = indicator.volumeDataArray;\n                    maxVolume = arrayMax(volumeDataArray);\n                    primalBarWidth = chart.plotWidth / 2;\n                    chartPlotTop = chart.plotTop;\n                    barHeight = abs(yAxis.toPixels(yAxisMin) -\n                        yAxis.toPixels(yAxisMin + indicator.rangeStep));\n                    oldBarHeight = abs(yAxis.toPixels(yAxisMin) -\n                        yAxis.toPixels(yAxisMin + indicator.rangeStep));\n                    if (pointPadding) {\n                        barHeightP = abs(barHeight * (1 - 2 * pointPadding));\n                        yBarOffset = abs((barHeight - barHeightP) / 2);\n                        barHeight = abs(barHeightP);\n                    }\n                    indicatorPoints.forEach(function (point, index) {\n                        barX = point.barX = point.plotX = 0;\n                        barY = point.plotY = (yAxis.toPixels(priceZones[index].start) -\n                            chartPlotTop -\n                            (yAxis.reversed ?\n                                (barHeight - oldBarHeight) :\n                                barHeight) -\n                            yBarOffset);\n                        barWidth = correctFloat(primalBarWidth *\n                            priceZones[index].wholeVolumeData / maxVolume);\n                        point.pointWidth = barWidth;\n                        point.shapeArgs = indicator.crispCol.apply(// eslint-disable-line no-useless-call\n                        indicator, [barX, barY, barWidth, barHeight]);\n                        point.volumeNeg = priceZones[index].negativeVolumeData;\n                        point.volumePos = priceZones[index].positiveVolumeData;\n                        point.volumeAll = priceZones[index].wholeVolumeData;\n                    });\n                    if (zoneLinesOptions.enabled) {\n                        indicator.drawZones(chart, yAxis, indicator.zoneStarts, zoneLinesOptions.styles);\n                    }\n                }\n            };\n            VBPIndicator.prototype.getValues = function (series, params) {\n                var indicator = this,\n                    xValues = series.processedXData,\n                    yValues = series.processedYData,\n                    chart = indicator.chart,\n                    ranges = params.ranges,\n                    VBP = [],\n                    xData = [],\n                    yData = [],\n                    isOHLC,\n                    volumeSeries,\n                    priceZones;\n                // Checks if base series exists\n                if (!series.chart) {\n                    error('Base series not found! In case it has been removed, add ' +\n                        'a new one.', true, chart);\n                    return;\n                }\n                // Checks if volume series exists\n                if (!(volumeSeries = (chart.get(params.volumeSeriesID)))) {\n                    error('Series ' +\n                        params.volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, chart);\n                    return;\n                }\n                // Checks if series data fits the OHLC format\n                isOHLC = isArray(yValues[0]);\n                if (isOHLC && yValues[0].length !== 4) {\n                    error('Type of ' +\n                        series.name +\n                        ' series is different than line, OHLC or candlestick.', true, chart);\n                    return;\n                }\n                // Price zones contains all the information about the zones (index,\n                // start, end, volumes, etc.)\n                priceZones = indicator.priceZones = indicator.specifyZones(isOHLC, xValues, yValues, ranges, volumeSeries);\n                priceZones.forEach(function (zone, index) {\n                    VBP.push([zone.x, zone.end]);\n                    xData.push(VBP[index][0]);\n                    yData.push(VBP[index][1]);\n                });\n                return {\n                    values: VBP,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            // Specifing where each zone should start ans end\n            VBPIndicator.prototype.specifyZones = function (isOHLC, xValues, yValues, ranges, volumeSeries) {\n                var indicator = this,\n                    rangeExtremes = (isOHLC ? arrayExtremesOHLC(yValues) : false),\n                    lowRange = rangeExtremes ?\n                        rangeExtremes.min :\n                        arrayMin(yValues),\n                    highRange = rangeExtremes ?\n                        rangeExtremes.max :\n                        arrayMax(yValues),\n                    zoneStarts = indicator.zoneStarts = [],\n                    priceZones = [],\n                    i = 0,\n                    j = 1,\n                    rangeStep,\n                    zoneStartsLength;\n                // If the compare mode is set on the main series, change the VBP\n                // zones to fit new extremes, #16277.\n                var mainSeries = indicator.linkedParent;\n                if (!indicator.options.compareToMain &&\n                    mainSeries.dataModify) {\n                    lowRange = mainSeries.dataModify.modifyValue(lowRange);\n                    highRange = mainSeries.dataModify.modifyValue(highRange);\n                }\n                if (!defined(lowRange) || !defined(highRange)) {\n                    if (this.points.length) {\n                        this.setData([]);\n                        this.zoneStarts = [];\n                        if (this.zoneLinesSVG) {\n                            this.zoneLinesSVG = this.zoneLinesSVG.destroy();\n                        }\n                    }\n                    return [];\n                }\n                rangeStep = indicator.rangeStep =\n                    correctFloat(highRange - lowRange) / ranges;\n                zoneStarts.push(lowRange);\n                for (; i < ranges - 1; i++) {\n                    zoneStarts.push(correctFloat(zoneStarts[i] + rangeStep));\n                }\n                zoneStarts.push(highRange);\n                zoneStartsLength = zoneStarts.length;\n                //    Creating zones\n                for (; j < zoneStartsLength; j++) {\n                    priceZones.push({\n                        index: j - 1,\n                        x: xValues[0],\n                        start: zoneStarts[j - 1],\n                        end: zoneStarts[j]\n                    });\n                }\n                return indicator.volumePerZone(isOHLC, priceZones, volumeSeries, xValues, yValues);\n            };\n            // Calculating sum of volume values for a specific zone\n            VBPIndicator.prototype.volumePerZone = function (isOHLC, priceZones, volumeSeries, xValues, yValues) {\n                var indicator = this,\n                    volumeXData = volumeSeries.processedXData,\n                    volumeYData = volumeSeries.processedYData,\n                    lastZoneIndex = priceZones.length - 1,\n                    baseSeriesLength = yValues.length,\n                    volumeSeriesLength = volumeYData.length,\n                    previousValue,\n                    startFlag,\n                    endFlag,\n                    value,\n                    i;\n                // Checks if each point has a corresponding volume value\n                if (abs(baseSeriesLength - volumeSeriesLength)) {\n                    // If the first point don't have volume, add 0 value at the\n                    // beggining of the volume array\n                    if (xValues[0] !== volumeXData[0]) {\n                        volumeYData.unshift(0);\n                    }\n                    // If the last point don't have volume, add 0 value at the end\n                    // of the volume array\n                    if (xValues[baseSeriesLength - 1] !==\n                        volumeXData[volumeSeriesLength - 1]) {\n                        volumeYData.push(0);\n                    }\n                }\n                indicator.volumeDataArray = [];\n                priceZones.forEach(function (zone) {\n                    zone.wholeVolumeData = 0;\n                    zone.positiveVolumeData = 0;\n                    zone.negativeVolumeData = 0;\n                    for (i = 0; i < baseSeriesLength; i++) {\n                        startFlag = false;\n                        endFlag = false;\n                        value = isOHLC ? yValues[i][3] : yValues[i];\n                        previousValue = i ?\n                            (isOHLC ?\n                                yValues[i - 1][3] :\n                                yValues[i - 1]) :\n                            value;\n                        // If the compare mode is set on the main series,\n                        // change the VBP zones to fit new extremes, #16277.\n                        var mainSeries = indicator.linkedParent;\n                        if (!indicator.options.compareToMain &&\n                            mainSeries.dataModify) {\n                            value = mainSeries.dataModify.modifyValue(value);\n                            previousValue = mainSeries.dataModify\n                                .modifyValue(previousValue);\n                        }\n                        // Checks if this is the point with the\n                        // lowest close value and if so, adds it calculations\n                        if (value <= zone.start && zone.index === 0) {\n                            startFlag = true;\n                        }\n                        // Checks if this is the point with the highest\n                        // close value and if so, adds it calculations\n                        if (value >= zone.end && zone.index === lastZoneIndex) {\n                            endFlag = true;\n                        }\n                        if ((value > zone.start || startFlag) &&\n                            (value < zone.end || endFlag)) {\n                            zone.wholeVolumeData += volumeYData[i];\n                            if (previousValue > value) {\n                                zone.negativeVolumeData += volumeYData[i];\n                            }\n                            else {\n                                zone.positiveVolumeData += volumeYData[i];\n                            }\n                        }\n                    }\n                    indicator.volumeDataArray.push(zone.wholeVolumeData);\n                });\n                return priceZones;\n            };\n            // Function responsoble for drawing additional lines indicating zones\n            VBPIndicator.prototype.drawZones = function (chart, yAxis, zonesValues, zonesStyles) {\n                var indicator = this,\n                    renderer = chart.renderer,\n                    zoneLinesSVG = indicator.zoneLinesSVG,\n                    zoneLinesPath = [],\n                    leftLinePos = 0,\n                    rightLinePos = chart.plotWidth,\n                    verticalOffset = chart.plotTop,\n                    verticalLinePos;\n                zonesValues.forEach(function (value) {\n                    verticalLinePos = yAxis.toPixels(value) - verticalOffset;\n                    zoneLinesPath = zoneLinesPath.concat(chart.renderer.crispLine([[\n                            'M',\n                            leftLinePos,\n                            verticalLinePos\n                        ], [\n                            'L',\n                            rightLinePos,\n                            verticalLinePos\n                        ]], zonesStyles.lineWidth));\n                });\n                // Create zone lines one path or update it while animating\n                if (zoneLinesSVG) {\n                    zoneLinesSVG.animate({\n                        d: zoneLinesPath\n                    });\n                }\n                else {\n                    zoneLinesSVG = indicator.zoneLinesSVG =\n                        renderer.path(zoneLinesPath).attr({\n                            'stroke-width': zonesStyles.lineWidth,\n                            'stroke': zonesStyles.color,\n                            'dashstyle': zonesStyles.dashStyle,\n                            'zIndex': indicator.group.zIndex + 0.1\n                        })\n                            .add(indicator.group);\n                }\n            };\n            /**\n             * Volume By Price indicator.\n             *\n             * This series requires `linkedTo` option to be set.\n             *\n             * @sample stock/indicators/volume-by-price\n             *         Volume By Price indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/volume-by-price\n             * @optionparent plotOptions.vbp\n             */\n            VBPIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index, period\n                 */\n                params: {\n                    // Index and period are unchangeable, do not inherit (#15362)\n                    index: void 0,\n                    period: void 0,\n                    /**\n                     * The number of price zones.\n                     */\n                    ranges: 12,\n                    /**\n                     * The id of volume series which is mandatory. For example using\n                     * OHLC data, volumeSeriesID='volume' means the indicator will be\n                     * calculated using OHLC and volume values.\n                     */\n                    volumeSeriesID: 'volume'\n                },\n                /**\n                 * The styles for lines which determine price zones.\n                 */\n                zoneLines: {\n                    /**\n                     * Enable/disable zone lines.\n                     */\n                    enabled: true,\n                    /**\n                     * Specify the style of zone lines.\n                     *\n                     * @type    {Highcharts.CSSObject}\n                     * @default {\"color\": \"#0A9AC9\", \"dashStyle\": \"LongDash\", \"lineWidth\": 1}\n                     */\n                    styles: {\n                        /** @ignore-option */\n                        color: '#0A9AC9',\n                        /** @ignore-option */\n                        dashStyle: 'LongDash',\n                        /** @ignore-option */\n                        lineWidth: 1\n                    }\n                },\n                /**\n                 * The styles for bars when volume is divided into positive/negative.\n                 */\n                volumeDivision: {\n                    /**\n                     * Option to control if volume is divided.\n                     */\n                    enabled: true,\n                    styles: {\n                        /**\n                         * Color of positive volume bars.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        positiveColor: 'rgba(144, 237, 125, 0.8)',\n                        /**\n                         * Color of negative volume bars.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        negativeColor: 'rgba(244, 91, 91, 0.8)'\n                    }\n                },\n                // To enable series animation; must be animationLimit > pointCount\n                animationLimit: 1000,\n                enableMouseTracking: false,\n                pointPadding: 0,\n                zIndex: -1,\n                crisp: true,\n                dataGrouping: {\n                    enabled: false\n                },\n                dataLabels: {\n                    allowOverlap: true,\n                    enabled: true,\n                    format: 'P: {point.volumePos:.2f} | N: {point.volumeNeg:.2f}',\n                    padding: 0,\n                    style: {\n                        /** @internal */\n                        fontSize: '7px'\n                    },\n                    verticalAlign: 'top'\n                }\n            });\n            return VBPIndicator;\n        }(SMAIndicator));\n        extend(VBPIndicator.prototype, {\n            nameBase: 'Volume by Price',\n            nameComponents: ['ranges'],\n            calculateOn: {\n                chart: 'render',\n                xAxis: 'afterSetExtremes'\n            },\n            pointClass: VBPPoint,\n            markerAttribs: noop,\n            drawGraph: noop,\n            getColumnMetrics: columnPrototype.getColumnMetrics,\n            crispCol: columnPrototype.crispCol\n        });\n        SeriesRegistry.registerSeriesType('vbp', VBPIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `Volume By Price (VBP)` series. If the [type](#series.vbp.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.vbp\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL, compare, compareBase, compareStart\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/volume-by-price\n         * @apioption series.vbp\n         */\n        ''; // to include the above in the js output\n\n        return VBPIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/VWAP/VWAPIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Paweł Dalek\n         *\n         *  Volume Weighted Average Price (VWAP) indicator for Highcharts Stock\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var error = U.error,\n            isArray = U.isArray,\n            merge = U.merge;\n        /* *\n         *\n         * Class\n         *\n         * */\n        /**\n         * The Volume Weighted Average Price (VWAP) series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.vwap\n         *\n         * @augments Highcharts.Series\n         */\n        var VWAPIndicator = /** @class */ (function (_super) {\n                __extends(VWAPIndicator, _super);\n            function VWAPIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            VWAPIndicator.prototype.getValues = function (series, params) {\n                var indicator = this,\n                    chart = series.chart,\n                    xValues = series.xData,\n                    yValues = series.yData,\n                    period = params.period,\n                    isOHLC = true,\n                    volumeSeries;\n                // Checks if volume series exists\n                if (!(volumeSeries = (chart.get(params.volumeSeriesID)))) {\n                    error('Series ' +\n                        params.volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, chart);\n                    return;\n                }\n                // Checks if series data fits the OHLC format\n                if (!(isArray(yValues[0]))) {\n                    isOHLC = false;\n                }\n                return indicator.calculateVWAPValues(isOHLC, xValues, yValues, volumeSeries, period);\n            };\n            /**\n             * Main algorithm used to calculate Volume Weighted Average Price (VWAP)\n             * values\n             *\n             * @private\n             *\n             * @param {boolean} isOHLC\n             * Says if data has OHLC format\n             *\n             * @param {Array<number>} xValues\n             * Array of timestamps\n             *\n             * @param {Array<number|Array<number,number,number,number>>} yValues\n             * Array of yValues, can be an array of a four arrays (OHLC) or array of\n             * values (line)\n             *\n             * @param {Array<*>} volumeSeries\n             * Volume series\n             *\n             * @param {number} period\n             * Number of points to be calculated\n             *\n             * @return {Object}\n             * Object contains computed VWAP\n             **/\n            VWAPIndicator.prototype.calculateVWAPValues = function (isOHLC, xValues, yValues, volumeSeries, period) {\n                var volumeValues = volumeSeries.yData,\n                    volumeLength = volumeSeries.xData.length,\n                    pointsLength = xValues.length,\n                    cumulativePrice = [],\n                    cumulativeVolume = [],\n                    xData = [],\n                    yData = [],\n                    VWAP = [],\n                    commonLength,\n                    typicalPrice,\n                    cPrice,\n                    cVolume,\n                    i,\n                    j;\n                if (pointsLength <= volumeLength) {\n                    commonLength = pointsLength;\n                }\n                else {\n                    commonLength = volumeLength;\n                }\n                for (i = 0, j = 0; i < commonLength; i++) {\n                    // Depending on whether series is OHLC or line type, price is\n                    // average of the high, low and close or a simple value\n                    typicalPrice = isOHLC ?\n                        ((yValues[i][1] + yValues[i][2] +\n                            yValues[i][3]) / 3) :\n                        yValues[i];\n                    typicalPrice *= volumeValues[i];\n                    cPrice = j ?\n                        (cumulativePrice[i - 1] + typicalPrice) :\n                        typicalPrice;\n                    cVolume = j ?\n                        (cumulativeVolume[i - 1] + volumeValues[i]) :\n                        volumeValues[i];\n                    cumulativePrice.push(cPrice);\n                    cumulativeVolume.push(cVolume);\n                    VWAP.push([xValues[i], (cPrice / cVolume)]);\n                    xData.push(VWAP[i][0]);\n                    yData.push(VWAP[i][1]);\n                    j++;\n                    if (j === period) {\n                        j = 0;\n                    }\n                }\n                return {\n                    values: VWAP,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Volume Weighted Average Price indicator.\n             *\n             * This series requires `linkedTo` option to be set.\n             *\n             * @sample stock/indicators/vwap\n             *         Volume Weighted Average Price indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/vwap\n             * @optionparent plotOptions.vwap\n             */\n            VWAPIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    period: 30,\n                    /**\n                     * The id of volume series which is mandatory. For example using\n                     * OHLC data, volumeSeriesID='volume' means the indicator will be\n                     * calculated using OHLC and volume values.\n                     */\n                    volumeSeriesID: 'volume'\n                }\n            });\n            return VWAPIndicator;\n        }(SMAIndicator));\n        SeriesRegistry.registerSeriesType('vwap', VWAPIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `Volume Weighted Average Price (VWAP)` series. If the\n         * [type](#series.vwap.type) option is not specified, it is inherited from\n         * [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.vwap\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/vwap\n         * @apioption series.vwap\n         */\n        ''; // to include the above in the js output\n\n        return VWAPIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/WilliamsR/WilliamsRIndicator.js', [_modules['Stock/Indicators/ArrayUtilities.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (AU, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge;\n        /**\n         * The Williams %R series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.williamsr\n         *\n         * @augments Highcharts.Series\n         */\n        var WilliamsRIndicator = /** @class */ (function (_super) {\n                __extends(WilliamsRIndicator, _super);\n            function WilliamsRIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            WilliamsRIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    WR = [], // 0- date, 1- Williams %R\n                    xData = [],\n                    yData = [],\n                    slicedY,\n                    close = 3,\n                    low = 2,\n                    high = 1,\n                    extremes,\n                    R,\n                    HH, // Highest high value in period\n                    LL, // Lowest low value in period\n                    CC, // Current close value\n                    i;\n                // Williams %R requires close value\n                if (xVal.length < period ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                // For a N-period, we start from N-1 point, to calculate Nth point\n                // That is why we later need to comprehend slice() elements list\n                // with (+1)\n                for (i = period - 1; i < yValLen; i++) {\n                    slicedY = yVal.slice(i - period + 1, i + 1);\n                    extremes = AU.getArrayExtremes(slicedY, low, high);\n                    LL = extremes[0];\n                    HH = extremes[1];\n                    CC = yVal[i][close];\n                    R = ((HH - CC) / (HH - LL)) * -100;\n                    if (xVal[i]) {\n                        WR.push([xVal[i], R]);\n                        xData.push(xVal[i]);\n                        yData.push(R);\n                    }\n                }\n                return {\n                    values: WR,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Williams %R. This series requires the `linkedTo` option to be\n             * set and should be loaded after the `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/williams-r\n             *         Williams %R\n             *\n             * @extends      plotOptions.sma\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n             *               pointInterval, pointIntervalUnit, pointPlacement,\n             *               pointRange, pointStart, showInNavigator, stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/williams-r\n             * @optionparent plotOptions.williamsr\n             */\n            WilliamsRIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Paramters used in calculation of Williams %R series points.\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0,\n                    /**\n                     * Period for Williams %R oscillator\n                     */\n                    period: 14\n                }\n            });\n            return WilliamsRIndicator;\n        }(SMAIndicator));\n        extend(WilliamsRIndicator.prototype, {\n            nameBase: 'Williams %R'\n        });\n        SeriesRegistry.registerSeriesType('williamsr', WilliamsRIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `Williams %R Oscillator` series. If the [type](#series.williamsr.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.williamsr\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/williams-r\n         * @apioption series.williamsr\n         */\n        ''; // adds doclets above to the transpiled file\n\n        return WilliamsRIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/WMA/WMAIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Kacper Madej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var isArray = U.isArray,\n            merge = U.merge;\n        /* eslint-disable valid-jsdoc */\n        // Utils:\n        /**\n         * @private\n         */\n        function accumulateAverage(points, xVal, yVal, i, index) {\n            var xValue = xVal[i],\n                yValue = index < 0 ? yVal[i] : yVal[i][index];\n            points.push([xValue, yValue]);\n        }\n        /**\n         * @private\n         */\n        function weightedSumArray(array, pLen) {\n            // The denominator is the sum of the number of days as a triangular number.\n            // If there are 5 days, the triangular numbers are 5, 4, 3, 2, and 1.\n            // The sum is 5 + 4 + 3 + 2 + 1 = 15.\n            var denominator = (pLen + 1) / 2 * pLen;\n            // reduce VS loop => reduce\n            return array.reduce(function (prev, cur, i) {\n                return [null, prev[1] + cur[1] * (i + 1)];\n            })[1] / denominator;\n        }\n        /**\n         * @private\n         */\n        function populateAverage(points, xVal, yVal, i) {\n            var pLen = points.length,\n                wmaY = weightedSumArray(points,\n                pLen),\n                wmaX = xVal[i - 1];\n            points.shift(); // remove point until range < period\n            return [wmaX, wmaY];\n        }\n        /* eslint-enable valid-jsdoc */\n        /**\n         * The SMA series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.wma\n         *\n         * @augments Highcharts.Series\n         */\n        var WMAIndicator = /** @class */ (function (_super) {\n                __extends(WMAIndicator, _super);\n            function WMAIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            WMAIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    range = 1,\n                    xValue = xVal[0],\n                    yValue = yVal[0],\n                    WMA = [],\n                    xData = [],\n                    yData = [],\n                    index = -1,\n                    i,\n                    points,\n                    WMAPoint;\n                if (xVal.length < period) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick\n                if (isArray(yVal[0])) {\n                    index = params.index;\n                    yValue = yVal[0][index];\n                }\n                // Starting point\n                points = [[xValue, yValue]];\n                // Accumulate first N-points\n                while (range !== period) {\n                    accumulateAverage(points, xVal, yVal, range, index);\n                    range++;\n                }\n                // Calculate value one-by-one for each period in visible data\n                for (i = range; i < yValLen; i++) {\n                    WMAPoint = populateAverage(points, xVal, yVal, i);\n                    WMA.push(WMAPoint);\n                    xData.push(WMAPoint[0]);\n                    yData.push(WMAPoint[1]);\n                    accumulateAverage(points, xVal, yVal, i, index);\n                }\n                WMAPoint = populateAverage(points, xVal, yVal, i);\n                WMA.push(WMAPoint);\n                xData.push(WMAPoint[0]);\n                yData.push(WMAPoint[1]);\n                return {\n                    values: WMA,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Weighted moving average indicator (WMA). This series requires `linkedTo`\n             * option to be set.\n             *\n             * @sample stock/indicators/wma\n             *         Weighted moving average indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/wma\n             * @optionparent plotOptions.wma\n             */\n            WMAIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    index: 3,\n                    period: 9\n                }\n            });\n            return WMAIndicator;\n        }(SMAIndicator));\n        SeriesRegistry.registerSeriesType('wma', WMAIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `WMA` series. If the [type](#series.wma.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.wma\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/wma\n         * @apioption series.wma\n         */\n        ''; // adds doclet above to the transpiled file\n\n        return WMAIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Zigzag/ZigzagIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Kacper Madej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var merge = U.merge,\n            extend = U.extend;\n        /* *\n         *\n         * Class\n         *\n         * */\n        /**\n         * The Zig Zag series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.zigzag\n         *\n         * @augments Highcharts.Series\n         */\n        var ZigzagIndicator = /** @class */ (function (_super) {\n                __extends(ZigzagIndicator, _super);\n            function ZigzagIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            ZigzagIndicator.prototype.getValues = function (series, params) {\n                var lowIndex = params.lowIndex,\n                    highIndex = params.highIndex,\n                    deviation = params.deviation / 100,\n                    deviations = {\n                        'low': 1 + deviation,\n                        'high': 1 - deviation\n                    },\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    zigzag = [],\n                    xData = [],\n                    yData = [],\n                    i,\n                    j,\n                    zigzagPoint,\n                    firstZigzagLow,\n                    firstZigzagHigh,\n                    directionUp,\n                    zigzagLen,\n                    exitLoop = false,\n                    yIndex = false;\n                // Exit if not enught points or no low or high values\n                if (!xVal || xVal.length <= 1 ||\n                    (yValLen &&\n                        (typeof yVal[0][lowIndex] === 'undefined' ||\n                            typeof yVal[0][highIndex] === 'undefined'))) {\n                    return;\n                }\n                // Set first zigzag point candidate\n                firstZigzagLow = yVal[0][lowIndex];\n                firstZigzagHigh = yVal[0][highIndex];\n                // Search for a second zigzag point candidate,\n                // this will also set first zigzag point\n                for (i = 1; i < yValLen; i++) {\n                    // requried change to go down\n                    if (yVal[i][lowIndex] <= firstZigzagHigh * deviations.high) {\n                        zigzag.push([xVal[0], firstZigzagHigh]);\n                        // second zigzag point candidate\n                        zigzagPoint = [xVal[i], yVal[i][lowIndex]];\n                        // next line will be going up\n                        directionUp = true;\n                        exitLoop = true;\n                        // requried change to go up\n                    }\n                    else if (yVal[i][highIndex] >= firstZigzagLow * deviations.low) {\n                        zigzag.push([xVal[0], firstZigzagLow]);\n                        // second zigzag point candidate\n                        zigzagPoint = [xVal[i], yVal[i][highIndex]];\n                        // next line will be going down\n                        directionUp = false;\n                        exitLoop = true;\n                    }\n                    if (exitLoop) {\n                        xData.push(zigzag[0][0]);\n                        yData.push(zigzag[0][1]);\n                        j = i++;\n                        i = yValLen;\n                    }\n                }\n                // Search for next zigzags\n                for (i = j; i < yValLen; i++) {\n                    if (directionUp) { // next line up\n                        // lower when going down -> change zigzag candidate\n                        if (yVal[i][lowIndex] <= zigzagPoint[1]) {\n                            zigzagPoint = [xVal[i], yVal[i][lowIndex]];\n                        }\n                        // requried change to go down -> new zigzagpoint and\n                        // direction change\n                        if (yVal[i][highIndex] >=\n                            zigzagPoint[1] * deviations.low) {\n                            yIndex = highIndex;\n                        }\n                    }\n                    else { // next line down\n                        // higher when going up -> change zigzag candidate\n                        if (yVal[i][highIndex] >= zigzagPoint[1]) {\n                            zigzagPoint = [xVal[i], yVal[i][highIndex]];\n                        }\n                        // requried change to go down -> new zigzagpoint and\n                        // direction change\n                        if (yVal[i][lowIndex] <=\n                            zigzagPoint[1] * deviations.high) {\n                            yIndex = lowIndex;\n                        }\n                    }\n                    if (yIndex !== false) { // new zigzag point and direction change\n                        zigzag.push(zigzagPoint);\n                        xData.push(zigzagPoint[0]);\n                        yData.push(zigzagPoint[1]);\n                        zigzagPoint = [xVal[i], yVal[i][yIndex]];\n                        directionUp = !directionUp;\n                        yIndex = false;\n                    }\n                }\n                zigzagLen = zigzag.length;\n                // no zigzag for last point\n                if (zigzagLen !== 0 &&\n                    zigzag[zigzagLen - 1][0] < xVal[yValLen - 1]) {\n                    // set last point from zigzag candidate\n                    zigzag.push(zigzagPoint);\n                    xData.push(zigzagPoint[0]);\n                    yData.push(zigzagPoint[1]);\n                }\n                return {\n                    values: zigzag,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Zig Zag indicator.\n             *\n             * This series requires `linkedTo` option to be set.\n             *\n             * @sample stock/indicators/zigzag\n             *         Zig Zag indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/zigzag\n             * @optionparent plotOptions.zigzag\n             */\n            ZigzagIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index, period\n                 */\n                params: {\n                    // Index and period are unchangeable, do not inherit (#15362)\n                    index: void 0,\n                    period: void 0,\n                    /**\n                     * The point index which indicator calculations will base - low\n                     * value.\n                     *\n                     * For example using OHLC data, index=2 means the indicator will be\n                     * calculated using Low values.\n                     */\n                    lowIndex: 2,\n                    /**\n                     * The point index which indicator calculations will base - high\n                     * value.\n                     *\n                     * For example using OHLC data, index=1 means the indicator will be\n                     * calculated using High values.\n                     */\n                    highIndex: 1,\n                    /**\n                     * The threshold for the value change.\n                     *\n                     * For example deviation=1 means the indicator will ignore all price\n                     * movements less than 1%.\n                     */\n                    deviation: 1\n                }\n            });\n            return ZigzagIndicator;\n        }(SMAIndicator));\n        extend(ZigzagIndicator.prototype, {\n            nameComponents: ['deviation'],\n            nameSuffixes: ['%'],\n            nameBase: 'Zig Zag'\n        });\n        SeriesRegistry.registerSeriesType('zigzag', ZigzagIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `Zig Zag` series. If the [type](#series.zigzag.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.zigzag\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/zigzag\n         * @apioption series.zigzag\n         */\n        ''; // adds doclets above to transpiled file\n\n        return ZigzagIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/LinearRegression/LinearRegression.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2021 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var isArray = U.isArray,\n            extend = U.extend,\n            merge = U.merge;\n        /* *\n         *\n         * Class\n         *\n         * */\n        /**\n         * Linear regression series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearregression\n         *\n         * @augments Highcharts.Series\n         */\n        var LinearRegressionIndicator = /** @class */ (function (_super) {\n                __extends(LinearRegressionIndicator, _super);\n            function LinearRegressionIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Return the slope and intercept of a straight line function.\n             *\n             * @private\n             *\n             * @param {Array<number>} xData\n             * List of all x coordinates in a period.\n             *\n             * @param {Array<number>} yData\n             * List of all y coordinates in a period.\n             *\n             * @return {Highcharts.RegressionLineParametersObject}\n             * Object that contains the slope and the intercept of a straight line\n             * function.\n             */\n            LinearRegressionIndicator.prototype.getRegressionLineParameters = function (xData, yData) {\n                // least squares method\n                var yIndex = this.options.params.index,\n                    getSingleYValue = function (yValue,\n                    yIndex) {\n                        return isArray(yValue) ? yValue[yIndex] : yValue;\n                }, xSum = xData.reduce(function (accX, val) {\n                    return val + accX;\n                }, 0), ySum = yData.reduce(function (accY, val) {\n                    return getSingleYValue(val, yIndex) + accY;\n                }, 0), xMean = xSum / xData.length, yMean = ySum / yData.length, xError, yError, formulaNumerator = 0, formulaDenominator = 0, i, slope;\n                for (i = 0; i < xData.length; i++) {\n                    xError = xData[i] - xMean;\n                    yError = getSingleYValue(yData[i], yIndex) - yMean;\n                    formulaNumerator += xError * yError;\n                    formulaDenominator += Math.pow(xError, 2);\n                }\n                slope = formulaDenominator ?\n                    formulaNumerator / formulaDenominator : 0; // don't divide by 0\n                return {\n                    slope: slope,\n                    intercept: yMean - slope * xMean\n                };\n            };\n            /**\n             * Return the y value on a straight line.\n             *\n             * @private\n             *\n             * @param {Highcharts.RegressionLineParametersObject} lineParameters\n             * Object that contains the slope and the intercept of a straight line\n             * function.\n             *\n             * @param {number} endPointX\n             * X coordinate of the point.\n             *\n             * @return {number}\n             * Y value of the point that lies on the line.\n             */\n            LinearRegressionIndicator.prototype.getEndPointY = function (lineParameters, endPointX) {\n                return lineParameters.slope * endPointX + lineParameters.intercept;\n            };\n            /**\n             * Transform the coordinate system so that x values start at 0 and\n             * apply xAxisUnit.\n             *\n             * @private\n             *\n             * @param {Array<number>} xData\n             * List of all x coordinates in a period\n             *\n             * @param {number} xAxisUnit\n             * Option (see the API)\n             *\n             * @return {Array<number>}\n             * Array of transformed x data\n             */\n            LinearRegressionIndicator.prototype.transformXData = function (xData, xAxisUnit) {\n                var xOffset = xData[0];\n                return xData.map(function (xValue) {\n                    return (xValue - xOffset) / xAxisUnit;\n                });\n            };\n            /**\n             * Find the closest distance between points in the base series.\n             * @private\n             * @param {Array<number>} xData list of all x coordinates in the base series\n             * @return {number} - closest distance between points in the base series\n             */\n            LinearRegressionIndicator.prototype.findClosestDistance = function (xData) {\n                var distance,\n                    closestDistance,\n                    i;\n                for (i = 1; i < xData.length - 1; i++) {\n                    distance = xData[i] - xData[i - 1];\n                    if (distance > 0 &&\n                        (typeof closestDistance === 'undefined' ||\n                            distance < closestDistance)) {\n                        closestDistance = distance;\n                    }\n                }\n                return closestDistance;\n            };\n            // Required to be implemented - starting point for indicator's logic\n            LinearRegressionIndicator.prototype.getValues = function (baseSeries, regressionSeriesParams) {\n                var xData = baseSeries.xData,\n                    yData = baseSeries.yData,\n                    period = regressionSeriesParams.period,\n                    lineParameters,\n                    i,\n                    periodStart,\n                    periodEnd, \n                    // format required to be returned\n                    indicatorData = {\n                        xData: [],\n                        yData: [],\n                        values: []\n                    },\n                    endPointX,\n                    endPointY,\n                    periodXData,\n                    periodYData,\n                    periodTransformedXData,\n                    xAxisUnit = this.options.params.xAxisUnit ||\n                        this.findClosestDistance(xData);\n                // Iteration logic: x value of the last point within the period\n                // (end point) is used to represent the y value (regression)\n                // of the entire period.\n                for (i = period - 1; i <= xData.length - 1; i++) {\n                    periodStart = i - period + 1; // adjusted for slice() function\n                    periodEnd = i + 1; // (as above)\n                    endPointX = xData[i];\n                    periodXData = xData.slice(periodStart, periodEnd);\n                    periodYData = yData.slice(periodStart, periodEnd);\n                    periodTransformedXData = this.transformXData(periodXData, xAxisUnit);\n                    lineParameters = this.getRegressionLineParameters(periodTransformedXData, periodYData);\n                    endPointY = this.getEndPointY(lineParameters, periodTransformedXData[periodTransformedXData.length - 1]);\n                    // @todo this is probably not used anywhere\n                    indicatorData.values.push({\n                        regressionLineParameters: lineParameters,\n                        x: endPointX,\n                        y: endPointY\n                    });\n                    indicatorData.xData.push(endPointX);\n                    indicatorData.yData.push(endPointY);\n                }\n                return indicatorData;\n            };\n            /**\n             * Linear regression indicator. This series requires `linkedTo` option to be\n             * set.\n             *\n             * @sample {highstock} stock/indicators/linear-regression\n             *         Linear regression indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        7.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/regressions\n             * @optionparent plotOptions.linearregression\n             */\n            LinearRegressionIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    /**\n                     * Unit (in milliseconds) for the x axis distances used to\n                     * compute the regression line paramters (slope & intercept) for\n                     * every range. In Highcharts Stock the x axis values are always\n                     * represented in milliseconds which may cause that distances\n                     * between points are \"big\" integer numbers.\n                     *\n                     * Highcharts Stock's linear regression algorithm (least squares\n                     * method) will utilize these \"big\" integers for finding the\n                     * slope and the intercept of the regression line for each\n                     * period. In consequence, this value may be a very \"small\"\n                     * decimal number that's hard to interpret by a human.\n                     *\n                     * For instance: `xAxisUnit` equealed to `86400000` ms (1 day)\n                     * forces the algorithm to treat `86400000` as `1` while\n                     * computing the slope and the intercept. This may enchance the\n                     * legiblitity of the indicator's values.\n                     *\n                     * Default value is the closest distance between two data\n                     * points.\n                     *\n                     * In `v9.0.2`, the default value has been changed\n                     * from `undefined` to `null`.\n                     *\n                     * @sample {highstock} stock/plotoptions/linear-regression-xaxisunit\n                     *         xAxisUnit set to 1 minute\n                     *\n                     * @example\n                     * // In Liniear Regression Slope Indicator series `xAxisUnit`is\n                     * // `86400000` (1 day) and period is `3`. There're 3 points in\n                     * // the base series:\n                     *\n                     * data: [\n                     *   [Date.UTC(2020, 0, 1), 1],\n                     *   [Date.UTC(2020, 0, 2), 3],\n                     *   [Date.UTC(2020, 0, 3), 5]\n                     * ]\n                     *\n                     * // This will produce one point in the indicator series that\n                     * // has a `y` value of `2` (slope of the regression line). If\n                     * // we change the `xAxisUnit` to `1` (ms) the value of the\n                     * // indicator's point will be `2.3148148148148148e-8` which is\n                     * // harder to interpert for a human.\n                     *\n                     * @type    {null|number}\n                     * @product highstock\n                     */\n                    xAxisUnit: null\n                },\n                tooltip: {\n                    valueDecimals: 4\n                }\n            });\n            return LinearRegressionIndicator;\n        }(SMAIndicator));\n        extend(LinearRegressionIndicator.prototype, {\n            nameBase: 'Linear Regression Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegression', LinearRegressionIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A linear regression series. If the\n         * [type](#series.linearregression.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregression\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregression\n         */\n        ''; // to include the above in the js output\n\n        return LinearRegressionIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/LinearRegressionSlopes/LinearRegressionSlopes.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2021 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var LinearRegressionIndicator = SeriesRegistry.seriesTypes.linearRegression;\n        var extend = U.extend,\n            merge = U.merge;\n        /* *\n         *\n         * Class\n         *\n         * */\n        /**\n         * The Linear Regression Slope series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearRegressionSlope\n         *\n         * @augments Highcharts.Series\n         */\n        var LinearRegressionSlopesIndicator = /** @class */ (function (_super) {\n                __extends(LinearRegressionSlopesIndicator, _super);\n            function LinearRegressionSlopesIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            LinearRegressionSlopesIndicator.prototype.getEndPointY = function (lineParameters) {\n                return lineParameters.slope;\n            };\n            /**\n             * Linear regression slope indicator. This series requires `linkedTo`\n             * option to be set.\n             *\n             * @sample {highstock} stock/indicators/linear-regression-slope\n             *         Linear regression slope indicator\n             *\n             * @extends      plotOptions.linearregression\n             * @since        7.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires  stock/indicators/regressions\n             * @optionparent plotOptions.linearregressionslope\n             */\n            LinearRegressionSlopesIndicator.defaultOptions = merge(LinearRegressionIndicator.defaultOptions);\n            return LinearRegressionSlopesIndicator;\n        }(LinearRegressionIndicator));\n        extend(LinearRegressionSlopesIndicator.prototype, {\n            nameBase: 'Linear Regression Slope Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegressionSlope', LinearRegressionSlopesIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A linear regression intercept series. If the\n         * [type](#series.linearregressionslope.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregressionslope\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregressionslope\n         */\n        ''; // to include the above in the js output\n\n        return LinearRegressionSlopesIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/LinearRegressionIntercept/LinearRegressionIntercept.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2021 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var LinearRegressionIndicator = SeriesRegistry.seriesTypes.linearRegression;\n        var extend = U.extend,\n            merge = U.merge;\n        /* *\n         *\n         * Class\n         *\n         * */\n        /**\n         * The Linear Regression Intercept series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearRegressionIntercept\n         *\n         * @augments Highcharts.Series\n         */\n        var LinearRegressionInterceptIndicator = /** @class */ (function (_super) {\n                __extends(LinearRegressionInterceptIndicator, _super);\n            function LinearRegressionInterceptIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            LinearRegressionInterceptIndicator.prototype.getEndPointY = function (lineParameters) {\n                return lineParameters.intercept;\n            };\n            /**\n             * Linear regression intercept indicator. This series requires `linkedTo`\n             * option to be set.\n             *\n             * @sample {highstock} stock/indicators/linear-regression-intercept\n             *         Linear intercept slope indicator\n             *\n             * @extends      plotOptions.linearregression\n             * @since        7.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires  stock/indicators/regressions\n             * @optionparent plotOptions.linearregressionintercept\n             */\n            LinearRegressionInterceptIndicator.defaultOptions = merge(LinearRegressionIndicator.defaultOptions);\n            return LinearRegressionInterceptIndicator;\n        }(LinearRegressionIndicator));\n        extend(LinearRegressionInterceptIndicator.prototype, {\n            nameBase: 'Linear Regression Intercept Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegressionIntercept', LinearRegressionInterceptIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A linear regression intercept series. If the\n         * [type](#series.linearregressionintercept.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregressionintercept\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregressionintercept\n         */\n        ''; // to include the above in the js output\n\n        return LinearRegressionInterceptIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/LinearRegressionAngle/LinearRegressionAngle.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2021 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var LinearRegressionIndicator = SeriesRegistry.seriesTypes.linearRegression;\n        var extend = U.extend,\n            merge = U.merge;\n        /* *\n         *\n         * Class\n         *\n         * */\n        /**\n         * The Linear Regression Angle series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearRegressionAngle\n         *\n         * @augments Highcharts.Series\n         */\n        var LinearRegressionAngleIndicator = /** @class */ (function (_super) {\n                __extends(LinearRegressionAngleIndicator, _super);\n            function LinearRegressionAngleIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n            * Convert a slope of a line to angle (in degrees) between\n            * the line and x axis\n            * @private\n            * @param {number} slope of the straight line function\n            * @return {number} angle in degrees\n            */\n            LinearRegressionAngleIndicator.prototype.slopeToAngle = function (slope) {\n                return Math.atan(slope) * (180 / Math.PI); // rad to deg\n            };\n            LinearRegressionAngleIndicator.prototype.getEndPointY = function (lineParameters) {\n                return this.slopeToAngle(lineParameters.slope);\n            };\n            /**\n             * Linear regression angle indicator. This series requires `linkedTo`\n             * option to be set.\n             *\n             * @sample {highstock} stock/indicators/linear-regression-angle\n             *         Linear intercept angle indicator\n             *\n             * @extends      plotOptions.linearregression\n             * @since        7.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires  stock/indicators/regressions\n             * @optionparent plotOptions.linearregressionangle\n             */\n            LinearRegressionAngleIndicator.defaultOptions = merge(LinearRegressionIndicator.defaultOptions, {\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span>' +\n                        '{series.name}: <b>{point.y}°</b><br/>'\n                }\n            });\n            return LinearRegressionAngleIndicator;\n        }(LinearRegressionIndicator));\n        extend(LinearRegressionAngleIndicator.prototype, {\n            nameBase: 'Linear Regression Angle Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegressionAngle', LinearRegressionAngleIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A linear regression intercept series. If the\n         * [type](#series.linearregressionangle.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregressionangle\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregressionangle\n         */\n        ''; // to include the above in the js output\n\n        return LinearRegressionAngleIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/ABands/ABandsIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var correctFloat = U.correctFloat,\n            extend = U.extend,\n            merge = U.merge;\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         */\n        function getBaseForBand(low, high, factor) {\n            return (((correctFloat(high - low)) /\n                ((correctFloat(high + low)) / 2)) * 1000) * factor;\n        }\n        /**\n         * @private\n         */\n        function getPointUB(high, base) {\n            return high * (correctFloat(1 + 2 * base));\n        }\n        /**\n         * @private\n         */\n        function getPointLB(low, base) {\n            return low * (correctFloat(1 - 2 * base));\n        }\n        /* eslint-enable valid-jsdoc */\n        /**\n         * The ABands series type\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.abands\n         *\n         * @augments Highcharts.Series\n         */\n        var ABandsIndicator = /** @class */ (function (_super) {\n                __extends(ABandsIndicator, _super);\n            function ABandsIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            ABandsIndicator.prototype.getValues = function (series, params) {\n                var period = params.period,\n                    factor = params.factor,\n                    index = params.index,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0, \n                    // Upperbands\n                    UB = [], \n                    // Lowerbands\n                    LB = [], \n                    // ABANDS array structure:\n                    // 0-date, 1-top line, 2-middle line, 3-bottom line\n                    ABANDS = [], \n                    // middle line, top line and bottom line\n                    ML,\n                    TL,\n                    BL,\n                    date,\n                    bandBase,\n                    pointSMA,\n                    ubSMA,\n                    lbSMA,\n                    low = 2,\n                    high = 1,\n                    xData = [],\n                    yData = [],\n                    slicedX,\n                    slicedY,\n                    i;\n                if (yValLen < period) {\n                    return;\n                }\n                for (i = 0; i <= yValLen; i++) {\n                    // Get UB and LB values of every point. This condition\n                    // is necessary, because there is a need to calculate current\n                    // UB nad LB values simultaneously with given period SMA\n                    // in one for loop.\n                    if (i < yValLen) {\n                        bandBase = getBaseForBand(yVal[i][low], yVal[i][high], factor);\n                        UB.push(getPointUB(yVal[i][high], bandBase));\n                        LB.push(getPointLB(yVal[i][low], bandBase));\n                    }\n                    if (i >= period) {\n                        slicedX = xVal.slice(i - period, i);\n                        slicedY = yVal.slice(i - period, i);\n                        ubSMA = _super.prototype.getValues.call(this, {\n                            xData: slicedX,\n                            yData: UB.slice(i - period, i)\n                        }, {\n                            period: period\n                        });\n                        lbSMA = _super.prototype.getValues.call(this, {\n                            xData: slicedX,\n                            yData: LB.slice(i - period, i)\n                        }, {\n                            period: period\n                        });\n                        pointSMA = _super.prototype.getValues.call(this, {\n                            xData: slicedX,\n                            yData: slicedY\n                        }, {\n                            period: period,\n                            index: index\n                        });\n                        date = pointSMA.xData[0];\n                        TL = ubSMA.yData[0];\n                        BL = lbSMA.yData[0];\n                        ML = pointSMA.yData[0];\n                        ABANDS.push([date, TL, ML, BL]);\n                        xData.push(date);\n                        yData.push([TL, ML, BL]);\n                    }\n                }\n                return {\n                    values: ABANDS,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Acceleration bands (ABANDS). This series requires the `linkedTo` option\n             * to be set and should be loaded after the\n             * `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/acceleration-bands\n             *         Acceleration Bands\n             *\n             * @extends      plotOptions.sma\n             * @mixes        Highcharts.MultipleLinesMixin\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking,\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/acceleration-bands\n             * @optionparent plotOptions.abands\n             */\n            ABandsIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Option for fill color between lines in Accelleration bands Indicator.\n                 *\n                 * @sample {highstock} stock/indicators/indicator-area-fill\n                 *      Background fill between lines.\n                 *\n                 * @type {Highcharts.Color}\n                 * @since 9.3.2\n                 * @apioption plotOptions.abands.fillColor\n                 *\n                 */\n                params: {\n                    period: 20,\n                    /**\n                     * The algorithms factor value used to calculate bands.\n                     *\n                     * @product highstock\n                     */\n                    factor: 0.001,\n                    index: 3\n                },\n                lineWidth: 1,\n                topLine: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1\n                    }\n                },\n                bottomLine: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1\n                    }\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return ABandsIndicator;\n        }(SMAIndicator));\n        extend(ABandsIndicator.prototype, {\n            areaLinesNames: ['top', 'bottom'],\n            linesApiNames: ['topLine', 'bottomLine'],\n            nameBase: 'Acceleration Bands',\n            nameComponents: ['period', 'factor'],\n            pointArrayMap: ['top', 'middle', 'bottom'],\n            pointValKey: 'middle'\n        });\n        MultipleLinesComposition.compose(ABandsIndicator);\n        SeriesRegistry.registerSeriesType('abands', ABandsIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An Acceleration bands indicator. If the [type](#series.abands.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.abands\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval,\n         *            pointIntervalUnit, pointPlacement, pointRange, pointStart,\n         *            stacking, showInNavigator,\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/acceleration-bands\n         * @apioption series.abands\n         */\n        ''; // to include the above in jsdoc\n\n        return ABandsIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/TrendLine/TrendLineIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var extend = U.extend,\n            merge = U.merge,\n            isArray = U.isArray;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Trend line series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.trendline\n         *\n         * @augments Highcharts.Series\n         */\n        var TrendLineIndicator = /** @class */ (function (_super) {\n                __extends(TrendLineIndicator, _super);\n            function TrendLineIndicator() {\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                *\n                *   Properties\n                *\n                * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            TrendLineIndicator.prototype.getValues = function (series, params) {\n                var xVal = series.xData,\n                    yVal = series.yData,\n                    LR = [],\n                    xData = [],\n                    yData = [],\n                    sumX = 0,\n                    sumY = 0,\n                    sumXY = 0,\n                    sumX2 = 0,\n                    xValLength = xVal.length,\n                    index = params.index,\n                    alpha,\n                    beta,\n                    i,\n                    x,\n                    y;\n                // Get sums:\n                for (i = 0; i < xValLength; i++) {\n                    x = xVal[i];\n                    y = isArray(yVal[i]) ? yVal[i][index] : yVal[i];\n                    sumX += x;\n                    sumY += y;\n                    sumXY += x * y;\n                    sumX2 += x * x;\n                }\n                // Get slope and offset:\n                alpha = (xValLength * sumXY - sumX * sumY) /\n                    (xValLength * sumX2 - sumX * sumX);\n                if (isNaN(alpha)) {\n                    alpha = 0;\n                }\n                beta = (sumY - alpha * sumX) / xValLength;\n                // Calculate linear regression:\n                for (i = 0; i < xValLength; i++) {\n                    x = xVal[i];\n                    y = alpha * x + beta;\n                    // Prepare arrays required for getValues() method\n                    LR[i] = [x, y];\n                    xData[i] = x;\n                    yData[i] = y;\n                }\n                return {\n                    xData: xData,\n                    yData: yData,\n                    values: LR\n                };\n            };\n            /**\n             * Trendline (linear regression) fits a straight line to the selected data\n             * using a method called the Sum Of Least Squares. This series requires the\n             * `linkedTo` option to be set.\n             *\n             * @sample stock/indicators/trendline\n             *         Trendline indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        7.1.3\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/trendline\n             * @optionparent plotOptions.trendline\n             */\n            TrendLineIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding period\n                 */\n                params: {\n                    period: void 0,\n                    /**\n                     * The point index which indicator calculations will base. For\n                     * example using OHLC data, index=2 means the indicator will be\n                     * calculated using Low values.\n                     *\n                     * @default 3\n                     */\n                    index: 3\n                }\n            });\n            return TrendLineIndicator;\n        }(SMAIndicator));\n        extend(TrendLineIndicator.prototype, {\n            nameBase: 'Trendline',\n            nameComponents: false\n        });\n        SeriesRegistry.registerSeriesType('trendline', TrendLineIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A `TrendLine` series. If the [type](#series.trendline.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.trendline\n         * @since     7.1.3\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/trendline\n         * @apioption series.trendline\n         */\n        ''; // to include the above in the js output\n\n        return TrendLineIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/DisparityIndex/DisparityIndexIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *  (c) 2010-2021 Rafal Sebestjanski\n         *\n         *  Disparity Index technical indicator for Highcharts Stock\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var correctFloat = U.correctFloat,\n            defined = U.defined,\n            extend = U.extend,\n            isArray = U.isArray,\n            merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Disparity Index series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.disparityindex\n         *\n         * @augments Highcharts.Series\n         */\n        var DisparityIndexIndicator = /** @class */ (function (_super) {\n                __extends(DisparityIndexIndicator, _super);\n            function DisparityIndexIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.averageIndicator = void 0;\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            DisparityIndexIndicator.prototype.init = function () {\n                var args = arguments,\n                    ctx = this, // Disparity Index indicator\n                    params = args[1].params, // options.params\n                    averageType = params && params.average ? params.average : void 0;\n                ctx.averageIndicator = SeriesRegistry\n                    .seriesTypes[averageType] || SMAIndicator;\n                ctx.averageIndicator.prototype.init.apply(ctx, args);\n            };\n            DisparityIndexIndicator.prototype.calculateDisparityIndex = function (curPrice, periodAverage) {\n                return correctFloat(curPrice - periodAverage) / periodAverage * 100;\n            };\n            DisparityIndexIndicator.prototype.getValues = function (series, params) {\n                var index = params.index,\n                    xVal = series.xData,\n                    yVal = series.yData,\n                    yValLen = yVal ? yVal.length : 0,\n                    disparityIndexPoint = [],\n                    xData = [],\n                    yData = [], \n                    // \"as any\" because getValues doesn't exist on typeof Series\n                    averageIndicator = this.averageIndicator,\n                    isOHLC = isArray(yVal[0]), \n                    // Get the average indicator's values\n                    values = averageIndicator.prototype.getValues(series,\n                    params),\n                    yValues = values.yData,\n                    start = xVal.indexOf(values.xData[0]);\n                // Check period, if bigger than points length, skip\n                if (!yValues || yValues.length === 0 ||\n                    !defined(index) ||\n                    yVal.length <= start) {\n                    return;\n                }\n                // Get the Disparity Index indicator's values\n                for (var i = start; i < yValLen; i++) {\n                    var disparityIndexValue = this.calculateDisparityIndex(isOHLC ? yVal[i][index] : yVal[i],\n                        yValues[i - start]);\n                    disparityIndexPoint.push([\n                        xVal[i],\n                        disparityIndexValue\n                    ]);\n                    xData.push(xVal[i]);\n                    yData.push(disparityIndexValue);\n                }\n                return {\n                    values: disparityIndexPoint,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Disparity Index.\n             * This series requires the `linkedTo` option to be set and should\n             * be loaded after the `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/disparity-index\n             *         Disparity Index indicator\n             *\n             * @extends      plotOptions.sma\n             * @since 9.1.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n             *               pointInterval, pointIntervalUnit, pointPlacement,\n             *               pointRange, pointStart, showInNavigator, stacking\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/disparity-index\n             * @optionparent plotOptions.disparityindex\n             */\n            DisparityIndexIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    /**\n                     * The average used to calculate the Disparity Index indicator.\n                     * By default it uses SMA, with EMA as an option. To use other\n                     * averages, e.g. TEMA, the `stock/indicators/tema.js` file needs to\n                     * be loaded.\n                     *\n                     * If value is different than `ema`, `dema`, `tema` or `wma`,\n                     * then sma is used.\n                     */\n                    average: 'sma',\n                    index: 3\n                },\n                marker: {\n                    enabled: false\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return DisparityIndexIndicator;\n        }(SMAIndicator));\n        extend(DisparityIndexIndicator.prototype, {\n            nameBase: 'Disparity Index',\n            nameComponents: ['period', 'average']\n        });\n        SeriesRegistry.registerSeriesType('disparityindex', DisparityIndexIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * The Disparity Index indicator series.\n         * If the [type](#series.disparityindex.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.disparityindex\n         * @since 9.1.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis,  dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/disparity-index\n         * @apioption series.disparityindex\n         */\n        ''; // to include the above in the js output\n\n        return DisparityIndexIndicator;\n    });\n    _registerModule(_modules, 'masters/indicators/indicators-all.src.js', [], function () {\n\n        // eslint-disable-next-line max-len\n        // eslint-disable-next-line max-len\n\n    });\n}));","/**\n * @license Highstock JS v9.3.3 (2022-02-01)\n *\n * Advanced Highcharts Stock tools\n *\n * (c) 2010-2021 Highsoft AS\n * Author: Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n'use strict';\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/full-screen', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n        }\n    }\n    _registerModule(_modules, 'Extensions/FullScreen.js', [_modules['Core/Chart/Chart.js'], _modules['Core/Globals.js'], _modules['Core/Renderer/HTML/AST.js'], _modules['Core/Utilities.js']], function (Chart, H, AST, U) {\n        /* *\n         * (c) 2009-2021 Rafal Sebestjanski\n         *\n         * Full screen for Highcharts\n         *\n         * License: www.highcharts.com/license\n         */\n        var doc = H.doc;\n        var addEvent = U.addEvent;\n        /**\n         * The module allows user to enable display chart in full screen mode.\n         * Used in StockTools too.\n         * Based on default solutions in browsers.\n         *\n         */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * Handles displaying chart's container in the fullscreen mode.\n         *\n         * **Note**: Fullscreen is not supported on iPhone due to iOS limitations.\n         *\n         * @class\n         * @name Highcharts.Fullscreen\n         * @hideconstructor\n         * @requires modules/full-screen\n         */\n        var Fullscreen = /** @class */ (function () {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                function Fullscreen(chart) {\n                    /**\n                     * Chart managed by the fullscreen controller.\n                     * @name Highcharts.Fullscreen#chart\n                     * @type {Highcharts.Chart}\n                     */\n                    this.chart = chart;\n                /**\n                 * The flag is set to `true` when the chart is displayed in\n                 * the fullscreen mode.\n                 *\n                 * @name Highcharts.Fullscreen#isOpen\n                 * @type {boolean|undefined}\n                 * @since 8.0.1\n                 */\n                this.isOpen = false;\n                var container = chart.renderTo;\n                // Hold event and methods available only for a current browser.\n                if (!this.browserProps) {\n                    if (typeof container.requestFullscreen === 'function') {\n                        this.browserProps = {\n                            fullscreenChange: 'fullscreenchange',\n                            requestFullscreen: 'requestFullscreen',\n                            exitFullscreen: 'exitFullscreen'\n                        };\n                    }\n                    else if (container.mozRequestFullScreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'mozfullscreenchange',\n                            requestFullscreen: 'mozRequestFullScreen',\n                            exitFullscreen: 'mozCancelFullScreen'\n                        };\n                    }\n                    else if (container.webkitRequestFullScreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'webkitfullscreenchange',\n                            requestFullscreen: 'webkitRequestFullScreen',\n                            exitFullscreen: 'webkitExitFullscreen'\n                        };\n                    }\n                    else if (container.msRequestFullscreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'MSFullscreenChange',\n                            requestFullscreen: 'msRequestFullscreen',\n                            exitFullscreen: 'msExitFullscreen'\n                        };\n                    }\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Stops displaying the chart in fullscreen mode.\n             * Exporting module required.\n             *\n             * @since       8.0.1\n             *\n             * @function    Highcharts.Fullscreen#close\n             * @return      {void}\n             * @requires    modules/full-screen\n             */\n            Fullscreen.prototype.close = function () {\n                var fullscreen = this,\n                    chart = fullscreen.chart,\n                    optionsChart = chart.options.chart;\n                // Don't fire exitFullscreen() when user exited using 'Escape' button.\n                if (fullscreen.isOpen &&\n                    fullscreen.browserProps &&\n                    chart.container.ownerDocument instanceof Document) {\n                    chart.container.ownerDocument[fullscreen.browserProps.exitFullscreen]();\n                }\n                // Unbind event as it's necessary only before exiting from fullscreen.\n                if (fullscreen.unbindFullscreenEvent) {\n                    fullscreen.unbindFullscreenEvent = fullscreen\n                        .unbindFullscreenEvent();\n                }\n                chart.setSize(fullscreen.origWidth, fullscreen.origHeight, false);\n                fullscreen.origWidth = void 0;\n                fullscreen.origHeight = void 0;\n                optionsChart.width = fullscreen.origWidthOption;\n                optionsChart.height = fullscreen.origHeightOption;\n                fullscreen.origWidthOption = void 0;\n                fullscreen.origHeightOption = void 0;\n                fullscreen.isOpen = false;\n                fullscreen.setButtonText();\n            };\n            /**\n             * Displays the chart in fullscreen mode.\n             * When fired customly by user before exporting context button is created,\n             * button's text will not be replaced - it's on the user side.\n             * Exporting module required.\n             *\n             * @since       8.0.1\n             *\n             * @function Highcharts.Fullscreen#open\n             * @return      {void}\n             * @requires    modules/full-screen\n             */\n            Fullscreen.prototype.open = function () {\n                var fullscreen = this,\n                    chart = fullscreen.chart,\n                    optionsChart = chart.options.chart;\n                if (optionsChart) {\n                    fullscreen.origWidthOption = optionsChart.width;\n                    fullscreen.origHeightOption = optionsChart.height;\n                }\n                fullscreen.origWidth = chart.chartWidth;\n                fullscreen.origHeight = chart.chartHeight;\n                // Handle exitFullscreen() method when user clicks 'Escape' button.\n                if (fullscreen.browserProps) {\n                    var unbindChange_1 = addEvent(chart.container.ownerDocument, // chart's document\n                        fullscreen.browserProps.fullscreenChange,\n                        function () {\n                            // Handle lack of async of browser's fullScreenChange event.\n                            if (fullscreen.isOpen) {\n                                fullscreen.isOpen = false;\n                            fullscreen.close();\n                        }\n                        else {\n                            chart.setSize(null, null, false);\n                            fullscreen.isOpen = true;\n                            fullscreen.setButtonText();\n                        }\n                    });\n                    var unbindDestroy_1 = addEvent(chart, 'destroy',\n                        unbindChange_1);\n                    fullscreen.unbindFullscreenEvent = function () {\n                        unbindChange_1();\n                        unbindDestroy_1();\n                    };\n                    var promise = chart.renderTo[fullscreen.browserProps.requestFullscreen]();\n                    if (promise) {\n                        // No dot notation because of IE8 compatibility\n                        promise['catch'](function () {\n                            alert(// eslint-disable-line no-alert\n                            'Full screen is not supported inside a frame.');\n                        });\n                    }\n                }\n            };\n            /**\n             * Replaces the exporting context button's text when toogling the\n             * fullscreen mode.\n             *\n             * @private\n             *\n             * @since 8.0.1\n             *\n             * @requires modules/full-screen\n             */\n            Fullscreen.prototype.setButtonText = function () {\n                var chart = this.chart,\n                    exportDivElements = chart.exportDivElements,\n                    exportingOptions = chart.options.exporting,\n                    menuItems = (exportingOptions &&\n                        exportingOptions.buttons &&\n                        exportingOptions.buttons.contextButton.menuItems),\n                    lang = chart.options.lang;\n                if (exportingOptions &&\n                    exportingOptions.menuItemDefinitions &&\n                    lang &&\n                    lang.exitFullscreen &&\n                    lang.viewFullscreen &&\n                    menuItems &&\n                    exportDivElements) {\n                    var exportDivElement = exportDivElements[menuItems.indexOf('viewFullscreen')];\n                    if (exportDivElement) {\n                        AST.setElementHTML(exportDivElement, !this.isOpen ?\n                            (exportingOptions.menuItemDefinitions.viewFullscreen\n                                .text ||\n                                lang.viewFullscreen) : lang.exitFullscreen);\n                    }\n                }\n            };\n            /**\n             * Toggles displaying the chart in fullscreen mode.\n             * By default, when the exporting module is enabled, a context button with\n             * a drop down menu in the upper right corner accesses this function.\n             * Exporting module required.\n             *\n             * @since 8.0.1\n             *\n             * @sample      highcharts/members/chart-togglefullscreen/\n             *              Toggle fullscreen mode from a HTML button\n             *\n             * @function Highcharts.Fullscreen#toggle\n             * @requires    modules/full-screen\n             */\n            Fullscreen.prototype.toggle = function () {\n                var fullscreen = this;\n                if (!fullscreen.isOpen) {\n                    fullscreen.open();\n                }\n                else {\n                    fullscreen.close();\n                }\n            };\n            return Fullscreen;\n        }());\n        H.Fullscreen = Fullscreen;\n        // Initialize fullscreen\n        addEvent(Chart, 'beforeRender', function () {\n            /**\n             * @name Highcharts.Chart#fullscreen\n             * @type {Highcharts.Fullscreen}\n             * @requires modules/full-screen\n             */\n            this.fullscreen = new H.Fullscreen(this);\n        });\n\n        return H.Fullscreen;\n    });\n    _registerModule(_modules, 'masters/modules/full-screen.src.js', [], function () {\n\n\n    });\n}));","/**\n * @license Highstock JS v9.3.3 (2022-02-01)\n *\n * Highcharts Stock as a plugin for Highcharts\n *\n * (c) 2010-2021 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n'use strict';\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/stock', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n        }\n    }\n    _registerModule(_modules, 'Core/Axis/OrdinalAxis.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Globals.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (Axis, H, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var addEvent = U.addEvent,\n            correctFloat = U.correctFloat,\n            css = U.css,\n            defined = U.defined,\n            error = U.error,\n            pick = U.pick,\n            timeUnits = U.timeUnits;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var composedClasses = [];\n        /* eslint-disable valid-jsdoc */\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Extends the axis with ordinal support.\n         * @private\n         */\n        var OrdinalAxis;\n        (function (OrdinalAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Extends the axis with ordinal support.\n             *\n             * @private\n             *\n             * @param AxisClass\n             * Axis class to extend.\n             *\n             * @param ChartClass\n             * Chart class to use.\n             *\n             * @param SeriesClass\n             * Series class to use.\n             */\n            function compose(AxisClass, SeriesClass, ChartClass) {\n                if (composedClasses.indexOf(AxisClass) === -1) {\n                    composedClasses.push(AxisClass);\n                    var axisProto = AxisClass.prototype;\n                    axisProto.getTimeTicks = getTimeTicks;\n                    axisProto.index2val = index2val;\n                    axisProto.lin2val = lin2val;\n                    axisProto.val2lin = val2lin;\n                    // Record this to prevent overwriting by broken-axis module (#5979)\n                    axisProto.ordinal2lin = axisProto.val2lin;\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'foundExtremes', onAxisFoundExtremes);\n                    addEvent(AxisClass, 'afterSetScale', onAxisAfterSetScale);\n                    addEvent(AxisClass, 'initialAxisTranslation', onAxisInitialAxisTranslation);\n                }\n                if (composedClasses.indexOf(ChartClass) === -1) {\n                    composedClasses.push(ChartClass);\n                    addEvent(ChartClass, 'pan', onChartPan);\n                }\n                if (composedClasses.indexOf(SeriesClass) === -1) {\n                    composedClasses.push(SeriesClass);\n                    addEvent(SeriesClass, 'updatedData', onSeriesUpdatedData);\n                }\n                /* eslint-enable no-invalid-this */\n                return AxisClass;\n            }\n            OrdinalAxis.compose = compose;\n            /**\n             * In an ordinal axis, there might be areas with dense consentrations of\n             * points, then large gaps between some. Creating equally distributed\n             * ticks over this entire range may lead to a huge number of ticks that\n             * will later be removed. So instead, break the positions up in\n             * segments, find the tick positions for each segment then concatenize\n             * them. This method is used from both data grouping logic and X axis\n             * tick position logic.\n             * @private\n             */\n            function getTimeTicks(normalizedInterval, min, max, startOfWeek, positions, closestDistance, findHigherRanks) {\n                if (positions === void 0) { positions = []; }\n                if (closestDistance === void 0) { closestDistance = 0; }\n                var higherRanks = {},\n                    tickPixelIntervalOption = this.options.tickPixelInterval,\n                    time = this.chart.time, \n                    // Record all the start positions of a segment, to use when\n                    // deciding what's a gap in the data.\n                    segmentStarts = [];\n                var end,\n                    segmentPositions,\n                    hasCrossedHigherRank,\n                    info,\n                    outsideMax,\n                    start = 0,\n                    groupPositions = [],\n                    lastGroupPosition = -Number.MAX_VALUE;\n                // The positions are not always defined, for example for ordinal\n                // positions when data has regular interval (#1557, #2090)\n                if ((!this.options.ordinal && !this.options.breaks) ||\n                    !positions ||\n                    positions.length < 3 ||\n                    typeof min === 'undefined') {\n                    return time.getTimeTicks.apply(time, arguments);\n                }\n                // Analyze the positions array to split it into segments on gaps\n                // larger than 5 times the closest distance. The closest distance is\n                // already found at this point, so we reuse that instead of\n                // computing it again.\n                var posLength = positions.length;\n                for (end = 0; end < posLength; end++) {\n                    outsideMax = end && positions[end - 1] > max;\n                    if (positions[end] < min) { // Set the last position before min\n                        start = end;\n                    }\n                    if (end === posLength - 1 ||\n                        positions[end + 1] - positions[end] > closestDistance * 5 ||\n                        outsideMax) {\n                        // For each segment, calculate the tick positions from the\n                        // getTimeTicks utility function. The interval will be the\n                        // same regardless of how long the segment is.\n                        if (positions[end] > lastGroupPosition) { // #1475\n                            segmentPositions = time.getTimeTicks(normalizedInterval, positions[start], positions[end], startOfWeek);\n                            // Prevent duplicate groups, for example for multiple\n                            // segments within one larger time frame (#1475)\n                            while (segmentPositions.length &&\n                                segmentPositions[0] <= lastGroupPosition) {\n                                segmentPositions.shift();\n                            }\n                            if (segmentPositions.length) {\n                                lastGroupPosition =\n                                    segmentPositions[segmentPositions.length - 1];\n                            }\n                            segmentStarts.push(groupPositions.length);\n                            groupPositions = groupPositions.concat(segmentPositions);\n                        }\n                        // Set start of next segment\n                        start = end + 1;\n                    }\n                    if (outsideMax) {\n                        break;\n                    }\n                }\n                // Get the grouping info from the last of the segments. The info is\n                // the same for all segments.\n                if (segmentPositions) {\n                    info = segmentPositions.info;\n                    // Optionally identify ticks with higher rank, for example\n                    // when the ticks have crossed midnight.\n                    if (findHigherRanks && info.unitRange <= timeUnits.hour) {\n                        end = groupPositions.length - 1;\n                        // Compare points two by two\n                        for (start = 1; start < end; start++) {\n                            if (time.dateFormat('%d', groupPositions[start]) !==\n                                time.dateFormat('%d', groupPositions[start - 1])) {\n                                higherRanks[groupPositions[start]] = 'day';\n                                hasCrossedHigherRank = true;\n                            }\n                        }\n                        // If the complete array has crossed midnight, we want\n                        // to mark the first positions also as higher rank\n                        if (hasCrossedHigherRank) {\n                            higherRanks[groupPositions[0]] = 'day';\n                        }\n                        info.higherRanks = higherRanks;\n                    }\n                    // Save the info\n                    info.segmentStarts = segmentStarts;\n                    groupPositions.info = info;\n                }\n                else {\n                    error(12, false, this.chart);\n                }\n                // Don't show ticks within a gap in the ordinal axis, where the\n                // space between two points is greater than a portion of the tick\n                // pixel interval\n                if (findHigherRanks && defined(tickPixelIntervalOption)) {\n                    var length_1 = groupPositions.length,\n                        translatedArr = [],\n                        distances = [];\n                    var itemToRemove = void 0,\n                        translated = void 0,\n                        lastTranslated = void 0,\n                        medianDistance = void 0,\n                        distance = void 0,\n                        i = length_1;\n                    // Find median pixel distance in order to keep a reasonably even\n                    // distance between ticks (#748)\n                    while (i--) {\n                        translated = this.translate(groupPositions[i]);\n                        if (lastTranslated) {\n                            distances[i] = lastTranslated - translated;\n                        }\n                        translatedArr[i] = lastTranslated = translated;\n                    }\n                    distances.sort();\n                    medianDistance = distances[Math.floor(distances.length / 2)];\n                    if (medianDistance < tickPixelIntervalOption * 0.6) {\n                        medianDistance = null;\n                    }\n                    // Now loop over again and remove ticks where needed\n                    i = groupPositions[length_1 - 1] > max ? length_1 - 1 : length_1; // #817\n                    lastTranslated = void 0;\n                    while (i--) {\n                        translated = translatedArr[i];\n                        distance = Math.abs(lastTranslated - translated);\n                        // #4175 - when axis is reversed, the distance, is negative but\n                        // tickPixelIntervalOption positive, so we need to compare the\n                        // same values\n                        // Remove ticks that are closer than 0.6 times the pixel\n                        // interval from the one to the right, but not if it is close to\n                        // the median distance (#748).\n                        if (lastTranslated &&\n                            distance < tickPixelIntervalOption * 0.8 &&\n                            (medianDistance === null || distance < medianDistance * 0.8)) {\n                            // Is this a higher ranked position with a normal\n                            // position to the right?\n                            if (higherRanks[groupPositions[i]] &&\n                                !higherRanks[groupPositions[i + 1]]) {\n                                // Yes: remove the lower ranked neighbour to the\n                                // right\n                                itemToRemove = i + 1;\n                                lastTranslated = translated; // #709\n                            }\n                            else {\n                                // No: remove this one\n                                itemToRemove = i;\n                            }\n                            groupPositions.splice(itemToRemove, 1);\n                        }\n                        else {\n                            lastTranslated = translated;\n                        }\n                    }\n                }\n                return groupPositions;\n            }\n            /**\n             * Get axis position of given index of the extended ordinal positions.\n             * Used only when panning an ordinal axis.\n             *\n             * @private\n             * @function Highcharts.Axis#index2val\n             * @param {number} index\n             * The index value of searched point\n             */\n            function index2val(index) {\n                var axis = this,\n                    ordinal = axis.ordinal, \n                    // Context could be changed to extendedOrdinalPositions.\n                    ordinalPositions = ordinal.positions;\n                // The visible range contains only equally spaced values.\n                if (!ordinalPositions) {\n                    return index;\n                }\n                var i = ordinalPositions.length - 1,\n                    distance;\n                if (index < 0) { // out of range, in effect panning to the left\n                    index = ordinalPositions[0];\n                }\n                else if (index > i) { // out of range, panning to the right\n                    index = ordinalPositions[i];\n                }\n                else { // split it up\n                    i = Math.floor(index);\n                    distance = index - i; // the decimal\n                }\n                if (typeof distance !== 'undefined' &&\n                    typeof ordinalPositions[i] !== 'undefined') {\n                    return ordinalPositions[i] + (distance ?\n                        distance *\n                            (ordinalPositions[i + 1] - ordinalPositions[i]) :\n                        0);\n                }\n                return index;\n            }\n            /**\n             * Translate from linear (internal) to axis value.\n             *\n             * @private\n             * @function Highcharts.Axis#lin2val\n             * @param {number} val\n             * The linear abstracted value.\n             */\n            function lin2val(val) {\n                var axis = this,\n                    ordinal = axis.ordinal,\n                    localMin = axis.old ? axis.old.min : axis.min,\n                    localA = axis.old ? axis.old.transA : axis.transA;\n                var positions = ordinal.positions; // for the current visible range\n                    // The visible range contains only equally spaced values.\n                    if (!positions) {\n                        return val;\n                }\n                // Convert back from modivied value to pixels. // #15970\n                var pixelVal = (val - localMin) * localA +\n                        axis.minPixelPadding,\n                    isInside = pixelVal > 0 && pixelVal < axis.left + axis.len;\n                // If the value is not inside the plot area, use the extended positions.\n                // (array contains also points that are outside of the plotArea).\n                if (!isInside) {\n                    // When iterating for the first time,\n                    // get the extended ordinal positional and assign them.\n                    if (!ordinal.extendedOrdinalPositions) {\n                        ordinal.extendedOrdinalPositions = (ordinal.getExtendedPositions());\n                    }\n                    positions = ordinal.extendedOrdinalPositions;\n                }\n                // In some cases (especially in early stages of the chart creation) the\n                // getExtendedPositions might return undefined.\n                if (positions && positions.length) {\n                    var index = ordinal.getIndexOfPoint(pixelVal,\n                        positions),\n                        mantissa = correctFloat(index % 1);\n                    // Check if the index is inside position array. If true,\n                    // read/approximate value for that exact index.\n                    if (index >= 0 && index < positions.length - 1) {\n                        var leftNeighbour = positions[Math.floor(index)],\n                            rightNeighbour = positions[Math.ceil(index)],\n                            distance = rightNeighbour - leftNeighbour;\n                        return positions[Math.floor(index)] + mantissa * distance;\n                    }\n                    // For cases when the index is not in the extended ordinal position\n                    // array, like when the value we are looking for exceed the\n                    // available data, approximate that value based on the calculated\n                    // slope.\n                    var positionsLength = positions.length,\n                        firstPositionsValue = positions[0],\n                        lastPositionsValue = positions[positionsLength - 1],\n                        slope = (lastPositionsValue - firstPositionsValue) / (positionsLength - 1);\n                    if (index < 0) {\n                        return firstPositionsValue + slope * index;\n                    }\n                    return lastPositionsValue + slope * (index - positionsLength);\n                }\n                return val;\n            }\n            /**\n             * Internal function to calculate the precise index in ordinalPositions\n             * array.\n             * @private\n             */\n            function getIndexInArray(ordinalPositions, val) {\n                var index = OrdinalAxis.Additions.findIndexOf(ordinalPositions,\n                    val,\n                    true);\n                if (ordinalPositions[index] === val) {\n                    return index;\n                }\n                var percent = (val - ordinalPositions[index]) /\n                        (ordinalPositions[index + 1] - ordinalPositions[index]);\n                return index + percent;\n            }\n            /**\n            * @private\n            */\n            function onAxisAfterInit() {\n                var axis = this;\n                if (!axis.ordinal) {\n                    axis.ordinal = new OrdinalAxis.Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisFoundExtremes() {\n                var axis = this;\n                if (axis.isXAxis &&\n                    defined(axis.options.overscroll) &&\n                    axis.max === axis.dataMax &&\n                    (\n                    // Panning is an execption. We don't want to apply\n                    // overscroll when panning over the dataMax\n                    !axis.chart.mouseIsDown ||\n                        axis.isInternal) && (\n                // Scrollbar buttons are the other execption:\n                !axis.eventArgs ||\n                    axis.eventArgs && axis.eventArgs.trigger !== 'navigator')) {\n                    axis.max += axis.options.overscroll;\n                    // Live data and buttons require translation for the min:\n                    if (!axis.isInternal && defined(axis.userMin)) {\n                        axis.min += axis.options.overscroll;\n                    }\n                }\n            }\n            /**\n             * For ordinal axis, that loads data async, redraw axis after data is\n             * loaded. If we don't do that, axis will have the same extremes as\n             * previously, but ordinal positions won't be calculated. See #10290\n             * @private\n             */\n            function onAxisAfterSetScale() {\n                var axis = this;\n                if (axis.horiz && !axis.isDirty) {\n                    axis.isDirty = axis.isOrdinal &&\n                        axis.chart.navigator &&\n                        !axis.chart.navigator.adaptToUpdatedData;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInitialAxisTranslation() {\n                var axis = this;\n                if (axis.ordinal) {\n                    axis.ordinal.beforeSetTickPositions();\n                    axis.tickInterval = axis.ordinal.postProcessTickInterval(axis.tickInterval);\n                }\n            }\n            /**\n             * Extending the Chart.pan method for ordinal axes\n             * @private\n             */\n            function onChartPan(e) {\n                var chart = this,\n                    xAxis = chart.xAxis[0],\n                    overscroll = xAxis.options.overscroll,\n                    chartX = e.originalEvent.chartX,\n                    panning = chart.options.chart.panning;\n                var runBase = false;\n                if (panning &&\n                    panning.type !== 'y' &&\n                    xAxis.options.ordinal &&\n                    xAxis.series.length) {\n                    var mouseDownX = chart.mouseDownX,\n                        extremes = xAxis.getExtremes(),\n                        dataMax = extremes.dataMax,\n                        min = extremes.min,\n                        max = extremes.max,\n                        hoverPoints = chart.hoverPoints,\n                        closestPointRange = (xAxis.closestPointRange ||\n                            (xAxis.ordinal && xAxis.ordinal.overscrollPointsRange)),\n                        pointPixelWidth = (xAxis.translationSlope *\n                            (xAxis.ordinal.slope || closestPointRange)), \n                        // how many ordinal units did we move?\n                        movedUnits = (mouseDownX - chartX) / pointPixelWidth, \n                        // get index of all the chart's points\n                        extendedAxis = {\n                            ordinal: {\n                                positions: xAxis.ordinal.getExtendedPositions()\n                            }\n                        },\n                        index2val_1 = xAxis.index2val,\n                        val2lin_1 = xAxis.val2lin;\n                    var trimmedRange = void 0,\n                        ordinalPositions = void 0,\n                        searchAxisLeft = void 0,\n                        searchAxisRight = void 0;\n                    // we have an ordinal axis, but the data is equally spaced\n                    if (!extendedAxis.ordinal.positions) {\n                        runBase = true;\n                    }\n                    else if (Math.abs(movedUnits) > 1) {\n                        // Remove active points for shared tooltip\n                        if (hoverPoints) {\n                            hoverPoints.forEach(function (point) {\n                                point.setState();\n                            });\n                        }\n                        if (movedUnits < 0) {\n                            searchAxisLeft = extendedAxis;\n                            searchAxisRight = xAxis.ordinal.positions ?\n                                xAxis : extendedAxis;\n                        }\n                        else {\n                            searchAxisLeft = xAxis.ordinal.positions ?\n                                xAxis : extendedAxis;\n                            searchAxisRight = extendedAxis;\n                        }\n                        // In grouped data series, the last ordinal position represents\n                        // the grouped data, which is to the left of the real data max.\n                        // If we don't compensate for this, we will be allowed to pan\n                        // grouped data series passed the right of the plot area.\n                        ordinalPositions = searchAxisRight.ordinal.positions;\n                        if (dataMax >\n                            ordinalPositions[ordinalPositions.length - 1]) {\n                            ordinalPositions.push(dataMax);\n                        }\n                        // Get the new min and max values by getting the ordinal index\n                        // for the current extreme, then add the moved units and\n                        // translate back to values. This happens on the extended\n                        // ordinal positions if the new position is out of range, else\n                        // it happens on the current x axis which is smaller and faster.\n                        chart.fixedRange = max - min;\n                        trimmedRange = xAxis.navigatorAxis\n                            .toFixedRange(void 0, void 0, index2val_1.apply(searchAxisLeft, [\n                            val2lin_1.apply(searchAxisLeft, [min, true]) +\n                                movedUnits\n                        ]), index2val_1.apply(searchAxisRight, [\n                            val2lin_1.apply(searchAxisRight, [max, true]) +\n                                movedUnits\n                        ]));\n                        // Apply it if it is within the available data range\n                        if (trimmedRange.min >= Math.min(extremes.dataMin, min) &&\n                            trimmedRange.max <= Math.max(dataMax, max) +\n                                overscroll) {\n                            xAxis.setExtremes(trimmedRange.min, trimmedRange.max, true, false, { trigger: 'pan' });\n                        }\n                        chart.mouseDownX = chartX; // set new reference for next run\n                        css(chart.container, { cursor: 'move' });\n                    }\n                }\n                else {\n                    runBase = true;\n                }\n                // revert to the linear chart.pan version\n                if (runBase || (panning && /y/.test(panning.type))) {\n                    if (overscroll) {\n                        xAxis.max = xAxis.dataMax + overscroll;\n                    }\n                }\n                else {\n                    e.preventDefault();\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesUpdatedData() {\n                var xAxis = this.xAxis;\n                // Destroy the extended ordinal index on updated data\n                // and destroy extendedOrdinalPositions, #16055.\n                if (xAxis && xAxis.options.ordinal) {\n                    delete xAxis.ordinal.index;\n                    delete xAxis.ordinal.extendedOrdinalPositions;\n                }\n            }\n            /**\n             * Translate from a linear axis value to the corresponding ordinal axis\n             * position. If there are no gaps in the ordinal axis this will be the\n             * same. The translated value is the value that the point would have if\n             * the axis was linear, using the same min and max.\n             *\n             * @private\n             * @function Highcharts.Axis#val2lin\n             * @param {number} val\n             * The axis value.\n             * @param {boolean} [toIndex]\n             * Whether to return the index in the ordinalPositions or the new value.\n             */\n            function val2lin(val, toIndex) {\n                var axis = this,\n                    ordinal = axis.ordinal,\n                    ordinalPositions = ordinal.positions;\n                var slope = ordinal.slope,\n                    extendedOrdinalPositions = ordinal.extendedOrdinalPositions;\n                if (!ordinalPositions) {\n                    return val;\n                }\n                var ordinalLength = ordinalPositions.length;\n                var ordinalIndex;\n                // If the searched value is inside visible plotArea, ivastigate the\n                // value basing on ordinalPositions.\n                if (ordinalPositions[0] <= val &&\n                    ordinalPositions[ordinalLength - 1] >= val) {\n                    ordinalIndex = getIndexInArray(ordinalPositions, val);\n                    // final return value is based on ordinalIndex\n                }\n                else {\n                    if (!extendedOrdinalPositions) {\n                        extendedOrdinalPositions =\n                            ordinal.getExtendedPositions &&\n                                ordinal.getExtendedPositions();\n                        ordinal.extendedOrdinalPositions = extendedOrdinalPositions;\n                    }\n                    if (!(extendedOrdinalPositions && extendedOrdinalPositions.length)) {\n                        return val;\n                    }\n                    var length_2 = extendedOrdinalPositions.length;\n                    if (!slope) {\n                        slope =\n                            (extendedOrdinalPositions[length_2 - 1] -\n                                extendedOrdinalPositions[0]) /\n                                length_2;\n                    }\n                    // OriginalPointReference is equal to the index of\n                    // first point of ordinalPositions in extendedOrdinalPositions.\n                    var originalPositionsReference = getIndexInArray(extendedOrdinalPositions,\n                        ordinalPositions[0]);\n                    // If the searched value is outside the visiblePlotArea,\n                    // check if it is inside extendedOrdinalPositions.\n                    if (val >= extendedOrdinalPositions[0] &&\n                        val <=\n                            extendedOrdinalPositions[length_2 - 1]) {\n                        // Return Value\n                        ordinalIndex = getIndexInArray(extendedOrdinalPositions, val) -\n                            originalPositionsReference;\n                    }\n                    else {\n                        // Since ordinal.slope is the average distance between 2\n                        // points on visible plotArea, this can be used to calculete\n                        // the approximate position of the point, which is outside\n                        // the extededOrdinalPositions.\n                        if (val < extendedOrdinalPositions[0]) {\n                            var diff = extendedOrdinalPositions[0] - val,\n                                approximateIndexOffset = diff / slope;\n                            ordinalIndex =\n                                -originalPositionsReference -\n                                    approximateIndexOffset;\n                        }\n                        else {\n                            var diff = val -\n                                    extendedOrdinalPositions[length_2 - 1],\n                                approximateIndexOffset = diff / slope;\n                            ordinalIndex =\n                                approximateIndexOffset +\n                                    length_2 -\n                                    originalPositionsReference;\n                        }\n                    }\n                }\n                return toIndex ? ordinalIndex : slope * (ordinalIndex || 0) +\n                    ordinal.offset;\n            }\n            /* *\n             *\n             *  Classes\n             *\n             * */\n            /**\n             * @private\n             */\n            var Additions = /** @class */ (function () {\n                    /* *\n                     *\n                     *  Constructors\n                     *\n                     * */\n                    /**\n                     * @private\n                     */\n                    function Additions(axis) {\n                        this.index = {};\n                    this.axis = axis;\n                }\n                /* *\n                *\n                *  Functions\n                *\n                * */\n                /**\n                 * Calculate the ordinal positions before tick positions are calculated.\n                 * @private\n                 */\n                Additions.prototype.beforeSetTickPositions = function () {\n                    var axis = this.axis,\n                        ordinal = axis.ordinal,\n                        extremes = axis.getExtremes(),\n                        min = extremes.min,\n                        max = extremes.max,\n                        hasBreaks = axis.isXAxis && !!axis.options.breaks,\n                        isOrdinal = axis.options.ordinal,\n                        ignoreHiddenSeries = axis.chart.options.chart.ignoreHiddenSeries;\n                    var len,\n                        uniqueOrdinalPositions,\n                        dist,\n                        minIndex,\n                        maxIndex,\n                        slope,\n                        i,\n                        ordinalPositions = [],\n                        overscrollPointsRange = Number.MAX_VALUE,\n                        useOrdinal = false;\n                    // Apply the ordinal logic\n                    if (isOrdinal || hasBreaks) { // #4167 YAxis is never ordinal ?\n                        axis.series.forEach(function (series, i) {\n                            uniqueOrdinalPositions = [];\n                            if ((!ignoreHiddenSeries || series.visible !== false) &&\n                                (series\n                                    .takeOrdinalPosition !== false ||\n                                    hasBreaks)) {\n                                // concatenate the processed X data into the existing\n                                // positions, or the empty array\n                                ordinalPositions = ordinalPositions.concat(series.processedXData);\n                                len = ordinalPositions.length;\n                                // remove duplicates (#1588)\n                                ordinalPositions.sort(function (a, b) {\n                                    // without a custom function it is sorted as strings\n                                    return a - b;\n                                });\n                                overscrollPointsRange = Math.min(overscrollPointsRange, pick(\n                                // Check for a single-point series:\n                                series.closestPointRange, overscrollPointsRange));\n                                if (len) {\n                                    i = 0;\n                                    while (i < len - 1) {\n                                        if (ordinalPositions[i] !==\n                                            ordinalPositions[i + 1]) {\n                                            uniqueOrdinalPositions.push(ordinalPositions[i + 1]);\n                                        }\n                                        i++;\n                                    }\n                                    // Check first item:\n                                    if (uniqueOrdinalPositions[0] !==\n                                        ordinalPositions[0]) {\n                                        uniqueOrdinalPositions.unshift(ordinalPositions[0]);\n                                    }\n                                    ordinalPositions = uniqueOrdinalPositions;\n                                }\n                            }\n                        });\n                        // cache the length\n                        len = ordinalPositions.length;\n                        // Check if we really need the overhead of mapping axis data\n                        // against the ordinal positions. If the series consist of\n                        // evenly spaced data any way, we don't need any ordinal logic.\n                        if (len > 2) { // two points have equal distance by default\n                            dist = ordinalPositions[1] - ordinalPositions[0];\n                            i = len - 1;\n                            while (i-- && !useOrdinal) {\n                                if (ordinalPositions[i + 1] - ordinalPositions[i] !==\n                                    dist) {\n                                    useOrdinal = true;\n                                }\n                            }\n                            // When zooming in on a week, prevent axis padding for\n                            // weekends even though the data within the week is evenly\n                            // spaced.\n                            if (!axis.options.keepOrdinalPadding &&\n                                (ordinalPositions[0] - min > dist ||\n                                    (max -\n                                        ordinalPositions[ordinalPositions.length - 1]) > dist)) {\n                                useOrdinal = true;\n                            }\n                        }\n                        else if (axis.options.overscroll) {\n                            if (len === 2) {\n                                // Exactly two points, distance for overscroll is fixed:\n                                overscrollPointsRange =\n                                    ordinalPositions[1] - ordinalPositions[0];\n                            }\n                            else if (len === 1) {\n                                // We have just one point, closest distance is unknown.\n                                // Assume then it is last point and overscrolled range:\n                                overscrollPointsRange = axis.options.overscroll;\n                                ordinalPositions = [\n                                    ordinalPositions[0],\n                                    ordinalPositions[0] + overscrollPointsRange\n                                ];\n                            }\n                            else {\n                                // In case of zooming in on overscrolled range, stick to\n                                // the old range:\n                                overscrollPointsRange = ordinal.overscrollPointsRange;\n                            }\n                        }\n                        // Record the slope and offset to compute the linear values from\n                        // the array index. Since the ordinal positions may exceed the\n                        // current range, get the start and end positions within it\n                        // (#719, #665b)\n                        if (useOrdinal || axis.forceOrdinal) {\n                            if (axis.options.overscroll) {\n                                ordinal.overscrollPointsRange = overscrollPointsRange;\n                                ordinalPositions = ordinalPositions.concat(ordinal.getOverscrollPositions());\n                            }\n                            // Register\n                            ordinal.positions = ordinalPositions;\n                            // This relies on the ordinalPositions being set. Use\n                            // Math.max and Math.min to prevent padding on either sides\n                            // of the data.\n                            minIndex = axis.ordinal2lin(// #5979\n                            Math.max(min, ordinalPositions[0]), true);\n                            maxIndex = Math.max(axis.ordinal2lin(Math.min(max, ordinalPositions[ordinalPositions.length - 1]), true), 1); // #3339\n                            // Set the slope and offset of the values compared to the\n                            // indices in the ordinal positions\n                            ordinal.slope = slope = (max - min) / (maxIndex - minIndex);\n                            ordinal.offset = min - (minIndex * slope);\n                        }\n                        else {\n                            ordinal.overscrollPointsRange = pick(axis.closestPointRange, ordinal.overscrollPointsRange);\n                            ordinal.positions = axis.ordinal.slope = ordinal.offset =\n                                void 0;\n                        }\n                    }\n                    axis.isOrdinal = isOrdinal && useOrdinal; // #3818, #4196, #4926\n                    ordinal.groupIntervalFactor = null; // reset for next run\n                };\n                /**\n                 * Faster way of using the Array.indexOf method.\n                 * Works for sorted arrays only with unique values.\n                 *\n                 * @param {Array} sortedArray\n                 *        The sorted array inside which we are looking for.\n                 * @param {number} key\n                 *        The key to being found.\n                 * @param {boolean} indirectSearch\n                 *        In case of lack of the point in the array, should return\n                 *        value be equal to -1 or the closest smaller index.\n                 *  @private\n                 */\n                Additions.findIndexOf = function (sortedArray, key, indirectSearch) {\n                    var start = 0,\n                        end = sortedArray.length - 1,\n                        middle;\n                    while (start < end) {\n                        middle = Math.ceil((start + end) / 2);\n                        // Key found as the middle element.\n                        if (sortedArray[middle] <= key) {\n                            // Continue searching to the right.\n                            start = middle;\n                        }\n                        else {\n                            // Continue searching to the left.\n                            end = middle - 1;\n                        }\n                    }\n                    if (sortedArray[start] === key) {\n                        return start;\n                    }\n                    // Key could not be found.\n                    return !indirectSearch ? -1 : start;\n                };\n                /**\n                 * Get the ordinal positions for the entire data set. This is necessary\n                 * in chart panning because we need to find out what points or data\n                 * groups are available outside the visible range. When a panning\n                 * operation starts, if an index for the given grouping does not exists,\n                 * it is created and cached. This index is deleted on updated data, so\n                 * it will be regenerated the next time a panning operation starts.\n                 * @private\n                 */\n                Additions.prototype.getExtendedPositions = function () {\n                    var ordinal = this,\n                        axis = ordinal.axis,\n                        axisProto = axis.constructor.prototype,\n                        chart = axis.chart,\n                        grouping = axis.series[0].currentDataGrouping,\n                        key = grouping ?\n                            grouping.count + grouping.unitName :\n                            'raw',\n                        overscroll = axis.options.overscroll,\n                        extremes = axis.getExtremes();\n                    var fakeAxis,\n                        fakeSeries = void 0,\n                        ordinalIndex = ordinal.index;\n                    // If this is the first time, or the ordinal index is deleted by\n                    // updatedData,\n                    // create it.\n                    if (!ordinalIndex) {\n                        ordinalIndex = ordinal.index = {};\n                    }\n                    if (!ordinalIndex[key]) {\n                        // Create a fake axis object where the extended ordinal\n                        // positions are emulated\n                        fakeAxis = {\n                            series: [],\n                            chart: chart,\n                            forceOrdinal: false,\n                            getExtremes: function () {\n                                return {\n                                    min: extremes.dataMin,\n                                    max: extremes.dataMax + overscroll\n                                };\n                            },\n                            getGroupPixelWidth: axisProto.getGroupPixelWidth,\n                            getTimeTicks: axisProto.getTimeTicks,\n                            options: {\n                                ordinal: true\n                            },\n                            ordinal: {\n                                getGroupIntervalFactor: this.getGroupIntervalFactor\n                            },\n                            ordinal2lin: axisProto.ordinal2lin,\n                            getIndexOfPoint: axisProto.getIndexOfPoint,\n                            val2lin: axisProto.val2lin // #2590\n                        };\n                        fakeAxis.ordinal.axis = fakeAxis;\n                        // Add the fake series to hold the full data, then apply\n                        // processData to it\n                        axis.series.forEach(function (series) {\n                            fakeSeries = {\n                                xAxis: fakeAxis,\n                                xData: series.xData.slice(),\n                                chart: chart,\n                                destroyGroupedData: H.noop,\n                                getProcessedData: Series.prototype.getProcessedData,\n                                applyGrouping: Series.prototype.applyGrouping\n                            };\n                            fakeSeries.xData = fakeSeries.xData.concat(ordinal.getOverscrollPositions());\n                            fakeSeries.options = {\n                                dataGrouping: grouping ? {\n                                    firstAnchor: 'firstPoint',\n                                    anchor: 'middle',\n                                    lastAnchor: 'lastPoint',\n                                    enabled: true,\n                                    forced: true,\n                                    // doesn't matter which, use the fastest\n                                    approximation: 'open',\n                                    units: [[\n                                            grouping.unitName,\n                                            [grouping.count]\n                                        ]]\n                                } : {\n                                    enabled: false\n                                }\n                            };\n                            fakeAxis.series.push(fakeSeries);\n                            series.processData.apply(fakeSeries);\n                        });\n                        // Force to use the ordinal when points are evenly spaced (e.g.\n                        // weeks), #3825.\n                        if ((fakeSeries.closestPointRange !==\n                            fakeSeries.basePointRange) &&\n                            fakeSeries.currentDataGrouping) {\n                            fakeAxis.forceOrdinal = true;\n                        }\n                        // Run beforeSetTickPositions to compute the ordinalPositions\n                        axis.ordinal.beforeSetTickPositions.apply({ axis: fakeAxis });\n                        // Cache it\n                        ordinalIndex[key] = fakeAxis.ordinal.positions;\n                    }\n                    return ordinalIndex[key];\n                };\n                /**\n                 * Find the factor to estimate how wide the plot area would have been if\n                 * ordinal gaps were included. This value is used to compute an imagined\n                 * plot width in order to establish the data grouping interval.\n                 *\n                 * A real world case is the intraday-candlestick example. Without this\n                 * logic, it would show the correct data grouping when viewing a range\n                 * within each day, but once moving the range to include the gap between\n                 * two days, the interval would include the cut-away night hours and the\n                 * data grouping would be wrong. So the below method tries to compensate\n                 * by identifying the most common point interval, in this case days.\n                 *\n                 * An opposite case is presented in issue #718. We have a long array of\n                 * daily data, then one point is appended one hour after the last point.\n                 * We expect the data grouping not to change.\n                 *\n                 * In the future, if we find cases where this estimation doesn't work\n                 * optimally, we might need to add a second pass to the data grouping\n                 * logic, where we do another run with a greater interval if the number\n                 * of data groups is more than a certain fraction of the desired group\n                 * count.\n                 * @private\n                 */\n                Additions.prototype.getGroupIntervalFactor = function (xMin, xMax, series) {\n                    var ordinal = this,\n                        axis = ordinal.axis,\n                        processedXData = series.processedXData,\n                        len = processedXData.length,\n                        distances = [];\n                    var median,\n                        i,\n                        groupIntervalFactor = ordinal.groupIntervalFactor;\n                    // Only do this computation for the first series, let the other\n                    // inherit it (#2416)\n                    if (!groupIntervalFactor) {\n                        // Register all the distances in an array\n                        for (i = 0; i < len - 1; i++) {\n                            distances[i] = (processedXData[i + 1] -\n                                processedXData[i]);\n                        }\n                        // Sort them and find the median\n                        distances.sort(function (a, b) {\n                            return a - b;\n                        });\n                        median = distances[Math.floor(len / 2)];\n                        // Compensate for series that don't extend through the entire\n                        // axis extent. #1675.\n                        xMin = Math.max(xMin, processedXData[0]);\n                        xMax = Math.min(xMax, processedXData[len - 1]);\n                        ordinal.groupIntervalFactor = groupIntervalFactor =\n                            (len * median) / (xMax - xMin);\n                    }\n                    // Return the factor needed for data grouping\n                    return groupIntervalFactor;\n                };\n                /**\n                 * Get index of point inside the ordinal positions array.\n                 *\n                 * @private\n                 * @param {number} val\n                 * The pixel value of a point.\n                 *\n                 * @param {Array<number>} [ordinallArray]\n                 * An array of all points available on the axis for the given data set.\n                 * Either ordinalPositions if the value is inside the plotArea or\n                 * extendedOrdinalPositions if not.\n                 */\n                Additions.prototype.getIndexOfPoint = function (val, ordinalArray) {\n                    var ordinal = this,\n                        axis = ordinal.axis,\n                        firstPointVal = ordinal.positions ? ordinal.positions[0] : 0;\n                    var firstPointX = axis.series[0].points &&\n                            axis.series[0].points[0] &&\n                            axis.series[0].points[0].plotX ||\n                            axis.minPixelPadding; // #15987\n                        // When more series assign to axis, find the smallest one, #15987.\n                        if (axis.series.length > 1) {\n                            axis.series.forEach(function (series) {\n                                if (series.points &&\n                                    defined(series.points[0]) &&\n                                    defined(series.points[0].plotX) &&\n                                    series.points[0].plotX < firstPointX) {\n                                    firstPointX = series.points[0].plotX;\n                            }\n                        });\n                    }\n                    // Distance in pixels between two points on the ordinal axis in the\n                    // current zoom.\n                    var ordinalPointPixelInterval = axis.translationSlope * (ordinal.slope ||\n                            axis.closestPointRange ||\n                            ordinal.overscrollPointsRange), \n                        // toValue for the first point.\n                        shiftIndex = (val - firstPointX) / ordinalPointPixelInterval;\n                    return Additions.findIndexOf(ordinalArray, firstPointVal) + shiftIndex;\n                };\n                /**\n                 * Get ticks for an ordinal axis within a range where points don't\n                 * exist. It is required when overscroll is enabled. We can't base on\n                 * points, because we may not have any, so we use approximated\n                 * pointRange and generate these ticks between Axis.dataMax,\n                 * Axis.dataMax + Axis.overscroll evenly spaced. Used in panning and\n                 * navigator scrolling.\n                 * @private\n                 */\n                Additions.prototype.getOverscrollPositions = function () {\n                    var ordinal = this,\n                        axis = ordinal.axis,\n                        extraRange = axis.options.overscroll,\n                        distance = ordinal.overscrollPointsRange,\n                        positions = [],\n                        max = axis.dataMax;\n                    if (defined(distance)) {\n                        // Max + pointRange because we need to scroll to the last\n                        while (max <= axis.dataMax + extraRange) {\n                            max += distance;\n                            positions.push(max);\n                        }\n                    }\n                    return positions;\n                };\n                /**\n                 * Make the tick intervals closer because the ordinal gaps make the\n                 * ticks spread out or cluster.\n                 * @private\n                 */\n                Additions.prototype.postProcessTickInterval = function (tickInterval) {\n                    // Problem: https://jsfiddle.net/highcharts/FQm4E/1/. This is a case\n                    // where this algorithm doesn't work optimally. In this case, the\n                    // tick labels are spread out per week, but all the gaps reside\n                    // within weeks. So we have a situation where the labels are courser\n                    // than the ordinal gaps, and thus the tick interval should not be\n                    // altered.\n                    var ordinal = this,\n                        axis = ordinal.axis,\n                        ordinalSlope = ordinal.slope;\n                    var ret;\n                    if (ordinalSlope) {\n                        if (!axis.options.breaks) {\n                            ret = (tickInterval /\n                                (ordinalSlope / axis.closestPointRange));\n                        }\n                        else {\n                            ret = axis.closestPointRange || tickInterval; // #7275\n                        }\n                    }\n                    else {\n                        ret = tickInterval;\n                    }\n                    return ret;\n                };\n                return Additions;\n            }());\n            OrdinalAxis.Additions = Additions;\n        })(OrdinalAxis || (OrdinalAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OrdinalAxis;\n    });\n    _registerModule(_modules, 'Series/DataModifyComposition.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Series/Point.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (Axis, Point, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var pointTooltipFormatter = Point.prototype.tooltipFormatter;\n        var addEvent = U.addEvent,\n            arrayMax = U.arrayMax,\n            arrayMin = U.arrayMin,\n            correctFloat = U.correctFloat,\n            defined = U.defined,\n            isArray = U.isArray,\n            isNumber = U.isNumber,\n            isString = U.isString,\n            pick = U.pick;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var DataModifyComposition;\n        (function (DataModifyComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            var composedClasses = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Extends the series, axis and point classes with\n             * compare and cumulative support.\n             *\n             * @private\n             *\n             * @param SeriesClass\n             * Series class to use.\n             *\n             * @param AxisClass\n             * Axis class to extend.\n             *\n             * @param PointClass\n             * Point class to use.\n             */\n            function compose(SeriesClass, AxisClass, PointClass) {\n                if (composedClasses.indexOf(SeriesClass) === -1) {\n                    composedClasses.push(SeriesClass);\n                    var seriesProto = SeriesClass.prototype;\n                    seriesProto.setCompare = seriesSetCompare;\n                    seriesProto.setCumulative = seriesSetCumulative;\n                    addEvent(SeriesClass, 'afterInit', afterInit);\n                    addEvent(SeriesClass, 'afterGetExtremes', afterGetExtremes);\n                    addEvent(SeriesClass, 'afterProcessData', afterProcessData);\n                }\n                if (composedClasses.indexOf(AxisClass) === -1) {\n                    composedClasses.push(AxisClass);\n                    var axisProto = AxisClass.prototype;\n                    axisProto.setCompare = axisSetCompare;\n                    axisProto.setModifier = setModifier;\n                    axisProto.setCumulative = axisSetCumulative;\n                }\n                if (composedClasses.indexOf(PointClass) === -1) {\n                    composedClasses.push(PointClass);\n                    var pointProto = PointClass.prototype;\n                    pointProto.tooltipFormatter = tooltipFormatter;\n                }\n                return SeriesClass;\n            }\n            DataModifyComposition.compose = compose;\n            /* ********************************************************************** *\n             *  Start shared compare and cumulative logic                             *\n             * ********************************************************************** */\n            /**\n             * Shared code for the axis.setCompare() and the axis.setCumulative()\n             * methods. Inits the 'compare' or the 'cumulative' mode.\n             * @private\n             */\n            function setModifier(mode, modeState, redraw) {\n                if (!this.isXAxis) {\n                    this.series.forEach(function (series) {\n                        if (mode === 'compare' &&\n                            typeof modeState !== 'boolean') {\n                            series.setCompare(modeState, false);\n                        }\n                        else if (mode === 'cumulative' &&\n                            !isString(modeState)) {\n                            series.setCumulative(modeState, false);\n                        }\n                    });\n                    if (pick(redraw, true)) {\n                        this.chart.redraw();\n                    }\n                }\n            }\n            /**\n             * Extend the tooltip formatter by adding support for the point.change\n             * variable as well as the changeDecimals option.\n             *\n             * @ignore\n             * @function Highcharts.Point#tooltipFormatter\n             *\n             * @param {string} pointFormat\n             */\n            function tooltipFormatter(pointFormat) {\n                var point = this, numberFormatter = point.series.chart.numberFormatter, replace = function (value) {\n                        pointFormat = pointFormat.replace('{point.' + value + '}', (point[value] > 0 && value === 'change' ? '+' : '') +\n                            numberFormatter(point[value], pick(point.series.tooltipOptions.changeDecimals, 2)));\n                };\n                if (defined(point.change)) {\n                    replace('change');\n                }\n                if (defined(point.cumulativeSum)) {\n                    replace('cumulativeSum');\n                }\n                return pointTooltipFormatter.apply(this, [pointFormat]);\n            }\n            /**\n             * Extend series.init by adding a methods to modify the y values used\n             * for plotting on the y axis. For compare mode, this method is called both\n             * from the axis when finding dataMin and dataMax,\n             * and from the series.translate method.\n             *\n             * @ignore\n             * @function Highcharts.Series#init\n             */\n            function afterInit() {\n                var compare = this.options.compare;\n                var dataModify;\n                if (compare === 'percent' ||\n                    compare === 'value' ||\n                    this.options.cumulative) {\n                    dataModify = new Additions(this);\n                    if (compare === 'percent' || compare === 'value') {\n                        // Set comparison mode\n                        dataModify.initCompare(compare);\n                    }\n                    else {\n                        // Set Cumulative Sum mode\n                        dataModify.initCumulative();\n                    }\n                }\n                this.dataModify = dataModify;\n            }\n            /**\n             * Adjust the extremes (compare and cumulative modify the data).\n             * @private\n             */\n            function afterGetExtremes(e) {\n                var dataExtremes = e.dataExtremes,\n                    activeYData = dataExtremes.activeYData;\n                if (this.dataModify && dataExtremes) {\n                    var extremes = void 0;\n                    if (this.options.compare) {\n                        extremes = [\n                            this.dataModify.modifyValue(dataExtremes.dataMin),\n                            this.dataModify.modifyValue(dataExtremes.dataMax)\n                        ];\n                    }\n                    else if (this.options.cumulative &&\n                        isArray(activeYData) &&\n                        // If only one y visible, sum doesn't change\n                        // so no need to change extremes\n                        activeYData.length >= 2) {\n                        extremes = Additions.getCumulativeExtremes(activeYData);\n                    }\n                    if (extremes) {\n                        dataExtremes.dataMin = arrayMin(extremes);\n                        dataExtremes.dataMax = arrayMax(extremes);\n                    }\n                }\n            }\n            /* ********************************************************************** *\n             *  End shared compare and cumulative logic                               *\n             * ********************************************************************** */\n            /* ********************************************************************** *\n             *  Start value compare logic                                             *\n             * ********************************************************************** */\n            /**\n             * Highcharts Stock only. Set the\n             * [compare](https://api.highcharts.com/highstock/plotOptions.series.compare)\n             * mode of the series after render time.\n             * In most cases it is more useful running\n             * {@link Axis#setCompare} on the X axis to update all its series.\n             *\n             * @function Highcharts.Series#setCompare\n             *\n             * @param {string|null} [compare]\n             *        Can be one of `undefined` (default), `null`, `\"percent\"`\n             *        or `\"value\"`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function seriesSetCompare(compare, redraw) {\n                // Survive to export, #5485 (and for options generally)\n                this.options.compare = this.userOptions.compare = compare;\n                // Fire series.init() that will set or delete series.dataModify\n                this.update({}, pick(redraw, true));\n                if (this.dataModify && (compare === 'value' || compare === 'percent')) {\n                    this.dataModify.initCompare(compare);\n                }\n                else {\n                    // When disabling, clear the points\n                    this.points.forEach(function (point) {\n                        delete point.change;\n                    });\n                }\n            }\n            /**\n             * Extend series.processData by finding the first y value in the plot area,\n             * used for comparing the following values\n             *\n             * @ignore\n             * @function Highcharts.Series#processData\n             */\n            function afterProcessData() {\n                var series = this;\n                if (series.xAxis && // not pies\n                    series.processedYData &&\n                    series.dataModify) {\n                    var processedXData = series.processedXData,\n                        processedYData = series.processedYData,\n                        length_1 = processedYData.length,\n                        compareStart = series.options.compareStart === true ? 0 : 1;\n                    var keyIndex = -1,\n                        i = void 0;\n                    // For series with more than one value (range, OHLC etc), compare\n                    // against close or the pointValKey (#4922, #3112, #9854)\n                    if (series.pointArrayMap) {\n                        keyIndex = series.pointArrayMap.indexOf(series.options.pointValKey || series.pointValKey || 'y');\n                    }\n                    // find the first value for comparison\n                    for (i = 0; i < length_1 - compareStart; i++) {\n                        var compareValue = processedYData[i] && keyIndex > -1 ?\n                                processedYData[i][keyIndex] : processedYData[i];\n                        if (isNumber(compareValue) &&\n                            compareValue !== 0 &&\n                            processedXData[i + compareStart] >= (series.xAxis.min || 0)) {\n                            series.dataModify.compareValue = compareValue;\n                            break;\n                        }\n                    }\n                }\n            }\n            /**\n             * Highcharts Stock only. Set the compare mode on all series\n             * belonging to a Y axis.\n             *\n             * @see [plotOptions.series.compare](https://api.highcharts.com/highstock/plotOptions.series.compare)\n             *\n             * @sample stock/members/axis-setcompare/\n             *         Set compare\n             *\n             * @function Highcharts.Axis#setCompare\n             *\n             * @param {string|null} [compare]\n             *        The compare mode. Can be one of `undefined` (default), `null`,\n             *        `\"value\"` or `\"percent\"`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function axisSetCompare(compare, redraw) {\n                this.setModifier('compare', compare, redraw);\n            }\n            /* ********************************************************************** *\n             *  End value compare logic                                               *\n             * ********************************************************************** */\n            /* ********************************************************************** *\n             *  Start Cumulative Sum logic, author: Rafal Sebestjanski                *\n             * ********************************************************************** */\n            /**\n             * Highcharts Stock only. Set the\n             * [cumulative](https://api.highcharts.com/highstock/plotOptions.series.cumulative)\n             * mode of the series after render time.\n             * In most cases it is more useful running\n             * {@link Axis#setCumulative} on the Y axis to update all its series.\n             *\n             * @function Highcharts.Series#setCumulative\n             *\n             * @param {boolean} [cumulative=false]\n             *        Either enable or disable Cumulative Sum mode.\n             *        Can be one of `false` (default) or `true`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function seriesSetCumulative(cumulative, redraw) {\n                // Set default value to false\n                cumulative = pick(cumulative, false);\n                // Survive to export, #5485 (and for options generally)\n                this.options.cumulative = this.userOptions.cumulative = cumulative;\n                // Fire series.init() that will set or delete series.dataModify\n                this.update({}, pick(redraw, true));\n                // If should, turn on the Cumulative Sum mode\n                if (this.dataModify) {\n                    this.dataModify.initCumulative();\n                }\n                else {\n                    // When disabling, clear the points\n                    this.points.forEach(function (point) {\n                        delete point.cumulativeSum;\n                    });\n                }\n            }\n            /**\n             * Highcharts Stock only. Set the cumulative mode on all series\n             * belonging to a Y axis.\n             *\n             * @see [plotOptions.series.cumulative](https://api.highcharts.com/highstock/plotOptions.series.cumulative)\n             *\n             * @sample stock/members/axis-setcumulative/\n             *         Set cumulative\n             *\n             * @function Highcharts.Axis#setCumulative\n             *\n             * @param {boolean} [cumulative]\n             *        Whether to disable or enable the cumulative mode.\n             *        Can be one of `undefined` (default, treated as `false`),\n             *        `false` or `true`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function axisSetCumulative(cumulative, redraw) {\n                this.setModifier('cumulative', cumulative, redraw);\n            }\n            /* *\n             *\n             *  Classes\n             *\n             * */\n            /**\n             * @private\n             */\n            var Additions = /** @class */ (function () {\n                    /* *\n                     *\n                     *  Constructors\n                     *\n                     * */\n                    /**\n                     * @private\n                     */\n                    function Additions(series) {\n                        this.series = series;\n                }\n                /* *\n                *\n                *  Functions\n                *\n                * */\n                /**\n                 * @private\n                 */\n                Additions.prototype.modifyValue = function () {\n                    return 0;\n                };\n                /**\n                 * @ignore\n                 * @function Highcharts.Series#getCumulativeExtremes\n                 *\n                 * @param {Array} [activeYData]\n                 *        An array cointaining all the points' y values\n                 *        in a visible range.\n                 */\n                Additions.getCumulativeExtremes = function (activeYData) {\n                    var cumulativeDataMin = Infinity,\n                        cumulativeDataMax = -Infinity;\n                    activeYData.reduce(function (prev, cur) {\n                        var sum = prev + cur;\n                        cumulativeDataMin = Math.min(cumulativeDataMin, sum, prev);\n                        cumulativeDataMax = Math.max(cumulativeDataMax, sum, prev);\n                        return sum;\n                    });\n                    return [cumulativeDataMin, cumulativeDataMax];\n                };\n                /**\n                 * @ignore\n                 * @function Highcharts.Series#initCompare\n                 *\n                 * @param {string} [compare]\n                 *        Can be one of `\"percent\"` or `\"value\"`.\n                 */\n                Additions.prototype.initCompare = function (compare) {\n                    // Set the modifyValue method\n                    this.modifyValue = function (value, index) {\n                        if (value === null) {\n                            value = 0;\n                        }\n                        var compareValue = this.compareValue;\n                        if (typeof value !== 'undefined' &&\n                            typeof compareValue !== 'undefined') { // #2601, #5814\n                            // Get the modified value\n                            if (compare === 'value') {\n                                value -= compareValue;\n                                // Compare percent\n                            }\n                            else {\n                                var compareBase = this.series.options.compareBase;\n                                value = 100 * (value / compareValue) -\n                                    (compareBase === 100 ? 0 : 100);\n                            }\n                            // record for tooltip etc.\n                            if (typeof index !== 'undefined') {\n                                var point = this.series.points[index];\n                                if (point) {\n                                    point.change = value;\n                                }\n                            }\n                            return value;\n                        }\n                        return 0;\n                    };\n                };\n                /**\n                 * @ignore\n                 * @function Highcharts.Series#initCumulative\n                 */\n                Additions.prototype.initCumulative = function () {\n                    // Set the modifyValue method\n                    this.modifyValue = function (value, index) {\n                        if (value === null) {\n                            value = 0;\n                        }\n                        if (value !== void 0 && index !== void 0) {\n                            var prevPoint = index > 0 ?\n                                    this.series.points[index - 1] : null;\n                            // Get the modified value\n                            if (prevPoint && prevPoint.cumulativeSum) {\n                                value = correctFloat(prevPoint.cumulativeSum + value);\n                            }\n                            // Record for tooltip etc.\n                            var point = this.series.points[index];\n                            if (point) {\n                                point.cumulativeSum = value;\n                            }\n                            return value;\n                        }\n                        return 0;\n                    };\n                };\n                return Additions;\n            }());\n            DataModifyComposition.Additions = Additions;\n        })(DataModifyComposition || (DataModifyComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Compare the values of the series against the first non-null, non-\n         * zero value in the visible range. The y axis will show percentage\n         * or absolute change depending on whether `compare` is set to `\"percent\"`\n         * or `\"value\"`. When this is applied to multiple series, it allows\n         * comparing the development of the series against each other. Adds\n         * a `change` field to every point object.\n         *\n         * @see [compareBase](#plotOptions.series.compareBase)\n         * @see [Axis.setCompare()](/class-reference/Highcharts.Axis#setCompare)\n         * @see [Series.setCompare()](/class-reference/Highcharts.Series#setCompare)\n         *\n         * @sample {highstock} stock/plotoptions/series-compare-percent/\n         *         Percent\n         * @sample {highstock} stock/plotoptions/series-compare-value/\n         *         Value\n         *\n         * @type      {string}\n         * @since     1.0.1\n         * @product   highstock\n         * @apioption plotOptions.series.compare\n         */\n        /**\n         * Defines if comparison should start from the first point within the visible\n         * range or should start from the first point **before** the range.\n         *\n         * In other words, this flag determines if first point within the visible range\n         * will have 0% (`compareStart=true`) or should have been already calculated\n         * according to the previous point (`compareStart=false`).\n         *\n         * @sample {highstock} stock/plotoptions/series-comparestart/\n         *         Calculate compare within visible range\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     6.0.0\n         * @product   highstock\n         * @apioption plotOptions.series.compareStart\n         */\n        /**\n         * When [compare](#plotOptions.series.compare) is `percent`, this option\n         * dictates whether to use 0 or 100 as the base of comparison.\n         *\n         * @sample {highstock} stock/plotoptions/series-comparebase/\n         *         Compare base is 100\n         *\n         * @type       {number}\n         * @default    0\n         * @since      5.0.6\n         * @product    highstock\n         * @validvalue [0, 100]\n         * @apioption  plotOptions.series.compareBase\n         */\n        /**\n         * Cumulative Sum feature replaces points' values with the following formula:\n         * `sum of all previous points' values + current point's value`.\n         * Works only for points in a visible range.\n         * Adds the `cumulativeSum` field to each point object that can be accessed\n         * e.g. in the [tooltip.pointFormat](https://api.highcharts.com/highstock/tooltip.pointFormat).\n         *\n         * @see [Axis.setCumulative()](/class-reference/Highcharts.Axis#setCumulative)\n         * @see [Series.setCumulative()](/class-reference/Highcharts.Series#setCumulative)\n         *\n         * @sample {highstock} stock/plotoptions/series-cumulative-sum/\n         *         Cumulative Sum\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since 9.3.0\n         * @product   highstock\n         * @apioption plotOptions.series.cumulative\n         */\n        ''; // keeps doclets above in transpiled file\n\n        return DataModifyComposition;\n    });\n    _registerModule(_modules, 'Core/Axis/BrokenAxis.js', [_modules['Extensions/Stacking.js'], _modules['Core/Utilities.js']], function (StackItem, U) {\n        /* *\n         *\n         *  (c) 2009-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var addEvent = U.addEvent,\n            find = U.find,\n            fireEvent = U.fireEvent,\n            isArray = U.isArray,\n            isNumber = U.isNumber,\n            pick = U.pick;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Axis with support of broken data rows.\n         * @private\n         */\n        var BrokenAxis;\n        (function (BrokenAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            var composedClasses = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Adds support for broken axes.\n             * @private\n             */\n            function compose(AxisClass, SeriesClass) {\n                if (composedClasses.indexOf(AxisClass) === -1) {\n                    composedClasses.push(AxisClass);\n                    AxisClass.keepProps.push('brokenAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterSetTickPositions', onAxisAfterSetTickPositions);\n                    addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n                }\n                if (composedClasses.indexOf(SeriesClass) === -1) {\n                    composedClasses.push(SeriesClass);\n                    var seriesProto = SeriesClass.prototype;\n                    seriesProto.drawBreaks = seriesDrawBreaks;\n                    seriesProto.gappedPath = seriesGappedPath;\n                    addEvent(SeriesClass, 'afterGeneratePoints', onSeriesAfterGeneratePoints);\n                    addEvent(SeriesClass, 'afterRender', onSeriesAfterRender);\n                }\n                return AxisClass;\n            }\n            BrokenAxis.compose = compose;\n            /**\n             * @private\n             */\n            function onAxisAfterInit() {\n                if (typeof this.brokenAxis !== 'undefined') {\n                    this.brokenAxis.setBreaks(this.options.breaks, false);\n                }\n            }\n            /**\n             * Force Axis to be not-ordinal when breaks are defined.\n             * @private\n             */\n            function onAxisAfterSetOptions() {\n                var axis = this;\n                if (axis.brokenAxis && axis.brokenAxis.hasBreaks) {\n                    axis.options.ordinal = false;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisAfterSetTickPositions() {\n                var axis = this,\n                    brokenAxis = axis.brokenAxis;\n                if (brokenAxis &&\n                    brokenAxis.hasBreaks) {\n                    var tickPositions = axis.tickPositions,\n                        info = axis.tickPositions.info,\n                        newPositions = [];\n                    for (var i = 0; i < tickPositions.length; i++) {\n                        if (!brokenAxis.isInAnyBreak(tickPositions[i])) {\n                            newPositions.push(tickPositions[i]);\n                        }\n                    }\n                    axis.tickPositions = newPositions;\n                    axis.tickPositions.info = info;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInit() {\n                var axis = this;\n                if (!axis.brokenAxis) {\n                    axis.brokenAxis = new Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterGeneratePoints() {\n                var _a = this,\n                    isDirty = _a.isDirty,\n                    connectNulls = _a.options.connectNulls,\n                    points = _a.points,\n                    xAxis = _a.xAxis,\n                    yAxis = _a.yAxis;\n                // Set, or reset visibility of the points. Axis.setBreaks marks\n                // the series as isDirty\n                if (isDirty) {\n                    var i = points.length;\n                    while (i--) {\n                        var point = points[i];\n                        // Respect nulls inside the break (#4275)\n                        var nullGap = point.y === null && connectNulls === false;\n                        var isPointInBreak = (!nullGap && ((xAxis &&\n                                xAxis.brokenAxis &&\n                                xAxis.brokenAxis.isInAnyBreak(point.x,\n                            true)) || (yAxis &&\n                                yAxis.brokenAxis &&\n                                yAxis.brokenAxis.isInAnyBreak(point.y,\n                            true))));\n                        // Set point.visible if in any break.\n                        // If not in break, reset visible to original value.\n                        point.visible = isPointInBreak ?\n                            false :\n                            point.options.visible !== false;\n                    }\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterRender() {\n                this.drawBreaks(this.xAxis, ['x']);\n                this.drawBreaks(this.yAxis, pick(this.pointArrayMap, ['y']));\n            }\n            /**\n             * @private\n             */\n            function seriesDrawBreaks(axis, keys) {\n                var series = this,\n                    points = series.points;\n                var breaks,\n                    threshold,\n                    eventName,\n                    y;\n                if (axis && // #5950\n                    axis.brokenAxis &&\n                    axis.brokenAxis.hasBreaks) {\n                    var brokenAxis_1 = axis.brokenAxis;\n                    keys.forEach(function (key) {\n                        breaks = brokenAxis_1 && brokenAxis_1.breakArray || [];\n                        threshold = axis.isXAxis ?\n                            axis.min :\n                            pick(series.options.threshold, axis.min);\n                        points.forEach(function (point) {\n                            y = pick(point['stack' + key.toUpperCase()], point[key]);\n                            breaks.forEach(function (brk) {\n                                if (isNumber(threshold) && isNumber(y)) {\n                                    eventName = false;\n                                    if ((threshold < brk.from && y > brk.to) ||\n                                        (threshold > brk.from && y < brk.from)) {\n                                        eventName = 'pointBreak';\n                                    }\n                                    else if ((threshold < brk.from &&\n                                        y > brk.from &&\n                                        y < brk.to) || (threshold > brk.from &&\n                                        y > brk.to &&\n                                        y < brk.from)) {\n                                        eventName = 'pointInBreak';\n                                    }\n                                    if (eventName) {\n                                        fireEvent(axis, eventName, { point: point, brk: brk });\n                                    }\n                                }\n                            });\n                        });\n                    });\n                }\n            }\n            /**\n             * Extend getGraphPath by identifying gaps in the data so that we\n             * can draw a gap in the line or area. This was moved from ordinal\n             * axis module to broken axis module as of #5045.\n             *\n             * @private\n             * @function Highcharts.Series#gappedPath\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Gapped path\n             */\n            function seriesGappedPath() {\n                var currentDataGrouping = this.currentDataGrouping,\n                    groupingSize = currentDataGrouping && currentDataGrouping.gapSize,\n                    points = this.points.slice(),\n                    yAxis = this.yAxis;\n                var gapSize = this.options.gapSize,\n                    i = points.length - 1,\n                    stack;\n                /**\n                 * Defines when to display a gap in the graph, together with the\n                 * [gapUnit](plotOptions.series.gapUnit) option.\n                 *\n                 * In case when `dataGrouping` is enabled, points can be grouped\n                 * into a larger time span. This can make the grouped points to\n                 * have a greater distance than the absolute value of `gapSize`\n                 * property, which will result in disappearing graph completely.\n                 * To prevent this situation the mentioned distance between\n                 * grouped points is used instead of previously defined\n                 * `gapSize`.\n                 *\n                 * In practice, this option is most often used to visualize gaps\n                 * in time series. In a stock chart, intraday data is available\n                 * for daytime hours, while gaps will appear in nights and\n                 * weekends.\n                 *\n                 * @see [gapUnit](plotOptions.series.gapUnit)\n                 * @see [xAxis.breaks](#xAxis.breaks)\n                 *\n                 * @sample {highstock} stock/plotoptions/series-gapsize/\n                 * Setting the gap size to 2 introduces gaps for weekends in\n                 * daily datasets.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @product   highstock\n                 * @requires  modules/broken-axis\n                 * @apioption plotOptions.series.gapSize\n                 */\n                /**\n                 * Together with [gapSize](plotOptions.series.gapSize), this\n                 * option defines where to draw gaps in the graph.\n                 *\n                 * When the `gapUnit` is `\"relative\"` (default), a gap size of 5\n                 * means that if the distance between two points is greater than\n                 * 5 times that of the two closest points, the graph will be\n                 * broken.\n                 *\n                 * When the `gapUnit` is `\"value\"`, the gap is based on absolute\n                 * axis values, which on a datetime axis is milliseconds. This\n                 * also applies to the navigator series that inherits gap\n                 * options from the base series.\n                 *\n                 * @see [gapSize](plotOptions.series.gapSize)\n                 *\n                 * @type       {string}\n                 * @default    relative\n                 * @since      5.0.13\n                 * @product    highstock\n                 * @validvalue [\"relative\", \"value\"]\n                 * @requires   modules/broken-axis\n                 * @apioption  plotOptions.series.gapUnit\n                 */\n                if (gapSize && i > 0) { // #5008\n                    // Gap unit is relative\n                    if (this.options.gapUnit !== 'value') {\n                        gapSize *= this.basePointRange;\n                    }\n                    // Setting a new gapSize in case dataGrouping is enabled\n                    // (#7686)\n                    if (groupingSize &&\n                        groupingSize > gapSize &&\n                        // Except when DG is forced (e.g. from other series)\n                        // and has lower granularity than actual points (#11351)\n                        groupingSize >= this.basePointRange) {\n                        gapSize = groupingSize;\n                    }\n                    // extension for ordinal breaks\n                    var current = void 0,\n                        next = void 0;\n                    while (i--) {\n                        // Reassign next if it is not visible\n                        if (!(next && next.visible !== false)) {\n                            next = points[i + 1];\n                        }\n                        current = points[i];\n                        // Skip iteration if one of the points is not visible\n                        if (next.visible === false || current.visible === false) {\n                            continue;\n                        }\n                        if (next.x - current.x > gapSize) {\n                            var xRange = (current.x + next.x) / 2;\n                            points.splice(// insert after this one\n                            i + 1, 0, {\n                                isNull: true,\n                                x: xRange\n                            });\n                            // For stacked chart generate empty stack items, #6546\n                            if (yAxis.stacking && this.options.stacking) {\n                                stack = yAxis.stacking.stacks[this.stackKey][xRange] = new StackItem(yAxis, yAxis.options.stackLabels, false, xRange, this.stack);\n                                stack.total = 0;\n                            }\n                        }\n                        // Assign current to next for the upcoming iteration\n                        next = current;\n                    }\n                }\n                // Call base method\n                return this.getGraphPath(points);\n            }\n            /* *\n             *\n             *  Class\n             *\n             * */\n            /**\n             * Provides support for broken axes.\n             * @private\n             * @class\n             */\n            var Additions = /** @class */ (function () {\n                    /* *\n                     *\n                     *  Constructors\n                     *\n                     * */\n                    function Additions(axis) {\n                        this.hasBreaks = false;\n                    this.axis = axis;\n                }\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                Additions.isInBreak = function (brk, val) {\n                    var repeat = brk.repeat || Infinity,\n                        from = brk.from,\n                        length = brk.to - brk.from,\n                        test = (val >= from ?\n                            (val - from) % repeat :\n                            repeat - ((from - val) % repeat));\n                    var ret;\n                    if (!brk.inclusive) {\n                        ret = test < length && test !== 0;\n                    }\n                    else {\n                        ret = test <= length;\n                    }\n                    return ret;\n                };\n                /**\n                 * @private\n                 */\n                Additions.lin2Val = function (val) {\n                    var axis = this;\n                    var brokenAxis = axis.brokenAxis;\n                    var breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    var nval = val,\n                        brk,\n                        i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.from >= nval) {\n                            break;\n                        }\n                        else if (brk.to < nval) {\n                            nval += brk.len;\n                        }\n                        else if (Additions.isInBreak(brk, nval)) {\n                            nval += brk.len;\n                        }\n                    }\n                    return nval;\n                };\n                /**\n                 * @private\n                 */\n                Additions.val2Lin = function (val) {\n                    var axis = this;\n                    var brokenAxis = axis.brokenAxis;\n                    var breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    var nval = val,\n                        brk,\n                        i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.to <= val) {\n                            nval -= brk.len;\n                        }\n                        else if (brk.from >= val) {\n                            break;\n                        }\n                        else if (Additions.isInBreak(brk, val)) {\n                            nval -= (val - brk.from);\n                            break;\n                        }\n                    }\n                    return nval;\n                };\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Returns the first break found where the x is larger then break.from\n                 * and smaller then break.to.\n                 *\n                 * @param {number} x\n                 * The number which should be within a break.\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} breaks\n                 * The array of breaks to search within.\n                 *\n                 * @return {Highcharts.XAxisBreaksOptions|undefined}\n                 * Returns the first break found that matches, returns false if no break\n                 * is found.\n                 */\n                Additions.prototype.findBreakAt = function (x, breaks) {\n                    return find(breaks, function (b) {\n                        return b.from < x && x < b.to;\n                    });\n                };\n                /**\n                 * @private\n                 */\n                Additions.prototype.isInAnyBreak = function (val, testKeep) {\n                    var brokenAxis = this,\n                        axis = brokenAxis.axis,\n                        breaks = axis.options.breaks || [];\n                    var i = breaks.length,\n                        inbrk,\n                        keep,\n                        ret;\n                    if (i && isNumber(val)) {\n                        while (i--) {\n                            if (Additions.isInBreak(breaks[i], val)) {\n                                inbrk = true;\n                                if (!keep) {\n                                    keep = pick(breaks[i].showPoints, !axis.isXAxis);\n                                }\n                            }\n                        }\n                        if (inbrk && testKeep) {\n                            ret = inbrk && !keep;\n                        }\n                        else {\n                            ret = inbrk;\n                        }\n                    }\n                    return ret;\n                };\n                /**\n                 * Dynamically set or unset breaks in an axis. This function in lighter\n                 * than usin Axis.update, and it also preserves animation.\n                 *\n                 * @private\n                 * @function Highcharts.Axis#setBreaks\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} [breaks]\n                 * The breaks to add. When `undefined` it removes existing breaks.\n                 *\n                 * @param {boolean} [redraw=true]\n                 * Whether to redraw the chart immediately.\n                 */\n                Additions.prototype.setBreaks = function (breaks, redraw) {\n                    var brokenAxis = this;\n                    var axis = brokenAxis.axis;\n                    var hasBreaks = (isArray(breaks) && !!breaks.length);\n                    axis.isDirty = brokenAxis.hasBreaks !== hasBreaks;\n                    brokenAxis.hasBreaks = hasBreaks;\n                    axis.options.breaks = axis.userOptions.breaks = breaks;\n                    axis.forceRedraw = true; // Force recalculation in setScale\n                    // Recalculate series related to the axis.\n                    axis.series.forEach(function (series) {\n                        series.isDirty = true;\n                    });\n                    if (!hasBreaks && axis.val2lin === Additions.val2Lin) {\n                        // Revert to prototype functions\n                        delete axis.val2lin;\n                        delete axis.lin2val;\n                    }\n                    if (hasBreaks) {\n                        axis.userOptions.ordinal = false;\n                        axis.lin2val = Additions.lin2Val;\n                        axis.val2lin = Additions.val2Lin;\n                        axis.setExtremes = function (newMin, newMax, redraw, animation, eventArguments) {\n                            // If trying to set extremes inside a break, extend min to\n                            // after, and max to before the break ( #3857 )\n                            if (brokenAxis.hasBreaks) {\n                                var breaks_1 = (this.options.breaks || []);\n                                var axisBreak = void 0;\n                                while ((axisBreak = brokenAxis.findBreakAt(newMin, breaks_1))) {\n                                    newMin = axisBreak.to;\n                                }\n                                while ((axisBreak = brokenAxis.findBreakAt(newMax, breaks_1))) {\n                                    newMax = axisBreak.from;\n                                }\n                                // If both min and max is within the same break.\n                                if (newMax < newMin) {\n                                    newMax = newMin;\n                                }\n                            }\n                            axis.constructor.prototype.setExtremes.call(this, newMin, newMax, redraw, animation, eventArguments);\n                        };\n                        axis.setAxisTranslation = function () {\n                            axis.constructor.prototype.setAxisTranslation.call(this);\n                            brokenAxis.unitLength = void 0;\n                            if (brokenAxis.hasBreaks) {\n                                var breaks_2 = axis.options.breaks || [], \n                                    // Temporary one:\n                                    breakArrayT_1 = [],\n                                    breakArray_1 = [],\n                                    pointRangePadding = pick(axis.pointRangePadding, 0);\n                                var length_1 = 0,\n                                    inBrk_1,\n                                    repeat_1,\n                                    min_1 = axis.userMin || axis.min,\n                                    max_1 = axis.userMax || axis.max,\n                                    start_1,\n                                    i_1;\n                                // Min & max check (#4247)\n                                breaks_2.forEach(function (brk) {\n                                    repeat_1 = brk.repeat || Infinity;\n                                    if (isNumber(min_1) && isNumber(max_1)) {\n                                        if (Additions.isInBreak(brk, min_1)) {\n                                            min_1 += ((brk.to % repeat_1) -\n                                                (min_1 % repeat_1));\n                                        }\n                                        if (Additions.isInBreak(brk, max_1)) {\n                                            max_1 -= ((max_1 % repeat_1) -\n                                                (brk.from % repeat_1));\n                                        }\n                                    }\n                                });\n                                // Construct an array holding all breaks in the axis\n                                breaks_2.forEach(function (brk) {\n                                    start_1 = brk.from;\n                                    repeat_1 = brk.repeat || Infinity;\n                                    if (isNumber(min_1) && isNumber(max_1)) {\n                                        while (start_1 - repeat_1 > min_1) {\n                                            start_1 -= repeat_1;\n                                        }\n                                        while (start_1 < min_1) {\n                                            start_1 += repeat_1;\n                                        }\n                                        for (i_1 = start_1; i_1 < max_1; i_1 += repeat_1) {\n                                            breakArrayT_1.push({\n                                                value: i_1,\n                                                move: 'in'\n                                            });\n                                            breakArrayT_1.push({\n                                                value: i_1 + brk.to - brk.from,\n                                                move: 'out',\n                                                size: brk.breakSize\n                                            });\n                                        }\n                                    }\n                                });\n                                breakArrayT_1.sort(function (a, b) {\n                                    return ((a.value === b.value) ?\n                                        ((a.move === 'in' ? 0 : 1) -\n                                            (b.move === 'in' ? 0 : 1)) :\n                                        a.value - b.value);\n                                });\n                                // Simplify the breaks\n                                inBrk_1 = 0;\n                                start_1 = min_1;\n                                breakArrayT_1.forEach(function (brk) {\n                                    inBrk_1 += (brk.move === 'in' ? 1 : -1);\n                                    if (inBrk_1 === 1 && brk.move === 'in') {\n                                        start_1 = brk.value;\n                                    }\n                                    if (inBrk_1 === 0 && isNumber(start_1)) {\n                                        breakArray_1.push({\n                                            from: start_1,\n                                            to: brk.value,\n                                            len: brk.value - start_1 - (brk.size || 0)\n                                        });\n                                        length_1 += (brk.value -\n                                            start_1 -\n                                            (brk.size || 0));\n                                    }\n                                });\n                                brokenAxis.breakArray = breakArray_1;\n                                // Used with staticScale, and below the actual axis\n                                // length, when breaks are substracted.\n                                if (isNumber(min_1) &&\n                                    isNumber(max_1) &&\n                                    isNumber(axis.min)) {\n                                    brokenAxis.unitLength = max_1 - min_1 - length_1 +\n                                        pointRangePadding;\n                                    fireEvent(axis, 'afterBreaks');\n                                    if (axis.staticScale) {\n                                        axis.transA = axis.staticScale;\n                                    }\n                                    else if (brokenAxis.unitLength) {\n                                        axis.transA *=\n                                            (max_1 - axis.min + pointRangePadding) /\n                                                brokenAxis.unitLength;\n                                    }\n                                    if (pointRangePadding) {\n                                        axis.minPixelPadding =\n                                            axis.transA * (axis.minPointOffset || 0);\n                                    }\n                                    axis.min = min_1;\n                                    axis.max = max_1;\n                                }\n                            }\n                        };\n                    }\n                    if (pick(redraw, true)) {\n                        axis.chart.redraw();\n                    }\n                };\n                return Additions;\n            }());\n            BrokenAxis.Additions = Additions;\n        })(BrokenAxis || (BrokenAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BrokenAxis;\n    });\n    _registerModule(_modules, 'masters/modules/broken-axis.src.js', [_modules['Core/Globals.js'], _modules['Core/Axis/BrokenAxis.js']], function (Highcharts, BrokenAxis) {\n\n        var G = Highcharts;\n        // Compositions\n        BrokenAxis.compose(G.Axis, G.Series);\n\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Axis/DateTimeAxis.js'], _modules['Core/FormatUtilities.js'], _modules['Core/Globals.js'], _modules['Core/Series/Point.js'], _modules['Core/Series/Series.js'], _modules['Core/Tooltip.js'], _modules['Core/DefaultOptions.js'], _modules['Core/Utilities.js']], function (Axis, DateTimeAxis, F, H, Point, Series, Tooltip, D, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var format = F.format;\n        var seriesProto = Series.prototype;\n        var addEvent = U.addEvent,\n            arrayMax = U.arrayMax,\n            arrayMin = U.arrayMin,\n            correctFloat = U.correctFloat,\n            defined = U.defined,\n            error = U.error,\n            extend = U.extend,\n            isNumber = U.isNumber,\n            merge = U.merge,\n            pick = U.pick;\n        /**\n         * @typedef {\"average\"|\"averages\"|\"open\"|\"high\"|\"low\"|\"close\"|\"sum\"} Highcharts.DataGroupingApproximationValue\n         */\n        /**\n         * The position of the point inside the group.\n         *\n         * @typedef    {\"start\"|\"middle\"|\"end\"} Highcharts.DataGroupingAnchor\n         */\n        /**\n         * The position of the first or last point in the series inside the group.\n         *\n         * @typedef    {\"start\"|\"middle\"|\"end\"|\"firstPoint\"|\"lastPoint\"} Highcharts.DataGroupingAnchorExtremes\n         */\n        /**\n         * @interface Highcharts.DataGroupingInfoObject\n         */ /**\n        * @name Highcharts.DataGroupingInfoObject#length\n        * @type {number}\n        */ /**\n        * @name Highcharts.DataGroupingInfoObject#options\n        * @type {Highcharts.SeriesOptionsType|undefined}\n        */ /**\n        * @name Highcharts.DataGroupingInfoObject#start\n        * @type {number}\n        */\n        ''; // detach doclets above\n        /* ************************************************************************** *\n         *  Start data grouping module                                                *\n         * ************************************************************************** */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * Define the available approximation types. The data grouping\n         * approximations takes an array or numbers as the first parameter. In case\n         * of ohlc, four arrays are sent in as four parameters. Each array consists\n         * only of numbers. In case null values belong to the group, the property\n         * .hasNulls will be set to true on the array.\n         *\n         * @product highstock\n         *\n         * @private\n         * @name Highcharts.approximations\n         * @type {Highcharts.Dictionary<Function>}\n         */\n        var approximations = H.approximations = {\n                sum: function (arr) {\n                    var len = arr.length,\n            ret;\n                // 1. it consists of nulls exclusive\n                if (!len && arr.hasNulls) {\n                    ret = null;\n                    // 2. it has a length and real values\n                }\n                else if (len) {\n                    ret = 0;\n                    while (len--) {\n                        ret += arr[len];\n                    }\n                }\n                // 3. it has zero length, so just return undefined\n                // => doNothing()\n                return ret;\n            },\n            average: function (arr) {\n                var len = arr.length,\n                    ret = approximations.sum(arr);\n                // If we have a number, return it divided by the length. If not,\n                // return null or undefined based on what the sum method finds.\n                if (isNumber(ret) && len) {\n                    ret = correctFloat(ret / len);\n                }\n                return ret;\n            },\n            // The same as average, but for series with multiple values, like area\n            // ranges.\n            averages: function () {\n                var ret = [];\n                [].forEach.call(arguments, function (arr) {\n                    ret.push(approximations.average(arr));\n                });\n                // Return undefined when first elem. is undefined and let\n                // sum method handle null (#7377)\n                return typeof ret[0] === 'undefined' ? void 0 : ret;\n            },\n            open: function (arr) {\n                return arr.length ? arr[0] : (arr.hasNulls ? null : void 0);\n            },\n            high: function (arr) {\n                return arr.length ?\n                    arrayMax(arr) :\n                    (arr.hasNulls ? null : void 0);\n            },\n            low: function (arr) {\n                return arr.length ?\n                    arrayMin(arr) :\n                    (arr.hasNulls ? null : void 0);\n            },\n            close: function (arr) {\n                return arr.length ?\n                    arr[arr.length - 1] :\n                    (arr.hasNulls ? null : void 0);\n            },\n            // HLC, OHLC and range are special cases where a multidimensional array is\n            // input and an array is output.\n            hlc: function (high, low, close) {\n                high = approximations.high(high);\n                low = approximations.low(low);\n                close = approximations.close(close);\n                if (isNumber(high) ||\n                    isNumber(low) ||\n                    isNumber(close)) {\n                    return [high, low, close];\n                }\n            },\n            ohlc: function (open, high, low, close) {\n                open = approximations.open(open);\n                high = approximations.high(high);\n                low = approximations.low(low);\n                close = approximations.close(close);\n                if (isNumber(open) ||\n                    isNumber(high) ||\n                    isNumber(low) ||\n                    isNumber(close)) {\n                    return [open, high, low, close];\n                }\n            },\n            range: function (low, high) {\n                low = approximations.low(low);\n                high = approximations.high(high);\n                if (isNumber(low) || isNumber(high)) {\n                    return [low, high];\n                }\n                if (low === null && high === null) {\n                    return null;\n                }\n                // else, return is undefined\n            }\n        };\n        var applyGrouping = function (hasExtemesChanged) {\n                var series = this,\n            chart = series.chart,\n            options = series.options,\n            dataGroupingOptions = options.dataGrouping,\n            groupingEnabled = series.allowDG !== false && dataGroupingOptions &&\n                    pick(dataGroupingOptions.enabled,\n            chart.options.isStock),\n            visible = (series.visible || !chart.options.chart.ignoreHiddenSeries),\n            hasGroupedData,\n            skip,\n            lastDataGrouping = this.currentDataGrouping,\n            currentDataGrouping,\n            croppedData,\n            revertRequireSorting = false;\n            // Data needs to be sorted for dataGrouping\n            if (groupingEnabled && !series.requireSorting) {\n                series.requireSorting = revertRequireSorting = true;\n            }\n            // Skip if skipDataGrouping method returns false or if grouping is disabled\n            // (in that order).\n            skip = skipDataGrouping(series, hasExtemesChanged) === false || !groupingEnabled;\n            // Revert original requireSorting value if changed\n            if (revertRequireSorting) {\n                series.requireSorting = false;\n            }\n            if (!skip) {\n                series.destroyGroupedData();\n                var i = void 0,\n                    processedXData = dataGroupingOptions.groupAll ?\n                        series.xData :\n                        series.processedXData,\n                    processedYData = dataGroupingOptions.groupAll ?\n                        series.yData :\n                        series.processedYData,\n                    plotSizeX = chart.plotSizeX,\n                    xAxis = series.xAxis,\n                    ordinal = xAxis.options.ordinal,\n                    groupPixelWidth = series.groupPixelWidth;\n                // Execute grouping if the amount of points is greater than the limit\n                // defined in groupPixelWidth\n                if (groupPixelWidth &&\n                    processedXData &&\n                    processedXData.length) {\n                    hasGroupedData = true;\n                    // Force recreation of point instances in series.translate, #5699\n                    series.isDirty = true;\n                    series.points = null; // #6709\n                    var extremes = xAxis.getExtremes(),\n                        xMin = extremes.min,\n                        xMax = extremes.max,\n                        groupIntervalFactor = (ordinal &&\n                            xAxis.ordinal &&\n                            xAxis.ordinal.getGroupIntervalFactor(xMin,\n                        xMax,\n                        series)) || 1,\n                        interval = (groupPixelWidth * (xMax - xMin) / plotSizeX) *\n                            groupIntervalFactor,\n                        groupPositions = xAxis.getTimeTicks(DateTimeAxis.Additions.prototype.normalizeTimeTickInterval(interval,\n                        dataGroupingOptions.units ||\n                            defaultDataGroupingUnits), \n                        // Processed data may extend beyond axis (#4907)\n                        Math.min(xMin,\n                        processedXData[0]),\n                        Math.max(xMax,\n                        processedXData[processedXData.length - 1]),\n                        xAxis.options.startOfWeek,\n                        processedXData,\n                        series.closestPointRange),\n                        groupedData = seriesProto.groupData.apply(series,\n                        [\n                            processedXData,\n                            processedYData,\n                            groupPositions,\n                            dataGroupingOptions.approximation\n                        ]),\n                        groupedXData = groupedData.groupedXData,\n                        groupedYData = groupedData.groupedYData,\n                        gapSize = 0;\n                    // The smoothed option is deprecated, instead, there is a fallback\n                    // to the new anchoring mechanism. #12455.\n                    if (dataGroupingOptions &&\n                        dataGroupingOptions.smoothed &&\n                        groupedXData.length) {\n                        dataGroupingOptions.firstAnchor = 'firstPoint';\n                        dataGroupingOptions.anchor = 'middle';\n                        dataGroupingOptions.lastAnchor = 'lastPoint';\n                        error(32, false, chart, {\n                            'dataGrouping.smoothed': 'use dataGrouping.anchor'\n                        });\n                    }\n                    anchorPoints(series, groupedXData, xMax);\n                    // Record what data grouping values were used\n                    for (i = 1; i < groupPositions.length; i++) {\n                        // The grouped gapSize needs to be the largest distance between\n                        // the group to capture varying group sizes like months or DST\n                        // crossing (#10000). Also check that the gap is not at the\n                        // start of a segment.\n                        if (!groupPositions.info.segmentStarts ||\n                            groupPositions.info.segmentStarts.indexOf(i) === -1) {\n                            gapSize = Math.max(groupPositions[i] - groupPositions[i - 1], gapSize);\n                        }\n                    }\n                    currentDataGrouping = groupPositions.info;\n                    currentDataGrouping.gapSize = gapSize;\n                    series.closestPointRange = groupPositions.info.totalRange;\n                    series.groupMap = groupedData.groupMap;\n                    if (visible) {\n                        adjustExtremes(xAxis, groupedXData);\n                    }\n                    // We calculated all group positions but we should render\n                    // only the ones within the visible range\n                    if (dataGroupingOptions.groupAll) {\n                        // Keep the reference to all grouped points\n                        // for further calculation (eg. heikinashi).\n                        series.allGroupedData = groupedYData;\n                        croppedData = series.cropData(groupedXData, groupedYData, xAxis.min, xAxis.max, 1 // Ordinal xAxis will remove left-most points otherwise\n                        );\n                        groupedXData = croppedData.xData;\n                        groupedYData = croppedData.yData;\n                        series.cropStart = croppedData.start; // #15005\n                    }\n                    // Set series props\n                    series.processedXData = groupedXData;\n                    series.processedYData = groupedYData;\n                }\n                else {\n                    series.groupMap = null;\n                }\n                series.hasGroupedData = hasGroupedData;\n                series.currentDataGrouping = currentDataGrouping;\n                series.preventGraphAnimation =\n                    (lastDataGrouping && lastDataGrouping.totalRange) !==\n                        (currentDataGrouping && currentDataGrouping.totalRange);\n            }\n        };\n        var skipDataGrouping = function (series,\n            force) {\n                return !(series.isCartesian &&\n                    !series.isDirty &&\n                    !series.xAxis.isDirty &&\n                    !series.yAxis.isDirty &&\n                    !force);\n        };\n        var groupData = function (xData,\n            yData,\n            groupPositions,\n            approximation) {\n                var series = this,\n            data = series.data,\n            dataOptions = series.options && series.options.data,\n            groupedXData = [],\n            groupedYData = [],\n            groupMap = [],\n            dataLength = xData.length,\n            pointX,\n            pointY,\n            groupedY, \n                // when grouping the fake extended axis for panning,\n                // we don't need to consider y\n                handleYData = !!yData,\n            values = [],\n            approximationFn,\n            pointArrayMap = series.pointArrayMap,\n            pointArrayMapLength = pointArrayMap && pointArrayMap.length,\n            extendedPointArrayMap = ['x'].concat(pointArrayMap || ['y']),\n            groupAll = (this.options.dataGrouping &&\n                    this.options.dataGrouping.groupAll),\n            pos = 0,\n            start = 0,\n            valuesLen,\n            i,\n            j;\n            /**\n             * @private\n             */\n            function getApproximation(approx) {\n                if (typeof approx === 'function') {\n                    return approx;\n                }\n                if (approximations[approx]) {\n                    return approximations[approx];\n                }\n                return approximations[(series.getDGApproximation && series.getDGApproximation()) ||\n                    'average'];\n            }\n            approximationFn = getApproximation(approximation);\n            // Calculate values array size from pointArrayMap length\n            if (pointArrayMapLength) {\n                pointArrayMap.forEach(function () {\n                    values.push([]);\n                });\n            }\n            else {\n                values.push([]);\n            }\n            valuesLen = pointArrayMapLength || 1;\n            // Start with the first point within the X axis range (#2696)\n            for (i = 0; i <= dataLength; i++) {\n                if (xData[i] >= groupPositions[0]) {\n                    break;\n                }\n            }\n            for (i; i <= dataLength; i++) {\n                // when a new group is entered, summarize and initialize\n                // the previous group\n                while ((typeof groupPositions[pos + 1] !== 'undefined' &&\n                    xData[i] >= groupPositions[pos + 1]) ||\n                    i === dataLength) { // get the last group\n                    // get group x and y\n                    pointX = groupPositions[pos];\n                    series.dataGroupInfo = {\n                        start: groupAll ? start : (series.cropStart + start),\n                        length: values[0].length\n                    };\n                    groupedY = approximationFn.apply(series, values);\n                    // By default, let options of the first grouped point be passed over\n                    // to the grouped point. This allows preserving properties like\n                    // `name` and `color` or custom properties. Implementers can\n                    // override this from the approximation function, where they can\n                    // write custom options to `this.dataGroupInfo.options`.\n                    if (series.pointClass && !defined(series.dataGroupInfo.options)) {\n                        // Convert numbers and arrays into objects\n                        series.dataGroupInfo.options = merge(series.pointClass.prototype\n                            .optionsToObject.call({ series: series }, series.options.data[series.cropStart + start]));\n                        // Make sure the raw data (x, y, open, high etc) is not copied\n                        // over and overwriting approximated data.\n                        extendedPointArrayMap.forEach(function (key) {\n                            delete series.dataGroupInfo.options[key];\n                        });\n                    }\n                    // push the grouped data\n                    if (typeof groupedY !== 'undefined') {\n                        groupedXData.push(pointX);\n                        groupedYData.push(groupedY);\n                        groupMap.push(series.dataGroupInfo);\n                    }\n                    // reset the aggregate arrays\n                    start = i;\n                    for (j = 0; j < valuesLen; j++) {\n                        values[j].length = 0; // faster than values[j] = []\n                        values[j].hasNulls = false;\n                    }\n                    // Advance on the group positions\n                    pos += 1;\n                    // don't loop beyond the last group\n                    if (i === dataLength) {\n                        break;\n                    }\n                }\n                // break out\n                if (i === dataLength) {\n                    break;\n                }\n                // for each raw data point, push it to an array that contains all values\n                // for this specific group\n                if (pointArrayMap) {\n                    var index = (series.options.dataGrouping &&\n                            series.options.dataGrouping.groupAll ?\n                            i : series.cropStart + i),\n                        point = (data && data[index]) ||\n                            series.pointClass.prototype.applyOptions.apply({\n                                series: series\n                            },\n                        [dataOptions[index]]),\n                        val = void 0;\n                    for (j = 0; j < pointArrayMapLength; j++) {\n                        val = point[pointArrayMap[j]];\n                        if (isNumber(val)) {\n                            values[j].push(val);\n                        }\n                        else if (val === null) {\n                            values[j].hasNulls = true;\n                        }\n                    }\n                }\n                else {\n                    pointY = handleYData ? yData[i] : null;\n                    if (isNumber(pointY)) {\n                        values[0].push(pointY);\n                    }\n                    else if (pointY === null) {\n                        values[0].hasNulls = true;\n                    }\n                }\n            }\n            return {\n                groupedXData: groupedXData,\n                groupedYData: groupedYData,\n                groupMap: groupMap\n            };\n        };\n        var anchorPoints = function (series,\n            groupedXData,\n            xMax) {\n                var options = series.options,\n            dataGroupingOptions = options.dataGrouping,\n            totalRange = (series.currentDataGrouping && series.currentDataGrouping.gapSize);\n            var i;\n            // DataGrouping x-coordinates.\n            if (dataGroupingOptions && series.xData && totalRange && series.groupMap) {\n                var groupedDataLength = groupedXData.length - 1,\n                    anchor = dataGroupingOptions.anchor,\n                    firstAnchor = pick(dataGroupingOptions.firstAnchor,\n                    anchor),\n                    lastAnchor = pick(dataGroupingOptions.lastAnchor,\n                    anchor);\n                // Anchor points that are not extremes.\n                if (anchor && anchor !== 'start') {\n                    var shiftInterval = (totalRange *\n                            { middle: 0.5,\n                        end: 1 }[anchor]);\n                    i = groupedXData.length - 1;\n                    while (i-- && i > 0) {\n                        groupedXData[i] += shiftInterval;\n                    }\n                }\n                // Change the first point position, but only when it is\n                // the first point in the data set not in the current zoom.\n                if (firstAnchor &&\n                    firstAnchor !== 'start' &&\n                    series.xData[0] >= groupedXData[0]) {\n                    var groupStart = series.groupMap[0].start,\n                        groupLength = series.groupMap[0].length;\n                    var firstGroupstEnd = void 0;\n                    if (isNumber(groupStart) && isNumber(groupLength)) {\n                        firstGroupstEnd = groupStart + (groupLength - 1);\n                    }\n                    groupedXData[0] = {\n                        middle: groupedXData[0] + 0.5 * totalRange,\n                        end: groupedXData[0] + totalRange,\n                        firstPoint: series.xData[0],\n                        lastPoint: firstGroupstEnd && series.xData[firstGroupstEnd]\n                    }[firstAnchor];\n                }\n                // Change the last point position but only when it is\n                // the last point in the data set not in the current zoom.\n                if (lastAnchor &&\n                    lastAnchor !== 'start' &&\n                    totalRange &&\n                    groupedXData[groupedDataLength] >= xMax - totalRange) {\n                    var lastGroupStart = series.groupMap[series.groupMap.length - 1].start;\n                    groupedXData[groupedDataLength] = {\n                        middle: groupedXData[groupedDataLength] + 0.5 * totalRange,\n                        end: groupedXData[groupedDataLength] + totalRange,\n                        firstPoint: lastGroupStart && series.xData[lastGroupStart],\n                        lastPoint: series.xData[series.xData.length - 1]\n                    }[lastAnchor];\n                }\n            }\n        };\n        var adjustExtremes = function (xAxis,\n            groupedXData) {\n                // Make sure the X axis extends to show the first group (#2533)\n                // But only for visible series (#5493, #6393)\n                if (defined(groupedXData[0]) &&\n                    isNumber(xAxis.min) &&\n                    isNumber(xAxis.dataMin) &&\n                    groupedXData[0] < xAxis.min) {\n                    if ((!defined(xAxis.options.min) &&\n                        xAxis.min <= xAxis.dataMin) ||\n                        xAxis.min === xAxis.dataMin) {\n                        xAxis.min = Math.min(groupedXData[0],\n            xAxis.min);\n                }\n                xAxis.dataMin = Math.min(groupedXData[0], xAxis.dataMin);\n            }\n            // When the last anchor set, change the extremes that\n            // the last point is visible (#12455).\n            if (defined(groupedXData[groupedXData.length - 1]) &&\n                isNumber(xAxis.max) &&\n                isNumber(xAxis.dataMax) &&\n                groupedXData[groupedXData.length - 1] > xAxis.max) {\n                if ((!defined(xAxis.options.max) &&\n                    isNumber(xAxis.dataMax) &&\n                    xAxis.max >= xAxis.dataMax) || xAxis.max === xAxis.dataMax) {\n                    xAxis.max = Math.max(groupedXData[groupedXData.length - 1], xAxis.max);\n                }\n                xAxis.dataMax = Math.max(groupedXData[groupedXData.length - 1], xAxis.dataMax);\n            }\n        };\n        var dataGrouping = {\n                approximations: approximations,\n                groupData: groupData\n            };\n        // -----------------------------------------------------------------------------\n        // The following code applies to implementation of data grouping on a Series\n        var baseProcessData = seriesProto.processData, baseGeneratePoints = seriesProto.generatePoints, \n            /** @ignore */\n            commonOptions = {\n                // enabled: null, // (true for stock charts, false for basic),\n                // forced: undefined,\n                groupPixelWidth: 2,\n                // the first one is the point or start value, the second is the start\n                // value if we're dealing with range, the third one is the end value if\n                // dealing with a range\n                dateTimeLabelFormats: {\n                    millisecond: [\n                        '%A, %b %e, %H:%M:%S.%L',\n                        '%A, %b %e, %H:%M:%S.%L',\n                        '-%H:%M:%S.%L'\n                    ],\n                    second: [\n                        '%A, %b %e, %H:%M:%S',\n                        '%A, %b %e, %H:%M:%S',\n                        '-%H:%M:%S'\n                    ],\n                    minute: [\n                        '%A, %b %e, %H:%M',\n                        '%A, %b %e, %H:%M',\n                        '-%H:%M'\n                    ],\n                    hour: [\n                        '%A, %b %e, %H:%M',\n                        '%A, %b %e, %H:%M',\n                        '-%H:%M'\n                    ],\n                    day: [\n                        '%A, %b %e, %Y',\n                        '%A, %b %e',\n                        '-%A, %b %e, %Y'\n                    ],\n                    week: [\n                        'Week from %A, %b %e, %Y',\n                        '%A, %b %e',\n                        '-%A, %b %e, %Y'\n                    ],\n                    month: [\n                        '%B %Y',\n                        '%B',\n                        '-%B %Y'\n                    ],\n                    year: [\n                        '%Y',\n                        '%Y',\n                        '-%Y'\n                    ]\n                }\n                // smoothed = false, // enable this for navigator series only\n            }, specificOptions = {\n                line: {},\n                spline: {},\n                area: {},\n                areaspline: {},\n                arearange: {},\n                column: {\n                    groupPixelWidth: 10\n                },\n                columnrange: {\n                    groupPixelWidth: 10\n                },\n                candlestick: {\n                    groupPixelWidth: 10\n                },\n                ohlc: {\n                    groupPixelWidth: 5\n                },\n                hlc: {\n                    groupPixelWidth: 5\n                    // Move to HeikinAshiSeries.ts aftre refactoring data grouping.\n                },\n                heikinashi: {\n                    groupPixelWidth: 10\n                }\n            }, \n            // units are defined in a separate array to allow complete overriding in\n            // case of a user option\n            defaultDataGroupingUnits = H.defaultDataGroupingUnits = [\n                [\n                    'millisecond',\n                    [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n                ], [\n                    'second',\n                    [1, 2, 5, 10, 15, 30]\n                ], [\n                    'minute',\n                    [1, 2, 5, 10, 15, 30]\n                ], [\n                    'hour',\n                    [1, 2, 3, 4, 6, 8, 12]\n                ], [\n                    'day',\n                    [1]\n                ], [\n                    'week',\n                    [1]\n                ], [\n                    'month',\n                    [1, 3, 6]\n                ], [\n                    'year',\n                    null\n                ]\n            ];\n        // Set default approximations to the prototypes if present. Properties are\n        // inherited down. Can be overridden for individual series types.\n        seriesProto.getDGApproximation = function () {\n            if (this.is('arearange')) {\n                return 'range';\n            }\n            if (this.is('ohlc')) {\n                return 'ohlc';\n            }\n            if (this.is('hlc')) {\n                return 'hlc';\n            }\n            if (this.is('column')) {\n                return 'sum';\n            }\n            return 'average';\n        };\n        /**\n         * Takes parallel arrays of x and y data and groups the data into intervals\n         * defined by groupPositions, a collection of starting x values for each group.\n         *\n         * @private\n         * @function Highcharts.Series#groupData\n         *\n         * @param {Array<number>} xData\n         *\n         * @param {Array<number>|Array<Array<number>>} yData\n         *\n         * @param {boolean} groupPositions\n         *\n         * @param {string|Function} approximation\n         *\n         * @return {void}\n         */\n        seriesProto.groupData = groupData;\n        /**\n         * For the processed data, calculate the grouped data if needed.\n         *\n         * @private\n         * @function Highcharts.Series#applyGrouping\n         *\n         * @return {void}\n         */\n        seriesProto.applyGrouping = applyGrouping;\n        // Destroy the grouped data points. #622, #740\n        seriesProto.destroyGroupedData = function () {\n            // Clear previous groups\n            if (this.groupedData) {\n                this.groupedData.forEach(function (point, i) {\n                    if (point) {\n                        this.groupedData[i] = point.destroy ?\n                            point.destroy() : null;\n                    }\n                }, this);\n                // Clears all:\n                // - `this.groupedData`\n                // - `this.points`\n                // - `preserve` object in series.update()\n                this.groupedData.length = 0;\n            }\n        };\n        // Override the generatePoints method by adding a reference to grouped data\n        seriesProto.generatePoints = function () {\n            baseGeneratePoints.apply(this);\n            // Record grouped data in order to let it be destroyed the next time\n            // processData runs\n            this.destroyGroupedData(); // #622\n            this.groupedData = this.hasGroupedData ? this.points : null;\n        };\n        /**\n         * Check the groupPixelWidth and apply the grouping if needed.\n         * Fired only after processing the data.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Axis#applyGrouping\n         */\n        Axis.prototype.applyGrouping = function (e) {\n            var axis = this,\n                series = axis.series;\n            series.forEach(function (series) {\n                // Reset the groupPixelWidth, then calculate if needed.\n                series.groupPixelWidth = void 0; // #2110\n                series.groupPixelWidth = (axis.getGroupPixelWidth &&\n                    axis.getGroupPixelWidth());\n                if (series.groupPixelWidth) {\n                    series.hasProcessed = true; // #2692\n                }\n                // Fire independing on series.groupPixelWidth to always set a proper\n                // dataGrouping state, (#16238)\n                series.applyGrouping(!!e.hasExtemesChanged);\n            });\n        };\n        // Get the data grouping pixel width based on the greatest defined individual\n        // width of the axis' series, and if whether one of the axes need grouping.\n        Axis.prototype.getGroupPixelWidth = function () {\n            var series = this.series,\n                len = series.length,\n                i,\n                groupPixelWidth = 0,\n                doGrouping = false,\n                dataLength,\n                dgOptions;\n            // If multiple series are compared on the same x axis, give them the same\n            // group pixel width (#334)\n            i = len;\n            while (i--) {\n                dgOptions = series[i].options.dataGrouping;\n                if (dgOptions) {\n                    groupPixelWidth = Math.max(groupPixelWidth, \n                    // Fallback to commonOptions (#9693)\n                    pick(dgOptions.groupPixelWidth, commonOptions.groupPixelWidth));\n                }\n            }\n            // If one of the series needs grouping, apply it to all (#1634)\n            i = len;\n            while (i--) {\n                dgOptions = series[i].options.dataGrouping;\n                if (dgOptions) { // #2692\n                    dataLength = (series[i].processedXData || series[i].data).length;\n                    // Execute grouping if the amount of points is greater than the\n                    // limit defined in groupPixelWidth\n                    if (series[i].groupPixelWidth ||\n                        (dataLength >\n                            (this.chart.plotSizeX / groupPixelWidth)) ||\n                        (dataLength && dgOptions.forced)) {\n                        doGrouping = true;\n                    }\n                }\n            }\n            return doGrouping ? groupPixelWidth : 0;\n        };\n        /**\n         * Highcharts Stock only. Force data grouping on all the axis' series.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Axis#setDataGrouping\n         *\n         * @param {boolean|Highcharts.DataGroupingOptionsObject} [dataGrouping]\n         *        A `dataGrouping` configuration. Use `false` to disable data grouping\n         *        dynamically.\n         *\n         * @param {boolean} [redraw=true]\n         *        Whether to redraw the chart or wait for a later call to\n         *        {@link Chart#redraw}.\n         */\n        Axis.prototype.setDataGrouping = function (dataGrouping, redraw) {\n            var axis = this;\n            var i;\n            redraw = pick(redraw, true);\n            if (!dataGrouping) {\n                dataGrouping = {\n                    forced: false,\n                    units: null\n                };\n            }\n            // Axis is instantiated, update all series\n            if (this instanceof Axis) {\n                i = this.series.length;\n                while (i--) {\n                    this.series[i].update({\n                        dataGrouping: dataGrouping\n                    }, false);\n                }\n                // Axis not yet instanciated, alter series options\n            }\n            else {\n                this.chart.options.series.forEach(function (seriesOptions) {\n                    seriesOptions.dataGrouping = dataGrouping;\n                }, false);\n            }\n            // Clear ordinal slope, so we won't accidentaly use the old one (#7827)\n            if (axis.ordinal) {\n                axis.ordinal.slope = void 0;\n            }\n            if (redraw) {\n                this.chart.redraw();\n            }\n        };\n        // When all series are processed, calculate the group pixel width and then\n        // if this value is different than zero apply groupings.\n        addEvent(Axis, 'postProcessData', Axis.prototype.applyGrouping);\n        // Override point prototype to throw a warning when trying to update grouped\n        // points.\n        addEvent(Point, 'update', function () {\n            if (this.dataGroup) {\n                error(24, false, this.series.chart);\n                return false;\n            }\n        });\n        // Extend the original method, make the tooltip's header reflect the grouped\n        // range.\n        addEvent(Tooltip, 'headerFormatter', function (e) {\n            var tooltip = this,\n                chart = this.chart,\n                time = chart.time,\n                labelConfig = e.labelConfig,\n                series = labelConfig.series,\n                options = series.options,\n                tooltipOptions = series.tooltipOptions,\n                dataGroupingOptions = options.dataGrouping,\n                xDateFormat = tooltipOptions.xDateFormat,\n                xDateFormatEnd,\n                xAxis = series.xAxis,\n                currentDataGrouping,\n                dateTimeLabelFormats,\n                labelFormats,\n                formattedKey,\n                formatString = tooltipOptions[e.isFooter ? 'footerFormat' : 'headerFormat'];\n            // apply only to grouped series\n            if (xAxis &&\n                xAxis.options.type === 'datetime' &&\n                dataGroupingOptions &&\n                isNumber(labelConfig.key)) {\n                // set variables\n                currentDataGrouping = series.currentDataGrouping;\n                dateTimeLabelFormats = dataGroupingOptions.dateTimeLabelFormats ||\n                    // Fallback to commonOptions (#9693)\n                    commonOptions.dateTimeLabelFormats;\n                // if we have grouped data, use the grouping information to get the\n                // right format\n                if (currentDataGrouping) {\n                    labelFormats =\n                        dateTimeLabelFormats[currentDataGrouping.unitName];\n                    if (currentDataGrouping.count === 1) {\n                        xDateFormat = labelFormats[0];\n                    }\n                    else {\n                        xDateFormat = labelFormats[1];\n                        xDateFormatEnd = labelFormats[2];\n                    }\n                    // if not grouped, and we don't have set the xDateFormat option, get the\n                    // best fit, so if the least distance between points is one minute, show\n                    // it, but if the least distance is one day, skip hours and minutes etc.\n                }\n                else if (!xDateFormat && dateTimeLabelFormats && xAxis.dateTime) {\n                    xDateFormat = xAxis.dateTime.getXDateFormat(labelConfig.x, tooltipOptions.dateTimeLabelFormats);\n                }\n                // now format the key\n                formattedKey = time.dateFormat(xDateFormat, labelConfig.key);\n                if (xDateFormatEnd) {\n                    formattedKey += time.dateFormat(xDateFormatEnd, labelConfig.key + currentDataGrouping.totalRange - 1);\n                }\n                // Replace default header style with class name\n                if (series.chart.styledMode) {\n                    formatString = this.styledModeFormat(formatString);\n                }\n                // return the replaced format\n                e.text = format(formatString, {\n                    point: extend(labelConfig.point, { key: formattedKey }),\n                    series: series\n                }, chart);\n                e.preventDefault();\n            }\n        });\n        // Destroy grouped data on series destroy\n        addEvent(Series, 'destroy', seriesProto.destroyGroupedData);\n        // Handle default options for data grouping. This must be set at runtime because\n        // some series types are defined after this.\n        addEvent(Series, 'afterSetOptions', function (e) {\n            var options = e.options,\n                type = this.type,\n                plotOptions = this.chart.options.plotOptions,\n                defaultOptions = D.defaultOptions.plotOptions[type].dataGrouping, \n                // External series, for example technical indicators should also inherit\n                // commonOptions which are not available outside this module\n                baseOptions = (this.useCommonDataGrouping && commonOptions);\n            if (plotOptions && (specificOptions[type] || baseOptions)) { // #1284\n                if (!defaultOptions) {\n                    defaultOptions = merge(commonOptions, specificOptions[type]);\n                }\n                var rangeSelector = this.chart.rangeSelector;\n                options.dataGrouping = merge(baseOptions, defaultOptions, plotOptions.series && plotOptions.series.dataGrouping, // #1228\n                // Set by the StockChart constructor:\n                plotOptions[type].dataGrouping, this.userOptions.dataGrouping, !options.isInternal &&\n                    rangeSelector &&\n                    isNumber(rangeSelector.selected) &&\n                    rangeSelector.buttonOptions[rangeSelector.selected].dataGrouping);\n            }\n        });\n        // When resetting the scale reset the hasProccessed flag to avoid taking\n        // previous data grouping of neighbour series into accound when determining\n        // group pixel width (#2692).\n        addEvent(Axis, 'afterSetScale', function () {\n            this.series.forEach(function (series) {\n                series.hasProcessed = false;\n            });\n        });\n        H.dataGrouping = dataGrouping;\n        /* eslint-enable no-invalid-this, valid-jsdoc */\n        /**\n         * Data grouping is the concept of sampling the data values into larger\n         * blocks in order to ease readability and increase performance of the\n         * JavaScript charts. Highcharts Stock by default applies data grouping when\n         * the points become closer than a certain pixel value, determined by\n         * the `groupPixelWidth` option.\n         *\n         * If data grouping is applied, the grouping information of grouped\n         * points can be read from the [Point.dataGroup](\n         * /class-reference/Highcharts.Point#dataGroup). If point options other than\n         * the data itself are set, for example `name` or `color` or custom properties,\n         * the grouping logic doesn't know how to group it. In this case the options of\n         * the first point instance are copied over to the group point. This can be\n         * altered through a custom `approximation` callback function.\n         *\n         * @declare   Highcharts.DataGroupingOptionsObject\n         * @product   highstock\n         * @requires  product:highstock\n         * @requires  module:modules/datagrouping\n         * @apioption plotOptions.series.dataGrouping\n         */\n        /**\n         * Specifies how the points should be located on the X axis inside the group.\n         * Points that are extremes can be set separately. Available options:\n         *\n         * - `start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * - `middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * - `end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-anchor\n         *         Changing the point x-coordinate inside the group.\n         *\n         * @see [dataGrouping.firstAnchor](#plotOptions.series.dataGrouping.firstAnchor)\n         * @see [dataGrouping.lastAnchor](#plotOptions.series.dataGrouping.lastAnchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchor}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.anchor\n         */\n        /**\n         * The method of approximation inside a group. When for example 30 days\n         * are grouped into one month, this determines what value should represent\n         * the group. Possible values are \"average\", \"averages\", \"open\", \"high\",\n         * \"low\", \"close\" and \"sum\". For OHLC and candlestick series the approximation\n         * is \"ohlc\" by default, which finds the open, high, low and close values\n         * within all the grouped data. For ranges, the approximation is \"range\",\n         * which finds the low and high values. For multi-dimensional data,\n         * like ranges and OHLC, \"averages\" will compute the average for each\n         * dimension.\n         *\n         * Custom aggregate methods can be added by assigning a callback function\n         * as the approximation. This function takes a numeric array as the\n         * argument and should return a single numeric value or `null`. Note\n         * that the numeric array will never contain null values, only true\n         * numbers. Instead, if null values are present in the raw data, the\n         * numeric array will have an `.hasNulls` property set to `true`. For\n         * single-value data sets the data is available in the first argument\n         * of the callback function. For OHLC data sets, all the open values\n         * are in the first argument, all high values in the second etc.\n         *\n         * Since v4.2.7, grouping meta data is available in the approximation\n         * callback from `this.dataGroupInfo`. It can be used to extract information\n         * from the raw data.\n         *\n         * Defaults to `average` for line-type series, `sum` for columns, `range`\n         * for range series, `hlc` for HLC, and `ohlc` for OHLC and candlestick.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-approximation\n         *         Approximation callback with custom data\n         * @sample {highstock} stock/plotoptions/series-datagrouping-simple-approximation\n         *         Simple approximation demo\n         *\n         * @type       {Highcharts.DataGroupingApproximationValue|Function}\n         * @apioption  plotOptions.series.dataGrouping.approximation\n         */\n        /**\n         * Datetime formats for the header of the tooltip in a stock chart.\n         * The format can vary within a chart depending on the currently selected\n         * time range and the current data grouping.\n         *\n         * The default formats are:\n         * ```js\n         * {\n         *     millisecond: [\n         *         '%A, %b %e, %H:%M:%S.%L', '%A, %b %e, %H:%M:%S.%L', '-%H:%M:%S.%L'\n         *     ],\n         *     second: ['%A, %b %e, %H:%M:%S', '%A, %b %e, %H:%M:%S', '-%H:%M:%S'],\n         *     minute: ['%A, %b %e, %H:%M', '%A, %b %e, %H:%M', '-%H:%M'],\n         *     hour: ['%A, %b %e, %H:%M', '%A, %b %e, %H:%M', '-%H:%M'],\n         *     day: ['%A, %b %e, %Y', '%A, %b %e', '-%A, %b %e, %Y'],\n         *     week: ['Week from %A, %b %e, %Y', '%A, %b %e', '-%A, %b %e, %Y'],\n         *     month: ['%B %Y', '%B', '-%B %Y'],\n         *     year: ['%Y', '%Y', '-%Y']\n         * }\n         * ```\n         *\n         * For each of these array definitions, the first item is the format\n         * used when the active time span is one unit. For instance, if the\n         * current data applies to one week, the first item of the week array\n         * is used. The second and third items are used when the active time\n         * span is more than two units. For instance, if the current data applies\n         * to two weeks, the second and third item of the week array are used,\n         *  and applied to the start and end date of the time span.\n         *\n         * @type      {Object}\n         * @apioption plotOptions.series.dataGrouping.dateTimeLabelFormats\n         */\n        /**\n         * Enable or disable data grouping.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @apioption plotOptions.series.dataGrouping.enabled\n         */\n        /**\n         * Specifies how the first grouped point is positioned on the xAxis.\n         * If firstAnchor and/or lastAnchor are defined, then those options take\n         * precedence over anchor for the first and/or last grouped points.\n         * Available options:\n         *\n         * -`start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * -`middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * -`end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * -`firstPoint` the first point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n         *\n         * -`lastPoint` the last point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n         *         Applying first and last anchor.\n         *\n         * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchorExtremes}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.firstAnchor\n         */\n        /**\n         * When data grouping is forced, it runs no matter how small the intervals\n         * are. This can be handy for example when the sum should be calculated\n         * for values appearing at random times within each hour.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @apioption plotOptions.series.dataGrouping.forced\n         */\n        /**\n         * The approximate pixel width of each group. If for example a series\n         * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n         * is performed. If however the series contains so many points that\n         * the spacing is less than the groupPixelWidth, Highcharts will try\n         * to group it into appropriate groups so that each is more or less\n         * two pixels wide. If multiple series with different group pixel widths\n         * are drawn on the same x axis, all series will take the greatest width.\n         * For example, line series have 2px default group width, while column\n         * series have 10px. If combined, both the line and the column will\n         * have 10px by default.\n         *\n         * @type      {number}\n         * @default   2\n         * @apioption plotOptions.series.dataGrouping.groupPixelWidth\n         */\n        /**\n         * By default only points within the visible range are grouped. Enabling this\n         * option will force data grouping to calculate all grouped points for a given\n         * dataset. That option prevents for example a column series from calculating\n         * a grouped point partially. The effect is similar to\n         * [Series.getExtremesFromAll](#plotOptions.series.getExtremesFromAll) but does\n         * not affect yAxis extremes.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-groupall/\n         *         Two series with the same data but different groupAll setting\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     6.1.0\n         * @apioption plotOptions.series.dataGrouping.groupAll\n         */\n        /**\n         * Specifies how the last grouped point is positioned on the xAxis.\n         * If firstAnchor and/or lastAnchor are defined, then those options take\n         * precedence over anchor for the first and/or last grouped points.\n         * Available options:\n         *\n         * -`start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * -`middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * -`end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * -`firstPoint` the first point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n         *\n         * -`lastPoint` the last point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n         *         Applying first and last anchor.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-last-anchor\n         *         Applying the last anchor in the chart with live data.\n         *\n         * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchorExtremes}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.lastAnchor\n         */\n        /**\n         * Normally, a group is indexed by the start of that group, so for example\n         * when 30 daily values are grouped into one month, that month's x value\n         * will be the 1st of the month. This apparently shifts the data to\n         * the left. When the smoothed option is true, this is compensated for.\n         * The data is shifted to the middle of the group, and min and max\n         * values are preserved. Internally, this is used in the Navigator series.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @deprecated\n         * @apioption plotOptions.series.dataGrouping.smoothed\n         */\n        /**\n         * An array determining what time intervals the data is allowed to be\n         * grouped to. Each array item is an array where the first value is\n         * the time unit and the second value another array of allowed multiples.\n         *\n         * Defaults to:\n         * ```js\n         * units: [[\n         *     'millisecond', // unit name\n         *     [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n         * ], [\n         *     'second',\n         *     [1, 2, 5, 10, 15, 30]\n         * ], [\n         *     'minute',\n         *     [1, 2, 5, 10, 15, 30]\n         * ], [\n         *     'hour',\n         *     [1, 2, 3, 4, 6, 8, 12]\n         * ], [\n         *     'day',\n         *     [1]\n         * ], [\n         *     'week',\n         *     [1]\n         * ], [\n         *     'month',\n         *     [1, 3, 6]\n         * ], [\n         *     'year',\n         *     null\n         * ]]\n         * ```\n         *\n         * @type      {Array<Array<string,(Array<number>|null)>>}\n         * @apioption plotOptions.series.dataGrouping.units\n         */\n        /**\n         * The approximate pixel width of each group. If for example a series\n         * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n         * is performed. If however the series contains so many points that\n         * the spacing is less than the groupPixelWidth, Highcharts will try\n         * to group it into appropriate groups so that each is more or less\n         * two pixels wide. Defaults to `10`.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-grouppixelwidth/\n         *         Two series with the same data density but different groupPixelWidth\n         *\n         * @type      {number}\n         * @default   10\n         * @apioption plotOptions.column.dataGrouping.groupPixelWidth\n         */\n        ''; // required by JSDoc parsing\n\n        return dataGrouping;\n    });\n    _registerModule(_modules, 'Series/HLC/HLCPoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2021 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var ColumnSeries = SeriesRegistry.seriesTypes.column;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var HLCPoint = /** @class */ (function (_super) {\n                __extends(HLCPoint, _super);\n            function HLCPoint() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.close = void 0;\n                _this.high = void 0;\n                _this.low = void 0;\n                _this.options = void 0;\n                _this.plotClose = void 0;\n                _this.series = void 0;\n                return _this;\n            }\n            return HLCPoint;\n        }(ColumnSeries.prototype.pointClass));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HLCPoint;\n    });\n    _registerModule(_modules, 'Series/HLC/HLCSeries.js', [_modules['Series/HLC/HLCPoint.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (HLCPoint, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var ColumnSeries = SeriesRegistry.seriesTypes.column;\n        var extend = U.extend,\n            merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The hlc series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.hlc\n         *\n         * @augments Highcharts.Series\n         */\n        var HLCSeries = /** @class */ (function (_super) {\n                __extends(HLCSeries, _super);\n            function HLCSeries() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                _this.yData = void 0;\n                return _this;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Extend the path if close is not between high and low.\n             *\n             * @param {SVGPath} path the path array of the point\n             * @param {number} halfStrokeWidth\n             * @param {number} value value of the point to which the stem should be extended\n             */\n            HLCSeries.prototype.extendStem = function (path, halfStrokeWidth, value) {\n                var start = path[0];\n                var end = path[1];\n                // We don't need to worry about crisp - close value\n                // is already crisped and halfStrokeWidth should remove it.\n                if (typeof start[2] === 'number') {\n                    start[2] = Math.max(value + halfStrokeWidth, start[2]);\n                }\n                if (typeof end[2] === 'number') {\n                    end[2] = Math.min(value - halfStrokeWidth, end[2]);\n                }\n            };\n            /**\n             * Function to create SVGPath of the point based on the\n             * plot positions of this point.\n             * @private\n             */\n            HLCSeries.prototype.getPointPath = function (point, graphic) {\n                // crisp vector coordinates\n                var strokeWidth = graphic.strokeWidth(),\n                    series = point.series,\n                    crispCorr = (strokeWidth % 2) / 2, \n                    // #2596:\n                    crispX = Math.round(point.plotX) - crispCorr,\n                    halfWidth = Math.round(point.shapeArgs.width / 2);\n                var path,\n                    plotClose = point.plotClose;\n                // the vertical stem\n                path = [\n                    ['M', crispX, Math.round(point.yBottom)],\n                    ['L', crispX, Math.round(point.plotHigh)]\n                ];\n                // close\n                if (point.close !== null) {\n                    plotClose = Math.round(point.plotClose) + crispCorr;\n                    path.push(['M', crispX, plotClose], ['L', crispX + halfWidth, plotClose]);\n                    series.extendStem(path, strokeWidth / 2, plotClose);\n                }\n                return path;\n            };\n            /**\n             * Draw single point\n             * @private\n             */\n            HLCSeries.prototype.drawSinglePoint = function (point) {\n                var series = point.series,\n                    chart = series.chart;\n                var path,\n                    graphic = point.graphic,\n                    isNew = !graphic;\n                if (typeof point.plotY !== 'undefined') {\n                    // Create and/or update the graphic\n                    if (!graphic) {\n                        point.graphic = graphic = chart.renderer.path()\n                            .add(series.group);\n                    }\n                    if (!chart.styledMode) {\n                        graphic.attr(series.pointAttribs(point, (point.selected && 'select'))); // #3897\n                    }\n                    // crisp vector coordinates\n                    path = series.getPointPath(point, graphic);\n                    graphic[isNew ? 'attr' : 'animate']({ d: path })\n                        .addClass(point.getClassName(), true);\n                }\n            };\n            /**\n             * Draw the data points\n             * @private\n             */\n            HLCSeries.prototype.drawPoints = function () {\n                this.points.forEach(this.drawSinglePoint);\n            };\n            /**\n             * @private\n             * @function Highcharts.seriesTypes.hlc#init\n             */\n            HLCSeries.prototype.init = function () {\n                _super.prototype.init.apply(this, arguments);\n                this.options.stacking = void 0; // #8817\n            };\n            /**\n             * Postprocess mapping between options and SVG attributes\n             * @private\n             */\n            HLCSeries.prototype.pointAttribs = function (point, state) {\n                var attribs = _super.prototype.pointAttribs.call(this,\n                    point,\n                    state);\n                delete attribs.fill;\n                return attribs;\n            };\n            HLCSeries.prototype.toYData = function (point) {\n                // return a plain array for speedy calculation\n                return [point.high, point.low, point.close];\n            };\n            /**\n             * Translate data points from raw values x and y to plotX and plotY\n             *\n             * @private\n             * @function Highcharts.seriesTypes.hlc#translate\n             */\n            HLCSeries.prototype.translate = function () {\n                var series = this,\n                    yAxis = series.yAxis,\n                    names = (this.pointArrayMap && this.pointArrayMap.slice()) || [],\n                    translated = names.map(function (name) {\n                        return \"plot\" + (name.charAt(0).toUpperCase() + name.slice(1));\n                });\n                translated.push('yBottom');\n                names.push('low');\n                _super.prototype.translate.apply(series);\n                // Do the translation\n                series.points.forEach(function (point) {\n                    names.forEach(function (name, i) {\n                        var value = point[name];\n                        if (value !== null) {\n                            if (series.dataModify) {\n                                value = series.dataModify.modifyValue(value);\n                            }\n                            point[translated[i]] =\n                                yAxis.toPixels(value, true);\n                        }\n                    });\n                    // Align the tooltip to the high value to avoid covering the\n                    // point\n                    point.tooltipPos[1] =\n                        point.plotHigh + yAxis.pos - series.chart.plotTop;\n                });\n            };\n            /**\n             * An HLC chart is a style of financial chart used to describe price\n             * movements over time. It displays high, low and close values per\n             * data point.\n             *\n             * @sample stock/demo/hlc/\n             *         HLC chart\n             *\n             * @extends      plotOptions.column\n             * @excluding    borderColor, borderRadius, borderWidth, crisp, stacking,\n             *               stack\n             * @product      highstock\n             * @optionparent plotOptions.hlc\n             */\n            HLCSeries.defaultOptions = merge(ColumnSeries.defaultOptions, {\n                /**\n                 * The approximate pixel width of each group. If for example a series\n                 * with 30 points is displayed over a 600 pixel wide plot area, no\n                 * grouping is performed. If however the series contains so many points\n                 * that the spacing is less than the groupPixelWidth, Highcharts will\n                 * try to group it into appropriate groups so that each is more or less\n                 * two pixels wide. Defaults to `5`.\n                 *\n                 * @type      {number}\n                 * @default   5\n                 * @product   highstock\n                 * @apioption plotOptions.hlc.dataGrouping.groupPixelWidth\n                 */\n                /**\n                 * @type      {Highcharts.DataGroupingApproximationValue|Function}\n                 * @default   hlc\n                 * @product   highstock\n                 * @apioption plotOptions.hlc.dataGrouping.approximation\n                 */\n                /**\n                 * @default   close\n                 * @apioption plotOptions.hlc.colorKey\n                 */\n                /**\n                 * The pixel width of the line/border. Defaults to `1`.\n                 *\n                 * @sample {highstock} stock/plotoptions/hlc-linewidth/\n                 *         A greater line width\n                 *\n                 * @type    {number}\n                 * @default 1\n                 * @product highstock\n                 *\n                 * @public\n                 */\n                lineWidth: 1,\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> ' +\n                        '<b> {series.name}</b><br/>' +\n                        'High: {point.high}<br/>' +\n                        'Low: {point.low}<br/>' +\n                        'Close: {point.close}<br/>'\n                },\n                threshold: null,\n                states: {\n                    /**\n                     * @extends plotOptions.column.states.hover\n                     * @product highstock\n                     */\n                    hover: {\n                        /**\n                         * The pixel width of the line representing the HLC point.\n                         *\n                         * @type    {number}\n                         * @default 3\n                         * @product highstock\n                         */\n                        lineWidth: 3\n                    }\n                },\n                /**\n                 * Determines which one of  `high`, `low`, `close` values should\n                 * be represented as `point.y`, which is later used to set dataLabel\n                 * position and [compare](#plotOptions.series.compare).\n                 *\n                 * @sample {highstock} stock/plotoptions/hlc-pointvalkey/\n                 *         Possible values\n                 *\n                 * @type       {string}\n                 * @default    close\n                 * @validvalue [\"high\", \"low\", \"close\"]\n                 * @product    highstock\n                 * @apioption  plotOptions.hlc.pointValKey\n                 */\n                /**\n                 * @default   close\n                 * @apioption plotOptions.hlc.colorKey\n                 */\n                stickyTracking: true\n            });\n            return HLCSeries;\n        }(ColumnSeries));\n        extend(HLCSeries.prototype, {\n            animate: null,\n            directTouch: false,\n            pointArrayMap: ['high', 'low', 'close'],\n            pointAttrToOptions: {\n                stroke: 'color',\n                'stroke-width': 'lineWidth'\n            },\n            pointValKey: 'close'\n        });\n        HLCSeries.prototype.pointClass = HLCPoint;\n        SeriesRegistry.registerSeriesType('hlc', HLCSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `hlc` series. If the [type](#series.hlc.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.hlc\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @apioption series.hlc\n         */\n        /**\n         * An array of data points for the series. For the `hlc` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of arrays with 4 or 3 values. In this case, the values correspond\n         *    to `x,high,low,close`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred. The `x` value can\n         *    also be omitted, in which case the inner arrays should be of length of 3\\.\n         *    Then the `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 5, 6, 7],\n         *        [1, 4, 8, 2],\n         *        [2, 3, 4, 10]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.hlc.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        high: 4,\n         *        low: 5,\n         *        close: 2,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        high: 3,\n         *        low: 6,\n         *        close: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<Array<(number|string),number,number>|Array<(number|string),number,number,number>|*>}\n         * @extends   series.arearange.data\n         * @excluding y, marker\n         * @product   highstock\n         * @apioption series.hlc.data\n         */\n        /**\n         * The closing value of each data point.\n         *\n         * @type      {number}\n         * @product   highstock\n         * @apioption series.hlc.data.close\n         */\n        ''; // adds doclets above to transpilat\n\n        return HLCSeries;\n    });\n    _registerModule(_modules, 'Series/OHLC/OHLCPoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var HLCSeries = SeriesRegistry.seriesTypes.hlc;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var OHLCPoint = /** @class */ (function (_super) {\n                __extends(OHLCPoint, _super);\n            function OHLCPoint() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.open = void 0;\n                _this.options = void 0;\n                _this.plotOpen = void 0;\n                _this.series = void 0;\n                return _this;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Extend the parent method by adding up or down to the class name.\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#getClassName\n             */\n            OHLCPoint.prototype.getClassName = function () {\n                return _super.prototype.getClassName.call(this) +\n                    (this.open < this.close ?\n                        ' highcharts-point-up' :\n                        ' highcharts-point-down');\n            };\n            /**\n             * Save upColor as point color (#14826).\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#resolveUpColor\n             */\n            OHLCPoint.prototype.resolveUpColor = function () {\n                if (this.open < this.close &&\n                    !this.options.color &&\n                    this.series.options.upColor) {\n                    this.color = this.series.options.upColor;\n                }\n            };\n            /**\n             * Extend the parent method by saving upColor.\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#resolveColor\n             */\n            OHLCPoint.prototype.resolveColor = function () {\n                _super.prototype.resolveColor.call(this);\n                this.resolveUpColor();\n            };\n            /**\n             * Extend the parent method by saving upColor.\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#getZone\n             *\n             * @return {Highcharts.SeriesZonesOptionsObject}\n             *         The zone item.\n             */\n            OHLCPoint.prototype.getZone = function () {\n                var zone = _super.prototype.getZone.call(this);\n                this.resolveUpColor();\n                return zone;\n            };\n            /**\n             * Extend the parent method by resolving up/down colors (#15849)\n             * @private\n             **/\n            OHLCPoint.prototype.applyOptions = function () {\n                _super.prototype.applyOptions.apply(this, arguments);\n                if (this.resolveColor) {\n                    this.resolveColor();\n                }\n                return this;\n            };\n            return OHLCPoint;\n        }(HLCSeries.prototype.pointClass));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OHLCPoint;\n    });\n    _registerModule(_modules, 'Series/OHLC/OHLCSeries.js', [_modules['Series/OHLC/OHLCPoint.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (OHLCPoint, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var Series = SeriesRegistry.series,\n            HLCSeries = SeriesRegistry.seriesTypes.hlc;\n        var addEvent = U.addEvent,\n            extend = U.extend,\n            merge = U.merge;\n        /**\n         * The ohlc series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ohlc\n         *\n         * @augments Highcharts.Series\n         */\n        var OHLCSeries = /** @class */ (function (_super) {\n                __extends(OHLCSeries, _super);\n            function OHLCSeries() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            OHLCSeries.prototype.getPointPath = function (point, graphic) {\n                var path = _super.prototype.getPointPath.call(this,\n                    point,\n                    graphic),\n                    strokeWidth = graphic.strokeWidth(),\n                    crispCorr = (strokeWidth % 2) / 2,\n                    crispX = Math.round(point.plotX) - crispCorr,\n                    halfWidth = Math.round(point.shapeArgs.width / 2);\n                var plotOpen = point.plotOpen;\n                // crisp vector coordinates\n                if (point.open !== null) {\n                    plotOpen = Math.round(point.plotOpen) + crispCorr;\n                    path.push(['M', crispX, plotOpen], ['L', crispX - halfWidth, plotOpen]);\n                    _super.prototype.extendStem.call(this, path, strokeWidth / 2, plotOpen);\n                }\n                return path;\n            };\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Postprocess mapping between options and SVG attributes\n             * @private\n             */\n            OHLCSeries.prototype.pointAttribs = function (point, state) {\n                var attribs = _super.prototype.pointAttribs.call(this,\n                    point,\n                    state),\n                    options = this.options;\n                delete attribs.fill;\n                if (!point.options.color &&\n                    options.upColor &&\n                    point.open < point.close) {\n                    attribs.stroke = options.upColor;\n                }\n                return attribs;\n            };\n            OHLCSeries.prototype.toYData = function (point) {\n                // return a plain array for speedy calculation\n                return [point.open, point.high, point.low, point.close];\n            };\n            /**\n             * An OHLC chart is a style of financial chart used to describe price\n             * movements over time. It displays open, high, low and close values per\n             * data point.\n             *\n             * @sample stock/demo/ohlc/\n             *         OHLC chart\n             *\n             * @extends      plotOptions.hlc\n             * @product      highstock\n             * @optionparent plotOptions.ohlc\n             */\n            /**\n             * The parameter allows setting line series type and use OHLC indicators.\n             * Data in OHLC format is required.\n             *\n             * @sample {highstock} stock/indicators/use-ohlc-data\n             *         Use OHLC data format to plot line chart\n             *\n             * @type      {boolean}\n             * @product   highstock\n             * @apioption plotOptions.line.useOhlcData\n             */\n            OHLCSeries.defaultOptions = merge(HLCSeries.defaultOptions, {\n                /**\n                 * @type      {Highcharts.DataGroupingApproximationValue|Function}\n                 * @default   ohlc\n                 * @product   highstock\n                 * @apioption plotOptions.ohlc.dataGrouping.approximation\n                 */\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> ' +\n                        '<b> {series.name}</b><br/>' +\n                        'Open: {point.open}<br/>' +\n                        'High: {point.high}<br/>' +\n                        'Low: {point.low}<br/>' +\n                        'Close: {point.close}<br/>'\n                }\n                /**\n                 * Determines which one of  `open`, `high`, `low`, `close` values should\n                 * be represented as `point.y`, which is later used to set dataLabel\n                 * position and [compare](#plotOptions.series.compare).\n                 *\n                 * @default    close\n                 * @validvalue [\"open\", \"high\", \"low\", \"close\"]\n                 * @product    highstock\n                 * @apioption  plotOptions.ohlc.pointValKey\n                 */\n                /**\n                 * Line color for up points.\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @product   highstock\n                 * @apioption plotOptions.ohlc.upColor\n                 */\n            });\n            return OHLCSeries;\n        }(HLCSeries));\n        extend(OHLCSeries.prototype, {\n            pointArrayMap: ['open', 'high', 'low', 'close']\n        });\n        OHLCSeries.prototype.pointClass = OHLCPoint;\n        SeriesRegistry.registerSeriesType('ohlc', OHLCSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        // Add useOhlcData option\n        addEvent(Series, 'init', function (eventOptions) {\n            // eslint-disable-next-line no-invalid-this\n            var series = this,\n                options = eventOptions.options;\n            if (options.useOhlcData &&\n                options.id !== 'highcharts-navigator-series') {\n                extend(series, {\n                    pointValKey: OHLCSeries.prototype.pointValKey,\n                    // keys: ohlcProto.keys, // @todo potentially nonsense\n                    pointArrayMap: OHLCSeries.prototype.pointArrayMap,\n                    toYData: OHLCSeries.prototype.toYData\n                });\n            }\n        });\n        addEvent(Series, 'afterSetOptions', function (e) {\n            var options = e.options,\n                dataGrouping = options.dataGrouping;\n            if (dataGrouping &&\n                options.useOhlcData &&\n                options.id !== 'highcharts-navigator-series') {\n                dataGrouping.approximation = 'ohlc';\n            }\n        });\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `ohlc` series. If the [type](#series.ohlc.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ohlc\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @apioption series.ohlc\n         */\n        /**\n         * An array of data points for the series. For the `ohlc` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of arrays with 5 or 4 values. In this case, the values correspond\n         *    to `x,open,high,low,close`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred. The `x` value can\n         *    also be omitted, in which case the inner arrays should be of length 4\\.\n         *    Then the `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 6, 5, 6, 7],\n         *        [1, 9, 4, 8, 2],\n         *        [2, 6, 3, 4, 10]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.ohlc.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        open: 3,\n         *        high: 4,\n         *        low: 5,\n         *        close: 2,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        open: 4,\n         *        high: 3,\n         *        low: 6,\n         *        close: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<Array<(number|string),number,number,number>|Array<(number|string),number,number,number,number>|*>}\n         * @extends   series.arearange.data\n         * @excluding y, marker\n         * @product   highstock\n         * @apioption series.ohlc.data\n         */\n        /**\n         * The opening value of each data point.\n         *\n         * @type      {number}\n         * @product   highstock\n         * @apioption series.ohlc.data.open\n         */\n        ''; // adds doclets above to transpilat\n\n        return OHLCSeries;\n    });\n    _registerModule(_modules, 'Series/Candlestick/CandlestickSeries.js', [_modules['Core/DefaultOptions.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (D, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var defaultOptions = D.defaultOptions;\n        var _a = SeriesRegistry.seriesTypes,\n            ColumnSeries = _a.column,\n            OHLCSeries = _a.ohlc;\n        var merge = U.merge;\n        /* *\n         *\n         *  Code\n         *\n         * */\n        /**\n         * The candlestick series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.candlestick\n         *\n         * @augments Highcharts.seriesTypes.ohlc\n         */\n        var CandlestickSeries = /** @class */ (function (_super) {\n                __extends(CandlestickSeries, _super);\n            function CandlestickSeries() {\n                /* *\n                 *\n                 * Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 * Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             * Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Postprocess mapping between options and SVG attributes\n             *\n             * @private\n             * @function Highcharts.seriesTypes.candlestick#pointAttribs\n             */\n            CandlestickSeries.prototype.pointAttribs = function (point, state) {\n                var attribs = ColumnSeries.prototype.pointAttribs.call(this,\n                    point,\n                    state),\n                    options = this.options,\n                    isUp = point.open < point.close,\n                    stroke = options.lineColor || this.color,\n                    color = point.color || this.color, // (#14826)\n                    stateOptions;\n                attribs['stroke-width'] = options.lineWidth;\n                attribs.fill = point.options.color ||\n                    (isUp ? (options.upColor || color) : color);\n                attribs.stroke = point.options.lineColor ||\n                    (isUp ? (options.upLineColor || stroke) : stroke);\n                // Select or hover states\n                if (state) {\n                    stateOptions = options.states[state];\n                    attribs.fill = stateOptions.color || attribs.fill;\n                    attribs.stroke = stateOptions.lineColor || attribs.stroke;\n                    attribs['stroke-width'] =\n                        stateOptions.lineWidth || attribs['stroke-width'];\n                }\n                return attribs;\n            };\n            /**\n             * Draw the data points.\n             *\n             * @private\n             * @function Highcharts.seriesTypes.candlestick#drawPoints\n             */\n            CandlestickSeries.prototype.drawPoints = function () {\n                var series = this,\n                    points = series.points,\n                    chart = series.chart,\n                    reversedYAxis = series.yAxis.reversed;\n                points.forEach(function (point) {\n                    var graphic = point.graphic,\n                        plotOpen,\n                        plotClose,\n                        topBox,\n                        bottomBox,\n                        hasTopWhisker,\n                        hasBottomWhisker,\n                        crispCorr,\n                        crispX,\n                        path,\n                        halfWidth,\n                        isNew = !graphic;\n                    if (typeof point.plotY !== 'undefined') {\n                        if (!graphic) {\n                            point.graphic = graphic = chart.renderer.path()\n                                .add(series.group);\n                        }\n                        if (!series.chart.styledMode) {\n                            graphic\n                                .attr(series.pointAttribs(point, (point.selected && 'select'))) // #3897\n                                .shadow(series.options.shadow);\n                        }\n                        // Crisp vector coordinates\n                        crispCorr = (graphic.strokeWidth() % 2) / 2;\n                        // #2596:\n                        crispX = Math.round(point.plotX) - crispCorr;\n                        plotOpen = point.plotOpen;\n                        plotClose = point.plotClose;\n                        topBox = Math.min(plotOpen, plotClose);\n                        bottomBox = Math.max(plotOpen, plotClose);\n                        halfWidth = Math.round(point.shapeArgs.width / 2);\n                        hasTopWhisker = reversedYAxis ?\n                            bottomBox !== point.yBottom :\n                            Math.round(topBox) !==\n                                Math.round(point.plotHigh);\n                        hasBottomWhisker = reversedYAxis ?\n                            Math.round(topBox) !==\n                                Math.round(point.plotHigh) :\n                            bottomBox !== point.yBottom;\n                        topBox = Math.round(topBox) + crispCorr;\n                        bottomBox = Math.round(bottomBox) + crispCorr;\n                        // Create the path. Due to a bug in Chrome 49, the path is\n                        // first instanciated with no values, then the values\n                        // pushed. For unknown reasons, instanciating the path array\n                        // with all the values would lead to a crash when updating\n                        // frequently (#5193).\n                        path = [];\n                        path.push(['M', crispX - halfWidth, bottomBox], ['L', crispX - halfWidth, topBox], ['L', crispX + halfWidth, topBox], ['L', crispX + halfWidth, bottomBox], ['Z'], // Ensure a nice rectangle #2602\n                        ['M', crispX, topBox], [\n                            'L',\n                            // #460, #2094\n                            crispX,\n                            hasTopWhisker ?\n                                Math.round(reversedYAxis ?\n                                    point.yBottom :\n                                    point.plotHigh) :\n                                topBox\n                        ], ['M', crispX, bottomBox], [\n                            'L',\n                            // #460, #2094\n                            crispX,\n                            hasBottomWhisker ?\n                                Math.round(reversedYAxis ?\n                                    point.plotHigh :\n                                    point.yBottom) :\n                                bottomBox\n                        ]);\n                        graphic[isNew ? 'attr' : 'animate']({ d: path })\n                            .addClass(point.getClassName(), true);\n                    }\n                });\n                /* eslint-enable valid-jsdoc */\n            };\n            CandlestickSeries.defaultOptions = merge(OHLCSeries.defaultOptions, defaultOptions.plotOptions, \n            /**\n             * A candlestick chart is a style of financial chart used to describe\n             * price movements over time.\n             *\n             * @sample stock/demo/candlestick/\n             *         Candlestick chart\n             *\n             * @extends      plotOptions.ohlc\n             * @excluding    borderColor,borderRadius,borderWidth\n             * @product      highstock\n             * @optionparent plotOptions.candlestick\n             */\n            {\n                /**\n                 * The specific line color for up candle sticks. The default is to\n                 * inherit the general `lineColor` setting.\n                 *\n                 * @sample {highstock} stock/plotoptions/candlestick-linecolor/\n                 *         Candlestick line colors\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @since     1.3.6\n                 * @product   highstock\n                 * @apioption plotOptions.candlestick.upLineColor\n                 */\n                states: {\n                    /**\n                     * @extends plotOptions.column.states.hover\n                     * @product highstock\n                     */\n                    hover: {\n                        /**\n                         * The pixel width of the line/border around the\n                         * candlestick.\n                         *\n                         * @product highstock\n                         */\n                        lineWidth: 2\n                    }\n                },\n                tooltip: defaultOptions.plotOptions.ohlc.tooltip,\n                /**\n                 * @type    {number|null}\n                 * @product highstock\n                 */\n                threshold: null,\n                /**\n                 * The color of the line/border of the candlestick.\n                 *\n                 * In styled mode, the line stroke can be set with the\n                 * `.highcharts-candlestick-series .highcahrts-point` rule.\n                 *\n                 * @see [upLineColor](#plotOptions.candlestick.upLineColor)\n                 *\n                 * @sample {highstock} stock/plotoptions/candlestick-linecolor/\n                 *         Candlestick line colors\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default #000000\n                 * @product highstock\n                 */\n                lineColor: \"#000000\" /* neutralColor100 */,\n                /**\n                 * The pixel width of the candlestick line/border. Defaults to `1`.\n                 *\n                 *\n                 * In styled mode, the line stroke width can be set with the\n                 * `.highcharts-candlestick-series .highcahrts-point` rule.\n                 *\n                 * @product highstock\n                 */\n                lineWidth: 1,\n                /**\n                 * The fill color of the candlestick when values are rising.\n                 *\n                 * In styled mode, the up color can be set with the\n                 * `.highcharts-candlestick-series .highcharts-point-up` rule.\n                 *\n                 * @sample {highstock} stock/plotoptions/candlestick-color/\n                 *         Custom colors\n                 * @sample {highstock} highcharts/css/candlestick/\n                 *         Colors in styled mode\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default #ffffff\n                 * @product highstock\n                */\n                upColor: \"#ffffff\" /* backgroundColor */,\n                /**\n                 * @product highstock\n                 */\n                stickyTracking: true\n            });\n            return CandlestickSeries;\n        }(OHLCSeries));\n        SeriesRegistry.registerSeriesType('candlestick', CandlestickSeries);\n        /* *\n         *\n         * Default Export\n         *\n         * */\n        /* *\n         *\n         * API Options\n         *\n         * */\n        /**\n         * A `candlestick` series. If the [type](#series.candlestick.type)\n         * option is not specified, it is inherited from [chart.type](\n         * #chart.type).\n         *\n         * @type      {*}\n         * @extends   series,plotOptions.candlestick\n         * @excluding dataParser, dataURL, marker\n         * @product   highstock\n         * @apioption series.candlestick\n         */\n        /**\n         * An array of data points for the series. For the `candlestick` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of arrays with 5 or 4 values. In this case, the values correspond\n         *    to `x,open,high,low,close`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred. The `x` value can\n         *    also be omitted, in which case the inner arrays should be of length 4.\n         *    Then the `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 7, 2, 0, 4],\n         *        [1, 1, 4, 2, 8],\n         *        [2, 3, 3, 9, 3]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.candlestick.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        open: 9,\n         *        high: 2,\n         *        low: 4,\n         *        close: 6,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        open: 1,\n         *        high: 4,\n         *        low: 7,\n         *        close: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<Array<(number|string),number,number,number>|Array<(number|string),number,number,number,number>|*>}\n         * @extends   series.ohlc.data\n         * @excluding y\n         * @product   highstock\n         * @apioption series.candlestick.data\n         */\n        ''; // adds doclets above to transpilat\n\n        return CandlestickSeries;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var ColumnSeries = SeriesRegistry.seriesTypes.column;\n        var isNumber = U.isNumber;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var FlagsPoint = /** @class */ (function (_super) {\n                __extends(FlagsPoint, _super);\n            function FlagsPoint() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                _this.options = void 0;\n                _this.series = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            FlagsPoint.prototype.isValid = function () {\n                // #9233 - Prevent from treating flags as null points (even if\n                // they have no y values defined).\n                return isNumber(this.y) || typeof this.y === 'undefined';\n            };\n            /**\n             * @private\n             */\n            FlagsPoint.prototype.hasNewShapeType = function () {\n                var shape = this.options.shape || this.series.options.shape;\n                return this.graphic && shape && shape !== this.graphic.symbolKey;\n            };\n            return FlagsPoint;\n        }(ColumnSeries.prototype.pointClass));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FlagsPoint;\n    });\n    _registerModule(_modules, 'Series/OnSeriesComposition.js', [_modules['Series/Column/ColumnSeries.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (ColumnSeries, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var columnProto = ColumnSeries.prototype;\n        var seriesProto = Series.prototype;\n        var defined = U.defined,\n            stableSort = U.stableSort;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var OnSeriesComposition;\n        (function (OnSeriesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Properties\n             *\n             * */\n            var composedClasses = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(SeriesClass) {\n                if (composedClasses.indexOf(SeriesClass) === -1) {\n                    composedClasses.push(SeriesClass);\n                    var seriesProto_1 = SeriesClass.prototype;\n                    seriesProto_1.getPlotBox = getPlotBox;\n                    seriesProto_1.translate = translate;\n                }\n                return SeriesClass;\n            }\n            OnSeriesComposition.compose = compose;\n            /**\n             * Override getPlotBox. If the onSeries option is valid, return the plot box\n             * of the onSeries, otherwise proceed as usual.\n             *\n             * @private\n             */\n            function getPlotBox() {\n                return seriesProto.getPlotBox.call((this.options.onSeries &&\n                    this.chart.get(this.options.onSeries)) || this);\n            }\n            OnSeriesComposition.getPlotBox = getPlotBox;\n            /**\n             * Extend the translate method by placing the point on the related series\n             *\n             * @private\n             */\n            function translate() {\n                columnProto.translate.apply(this);\n                var series = this,\n                    options = series.options,\n                    chart = series.chart,\n                    points = series.points,\n                    optionsOnSeries = options.onSeries,\n                    onSeries = (optionsOnSeries &&\n                        chart.get(optionsOnSeries)),\n                    step = onSeries && onSeries.options.step,\n                    onData = (onSeries && onSeries.points),\n                    inverted = chart.inverted,\n                    xAxis = series.xAxis,\n                    yAxis = series.yAxis;\n                var cursor = points.length - 1,\n                    point,\n                    lastPoint,\n                    onKey = options.onKey || 'y',\n                    i = onData && onData.length,\n                    xOffset = 0,\n                    leftPoint,\n                    lastX,\n                    rightPoint,\n                    currentDataGrouping,\n                    distanceRatio;\n                // relate to a master series\n                if (onSeries && onSeries.visible && i) {\n                    xOffset = (onSeries.pointXOffset || 0) + (onSeries.barW || 0) / 2;\n                    currentDataGrouping = onSeries.currentDataGrouping;\n                    lastX = (onData[i - 1].x +\n                        (currentDataGrouping ? currentDataGrouping.totalRange : 0)); // #2374\n                    // sort the data points\n                    stableSort(points, function (a, b) { return (a.x - b.x); });\n                    onKey = 'plot' + onKey[0].toUpperCase() + onKey.substr(1);\n                    while (i-- && points[cursor]) {\n                        leftPoint = onData[i];\n                        point = points[cursor];\n                        point.y = leftPoint.y;\n                        if (leftPoint.x <= point.x &&\n                            typeof leftPoint[onKey] !== 'undefined') {\n                            if (point.x <= lastX) { // #803\n                                point.plotY = leftPoint[onKey];\n                                // interpolate between points, #666\n                                if (leftPoint.x < point.x &&\n                                    !step) {\n                                    rightPoint = onData[i + 1];\n                                    if (rightPoint &&\n                                        typeof rightPoint[onKey] !== 'undefined') {\n                                        // the distance ratio, between 0 and 1\n                                        distanceRatio =\n                                            (point.x - leftPoint.x) /\n                                                (rightPoint.x - leftPoint.x);\n                                        point.plotY +=\n                                            distanceRatio *\n                                                // the plotY distance\n                                                (rightPoint[onKey] - leftPoint[onKey]);\n                                        point.y +=\n                                            distanceRatio *\n                                                (rightPoint.y - leftPoint.y);\n                                    }\n                                }\n                            }\n                            cursor--;\n                            i++; // check again for points in the same x position\n                            if (cursor < 0) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                // Add plotY position and handle stacking\n                points.forEach(function (point, i) {\n                    var stackIndex;\n                    point.plotX += xOffset; // #2049\n                    // Undefined plotY means the point is either on axis, outside series\n                    // range or hidden series. If the series is outside the range of the\n                    // x axis it should fall through with an undefined plotY, but then\n                    // we must remove the shapeArgs (#847). For inverted charts, we need\n                    // to calculate position anyway, because series.invertGroups is not\n                    // defined\n                    if (typeof point.plotY === 'undefined' || inverted) {\n                        if (point.plotX >= 0 &&\n                            point.plotX <= xAxis.len) {\n                            // We're inside xAxis range\n                            if (inverted) {\n                                point.plotY = xAxis.translate(point.x, 0, 1, 0, 1);\n                                point.plotX = defined(point.y) ?\n                                    yAxis.translate(point.y, 0, 0, 0, 1) :\n                                    0;\n                            }\n                            else {\n                                point.plotY = (xAxis.opposite ? 0 : series.yAxis.len) +\n                                    xAxis.offset; // For the windbarb demo\n                            }\n                        }\n                        else {\n                            point.shapeArgs = {}; // 847\n                        }\n                    }\n                    // if multiple flags appear at the same x, order them into a stack\n                    lastPoint = points[i - 1];\n                    if (lastPoint && lastPoint.plotX === point.plotX) {\n                        if (typeof lastPoint.stackIndex === 'undefined') {\n                            lastPoint.stackIndex = 0;\n                        }\n                        stackIndex = lastPoint.stackIndex + 1;\n                    }\n                    point.stackIndex = stackIndex; // #3639\n                });\n                this.onSeries = onSeries;\n            }\n            OnSeriesComposition.translate = translate;\n        })(OnSeriesComposition || (OnSeriesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OnSeriesComposition;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsSymbols.js', [_modules['Core/Renderer/RendererRegistry.js'], _modules['Core/Renderer/SVG/SVGRenderer.js']], function (RendererRegistry, SVGRenderer) {\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        var symbols = SVGRenderer.prototype.symbols;\n        /* *\n         *\n         *  Symbols\n         *\n         * */\n        // create the flag icon with anchor\n        symbols.flag = function (x, y, w, h, options) {\n            var anchorX = (options && options.anchorX) || x,\n                anchorY = (options && options.anchorY) || y;\n            // To do: unwanted any cast because symbols.circle has wrong type, it\n            // actually returns an SVGPathArray\n            var path = symbols.circle(anchorX - 1,\n                anchorY - 1, 2, 2);\n            path.push(['M', anchorX, anchorY], ['L', x, y + h], ['L', x, y], ['L', x + w, y], ['L', x + w, y + h], ['L', x, y + h], ['Z']);\n            return path;\n        };\n        /**\n         * Create the circlepin and squarepin icons with anchor.\n         * @private\n         * @param {string} shape\n         * circle or square\n         */\n        function createPinSymbol(shape) {\n            symbols[(shape + 'pin')] = function (x, y, w, h, options) {\n                var anchorX = options && options.anchorX,\n                    anchorY = options && options.anchorY;\n                var path;\n                // For single-letter flags, make sure circular flags are not taller\n                // than their width\n                if (shape === 'circle' && h > w) {\n                    x -= Math.round((h - w) / 2);\n                    w = h;\n                }\n                path = (symbols[shape])(x, y, w, h);\n                if (anchorX && anchorY) {\n                    /**\n                     * If the label is below the anchor, draw the connecting line from\n                     * the top edge of the label, otherwise start drawing from the\n                     * bottom edge\n                     */\n                    var labelX = anchorX;\n                    if (shape === 'circle') {\n                        labelX = x + w / 2;\n                    }\n                    else {\n                        var startSeg = path[0];\n                        var endSeg = path[1];\n                        if (startSeg[0] === 'M' && endSeg[0] === 'L') {\n                            labelX = (startSeg[1] + endSeg[1]) / 2;\n                        }\n                    }\n                    var labelY = (y > anchorY) ? y : y + h;\n                    path.push([\n                        'M',\n                        labelX,\n                        labelY\n                    ], [\n                        'L',\n                        anchorX,\n                        anchorY\n                    ]);\n                    path = path.concat(symbols.circle(anchorX - 1, anchorY - 1, 2, 2));\n                }\n                return path;\n            };\n        }\n        createPinSymbol('circle');\n        createPinSymbol('square');\n        /**\n         * The symbol callbacks are generated on the SVGRenderer object in all browsers.\n         * Even VML browsers need this in order to generate shapes in export. Now share\n         * them with the VMLRenderer.\n         */\n        var Renderer = RendererRegistry.getRendererType();\n        if (Renderer !== SVGRenderer) {\n            Renderer.prototype.symbols.circlepin = symbols.circlepin;\n            Renderer.prototype.symbols.flag = symbols.flag;\n            Renderer.prototype.symbols.squarepin = symbols.squarepin;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return symbols;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsSeries.js', [_modules['Series/Flags/FlagsPoint.js'], _modules['Core/Globals.js'], _modules['Series/OnSeriesComposition.js'], _modules['Core/Renderer/RendererUtilities.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Core/Utilities.js']], function (FlagsPoint, H, OnSeriesComposition, R, SeriesRegistry, SVGElement, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var noop = H.noop;\n        var distribute = R.distribute;\n        var Series = SeriesRegistry.series,\n            ColumnSeries = SeriesRegistry.seriesTypes.column;\n        var addEvent = U.addEvent,\n            defined = U.defined,\n            extend = U.extend,\n            merge = U.merge,\n            objectEach = U.objectEach,\n            wrap = U.wrap;\n        /* *\n         *\n         *  Classes\n         *\n         * */\n        /**\n         * The Flags series.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.flags\n         *\n         * @augments Highcharts.Series\n         */\n        var FlagsSeries = /** @class */ (function (_super) {\n                __extends(FlagsSeries, _super);\n            function FlagsSeries() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Disable animation, but keep clipping (#8546).\n             * @private\n             */\n            FlagsSeries.prototype.animate = function (init) {\n                if (init) {\n                    this.setClip();\n                }\n            };\n            /**\n             * Draw the markers.\n             * @private\n             */\n            FlagsSeries.prototype.drawPoints = function () {\n                var series = this,\n                    points = series.points,\n                    chart = series.chart,\n                    renderer = chart.renderer,\n                    plotX,\n                    plotY,\n                    inverted = chart.inverted,\n                    options = series.options,\n                    optionsY = options.y,\n                    shape,\n                    i,\n                    point,\n                    graphic,\n                    stackIndex,\n                    anchorY,\n                    attribs,\n                    outsideRight,\n                    yAxis = series.yAxis,\n                    boxesMap = {},\n                    boxes = [],\n                    centered;\n                i = points.length;\n                while (i--) {\n                    point = points[i];\n                    outsideRight =\n                        (inverted ? point.plotY : point.plotX) >\n                            series.xAxis.len;\n                    plotX = point.plotX;\n                    stackIndex = point.stackIndex;\n                    shape = point.options.shape || options.shape;\n                    plotY = point.plotY;\n                    if (typeof plotY !== 'undefined') {\n                        plotY = point.plotY + optionsY -\n                            (typeof stackIndex !== 'undefined' &&\n                                (stackIndex * options.stackDistance));\n                    }\n                    // skip connectors for higher level stacked points\n                    point.anchorX = stackIndex ? void 0 : point.plotX;\n                    anchorY = stackIndex ? void 0 : point.plotY;\n                    centered = shape !== 'flag';\n                    graphic = point.graphic;\n                    // Only draw the point if y is defined and the flag is within\n                    // the visible area\n                    if (typeof plotY !== 'undefined' &&\n                        plotX >= 0 &&\n                        !outsideRight) {\n                        // #15384\n                        if (graphic && point.hasNewShapeType()) {\n                            graphic = graphic.destroy();\n                        }\n                        // Create the flag\n                        if (!graphic) {\n                            graphic = point.graphic = renderer.label('', null, null, shape, null, null, options.useHTML)\n                                .addClass('highcharts-point')\n                                .add(series.markerGroup);\n                            // Add reference to the point for tracker (#6303)\n                            if (point.graphic.div) {\n                                point.graphic.div.point = point;\n                            }\n                            graphic.isNew = true;\n                        }\n                        graphic.attr({\n                            align: centered ? 'center' : 'left',\n                            width: options.width,\n                            height: options.height,\n                            'text-align': options.textAlign\n                        });\n                        if (!chart.styledMode) {\n                            graphic\n                                .attr(series.pointAttribs(point))\n                                .css(merge(options.style, point.style))\n                                .shadow(options.shadow);\n                        }\n                        if (plotX > 0) { // #3119\n                            plotX -= graphic.strokeWidth() % 2; // #4285\n                        }\n                        // Plant the flag\n                        attribs = {\n                            y: plotY,\n                            anchorY: anchorY\n                        };\n                        if (options.allowOverlapX) {\n                            attribs.x = plotX;\n                            attribs.anchorX = point.anchorX;\n                        }\n                        graphic.attr({\n                            text: point.options.title || options.title || 'A'\n                        })[graphic.isNew ? 'attr' : 'animate'](attribs);\n                        // Rig for the distribute function\n                        if (!options.allowOverlapX) {\n                            if (!boxesMap[point.plotX]) {\n                                boxesMap[point.plotX] = {\n                                    align: centered ? 0.5 : 0,\n                                    size: graphic.width,\n                                    target: plotX,\n                                    anchorX: plotX\n                                };\n                            }\n                            else {\n                                boxesMap[point.plotX].size = Math.max(boxesMap[point.plotX].size, graphic.width);\n                            }\n                        }\n                        // Set the tooltip anchor position\n                        point.tooltipPos = [\n                            plotX,\n                            plotY + yAxis.pos - chart.plotTop\n                        ]; // #6327\n                    }\n                    else if (graphic) {\n                        point.graphic = graphic.destroy();\n                    }\n                }\n                // Handle X-dimension overlapping\n                if (!options.allowOverlapX) {\n                    var maxDistance_1 = 100;\n                    objectEach(boxesMap, function (box) {\n                        box.plotX = box.anchorX;\n                        boxes.push(box);\n                        maxDistance_1 = Math.max(box.size, maxDistance_1);\n                    });\n                    // If necessary (for overlapping or long labels)  distribute it\n                    // depending on the label width or a hardcoded value, #16041.\n                    distribute(boxes, inverted ? yAxis.len : this.xAxis.len, maxDistance_1);\n                    points.forEach(function (point) {\n                        var box = point.graphic && boxesMap[point.plotX];\n                        if (box) {\n                            point.graphic[point.graphic.isNew ? 'attr' : 'animate']({\n                                x: box.pos + box.align * box.size,\n                                anchorX: point.anchorX\n                            });\n                            // Hide flag when its box position is not specified\n                            // (#8573, #9299)\n                            if (!defined(box.pos)) {\n                                point.graphic.attr({\n                                    x: -9999,\n                                    anchorX: -9999\n                                });\n                                point.graphic.isNew = true;\n                            }\n                            else {\n                                point.graphic.isNew = false;\n                            }\n                        }\n                    });\n                }\n                // Can be a mix of SVG and HTML and we need events for both (#6303)\n                if (options.useHTML) {\n                    wrap(series.markerGroup, 'on', function (proceed) {\n                        return SVGElement.prototype.on.apply(\n                        // for HTML\n                        // eslint-disable-next-line no-invalid-this\n                        proceed.apply(this, [].slice.call(arguments, 1)), \n                        // and for SVG\n                        [].slice.call(arguments, 1));\n                    });\n                }\n            };\n            /**\n             * Extend the column trackers with listeners to expand and contract\n             * stacks.\n             * @private\n             */\n            FlagsSeries.prototype.drawTracker = function () {\n                var series = this,\n                    points = series.points;\n                _super.prototype.drawTracker.call(this);\n                /* *\n                * Bring each stacked flag up on mouse over, this allows readability\n                * of vertically stacked elements as well as tight points on the x\n                * axis. #1924.\n                */\n                points.forEach(function (point) {\n                    var graphic = point.graphic;\n                    if (graphic) {\n                        if (point.unbindMouseOver) {\n                            point.unbindMouseOver();\n                        }\n                        point.unbindMouseOver = addEvent(graphic.element, 'mouseover', function () {\n                            // Raise this point\n                            if (point.stackIndex > 0 &&\n                                !point.raised) {\n                                point._y = graphic.y;\n                                graphic.attr({\n                                    y: point._y - 8\n                                });\n                                point.raised = true;\n                            }\n                            // Revert other raised points\n                            points.forEach(function (otherPoint) {\n                                if (otherPoint !== point &&\n                                    otherPoint.raised &&\n                                    otherPoint.graphic) {\n                                    otherPoint.graphic.attr({\n                                        y: otherPoint._y\n                                    });\n                                    otherPoint.raised = false;\n                                }\n                            });\n                        });\n                    }\n                });\n            };\n            /**\n             * Get presentational attributes\n             * @private\n             */\n            FlagsSeries.prototype.pointAttribs = function (point, state) {\n                var options = this.options,\n                    color = (point && point.color) || this.color,\n                    lineColor = options.lineColor,\n                    lineWidth = (point && point.lineWidth),\n                    fill = (point && point.fillColor) || options.fillColor;\n                if (state) {\n                    fill = options.states[state].fillColor;\n                    lineColor = options.states[state].lineColor;\n                    lineWidth = options.states[state].lineWidth;\n                }\n                return {\n                    fill: fill || color,\n                    stroke: lineColor || color,\n                    'stroke-width': lineWidth || options.lineWidth || 0\n                };\n            };\n            /**\n             * @private\n             */\n            FlagsSeries.prototype.setClip = function () {\n                Series.prototype.setClip.apply(this, arguments);\n                if (this.options.clip !== false &&\n                    this.sharedClipKey &&\n                    this.markerGroup) {\n                    this.markerGroup.clip(this.chart.sharedClips[this.sharedClipKey]);\n                }\n            };\n            /**\n             * Flags are used to mark events in stock charts. They can be added on the\n             * timeline, or attached to a specific series.\n             *\n             * @sample stock/demo/flags-general/\n             *         Flags on a line series\n             *\n             * @extends      plotOptions.column\n             * @excluding    animation, borderColor, borderRadius, borderWidth,\n             *               colorByPoint, dataGrouping, pointPadding, pointWidth,\n             *               turboThreshold\n             * @product      highstock\n             * @optionparent plotOptions.flags\n             */\n            FlagsSeries.defaultOptions = merge(ColumnSeries.defaultOptions, {\n                /**\n                 * In case the flag is placed on a series, on what point key to place\n                 * it. Line and columns have one key, `y`. In range or OHLC-type series,\n                 * however, the flag can optionally be placed on the `open`, `high`,\n                 * `low` or `close` key.\n                 *\n                 * @sample {highstock} stock/plotoptions/flags-onkey/\n                 *         Range series, flag on high\n                 *\n                 * @type       {string}\n                 * @default    y\n                 * @since      4.2.2\n                 * @product    highstock\n                 * @validvalue [\"y\", \"open\", \"high\", \"low\", \"close\"]\n                 * @apioption  plotOptions.flags.onKey\n                 */\n                /**\n                 * The id of the series that the flags should be drawn on. If no id\n                 * is given, the flags are drawn on the x axis.\n                 *\n                 * @sample {highstock} stock/plotoptions/flags/\n                 *         Flags on series and on x axis\n                 *\n                 * @type      {string}\n                 * @product   highstock\n                 * @apioption plotOptions.flags.onSeries\n                 */\n                pointRange: 0,\n                /**\n                 * Whether the flags are allowed to overlap sideways. If `false`, the\n                 * flags are moved sideways using an algorithm that seeks to place every\n                 * flag as close as possible to its original position.\n                 *\n                 * @sample {highstock} stock/plotoptions/flags-allowoverlapx\n                 *         Allow sideways overlap\n                 *\n                 * @since 6.0.4\n                 */\n                allowOverlapX: false,\n                /**\n                 * The shape of the marker. Can be one of \"flag\", \"circlepin\",\n                 * \"squarepin\", or an image of the format `url(/path-to-image.jpg)`.\n                 * Individual shapes can also be set for each point.\n                 *\n                 * @sample {highstock} stock/plotoptions/flags/\n                 *         Different shapes\n                 *\n                 * @type    {Highcharts.FlagsShapeValue}\n                 * @product highstock\n                 */\n                shape: 'flag',\n                /**\n                 * When multiple flags in the same series fall on the same value, this\n                 * number determines the vertical offset between them.\n                 *\n                 * @sample {highstock} stock/plotoptions/flags-stackdistance/\n                 *         A greater stack distance\n                 *\n                 * @product highstock\n                 */\n                stackDistance: 12,\n                /**\n                 * Text alignment for the text inside the flag.\n                 *\n                 * @since      5.0.0\n                 * @product    highstock\n                 * @validvalue [\"left\", \"center\", \"right\"]\n                 */\n                textAlign: 'center',\n                /**\n                 * Specific tooltip options for flag series. Flag series tooltips are\n                 * different from most other types in that a flag doesn't have a data\n                 * value, so the tooltip rather displays the `text` option for each\n                 * point.\n                 *\n                 * @extends   plotOptions.series.tooltip\n                 * @excluding changeDecimals, valueDecimals, valuePrefix, valueSuffix\n                 * @product   highstock\n                 */\n                tooltip: {\n                    pointFormat: '{point.text}'\n                },\n                threshold: null,\n                /**\n                 * The text to display on each flag. This can be defined on series\n                 * level, or individually for each point. Defaults to `\"A\"`.\n                 *\n                 * @type      {string}\n                 * @default   A\n                 * @product   highstock\n                 * @apioption plotOptions.flags.title\n                 */\n                /**\n                 * The y position of the top left corner of the flag relative to either\n                 * the series (if onSeries is defined), or the x axis. Defaults to\n                 * `-30`.\n                 *\n                 * @product highstock\n                 */\n                y: -30,\n                /**\n                 * Whether to use HTML to render the flag texts. Using HTML allows for\n                 * advanced formatting, images and reliable bi-directional text\n                 * rendering. Note that exported images won't respect the HTML, and that\n                 * HTML won't respect Z-index settings.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     1.3\n                 * @product   highstock\n                 * @apioption plotOptions.flags.useHTML\n                 */\n                /**\n                 * Fixed width of the flag's shape. By default, width is autocalculated\n                 * according to the flag's title.\n                 *\n                 * @sample {highstock} stock/demo/flags-shapes/\n                 *         Flags with fixed width\n                 *\n                 * @type      {number}\n                 * @product   highstock\n                 * @apioption plotOptions.flags.width\n                 */\n                /**\n                 * Fixed height of the flag's shape. By default, height is\n                 * autocalculated according to the flag's title.\n                 *\n                 * @type      {number}\n                 * @product   highstock\n                 * @apioption plotOptions.flags.height\n                 */\n                /**\n                 * The fill color for the flags.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @product highstock\n                 */\n                fillColor: \"#ffffff\" /* backgroundColor */,\n                /**\n                 * The color of the line/border of the flag.\n                 *\n                 * In styled mode, the stroke is set in the\n                 * `.highcharts-flag-series.highcharts-point` rule.\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default   #000000\n                 * @product   highstock\n                 * @apioption plotOptions.flags.lineColor\n                 */\n                /**\n                 * The pixel width of the flag's line/border.\n                 *\n                 * @product highstock\n                 */\n                lineWidth: 1,\n                states: {\n                    /**\n                     * @extends plotOptions.column.states.hover\n                     * @product highstock\n                     */\n                    hover: {\n                        /**\n                         * The color of the line/border of the flag.\n                         *\n                         * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                         * @product highstock\n                         */\n                        lineColor: \"#000000\" /* neutralColor100 */,\n                        /**\n                         * The fill or background color of the flag.\n                         *\n                         * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                         * @product highstock\n                         */\n                        fillColor: \"#ccd6eb\" /* highlightColor20 */\n                    }\n                },\n                /**\n                 * The text styles of the flag.\n                 *\n                 * In styled mode, the styles are set in the\n                 * `.highcharts-flag-series .highcharts-point` rule.\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"fontSize\": \"11px\", \"fontWeight\": \"bold\"}\n                 * @product highstock\n                 */\n                style: {\n                    /** @ignore-option */\n                    fontSize: '11px',\n                    /** @ignore-option */\n                    fontWeight: 'bold'\n                }\n            });\n            return FlagsSeries;\n        }(ColumnSeries));\n        OnSeriesComposition.compose(FlagsSeries);\n        extend(FlagsSeries.prototype, {\n            allowDG: false,\n            forceCrop: true,\n            invertible: false,\n            noSharedTooltip: true,\n            pointClass: FlagsPoint,\n            sorted: false,\n            takeOrdinalPosition: false,\n            trackerGroups: ['markerGroup'],\n            buildKDTree: noop,\n            /**\n             * Inherit the initialization from base Series.\n             * @private\n             */\n            init: Series.prototype.init,\n            /**\n             * Don't invert the flag marker group (#4960).\n             * @private\n             */\n            invertGroups: noop\n        });\n        SeriesRegistry.registerSeriesType('flags', FlagsSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"circlepin\"|\"flag\"|\"squarepin\"} Highcharts.FlagsShapeValue\n         */\n        ''; // detach doclets above\n        /* *\n         *\n         *  API Option\n         *\n         * */\n        /**\n         * A `flags` series. If the [type](#series.flags.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.flags\n         * @excluding animation, borderColor, borderRadius, borderWidth, colorByPoint,\n         *            connectNulls, dashStyle, dataGrouping, dataParser, dataURL,\n         *            gapSize, gapUnit, linecap, lineWidth, marker, pointPadding,\n         *            pointWidth, step, turboThreshold, useOhlcData\n         * @product   highstock\n         * @apioption series.flags\n         */\n        /**\n         * An array of data points for the series. For the `flags` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.flags.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        title: \"A\",\n         *        text: \"First event\"\n         *    }, {\n         *        x: 1,\n         *        title: \"B\",\n         *        text: \"Second event\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<*>}\n         * @extends   series.line.data\n         * @excluding dataLabels, marker, name, y\n         * @product   highstock\n         * @apioption series.flags.data\n         */\n        /**\n         * The fill color of an individual flag. By default it inherits from\n         * the series color.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @product   highstock\n         * @apioption series.flags.data.fillColor\n         */\n        /**\n         * The longer text to be shown in the flag's tooltip.\n         *\n         * @type      {string}\n         * @product   highstock\n         * @apioption series.flags.data.text\n         */\n        /**\n         * The short text to be shown on the flag.\n         *\n         * @type      {string}\n         * @product   highstock\n         * @apioption series.flags.data.title\n         */\n        ''; // adds doclets above to transpiled file\n\n        return FlagsSeries;\n    });\n    _registerModule(_modules, 'Core/Axis/ScrollbarAxis.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var addEvent = U.addEvent,\n            defined = U.defined,\n            pick = U.pick;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * Creates scrollbars if enabled.\n         * @private\n         */\n        var ScrollbarAxis = /** @class */ (function () {\n                function ScrollbarAxis() {\n                }\n                /**\n                 * Attaches to axis events to create scrollbars if enabled.\n                 *\n                 * @private\n                 *\n                 * @param AxisClass\n                 * Axis class to extend.\n                 *\n                 * @param ScrollbarClass\n                 * Scrollbar class to use.\n                 */\n                ScrollbarAxis.compose = function (AxisClass, ScrollbarClass) {\n                    if (ScrollbarAxis.composed.indexOf(AxisClass) === -1) {\n                        ScrollbarAxis.composed.push(AxisClass);\n                }\n                else {\n                    return AxisClass;\n                }\n                var getExtremes = function (axis) {\n                        var axisMin = pick(axis.options && axis.options.min,\n                    axis.min);\n                    var axisMax = pick(axis.options && axis.options.max,\n                        axis.max);\n                    return {\n                        axisMin: axisMin,\n                        axisMax: axisMax,\n                        scrollMin: defined(axis.dataMin) ?\n                            Math.min(axisMin, axis.min, axis.dataMin, pick(axis.threshold, Infinity)) : axisMin,\n                        scrollMax: defined(axis.dataMax) ?\n                            Math.max(axisMax, axis.max, axis.dataMax, pick(axis.threshold, -Infinity)) : axisMax\n                    };\n                };\n                // Wrap axis initialization and create scrollbar if enabled:\n                addEvent(AxisClass, 'afterInit', function () {\n                    var axis = this;\n                    if (axis.options &&\n                        axis.options.scrollbar &&\n                        axis.options.scrollbar.enabled) {\n                        // Predefined options:\n                        axis.options.scrollbar.vertical = !axis.horiz;\n                        axis.options.startOnTick = axis.options.endOnTick = false;\n                        axis.scrollbar = new ScrollbarClass(axis.chart.renderer, axis.options.scrollbar, axis.chart);\n                        addEvent(axis.scrollbar, 'changed', function (e) {\n                            var _a = getExtremes(axis),\n                                axisMin = _a.axisMin,\n                                axisMax = _a.axisMax,\n                                unitedMin = _a.scrollMin,\n                                unitedMax = _a.scrollMax,\n                                range = unitedMax - unitedMin,\n                                to,\n                                from;\n                            // #12834, scroll when show/hide series, wrong extremes\n                            if (!defined(axisMin) || !defined(axisMax)) {\n                                return;\n                            }\n                            if ((axis.horiz && !axis.reversed) ||\n                                (!axis.horiz && axis.reversed)) {\n                                to = unitedMin + range * this.to;\n                                from = unitedMin + range * this.from;\n                            }\n                            else {\n                                // y-values in browser are reversed, but this also\n                                // applies for reversed horizontal axis:\n                                to = unitedMin + range * (1 - this.from);\n                                from = unitedMin + range * (1 - this.to);\n                            }\n                            if (this.shouldUpdateExtremes(e.DOMType)) {\n                                axis.setExtremes(from, to, true, (e.DOMType !== 'mousemove' &&\n                                    e.DOMType !== 'touchmove'), e);\n                            }\n                            else {\n                                // When live redraw is disabled, don't change extremes\n                                // Only change the position of the scollbar thumb\n                                this.setRange(this.from, this.to);\n                            }\n                        });\n                    }\n                });\n                // Wrap rendering axis, and update scrollbar if one is created:\n                addEvent(AxisClass, 'afterRender', function () {\n                    var axis = this,\n                        _a = getExtremes(axis),\n                        scrollMin = _a.scrollMin,\n                        scrollMax = _a.scrollMax,\n                        scrollbar = axis.scrollbar,\n                        offset = (axis.axisTitleMargin + (axis.titleOffset || 0)),\n                        scrollbarsOffsets = axis.chart.scrollbarsOffsets,\n                        axisMargin = axis.options.margin || 0,\n                        offsetsIndex,\n                        from,\n                        to;\n                    if (scrollbar) {\n                        if (axis.horiz) {\n                            // Reserve space for labels/title\n                            if (!axis.opposite) {\n                                scrollbarsOffsets[1] += offset;\n                            }\n                            scrollbar.position(axis.left, (axis.top +\n                                axis.height +\n                                2 +\n                                scrollbarsOffsets[1] -\n                                (axis.opposite ? axisMargin : 0)), axis.width, axis.height);\n                            // Next scrollbar should reserve space for margin (if set)\n                            if (!axis.opposite) {\n                                scrollbarsOffsets[1] += axisMargin;\n                            }\n                            offsetsIndex = 1;\n                        }\n                        else {\n                            // Reserve space for labels/title\n                            if (axis.opposite) {\n                                scrollbarsOffsets[0] += offset;\n                            }\n                            var xPosition = void 0;\n                            if (!scrollbar.options.opposite) {\n                                xPosition = axis.opposite ? 0 : axisMargin;\n                            }\n                            else {\n                                xPosition = axis.left +\n                                    axis.width +\n                                    2 +\n                                    scrollbarsOffsets[0] -\n                                    (axis.opposite ? 0 : axisMargin);\n                            }\n                            scrollbar.position(xPosition, axis.top, axis.width, axis.height);\n                            // Next scrollbar should reserve space for margin (if set)\n                            if (axis.opposite) {\n                                scrollbarsOffsets[0] += axisMargin;\n                            }\n                            offsetsIndex = 0;\n                        }\n                        scrollbarsOffsets[offsetsIndex] += scrollbar.size +\n                            scrollbar.options.margin;\n                        if (isNaN(scrollMin) ||\n                            isNaN(scrollMax) ||\n                            !defined(axis.min) ||\n                            !defined(axis.max) ||\n                            axis.min === axis.max // #10733\n                        ) {\n                            // default action: when extremes are the same or there is\n                            // not extremes on the axis, but scrollbar exists, make it\n                            // full size\n                            scrollbar.setRange(0, 1);\n                        }\n                        else {\n                            from = ((axis.min - scrollMin) /\n                                (scrollMax - scrollMin));\n                            to = ((axis.max - scrollMin) /\n                                (scrollMax - scrollMin));\n                            if ((axis.horiz && !axis.reversed) ||\n                                (!axis.horiz && axis.reversed)) {\n                                scrollbar.setRange(from, to);\n                            }\n                            else {\n                                // inverse vertical axis\n                                scrollbar.setRange(1 - to, 1 - from);\n                            }\n                        }\n                    }\n                });\n                // Make space for a scrollbar:\n                addEvent(AxisClass, 'afterGetOffset', function () {\n                    var axis = this,\n                        opposite = axis.scrollbar && !axis.scrollbar.options.opposite,\n                        index = axis.horiz ? 2 : opposite ? 3 : 1,\n                        scrollbar = axis.scrollbar;\n                    if (scrollbar) {\n                        // reset scrollbars offsets\n                        axis.chart.scrollbarsOffsets = [0, 0];\n                        axis.chart.axisOffset[index] +=\n                            scrollbar.size + scrollbar.options.margin;\n                    }\n                });\n                return AxisClass;\n            };\n            ScrollbarAxis.composed = [];\n            return ScrollbarAxis;\n        }());\n\n        return ScrollbarAxis;\n    });\n    _registerModule(_modules, 'Core/ScrollbarDefaults.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var isTouchDevice = H.isTouchDevice;\n        /* *\n         *\n         *  Constant\n         *\n         * */\n        /**\n         *\n         * The scrollbar is a means of panning over the X axis of a stock chart.\n         * Scrollbars can  also be applied to other types of axes.\n         *\n         * Another approach to scrollable charts is the [chart.scrollablePlotArea](\n         * https://api.highcharts.com/highcharts/chart.scrollablePlotArea) option that\n         * is especially suitable for simpler cartesian charts on mobile.\n         *\n         * In styled mode, all the presentational options for the\n         * scrollbar are replaced by the classes `.highcharts-scrollbar-thumb`,\n         * `.highcharts-scrollbar-arrow`, `.highcharts-scrollbar-button`,\n         * `.highcharts-scrollbar-rifles` and `.highcharts-scrollbar-track`.\n         *\n         * @sample stock/yaxis/inverted-bar-scrollbar/\n         *         A scrollbar on a simple bar chart\n         *\n         * @product highstock gantt\n         * @optionparent scrollbar\n         *\n         * @private\n         */\n        var ScrollbarDefaults = {\n                /**\n                 * The height of the scrollbar. The height also applies to the width\n                 * of the scroll arrows so that they are always squares. Defaults to\n                 * 20 for touch devices and 14 for mouse devices.\n                 *\n                 * @sample stock/scrollbar/height/\n                 *         A 30px scrollbar\n                 *\n                 * @type    {number}\n                 * @default 20/14\n                 */\n                height: isTouchDevice ? 20 : 14,\n                /**\n                 * The border rounding radius of the bar.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 */\n                barBorderRadius: 0,\n                /**\n                 * The corner radius of the scrollbar buttons.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 */\n                buttonBorderRadius: 0,\n                /**\n                 * Enable or disable the scrollbar.\n                 *\n                 * @sample stock/scrollbar/enabled/\n                 *         Disable the scrollbar,\n            only use navigator\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @apioption scrollbar.enabled\n                 */\n                /**\n                 * Whether to redraw the main chart as the scrollbar or the navigator\n                 * zoomed window is moved. Defaults to `true` for modern browsers and\n                 * `false` for legacy IE browsers as well as mobile devices.\n                 *\n                 * @sample stock/scrollbar/liveredraw\n                 *         Setting live redraw to false\n                 *\n                 * @type  {boolean}\n                 * @since 1.3\n                 */\n                liveRedraw: void 0,\n                /**\n                 * The margin between the scrollbar and its axis when the scrollbar is\n                 * applied directly to an axis.\n                 */\n                margin: 10,\n                /**\n                 * The minimum width of the scrollbar.\n                 *\n                 * @since 1.2.5\n                 */\n                minWidth: 6,\n                /** @ignore-option */\n                opposite: true,\n                /**\n                 * Whether to show or hide the scrollbar when the scrolled content is\n                 * zoomed out to it full extent.\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @apioption scrollbar.showFull\n                 */\n                step: 0.2,\n                /**\n                 * The z index of the scrollbar group.\n                 */\n                zIndex: 3,\n                /**\n                 * The background color of the scrollbar itself.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                barBackgroundColor: \"#cccccc\" /* neutralColor20 */,\n                /**\n                 * The width of the bar's border.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 */\n                barBorderWidth: 1,\n                /**\n                 * The color of the scrollbar's border.\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                barBorderColor: \"#cccccc\" /* neutralColor20 */,\n                /**\n                 * The color of the small arrow inside the scrollbar buttons.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                buttonArrowColor: \"#333333\" /* neutralColor80 */,\n                /**\n                 * The color of scrollbar buttons.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                buttonBackgroundColor: \"#e6e6e6\" /* neutralColor10 */,\n                /**\n                 * The color of the border of the scrollbar buttons.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                buttonBorderColor: \"#cccccc\" /* neutralColor20 */,\n                /**\n                 * The border width of the scrollbar buttons.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 */\n                buttonBorderWidth: 1,\n                /**\n                 * The color of the small rifles in the middle of the scrollbar.\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                rifleColor: \"#333333\" /* neutralColor80 */,\n                /**\n                 * The color of the track background.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                trackBackgroundColor: \"#f2f2f2\" /* neutralColor5 */,\n                /**\n                 * The color of the border of the scrollbar track.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                trackBorderColor: \"#f2f2f2\" /* neutralColor5 */,\n                /**\n                 * The corner radius of the border of the scrollbar track.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @apioption scrollbar.trackBorderRadius\n                 */\n                /**\n                 * The width of the border of the scrollbar track.\n                 *\n                 * @sample stock/scrollbar/style/\n                 *         Scrollbar styling\n                 */\n                trackBorderWidth: 1\n            };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ScrollbarDefaults;\n    });\n    _registerModule(_modules, 'Core/Scrollbar.js', [_modules['Core/DefaultOptions.js'], _modules['Core/Globals.js'], _modules['Core/Axis/ScrollbarAxis.js'], _modules['Core/ScrollbarDefaults.js'], _modules['Core/Utilities.js']], function (D, H, ScrollbarAxis, ScrollbarDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var defaultOptions = D.defaultOptions;\n        var addEvent = U.addEvent,\n            correctFloat = U.correctFloat,\n            defined = U.defined,\n            destroyObjectProperties = U.destroyObjectProperties,\n            fireEvent = U.fireEvent,\n            merge = U.merge,\n            pick = U.pick,\n            removeEvent = U.removeEvent;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * A reusable scrollbar, internally used in Highcharts Stock's\n         * navigator and optionally on individual axes.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Scrollbar\n         * @param {Highcharts.SVGRenderer} renderer\n         * @param {Highcharts.ScrollbarOptions} options\n         * @param {Highcharts.Chart} chart\n         */\n        var Scrollbar = /** @class */ (function () {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                function Scrollbar(renderer, options, chart) {\n                    /* *\n                     *\n                     *  Properties\n                     *\n                     * */\n                    this._events = [];\n                this.chart = void 0;\n                this.chartX = 0;\n                this.chartY = 0;\n                this.from = 0;\n                this.group = void 0;\n                this.options = void 0;\n                this.renderer = void 0;\n                this.scrollbar = void 0;\n                this.scrollbarButtons = [];\n                this.scrollbarGroup = void 0;\n                this.scrollbarLeft = 0;\n                this.scrollbarRifles = void 0;\n                this.scrollbarStrokeWidth = 1;\n                this.scrollbarTop = 0;\n                this.size = 0;\n                this.to = 0;\n                this.track = void 0;\n                this.trackBorderWidth = 1;\n                this.userOptions = void 0;\n                this.x = 0;\n                this.y = 0;\n                this.init(renderer, options, chart);\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            Scrollbar.compose = function (AxisClass) {\n                ScrollbarAxis.compose(AxisClass, Scrollbar);\n            };\n            /**\n             * When we have vertical scrollbar, rifles and arrow in buttons should be\n             * rotated. The same method is used in Navigator's handles, to rotate them.\n             *\n             * @function Highcharts.swapXY\n             *\n             * @param {Highcharts.SVGPathArray} path\n             * Path to be rotated.\n             *\n             * @param {boolean} [vertical]\n             * If vertical scrollbar, swap x-y values.\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Rotated path.\n             *\n             * @requires modules/stock\n             */\n            Scrollbar.swapXY = function (path, vertical) {\n                if (vertical) {\n                    path.forEach(function (seg) {\n                        var len = seg.length;\n                        var temp;\n                        for (var i = 0; i < len; i += 2) {\n                            temp = seg[i + 1];\n                            if (typeof temp === 'number') {\n                                seg[i + 1] = seg[i + 2];\n                                seg[i + 2] = temp;\n                            }\n                        }\n                    });\n                }\n                return path;\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Set up the mouse and touch events for the Scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#addEvents\n             */\n            Scrollbar.prototype.addEvents = function () {\n                var buttonsOrder = this.options.inverted ? [1, 0] : [0, 1],\n                    buttons = this.scrollbarButtons,\n                    bar = this.scrollbarGroup.element,\n                    track = this.track.element,\n                    mouseDownHandler = this.mouseDownHandler.bind(this),\n                    mouseMoveHandler = this.mouseMoveHandler.bind(this),\n                    mouseUpHandler = this.mouseUpHandler.bind(this);\n                // Mouse events\n                var _events = [\n                        [\n                            buttons[buttonsOrder[0]].element,\n                            'click',\n                            this.buttonToMinClick.bind(this)\n                        ],\n                        [\n                            buttons[buttonsOrder[1]].element,\n                            'click',\n                            this.buttonToMaxClick.bind(this)\n                        ],\n                        [track, 'click',\n                    this.trackClick.bind(this)],\n                        [bar, 'mousedown',\n                    mouseDownHandler],\n                        [bar.ownerDocument, 'mousemove',\n                    mouseMoveHandler],\n                        [bar.ownerDocument, 'mouseup',\n                    mouseUpHandler]\n                    ];\n                // Touch events\n                if (H.hasTouch) {\n                    _events.push([bar, 'touchstart', mouseDownHandler], [bar.ownerDocument, 'touchmove', mouseMoveHandler], [bar.ownerDocument, 'touchend', mouseUpHandler]);\n                }\n                // Add them all\n                _events.forEach(function (args) {\n                    addEvent.apply(null, args);\n                });\n                this._events = _events;\n            };\n            Scrollbar.prototype.buttonToMaxClick = function (e) {\n                var scroller = this;\n                var range = ((scroller.to - scroller.from) *\n                        pick(scroller.options.step, 0.2));\n                scroller.updatePosition(scroller.from + range, scroller.to + range);\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            };\n            Scrollbar.prototype.buttonToMinClick = function (e) {\n                var scroller = this;\n                var range = correctFloat(scroller.to - scroller.from) *\n                        pick(scroller.options.step, 0.2);\n                scroller.updatePosition(correctFloat(scroller.from - range), correctFloat(scroller.to - range));\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            };\n            /**\n             * Get normalized (0-1) cursor position over the scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#cursorToScrollbarPosition\n             *\n             * @param  {*} normalizedEvent\n             *         normalized event, with chartX and chartY values\n             *\n             * @return {Highcharts.Dictionary<number>}\n             *         Local position {chartX, chartY}\n             */\n            Scrollbar.prototype.cursorToScrollbarPosition = function (normalizedEvent) {\n                var scroller = this,\n                    options = scroller.options,\n                    minWidthDifference = options.minWidth > scroller.calculatedWidth ?\n                        options.minWidth :\n                        0; // minWidth distorts translation\n                    return {\n                        chartX: (normalizedEvent.chartX - scroller.x -\n                            scroller.xOffset) /\n                            (scroller.barWidth - minWidthDifference),\n                        chartY: (normalizedEvent.chartY - scroller.y -\n                            scroller.yOffset) /\n                            (scroller.barWidth - minWidthDifference)\n                    };\n            };\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#destroy\n             */\n            Scrollbar.prototype.destroy = function () {\n                var scroller = this,\n                    navigator = scroller.chart.scroller;\n                // Disconnect events added in addEvents\n                scroller.removeEvents();\n                // Destroy properties\n                [\n                    'track',\n                    'scrollbarRifles',\n                    'scrollbar',\n                    'scrollbarGroup',\n                    'group'\n                ].forEach(function (prop) {\n                    if (scroller[prop] && scroller[prop].destroy) {\n                        scroller[prop] = scroller[prop].destroy();\n                    }\n                });\n                // #6421, chart may have more scrollbars\n                if (navigator && scroller === navigator.scrollbar) {\n                    navigator.scrollbar = null;\n                    // Destroy elements in collection\n                    destroyObjectProperties(navigator.scrollbarButtons);\n                }\n            };\n            /**\n             * Draw the scrollbar buttons with arrows\n             *\n             * @private\n             * @function Highcharts.Scrollbar#drawScrollbarButton\n             * @param {number} index\n             *        0 is left, 1 is right\n             */\n            Scrollbar.prototype.drawScrollbarButton = function (index) {\n                var scroller = this,\n                    renderer = scroller.renderer,\n                    scrollbarButtons = scroller.scrollbarButtons,\n                    options = scroller.options,\n                    size = scroller.size,\n                    group = renderer.g().add(scroller.group);\n                var tempElem;\n                scrollbarButtons.push(group);\n                // Create a rectangle for the scrollbar button\n                tempElem = renderer.rect()\n                    .addClass('highcharts-scrollbar-button')\n                    .add(group);\n                // Presentational attributes\n                if (!scroller.chart.styledMode) {\n                    tempElem.attr({\n                        stroke: options.buttonBorderColor,\n                        'stroke-width': options.buttonBorderWidth,\n                        fill: options.buttonBackgroundColor\n                    });\n                }\n                // Place the rectangle based on the rendered stroke width\n                tempElem.attr(tempElem.crisp({\n                    x: -0.5,\n                    y: -0.5,\n                    width: size + 1,\n                    height: size + 1,\n                    r: options.buttonBorderRadius\n                }, tempElem.strokeWidth()));\n                // Button arrow\n                tempElem = renderer\n                    .path(Scrollbar.swapXY([[\n                        'M',\n                        size / 2 + (index ? -1 : 1),\n                        size / 2 - 3\n                    ], [\n                        'L',\n                        size / 2 + (index ? -1 : 1),\n                        size / 2 + 3\n                    ], [\n                        'L',\n                        size / 2 + (index ? 2 : -2),\n                        size / 2\n                    ]], options.vertical))\n                    .addClass('highcharts-scrollbar-arrow')\n                    .add(scrollbarButtons[index]);\n                if (!scroller.chart.styledMode) {\n                    tempElem.attr({\n                        fill: options.buttonArrowColor\n                    });\n                }\n            };\n            /**\n             * @private\n             * @function Highcharts.Scrollbar#init\n             * @param {Highcharts.SVGRenderer} renderer\n             * @param {Highcharts.ScrollbarOptions} options\n             * @param {Highcharts.Chart} chart\n             */\n            Scrollbar.prototype.init = function (renderer, options, chart) {\n                var scroller = this;\n                scroller.scrollbarButtons = [];\n                scroller.renderer = renderer;\n                scroller.userOptions = options;\n                scroller.options = merge(ScrollbarDefaults, defaultOptions.scrollbar, options);\n                scroller.chart = chart;\n                // backward compatibility\n                scroller.size = pick(scroller.options.size, scroller.options.height);\n                // Init\n                if (options.enabled) {\n                    scroller.render();\n                    scroller.addEvents();\n                }\n            };\n            Scrollbar.prototype.mouseDownHandler = function (e) {\n                var scroller = this,\n                    normalizedEvent = scroller.chart.pointer.normalize(e),\n                    mousePosition = scroller.cursorToScrollbarPosition(normalizedEvent);\n                scroller.chartX = mousePosition.chartX;\n                scroller.chartY = mousePosition.chartY;\n                scroller.initPositions = [scroller.from, scroller.to];\n                scroller.grabbedCenter = true;\n            };\n            /**\n             * Event handler for the mouse move event.\n             * @private\n             */\n            Scrollbar.prototype.mouseMoveHandler = function (e) {\n                var scroller = this,\n                    normalizedEvent = scroller.chart.pointer.normalize(e),\n                    options = scroller.options,\n                    direction = options.vertical ?\n                        'chartY' : 'chartX',\n                    initPositions = scroller.initPositions || [];\n                var scrollPosition,\n                    chartPosition,\n                    change;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when\n                // holding the finger down in the center of the scrollbar. This\n                // should be ignored.\n                if (scroller.grabbedCenter &&\n                    // #4696, scrollbar failed on Android\n                    (!e.touches || e.touches[0][direction] !== 0)) {\n                    chartPosition = scroller.cursorToScrollbarPosition(normalizedEvent)[direction];\n                    scrollPosition = scroller[direction];\n                    change = chartPosition - scrollPosition;\n                    scroller.hasDragged = true;\n                    scroller.updatePosition(initPositions[0] + change, initPositions[1] + change);\n                    if (scroller.hasDragged) {\n                        fireEvent(scroller, 'changed', {\n                            from: scroller.from,\n                            to: scroller.to,\n                            trigger: 'scrollbar',\n                            DOMType: e.type,\n                            DOMEvent: e\n                        });\n                    }\n                }\n            };\n            /**\n             * Event handler for the mouse up event.\n             * @private\n             */\n            Scrollbar.prototype.mouseUpHandler = function (e) {\n                var scroller = this;\n                if (scroller.hasDragged) {\n                    fireEvent(scroller, 'changed', {\n                        from: scroller.from,\n                        to: scroller.to,\n                        trigger: 'scrollbar',\n                        DOMType: e.type,\n                        DOMEvent: e\n                    });\n                }\n                scroller.grabbedCenter =\n                    scroller.hasDragged =\n                        scroller.chartX =\n                            scroller.chartY = null;\n            };\n            /**\n             * Position the scrollbar, method called from a parent with defined\n             * dimensions.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#position\n             * @param {number} x\n             *        x-position on the chart\n             * @param {number} y\n             *        y-position on the chart\n             * @param {number} width\n             *        width of the scrollbar\n             * @param {number} height\n             *        height of the scorllbar\n             */\n            Scrollbar.prototype.position = function (x, y, width, height) {\n                var scroller = this,\n                    options = scroller.options,\n                    vertical = options.vertical,\n                    method = scroller.rendered ? 'animate' : 'attr';\n                var xOffset = height,\n                    yOffset = 0;\n                scroller.x = x;\n                scroller.y = y + this.trackBorderWidth;\n                scroller.width = width; // width with buttons\n                scroller.height = height;\n                scroller.xOffset = xOffset;\n                scroller.yOffset = yOffset;\n                // If Scrollbar is a vertical type, swap options:\n                if (vertical) {\n                    scroller.width = scroller.yOffset = width = yOffset = scroller.size;\n                    scroller.xOffset = xOffset = 0;\n                    scroller.barWidth = height - width * 2; // width without buttons\n                    scroller.x = x = x + scroller.options.margin;\n                }\n                else {\n                    scroller.height = scroller.xOffset = height = xOffset =\n                        scroller.size;\n                    scroller.barWidth = width - height * 2; // width without buttons\n                    scroller.y = scroller.y + scroller.options.margin;\n                }\n                // Set general position for a group:\n                scroller.group[method]({\n                    translateX: x,\n                    translateY: scroller.y\n                });\n                // Resize background/track:\n                scroller.track[method]({\n                    width: width,\n                    height: height\n                });\n                // Move right/bottom button ot it's place:\n                scroller.scrollbarButtons[1][method]({\n                    translateX: vertical ? 0 : width - xOffset,\n                    translateY: vertical ? height - yOffset : 0\n                });\n            };\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#removeEvents\n             */\n            Scrollbar.prototype.removeEvents = function () {\n                this._events.forEach(function (args) {\n                    removeEvent.apply(null, args);\n                });\n                this._events.length = 0;\n            };\n            /**\n             * Render scrollbar with all required items.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#render\n             */\n            Scrollbar.prototype.render = function () {\n                var scroller = this,\n                    renderer = scroller.renderer,\n                    options = scroller.options,\n                    size = scroller.size,\n                    styledMode = scroller.chart.styledMode,\n                    group = renderer.g('scrollbar').attr({\n                        zIndex: options.zIndex,\n                        translateY: -99999\n                    }).add();\n                // Draw the scrollbar group\n                scroller.group = group;\n                // Draw the scrollbar track:\n                scroller.track = renderer.rect()\n                    .addClass('highcharts-scrollbar-track')\n                    .attr({\n                    x: 0,\n                    r: options.trackBorderRadius || 0,\n                    height: size,\n                    width: size\n                }).add(group);\n                if (!styledMode) {\n                    scroller.track.attr({\n                        fill: options.trackBackgroundColor,\n                        stroke: options.trackBorderColor,\n                        'stroke-width': options.trackBorderWidth\n                    });\n                }\n                scroller.trackBorderWidth = scroller.track.strokeWidth();\n                scroller.track.attr({\n                    y: -this.trackBorderWidth % 2 / 2\n                });\n                // Draw the scrollbar itself\n                scroller.scrollbarGroup = renderer.g().add(group);\n                scroller.scrollbar = renderer.rect()\n                    .addClass('highcharts-scrollbar-thumb')\n                    .attr({\n                    height: size,\n                    width: size,\n                    r: options.barBorderRadius || 0\n                }).add(scroller.scrollbarGroup);\n                scroller.scrollbarRifles = renderer\n                    .path(Scrollbar.swapXY([\n                    ['M', -3, size / 4],\n                    ['L', -3, 2 * size / 3],\n                    ['M', 0, size / 4],\n                    ['L', 0, 2 * size / 3],\n                    ['M', 3, size / 4],\n                    ['L', 3, 2 * size / 3]\n                ], options.vertical))\n                    .addClass('highcharts-scrollbar-rifles')\n                    .add(scroller.scrollbarGroup);\n                if (!styledMode) {\n                    scroller.scrollbar.attr({\n                        fill: options.barBackgroundColor,\n                        stroke: options.barBorderColor,\n                        'stroke-width': options.barBorderWidth\n                    });\n                    scroller.scrollbarRifles.attr({\n                        stroke: options.rifleColor,\n                        'stroke-width': 1\n                    });\n                }\n                scroller.scrollbarStrokeWidth = scroller.scrollbar.strokeWidth();\n                scroller.scrollbarGroup.translate(-scroller.scrollbarStrokeWidth % 2 / 2, -scroller.scrollbarStrokeWidth % 2 / 2);\n                // Draw the buttons:\n                scroller.drawScrollbarButton(0);\n                scroller.drawScrollbarButton(1);\n            };\n            /**\n             * Set scrollbar size, with a given scale.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#setRange\n             * @param {number} from\n             *        scale (0-1) where bar should start\n             * @param {number} to\n             *        scale (0-1) where bar should end\n             */\n            Scrollbar.prototype.setRange = function (from, to) {\n                var scroller = this,\n                    options = scroller.options,\n                    vertical = options.vertical,\n                    minWidth = options.minWidth,\n                    fullWidth = scroller.barWidth,\n                    method = (this.rendered &&\n                        !this.hasDragged &&\n                        !(this.chart.navigator && this.chart.navigator.hasDragged)) ? 'animate' : 'attr';\n                if (!defined(fullWidth)) {\n                    return;\n                }\n                var toPX = fullWidth * Math.min(to, 1);\n                var fromPX,\n                    newSize;\n                from = Math.max(from, 0);\n                fromPX = Math.ceil(fullWidth * from);\n                scroller.calculatedWidth = newSize = correctFloat(toPX - fromPX);\n                // We need to recalculate position, if minWidth is used\n                if (newSize < minWidth) {\n                    fromPX = (fullWidth - minWidth + newSize) * from;\n                    newSize = minWidth;\n                }\n                var newPos = Math.floor(fromPX + scroller.xOffset + scroller.yOffset);\n                var newRiflesPos = newSize / 2 - 0.5; // -0.5 -> rifle line width / 2\n                    // Store current position:\n                    scroller.from = from;\n                scroller.to = to;\n                if (!vertical) {\n                    scroller.scrollbarGroup[method]({\n                        translateX: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        width: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateX: newRiflesPos\n                    });\n                    scroller.scrollbarLeft = newPos;\n                    scroller.scrollbarTop = 0;\n                }\n                else {\n                    scroller.scrollbarGroup[method]({\n                        translateY: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        height: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateY: newRiflesPos\n                    });\n                    scroller.scrollbarTop = newPos;\n                    scroller.scrollbarLeft = 0;\n                }\n                if (newSize <= 12) {\n                    scroller.scrollbarRifles.hide();\n                }\n                else {\n                    scroller.scrollbarRifles.show(true);\n                }\n                // Show or hide the scrollbar based on the showFull setting\n                if (options.showFull === false) {\n                    if (from <= 0 && to >= 1) {\n                        scroller.group.hide();\n                    }\n                    else {\n                        scroller.group.show();\n                    }\n                }\n                scroller.rendered = true;\n            };\n            /**\n             * Checks if the extremes should be updated in response to a scrollbar\n             * change event.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#shouldUpdateExtremes\n             */\n            Scrollbar.prototype.shouldUpdateExtremes = function (eventType) {\n                return (pick(this.options.liveRedraw, H.svg && !H.isTouchDevice && !this.chart.isBoosting) ||\n                    // Mouseup always should change extremes\n                    eventType === 'mouseup' ||\n                    eventType === 'touchend' ||\n                    // Internal events\n                    !defined(eventType));\n            };\n            Scrollbar.prototype.trackClick = function (e) {\n                var scroller = this;\n                var normalizedEvent = scroller.chart.pointer.normalize(e),\n                    range = scroller.to - scroller.from,\n                    top = scroller.y + scroller.scrollbarTop,\n                    left = scroller.x + scroller.scrollbarLeft;\n                if ((scroller.options.vertical && normalizedEvent.chartY > top) ||\n                    (!scroller.options.vertical && normalizedEvent.chartX > left)) {\n                    // On the top or on the left side of the track:\n                    scroller.updatePosition(scroller.from + range, scroller.to + range);\n                }\n                else {\n                    // On the bottom or the right side of the track:\n                    scroller.updatePosition(scroller.from - range, scroller.to - range);\n                }\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            };\n            /**\n             * Update the scrollbar with new options\n             *\n             * @private\n             * @function Highcharts.Scrollbar#update\n             * @param  {Highcharts.ScrollbarOptions} options\n             */\n            Scrollbar.prototype.update = function (options) {\n                this.destroy();\n                this.init(this.chart.renderer, merge(true, this.options, options), this.chart);\n            };\n            /**\n             * Update position option in the Scrollbar, with normalized 0-1 scale\n             *\n             * @private\n             * @function Highcharts.Scrollbar#updatePosition\n             * @param  {number} from\n             * @param  {number} to\n             */\n            Scrollbar.prototype.updatePosition = function (from, to) {\n                if (to > 1) {\n                    from = correctFloat(1 - correctFloat(to - from));\n                    to = 1;\n                }\n                if (from < 0) {\n                    to = correctFloat(to - from);\n                    from = 0;\n                }\n                this.from = from;\n                this.to = to;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            Scrollbar.defaultOptions = ScrollbarDefaults;\n            return Scrollbar;\n        }());\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        defaultOptions.scrollbar = merge(true, Scrollbar.defaultOptions, defaultOptions.scrollbar);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Scrollbar;\n    });\n    _registerModule(_modules, 'Core/Axis/NavigatorAxis.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var isTouchDevice = H.isTouchDevice;\n        var addEvent = U.addEvent,\n            correctFloat = U.correctFloat,\n            defined = U.defined,\n            isNumber = U.isNumber,\n            pick = U.pick;\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         * @class\n         */\n        var NavigatorAxisAdditions = /** @class */ (function () {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                function NavigatorAxisAdditions(axis) {\n                    this.axis = axis;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            NavigatorAxisAdditions.prototype.destroy = function () {\n                this.axis = void 0;\n            };\n            /**\n             * Add logic to normalize the zoomed range in order to preserve the pressed\n             * state of range selector buttons\n             *\n             * @private\n             * @function Highcharts.Axis#toFixedRange\n             */\n            NavigatorAxisAdditions.prototype.toFixedRange = function (pxMin, pxMax, fixedMin, fixedMax) {\n                var navigator = this;\n                var axis = navigator.axis;\n                var chart = axis.chart;\n                var fixedRange = chart && chart.fixedRange,\n                    halfPointRange = (axis.pointRange || 0) / 2,\n                    newMin = pick(fixedMin,\n                    axis.translate(pxMin,\n                    true, !axis.horiz)),\n                    newMax = pick(fixedMax,\n                    axis.translate(pxMax,\n                    true, !axis.horiz)),\n                    changeRatio = fixedRange && (newMax - newMin) / fixedRange;\n                // Add/remove half point range to/from the extremes (#1172)\n                if (!defined(fixedMin)) {\n                    newMin = correctFloat(newMin + halfPointRange);\n                }\n                if (!defined(fixedMax)) {\n                    newMax = correctFloat(newMax - halfPointRange);\n                }\n                // If the difference between the fixed range and the actual requested\n                // range is too great, the user is dragging across an ordinal gap, and\n                // we need to release the range selector button.\n                if (changeRatio > 0.7 && changeRatio < 1.3) {\n                    if (fixedMax) {\n                        newMin = newMax - fixedRange;\n                    }\n                    else {\n                        newMax = newMin + fixedRange;\n                    }\n                }\n                if (!isNumber(newMin) || !isNumber(newMax)) { // #1195, #7411\n                    newMin = newMax = void 0;\n                }\n                return {\n                    min: newMin,\n                    max: newMax\n                };\n            };\n            return NavigatorAxisAdditions;\n        }());\n        /**\n         * @private\n         * @class\n         */\n        var NavigatorAxis = /** @class */ (function () {\n                function NavigatorAxis() {\n                }\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                NavigatorAxis.compose = function (AxisClass) {\n                    AxisClass.keepProps.push('navigatorAxis');\n                /* eslint-disable no-invalid-this */\n                addEvent(AxisClass, 'init', function () {\n                    var axis = this;\n                    if (!axis.navigatorAxis) {\n                        axis.navigatorAxis = new NavigatorAxisAdditions(axis);\n                    }\n                });\n                // For Stock charts, override selection zooming with some special\n                // features because X axis zooming is already allowed by the Navigator\n                // and Range selector.\n                addEvent(AxisClass, 'zoom', function (e) {\n                    var axis = this;\n                    var chart = axis.chart;\n                    var chartOptions = chart.options;\n                    var navigator = chartOptions.navigator;\n                    var navigatorAxis = axis.navigatorAxis;\n                    var pinchType = chartOptions.chart.pinchType;\n                    var rangeSelector = chartOptions.rangeSelector;\n                    var zoomType = chartOptions.chart.zoomType;\n                    var previousZoom;\n                    if (axis.isXAxis && ((navigator && navigator.enabled) ||\n                        (rangeSelector && rangeSelector.enabled))) {\n                        // For y only zooming, ignore the X axis completely\n                        if (zoomType === 'y') {\n                            e.zoomed = false;\n                            // For xy zooming, record the state of the zoom before zoom\n                            // selection, then when the reset button is pressed, revert to\n                            // this state. This should apply only if the chart is\n                            // initialized with a range (#6612), otherwise zoom all the way\n                            // out.\n                        }\n                        else if (((!isTouchDevice && zoomType === 'xy') ||\n                            (isTouchDevice && pinchType === 'xy')) &&\n                            axis.options.range) {\n                            previousZoom = navigatorAxis.previousZoom;\n                            if (defined(e.newMin)) {\n                                navigatorAxis.previousZoom = [axis.min, axis.max];\n                            }\n                            else if (previousZoom) {\n                                e.newMin = previousZoom[0];\n                                e.newMax = previousZoom[1];\n                                navigatorAxis.previousZoom = void 0;\n                            }\n                        }\n                    }\n                    if (typeof e.zoomed !== 'undefined') {\n                        e.preventDefault();\n                    }\n                });\n                /* eslint-enable no-invalid-this */\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * @private\n             */\n            NavigatorAxis.AdditionsClass = NavigatorAxisAdditions;\n            return NavigatorAxis;\n        }());\n\n        return NavigatorAxis;\n    });\n    _registerModule(_modules, 'Core/Navigator.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Chart/Chart.js'], _modules['Core/Color/Color.js'], _modules['Core/Globals.js'], _modules['Core/Axis/NavigatorAxis.js'], _modules['Core/DefaultOptions.js'], _modules['Core/Renderer/RendererRegistry.js'], _modules['Core/Scrollbar.js'], _modules['Core/Series/Series.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (Axis, Chart, Color, H, NavigatorAxis, D, RendererRegistry, Scrollbar, Series, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var color = Color.parse;\n        var hasTouch = H.hasTouch,\n            isTouchDevice = H.isTouchDevice;\n        var defaultOptions = D.defaultOptions;\n        var seriesTypes = SeriesRegistry.seriesTypes;\n        var addEvent = U.addEvent,\n            clamp = U.clamp,\n            correctFloat = U.correctFloat,\n            defined = U.defined,\n            destroyObjectProperties = U.destroyObjectProperties,\n            erase = U.erase,\n            extend = U.extend,\n            find = U.find,\n            isArray = U.isArray,\n            isNumber = U.isNumber,\n            merge = U.merge,\n            pick = U.pick,\n            removeEvent = U.removeEvent,\n            splat = U.splat;\n        var defaultSeriesType, \n            // Finding the min or max of a set of variables where we don't know if they\n            // are defined, is a pattern that is repeated several places in Highcharts.\n            // Consider making this a global utility method.\n            numExt = function (extreme) {\n                var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            var numbers = [].filter.call(args,\n                isNumber);\n            if (numbers.length) {\n                return Math[extreme].apply(0, numbers);\n            }\n        };\n        defaultSeriesType = typeof seriesTypes.areaspline === 'undefined' ?\n            'line' :\n            'areaspline';\n        extend(defaultOptions, {\n            /**\n             * Maximum range which can be set using the navigator's handles.\n             * Opposite of [xAxis.minRange](#xAxis.minRange).\n             *\n             * @sample {highstock} stock/navigator/maxrange/\n             *         Defined max and min range\n             *\n             * @type      {number}\n             * @since     6.0.0\n             * @product   highstock gantt\n             * @apioption xAxis.maxRange\n             */\n            /**\n             * The navigator is a small series below the main series, displaying\n             * a view of the entire data set. It provides tools to zoom in and\n             * out on parts of the data as well as panning across the dataset.\n             *\n             * @product      highstock gantt\n             * @optionparent navigator\n             */\n            navigator: {\n                /**\n                 * Whether the navigator and scrollbar should adapt to updated data\n                 * in the base X axis. When loading data async, as in the demo below,\n                 * this should be `false`. Otherwise new data will trigger navigator\n                 * redraw, which will cause unwanted looping. In the demo below, the\n                 * data in the navigator is set only once. On navigating, only the main\n                 * chart content is updated.\n                 *\n                 * @sample {highstock} stock/demo/lazy-loading/\n                 *         Set to false with async data loading\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @apioption navigator.adaptToUpdatedData\n                 */\n                /**\n                 * An integer identifying the index to use for the base series, or a\n                 * string representing the id of the series.\n                 *\n                 * **Note**: As of Highcharts 5.0, this is now a deprecated option.\n                 * Prefer [series.showInNavigator](#plotOptions.series.showInNavigator).\n                 *\n                 * @see [series.showInNavigator](#plotOptions.series.showInNavigator)\n                 *\n                 * @deprecated\n                 * @type      {number|string}\n                 * @default   0\n                 * @apioption navigator.baseSeries\n                 */\n                /**\n                 * Enable or disable the navigator.\n                 *\n                 * @sample {highstock} stock/navigator/enabled/\n                 *         Disable the navigator\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @apioption navigator.enabled\n                 */\n                /**\n                 * When the chart is inverted, whether to draw the navigator on the\n                 * opposite side.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     5.0.8\n                 * @apioption navigator.opposite\n                 */\n                /**\n                 * The height of the navigator.\n                 *\n                 * @sample {highstock} stock/navigator/height/\n                 *         A higher navigator\n                 */\n                height: 40,\n                /**\n                 * The distance from the nearest element, the X axis or X axis labels.\n                 *\n                 * @sample {highstock} stock/navigator/margin/\n                 *         A margin of 2 draws the navigator closer to the X axis labels\n                 */\n                margin: 25,\n                /**\n                 * Whether the mask should be inside the range marking the zoomed\n                 * range, or outside. In Highcharts Stock 1.x it was always `false`.\n                 *\n                 * @sample {highstock} stock/navigator/maskinside-false/\n                 *         False, mask outside\n                 *\n                 * @since   2.0\n                 */\n                maskInside: true,\n                /**\n                 * Options for the handles for dragging the zoomed area.\n                 *\n                 * @sample {highstock} stock/navigator/handles/\n                 *         Colored handles\n                 */\n                handles: {\n                    /**\n                     * Width for handles.\n                     *\n                     * @sample {highstock} stock/navigator/styled-handles/\n                     *         Styled handles\n                     *\n                     * @since   6.0.0\n                     */\n                    width: 7,\n                    /**\n                     * Height for handles.\n                     *\n                     * @sample {highstock} stock/navigator/styled-handles/\n                     *         Styled handles\n                     *\n                     * @since   6.0.0\n                     */\n                    height: 15,\n                    /**\n                     * Array to define shapes of handles. 0-index for left, 1-index for\n                     * right.\n                     *\n                     * Additionally, the URL to a graphic can be given on this form:\n                     * `url(graphic.png)`. Note that for the image to be applied to\n                     * exported charts, its URL needs to be accessible by the export\n                     * server.\n                     *\n                     * Custom callbacks for symbol path generation can also be added to\n                     * `Highcharts.SVGRenderer.prototype.symbols`. The callback is then\n                     * used by its method name, as shown in the demo.\n                     *\n                     * @sample {highstock} stock/navigator/styled-handles/\n                     *         Styled handles\n                     *\n                     * @type    {Array<string>}\n                     * @default [\"navigator-handle\", \"navigator-handle\"]\n                     * @since   6.0.0\n                     */\n                    symbols: ['navigator-handle', 'navigator-handle'],\n                    /**\n                     * Allows to enable/disable handles.\n                     *\n                     * @since   6.0.0\n                     */\n                    enabled: true,\n                    /**\n                     * The width for the handle border and the stripes inside.\n                     *\n                     * @sample {highstock} stock/navigator/styled-handles/\n                     *         Styled handles\n                     *\n                     * @since     6.0.0\n                     * @apioption navigator.handles.lineWidth\n                     */\n                    lineWidth: 1,\n                    /**\n                     * The fill for the handle.\n                     *\n                     * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     */\n                    backgroundColor: \"#f2f2f2\" /* neutralColor5 */,\n                    /**\n                     * The stroke for the handle border and the stripes inside.\n                     *\n                     * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     */\n                    borderColor: \"#999999\" /* neutralColor40 */\n                },\n                /**\n                 * The color of the mask covering the areas of the navigator series\n                 * that are currently not visible in the main series. The default\n                 * color is bluish with an opacity of 0.3 to see the series below.\n                 *\n                 * @see In styled mode, the mask is styled with the\n                 *      `.highcharts-navigator-mask` and\n                 *      `.highcharts-navigator-mask-inside` classes.\n                 *\n                 * @sample {highstock} stock/navigator/maskfill/\n                 *         Blue, semi transparent mask\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default rgba(102,133,194,0.3)\n                 */\n                maskFill: color(\"#6685c2\" /* highlightColor60 */).setOpacity(0.3).get(),\n                /**\n                 * The color of the line marking the currently zoomed area in the\n                 * navigator.\n                 *\n                 * @sample {highstock} stock/navigator/outline/\n                 *         2px blue outline\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default #cccccc\n                 */\n                outlineColor: \"#cccccc\" /* neutralColor20 */,\n                /**\n                 * The width of the line marking the currently zoomed area in the\n                 * navigator.\n                 *\n                 * @see In styled mode, the outline stroke width is set with the\n                 *      `.highcharts-navigator-outline` class.\n                 *\n                 * @sample {highstock} stock/navigator/outline/\n                 *         2px blue outline\n                 *\n                 * @type    {number}\n                 */\n                outlineWidth: 1,\n                /**\n                 * Options for the navigator series. Available options are the same\n                 * as any series, documented at [plotOptions](#plotOptions.series)\n                 * and [series](#series).\n                 *\n                 * Unless data is explicitly defined on navigator.series, the data\n                 * is borrowed from the first series in the chart.\n                 *\n                 * Default series options for the navigator series are:\n                 * ```js\n                 * series: {\n                 *     type: 'areaspline',\n                 *     fillOpacity: 0.05,\n                 *     dataGrouping: {\n                 *         smoothed: true\n                 *     },\n                 *     lineWidth: 1,\n                 *     marker: {\n                 *         enabled: false\n                 *     }\n                 * }\n                 * ```\n                 *\n                 * @see In styled mode, the navigator series is styled with the\n                 *      `.highcharts-navigator-series` class.\n                 *\n                 * @sample {highstock} stock/navigator/series-data/\n                 *         Using a separate data set for the navigator\n                 * @sample {highstock} stock/navigator/series/\n                 *         A green navigator series\n                 *\n                 * @type {*|Array<*>|Highcharts.SeriesOptionsType|Array<Highcharts.SeriesOptionsType>}\n                 */\n                series: {\n                    /**\n                     * The type of the navigator series.\n                     *\n                     * Heads up:\n                     * In column-type navigator, zooming is limited to at least one\n                     * point with its `pointRange`.\n                     *\n                     * @sample {highstock} stock/navigator/column/\n                     *         Column type navigator\n                     *\n                     * @type    {string}\n                     * @default {highstock} `areaspline` if defined, otherwise `line`\n                     * @default {gantt} gantt\n                     */\n                    type: defaultSeriesType,\n                    /**\n                     * The fill opacity of the navigator series.\n                     */\n                    fillOpacity: 0.05,\n                    /**\n                     * The pixel line width of the navigator series.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * @ignore-option\n                     */\n                    compare: null,\n                    /**\n                     * Unless data is explicitly defined, the data is borrowed from the\n                     * first series in the chart.\n                     *\n                     * @type      {Array<number|Array<number|string|null>|object|null>}\n                     * @product   highstock\n                     * @apioption navigator.series.data\n                     */\n                    /**\n                     * Data grouping options for the navigator series.\n                     *\n                     * @extends plotOptions.series.dataGrouping\n                     */\n                    dataGrouping: {\n                        approximation: 'average',\n                        enabled: true,\n                        groupPixelWidth: 2,\n                        // Replace smoothed property by anchors, #12455.\n                        firstAnchor: 'firstPoint',\n                        anchor: 'middle',\n                        lastAnchor: 'lastPoint',\n                        // Day and week differs from plotOptions.series.dataGrouping\n                        units: [\n                            ['millisecond', [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]],\n                            ['second', [1, 2, 5, 10, 15, 30]],\n                            ['minute', [1, 2, 5, 10, 15, 30]],\n                            ['hour', [1, 2, 3, 4, 6, 8, 12]],\n                            ['day', [1, 2, 3, 4]],\n                            ['week', [1, 2, 3]],\n                            ['month', [1, 3, 6]],\n                            ['year', null]\n                        ]\n                    },\n                    /**\n                     * Data label options for the navigator series. Data labels are\n                     * disabled by default on the navigator series.\n                     *\n                     * @extends plotOptions.series.dataLabels\n                     */\n                    dataLabels: {\n                        enabled: false,\n                        zIndex: 2 // #1839\n                    },\n                    id: 'highcharts-navigator-series',\n                    className: 'highcharts-navigator-series',\n                    /**\n                     * Sets the fill color of the navigator series.\n                     *\n                     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @apioption navigator.series.color\n                     */\n                    /**\n                     * Line color for the navigator series. Allows setting the color\n                     * while disallowing the default candlestick setting.\n                     *\n                     * @type {Highcharts.ColorString|null}\n                     */\n                    lineColor: null,\n                    marker: {\n                        enabled: false\n                    },\n                    /**\n                     * Since Highcharts Stock v8, default value is the same as default\n                     * `pointRange` defined for a specific type (e.g. `null` for\n                     * column type).\n                     *\n                     * In Highcharts Stock version < 8, defaults to 0.\n                     *\n                     * @extends plotOptions.series.pointRange\n                     * @type {number|null}\n                     * @apioption navigator.series.pointRange\n                     */\n                    /**\n                     * The threshold option. Setting it to 0 will make the default\n                     * navigator area series draw its area from the 0 value and up.\n                     *\n                     * @type {number|null}\n                     */\n                    threshold: null\n                },\n                /**\n                 * Options for the navigator X axis. Default series options for the\n                 * navigator xAxis are:\n                 * ```js\n                 * xAxis: {\n                 *     tickWidth: 0,\n                 *     lineWidth: 0,\n                 *     gridLineWidth: 1,\n                 *     tickPixelInterval: 200,\n                 *     labels: {\n                 *            align: 'left',\n                 *         style: {\n                 *             color: '#888'\n                 *         },\n                 *         x: 3,\n                 *         y: -4\n                 *     }\n                 * }\n                 * ```\n                 *\n                 * @extends   xAxis\n                 * @excluding linkedTo, maxZoom, minRange, opposite, range, scrollbar,\n                 *            showEmpty, maxRange\n                 */\n                xAxis: {\n                    /**\n                     * Additional range on the right side of the xAxis. Works similar to\n                     * xAxis.maxPadding, but value is set in milliseconds.\n                     * Can be set for both, main xAxis and navigator's xAxis.\n                     *\n                     * @since   6.0.0\n                     */\n                    overscroll: 0,\n                    className: 'highcharts-navigator-xaxis',\n                    tickLength: 0,\n                    lineWidth: 0,\n                    gridLineColor: \"#e6e6e6\" /* neutralColor10 */,\n                    gridLineWidth: 1,\n                    tickPixelInterval: 200,\n                    labels: {\n                        align: 'left',\n                        /**\n                         * @type {Highcharts.CSSObject}\n                         */\n                        style: {\n                            /** @ignore */\n                            color: \"#999999\" /* neutralColor40 */\n                        },\n                        x: 3,\n                        y: -4\n                    },\n                    crosshair: false\n                },\n                /**\n                 * Options for the navigator Y axis. Default series options for the\n                 * navigator yAxis are:\n                 * ```js\n                 * yAxis: {\n                 *     gridLineWidth: 0,\n                 *     startOnTick: false,\n                 *     endOnTick: false,\n                 *     minPadding: 0.1,\n                 *     maxPadding: 0.1,\n                 *     labels: {\n                 *         enabled: false\n                 *     },\n                 *     title: {\n                 *         text: null\n                 *     },\n                 *     tickWidth: 0\n                 * }\n                 * ```\n                 *\n                 * @extends   yAxis\n                 * @excluding height, linkedTo, maxZoom, minRange, ordinal, range,\n                 *            showEmpty, scrollbar, top, units, maxRange, minLength,\n                 *            maxLength, resize\n                 */\n                yAxis: {\n                    className: 'highcharts-navigator-yaxis',\n                    gridLineWidth: 0,\n                    startOnTick: false,\n                    endOnTick: false,\n                    minPadding: 0.1,\n                    maxPadding: 0.1,\n                    labels: {\n                        enabled: false\n                    },\n                    crosshair: false,\n                    title: {\n                        text: null\n                    },\n                    tickLength: 0,\n                    tickWidth: 0\n                }\n            }\n        });\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * Draw one of the handles on the side of the zoomed range in the navigator\n         *\n         * @private\n         * @function Highcharts.Renderer#symbols.navigator-handle\n         * @param {number} x\n         * @param {number} y\n         * @param {number} w\n         * @param {number} h\n         * @param {Highcharts.NavigatorHandlesOptions} options\n         * @return {Highcharts.SVGPathArray}\n         *         Path to be used in a handle\n         */\n        RendererRegistry.getRendererType().prototype.symbols['navigator-handle'] = function (_x, _y, _w, _h, options) {\n            var halfWidth = (options && options.width || 0) / 2,\n                markerPosition = Math.round(halfWidth / 3) + 0.5,\n                height = options && options.height || 0;\n            return [\n                ['M', -halfWidth - 1, 0.5],\n                ['L', halfWidth, 0.5],\n                ['L', halfWidth, height + 0.5],\n                ['L', -halfWidth - 1, height + 0.5],\n                ['L', -halfWidth - 1, 0.5],\n                ['M', -markerPosition, 4],\n                ['L', -markerPosition, height - 3],\n                ['M', markerPosition - 1, 4],\n                ['L', markerPosition - 1, height - 3]\n            ];\n        };\n        /**\n         * The Navigator class\n         *\n         * @private\n         * @class\n         * @name Highcharts.Navigator\n         *\n         * @param {Highcharts.Chart} chart\n         *        Chart object\n         */\n        var Navigator = /** @class */ (function () {\n                function Navigator(chart) {\n                    this.baseSeries = void 0;\n                this.chart = void 0;\n                this.handles = void 0;\n                this.height = void 0;\n                this.left = void 0;\n                this.navigatorEnabled = void 0;\n                this.navigatorGroup = void 0;\n                this.navigatorOptions = void 0;\n                this.navigatorSeries = void 0;\n                this.navigatorSize = void 0;\n                this.opposite = void 0;\n                this.outline = void 0;\n                this.outlineHeight = void 0;\n                this.range = void 0;\n                this.rendered = void 0;\n                this.shades = void 0;\n                this.size = void 0;\n                this.top = void 0;\n                this.xAxis = void 0;\n                this.yAxis = void 0;\n                this.zoomedMax = void 0;\n                this.zoomedMin = void 0;\n                this.init(chart);\n            }\n            /**\n             * Draw one of the handles on the side of the zoomed range in the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#drawHandle\n             *\n             * @param {number} x\n             *        The x center for the handle\n             *\n             * @param {number} index\n             *        0 for left and 1 for right\n             *\n             * @param {boolean|undefined} inverted\n             *        flag for chart.inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            Navigator.prototype.drawHandle = function (x, index, inverted, verb) {\n                var navigator = this,\n                    height = navigator.navigatorOptions.handles.height;\n                // Place it\n                navigator.handles[index][verb](inverted ? {\n                    translateX: Math.round(navigator.left + navigator.height / 2),\n                    translateY: Math.round(navigator.top + parseInt(x, 10) + 0.5 - height)\n                } : {\n                    translateX: Math.round(navigator.left + parseInt(x, 10)),\n                    translateY: Math.round(navigator.top + navigator.height / 2 - height / 2 - 1)\n                });\n            };\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawOutline\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            Navigator.prototype.drawOutline = function (zoomedMin, zoomedMax, inverted, verb) {\n                var navigator = this,\n                    maskInside = navigator.navigatorOptions.maskInside,\n                    outlineWidth = navigator.outline.strokeWidth(),\n                    halfOutline = outlineWidth / 2,\n                    outlineCorrection = (outlineWidth % 2) / 2, // #5800\n                    outlineHeight = navigator.outlineHeight,\n                    scrollbarHeight = navigator.scrollbarHeight || 0,\n                    navigatorSize = navigator.size,\n                    left = navigator.left - scrollbarHeight,\n                    navigatorTop = navigator.top,\n                    verticalMin,\n                    path;\n                if (inverted) {\n                    left -= halfOutline;\n                    verticalMin = navigatorTop + zoomedMax + outlineCorrection;\n                    zoomedMax = navigatorTop + zoomedMin + outlineCorrection;\n                    path = [\n                        [\n                            'M',\n                            left + outlineHeight,\n                            navigatorTop - scrollbarHeight - outlineCorrection\n                        ],\n                        // top right of zoomed range\n                        ['L', left + outlineHeight, verticalMin],\n                        ['L', left, verticalMin],\n                        ['L', left, zoomedMax],\n                        ['L', left + outlineHeight, zoomedMax],\n                        [\n                            'L',\n                            left + outlineHeight,\n                            navigatorTop + navigatorSize + scrollbarHeight\n                        ]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // upper left of zoomed range\n                        ['M', left + outlineHeight, verticalMin - halfOutline], \n                        // upper right of z.r.\n                        [\n                            'L',\n                            left + outlineHeight,\n                            zoomedMax + halfOutline\n                        ]);\n                    }\n                }\n                else {\n                    zoomedMin += left + scrollbarHeight - outlineCorrection;\n                    zoomedMax += left + scrollbarHeight - outlineCorrection;\n                    navigatorTop += halfOutline;\n                    path = [\n                        // left\n                        ['M', left, navigatorTop],\n                        // upper left of zoomed range\n                        ['L', zoomedMin, navigatorTop],\n                        // lower left of z.r.\n                        ['L', zoomedMin, navigatorTop + outlineHeight],\n                        // lower right of z.r.\n                        ['L', zoomedMax, navigatorTop + outlineHeight],\n                        // upper right of z.r.\n                        ['L', zoomedMax, navigatorTop],\n                        // right\n                        ['L', left + navigatorSize + scrollbarHeight * 2, navigatorTop]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // upper left of zoomed range\n                        ['M', zoomedMin - halfOutline, navigatorTop], \n                        // upper right of z.r.\n                        ['L', zoomedMax + halfOutline, navigatorTop]);\n                    }\n                }\n                navigator.outline[verb]({\n                    d: path\n                });\n            };\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawMasks\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            Navigator.prototype.drawMasks = function (zoomedMin, zoomedMax, inverted, verb) {\n                var navigator = this,\n                    left = navigator.left,\n                    top = navigator.top,\n                    navigatorHeight = navigator.height,\n                    height,\n                    width,\n                    x,\n                    y;\n                // Determine rectangle position & size\n                // According to (non)inverted position:\n                if (inverted) {\n                    x = [left, left, left];\n                    y = [top, top + zoomedMin, top + zoomedMax];\n                    width = [navigatorHeight, navigatorHeight, navigatorHeight];\n                    height = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                }\n                else {\n                    x = [left, left + zoomedMin, left + zoomedMax];\n                    y = [top, top, top];\n                    width = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                    height = [navigatorHeight, navigatorHeight, navigatorHeight];\n                }\n                navigator.shades.forEach(function (shade, i) {\n                    shade[verb]({\n                        x: x[i],\n                        y: y[i],\n                        width: width[i],\n                        height: height[i]\n                    });\n                });\n            };\n            /**\n             * Generate DOM elements for a navigator:\n             *\n             * - main navigator group\n             *\n             * - all shades\n             *\n             * - outline\n             *\n             * - handles\n             *\n             * @private\n             * @function Highcharts.Navigator#renderElements\n             */\n            Navigator.prototype.renderElements = function () {\n                var navigator = this,\n                    navigatorOptions = navigator.navigatorOptions,\n                    maskInside = navigatorOptions.maskInside,\n                    chart = navigator.chart,\n                    inverted = chart.inverted,\n                    renderer = chart.renderer,\n                    navigatorGroup,\n                    mouseCursor = {\n                        cursor: inverted ? 'ns-resize' : 'ew-resize'\n                    };\n                // Create the main navigator group\n                navigator.navigatorGroup = navigatorGroup = renderer.g('navigator')\n                    .attr({\n                    zIndex: 8,\n                    visibility: 'hidden'\n                })\n                    .add();\n                // Create masks, each mask will get events and fill:\n                [\n                    !maskInside,\n                    maskInside,\n                    !maskInside\n                ].forEach(function (hasMask, index) {\n                    navigator.shades[index] = renderer.rect()\n                        .addClass('highcharts-navigator-mask' +\n                        (index === 1 ? '-inside' : '-outside'))\n                        .add(navigatorGroup);\n                    if (!chart.styledMode) {\n                        navigator.shades[index]\n                            .attr({\n                            fill: hasMask ?\n                                navigatorOptions.maskFill :\n                                'rgba(0,0,0,0)'\n                        })\n                            .css((index === 1) && mouseCursor);\n                    }\n                });\n                // Create the outline:\n                navigator.outline = renderer.path()\n                    .addClass('highcharts-navigator-outline')\n                    .add(navigatorGroup);\n                if (!chart.styledMode) {\n                    navigator.outline.attr({\n                        'stroke-width': navigatorOptions.outlineWidth,\n                        stroke: navigatorOptions.outlineColor\n                    });\n                }\n                // Create the handlers:\n                if (navigatorOptions.handles.enabled) {\n                    [0, 1].forEach(function (index) {\n                        navigatorOptions.handles.inverted = chart.inverted;\n                        navigator.handles[index] = renderer.symbol(navigatorOptions.handles.symbols[index], -navigatorOptions.handles.width / 2 - 1, 0, navigatorOptions.handles.width, navigatorOptions.handles.height, navigatorOptions.handles);\n                        // zIndex = 6 for right handle, 7 for left.\n                        // Can't be 10, because of the tooltip in inverted chart #2908\n                        navigator.handles[index].attr({ zIndex: 7 - index })\n                            .addClass('highcharts-navigator-handle ' +\n                            'highcharts-navigator-handle-' +\n                            ['left', 'right'][index]).add(navigatorGroup);\n                        if (!chart.styledMode) {\n                            var handlesOptions = navigatorOptions.handles;\n                            navigator.handles[index]\n                                .attr({\n                                fill: handlesOptions.backgroundColor,\n                                stroke: handlesOptions.borderColor,\n                                'stroke-width': handlesOptions.lineWidth\n                            })\n                                .css(mouseCursor);\n                        }\n                    });\n                }\n            };\n            /**\n             * Update navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#update\n             *\n             * @param {Highcharts.NavigatorOptions} options\n             *        Options to merge in when updating navigator\n             */\n            Navigator.prototype.update = function (options) {\n                // Remove references to old navigator series in base series\n                (this.series || []).forEach(function (series) {\n                    if (series.baseSeries) {\n                        delete series.baseSeries.navigatorSeries;\n                    }\n                });\n                // Destroy and rebuild navigator\n                this.destroy();\n                var chartOptions = this.chart.options;\n                merge(true, chartOptions.navigator, this.options, options);\n                this.init(this.chart);\n            };\n            /**\n             * Render the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#render\n             * @param {number} min\n             *        X axis value minimum\n             * @param {number} max\n             *        X axis value maximum\n             * @param {number} [pxMin]\n             *        Pixel value minimum\n             * @param {number} [pxMax]\n             *        Pixel value maximum\n             */\n            Navigator.prototype.render = function (min, max, pxMin, pxMax) {\n                var navigator = this,\n                    chart = navigator.chart,\n                    navigatorWidth,\n                    scrollbarLeft,\n                    scrollbarTop,\n                    scrollbarHeight = navigator.scrollbarHeight,\n                    navigatorSize,\n                    xAxis = navigator.xAxis,\n                    pointRange = xAxis.pointRange || 0,\n                    scrollbarXAxis = xAxis.navigatorAxis.fake ? chart.xAxis[0] : xAxis,\n                    navigatorEnabled = navigator.navigatorEnabled,\n                    zoomedMin,\n                    zoomedMax,\n                    rendered = navigator.rendered,\n                    inverted = chart.inverted,\n                    verb,\n                    newMin,\n                    newMax,\n                    currentRange,\n                    minRange = chart.xAxis[0].minRange,\n                    maxRange = chart.xAxis[0].options.maxRange;\n                // Don't redraw while moving the handles (#4703).\n                if (this.hasDragged && !defined(pxMin)) {\n                    return;\n                }\n                min = correctFloat(min - pointRange / 2);\n                max = correctFloat(max + pointRange / 2);\n                // Don't render the navigator until we have data (#486, #4202, #5172).\n                if (!isNumber(min) || !isNumber(max)) {\n                    // However, if navigator was already rendered, we may need to resize\n                    // it. For example hidden series, but visible navigator (#6022).\n                    if (rendered) {\n                        pxMin = 0;\n                        pxMax = pick(xAxis.width, scrollbarXAxis.width);\n                    }\n                    else {\n                        return;\n                    }\n                }\n                navigator.left = pick(xAxis.left, \n                // in case of scrollbar only, without navigator\n                chart.plotLeft + scrollbarHeight +\n                    (inverted ? chart.plotWidth : 0));\n                navigator.size = zoomedMax = navigatorSize = pick(xAxis.len, (inverted ? chart.plotHeight : chart.plotWidth) -\n                    2 * scrollbarHeight);\n                if (inverted) {\n                    navigatorWidth = scrollbarHeight;\n                }\n                else {\n                    navigatorWidth = navigatorSize + 2 * scrollbarHeight;\n                }\n                // Get the pixel position of the handles\n                pxMin = pick(pxMin, xAxis.toPixels(min, true));\n                pxMax = pick(pxMax, xAxis.toPixels(max, true));\n                // Verify (#1851, #2238)\n                if (!isNumber(pxMin) || Math.abs(pxMin) === Infinity) {\n                    pxMin = 0;\n                    pxMax = navigatorWidth;\n                }\n                // Are we below the minRange? (#2618, #6191)\n                newMin = xAxis.toValue(pxMin, true);\n                newMax = xAxis.toValue(pxMax, true);\n                currentRange = Math.abs(correctFloat(newMax - newMin));\n                if (currentRange < minRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - minRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + minRange + pointRange, true);\n                    }\n                }\n                else if (defined(maxRange) &&\n                    correctFloat(currentRange - pointRange) > maxRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - maxRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + maxRange + pointRange, true);\n                    }\n                }\n                // Handles are allowed to cross, but never exceed the plot area\n                navigator.zoomedMax = clamp(Math.max(pxMin, pxMax), 0, zoomedMax);\n                navigator.zoomedMin = clamp(navigator.fixedWidth ?\n                    navigator.zoomedMax - navigator.fixedWidth :\n                    Math.min(pxMin, pxMax), 0, zoomedMax);\n                navigator.range = navigator.zoomedMax - navigator.zoomedMin;\n                zoomedMax = Math.round(navigator.zoomedMax);\n                zoomedMin = Math.round(navigator.zoomedMin);\n                if (navigatorEnabled) {\n                    navigator.navigatorGroup.attr({\n                        visibility: 'visible'\n                    });\n                    // Place elements\n                    verb = rendered && !navigator.hasDragged ? 'animate' : 'attr';\n                    navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    if (navigator.navigatorOptions.handles.enabled) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n                if (navigator.scrollbar) {\n                    if (inverted) {\n                        scrollbarTop = navigator.top - scrollbarHeight;\n                        scrollbarLeft = navigator.left - scrollbarHeight +\n                            (navigatorEnabled || !scrollbarXAxis.opposite ? 0 :\n                                // Multiple axes has offsets:\n                                (scrollbarXAxis.titleOffset || 0) +\n                                    // Self margin from the axis.title\n                                    scrollbarXAxis.axisTitleMargin);\n                        scrollbarHeight = navigatorSize + 2 * scrollbarHeight;\n                    }\n                    else {\n                        scrollbarTop = navigator.top + (navigatorEnabled ?\n                            navigator.height :\n                            -scrollbarHeight);\n                        scrollbarLeft = navigator.left - scrollbarHeight;\n                    }\n                    // Reposition scrollbar\n                    navigator.scrollbar.position(scrollbarLeft, scrollbarTop, navigatorWidth, scrollbarHeight);\n                    // Keep scale 0-1\n                    navigator.scrollbar.setRange(\n                    // Use real value, not rounded because range can be very small\n                    // (#1716)\n                    navigator.zoomedMin / (navigatorSize || 1), navigator.zoomedMax / (navigatorSize || 1));\n                }\n                navigator.rendered = true;\n            };\n            /**\n             * Set up the mouse and touch events for the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#addMouseEvents\n             */\n            Navigator.prototype.addMouseEvents = function () {\n                var navigator = this,\n                    chart = navigator.chart,\n                    container = chart.container,\n                    eventsToUnbind = [],\n                    mouseMoveHandler,\n                    mouseUpHandler;\n                /**\n                 * Create mouse events' handlers.\n                 * Make them as separate functions to enable wrapping them:\n                 */\n                navigator.mouseMoveHandler = mouseMoveHandler = function (e) {\n                    navigator.onMouseMove(e);\n                };\n                navigator.mouseUpHandler = mouseUpHandler = function (e) {\n                    navigator.onMouseUp(e);\n                };\n                // Add shades and handles mousedown events\n                eventsToUnbind = navigator.getPartsEvents('mousedown');\n                // Add mouse move and mouseup events. These are bind to doc/container,\n                // because Navigator.grabbedSomething flags are stored in mousedown\n                // events\n                eventsToUnbind.push(addEvent(chart.renderTo, 'mousemove', mouseMoveHandler), addEvent(container.ownerDocument, 'mouseup', mouseUpHandler));\n                // Touch events\n                if (hasTouch) {\n                    eventsToUnbind.push(addEvent(chart.renderTo, 'touchmove', mouseMoveHandler), addEvent(container.ownerDocument, 'touchend', mouseUpHandler));\n                    eventsToUnbind.concat(navigator.getPartsEvents('touchstart'));\n                }\n                navigator.eventsToUnbind = eventsToUnbind;\n                // Data events\n                if (navigator.series && navigator.series[0]) {\n                    eventsToUnbind.push(addEvent(navigator.series[0].xAxis, 'foundExtremes', function () {\n                        chart.navigator.modifyNavigatorAxisExtremes();\n                    }));\n                }\n            };\n            /**\n             * Generate events for handles and masks\n             *\n             * @private\n             * @function Highcharts.Navigator#getPartsEvents\n             *\n             * @param {string} eventName\n             *        Event name handler, 'mousedown' or 'touchstart'\n             *\n             * @return {Array<Function>}\n             *         An array of functions to remove navigator functions from the\n             *         events again.\n             */\n            Navigator.prototype.getPartsEvents = function (eventName) {\n                var navigator = this,\n                    events = [];\n                ['shades', 'handles'].forEach(function (name) {\n                    navigator[name].forEach(function (navigatorItem, index) {\n                        events.push(addEvent(navigatorItem.element, eventName, function (e) {\n                            navigator[name + 'Mousedown'](e, index);\n                        }));\n                    });\n                });\n                return events;\n            };\n            /**\n             * Mousedown on a shaded mask, either:\n             *\n             * - will be stored for future drag&drop\n             *\n             * - will directly shift to a new range\n             *\n             * @private\n             * @function Highcharts.Navigator#shadesMousedown\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             *\n             * @param {number} index\n             *        Index of a mask in Navigator.shades array\n             */\n            Navigator.prototype.shadesMousedown = function (e, index) {\n                e = this.chart.pointer.normalize(e);\n                var navigator = this,\n                    chart = navigator.chart,\n                    xAxis = navigator.xAxis,\n                    zoomedMin = navigator.zoomedMin,\n                    navigatorPosition = navigator.left,\n                    navigatorSize = navigator.size,\n                    range = navigator.range,\n                    chartX = e.chartX,\n                    fixedMax,\n                    fixedMin,\n                    ext,\n                    left;\n                // For inverted chart, swap some options:\n                if (chart.inverted) {\n                    chartX = e.chartY;\n                    navigatorPosition = navigator.top;\n                }\n                if (index === 1) {\n                    // Store information for drag&drop\n                    navigator.grabbedCenter = chartX;\n                    navigator.fixedWidth = range;\n                    navigator.dragOffset = chartX - zoomedMin;\n                }\n                else {\n                    // Shift the range by clicking on shaded areas\n                    left = chartX - navigatorPosition - range / 2;\n                    if (index === 0) {\n                        left = Math.max(0, left);\n                    }\n                    else if (index === 2 && left + range >= navigatorSize) {\n                        left = navigatorSize - range;\n                        if (navigator.reversedExtremes) {\n                            // #7713\n                            left -= range;\n                            fixedMin = navigator.getUnionExtremes().dataMin;\n                        }\n                        else {\n                            // #2293, #3543\n                            fixedMax = navigator.getUnionExtremes().dataMax;\n                        }\n                    }\n                    if (left !== zoomedMin) { // it has actually moved\n                        navigator.fixedWidth = range; // #1370\n                        ext = xAxis.navigatorAxis.toFixedRange(left, left + range, fixedMin, fixedMax);\n                        if (defined(ext.min)) { // #7411\n                            chart.xAxis[0].setExtremes(Math.min(ext.min, ext.max), Math.max(ext.min, ext.max), true, null, // auto animation\n                            { trigger: 'navigator' });\n                        }\n                    }\n                }\n            };\n            /**\n             * Mousedown on a handle mask.\n             * Will store necessary information for drag&drop.\n             *\n             * @private\n             * @function Highcharts.Navigator#handlesMousedown\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             * @param {number} index\n             *        Index of a handle in Navigator.handles array\n             */\n            Navigator.prototype.handlesMousedown = function (e, index) {\n                e = this.chart.pointer.normalize(e);\n                var navigator = this,\n                    chart = navigator.chart,\n                    baseXAxis = chart.xAxis[0], \n                    // For reversed axes, min and max are changed,\n                    // so the other extreme should be stored\n                    reverse = navigator.reversedExtremes;\n                if (index === 0) {\n                    // Grab the left handle\n                    navigator.grabbedLeft = true;\n                    navigator.otherHandlePos = navigator.zoomedMax;\n                    navigator.fixedExtreme = reverse ? baseXAxis.min : baseXAxis.max;\n                }\n                else {\n                    // Grab the right handle\n                    navigator.grabbedRight = true;\n                    navigator.otherHandlePos = navigator.zoomedMin;\n                    navigator.fixedExtreme = reverse ? baseXAxis.max : baseXAxis.min;\n                }\n                chart.fixedRange = null;\n            };\n            /**\n             * Mouse move event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseMove\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            Navigator.prototype.onMouseMove = function (e) {\n                var navigator = this,\n                    chart = navigator.chart,\n                    left = navigator.left,\n                    navigatorSize = navigator.navigatorSize,\n                    range = navigator.range,\n                    dragOffset = navigator.dragOffset,\n                    inverted = chart.inverted,\n                    chartX;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when holding\n                // the finger down in the center of the scrollbar. This should be\n                // ignored.\n                if (!e.touches || e.touches[0].pageX !== 0) { // #4696\n                    e = chart.pointer.normalize(e);\n                    chartX = e.chartX;\n                    // Swap some options for inverted chart\n                    if (inverted) {\n                        left = navigator.top;\n                        chartX = e.chartY;\n                    }\n                    // Drag left handle or top handle\n                    if (navigator.grabbedLeft) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, chartX - left, navigator.otherHandlePos);\n                        // Drag right handle or bottom handle\n                    }\n                    else if (navigator.grabbedRight) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, navigator.otherHandlePos, chartX - left);\n                        // Drag scrollbar or open area in navigator\n                    }\n                    else if (navigator.grabbedCenter) {\n                        navigator.hasDragged = true;\n                        if (chartX < dragOffset) { // outside left\n                            chartX = dragOffset;\n                            // outside right\n                        }\n                        else if (chartX >\n                            navigatorSize + dragOffset - range) {\n                            chartX = navigatorSize + dragOffset - range;\n                        }\n                        navigator.render(0, 0, chartX - dragOffset, chartX - dragOffset + range);\n                    }\n                    if (navigator.hasDragged &&\n                        navigator.scrollbar &&\n                        pick(navigator.scrollbar.options.liveRedraw, \n                        // By default, don't run live redraw on VML, on touch\n                        // devices or if the chart is in boost.\n                        H.svg && !isTouchDevice && !this.chart.isBoosting)) {\n                        e.DOMType = e.type; // DOMType is for IE8\n                        setTimeout(function () {\n                            navigator.onMouseUp(e);\n                        }, 0);\n                    }\n                }\n            };\n            /**\n             * Mouse up event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseUp\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            Navigator.prototype.onMouseUp = function (e) {\n                var navigator = this,\n                    chart = navigator.chart,\n                    xAxis = navigator.xAxis,\n                    scrollbar = navigator.scrollbar,\n                    DOMEvent = e.DOMEvent || e,\n                    inverted = chart.inverted,\n                    verb = navigator.rendered && !navigator.hasDragged ?\n                        'animate' : 'attr',\n                    zoomedMax,\n                    zoomedMin,\n                    unionExtremes,\n                    fixedMin,\n                    fixedMax,\n                    ext;\n                if (\n                // MouseUp is called for both, navigator and scrollbar (that order),\n                // which causes calling afterSetExtremes twice. Prevent first call\n                // by checking if scrollbar is going to set new extremes (#6334)\n                (navigator.hasDragged && (!scrollbar || !scrollbar.hasDragged)) ||\n                    e.trigger === 'scrollbar') {\n                    unionExtremes = navigator.getUnionExtremes();\n                    // When dragging one handle, make sure the other one doesn't change\n                    if (navigator.zoomedMin === navigator.otherHandlePos) {\n                        fixedMin = navigator.fixedExtreme;\n                    }\n                    else if (navigator.zoomedMax === navigator.otherHandlePos) {\n                        fixedMax = navigator.fixedExtreme;\n                    }\n                    // Snap to right edge (#4076)\n                    if (navigator.zoomedMax === navigator.size) {\n                        fixedMax = navigator.reversedExtremes ?\n                            unionExtremes.dataMin :\n                            unionExtremes.dataMax;\n                    }\n                    // Snap to left edge (#7576)\n                    if (navigator.zoomedMin === 0) {\n                        fixedMin = navigator.reversedExtremes ?\n                            unionExtremes.dataMax :\n                            unionExtremes.dataMin;\n                    }\n                    ext = xAxis.navigatorAxis.toFixedRange(navigator.zoomedMin, navigator.zoomedMax, fixedMin, fixedMax);\n                    if (defined(ext.min)) {\n                        chart.xAxis[0].setExtremes(Math.min(ext.min, ext.max), Math.max(ext.min, ext.max), true, \n                        // Run animation when clicking buttons, scrollbar track etc,\n                        // but not when dragging handles or scrollbar\n                        navigator.hasDragged ? false : null, {\n                            trigger: 'navigator',\n                            triggerOp: 'navigator-drag',\n                            DOMEvent: DOMEvent // #1838\n                        });\n                    }\n                }\n                if (e.DOMType !== 'mousemove' &&\n                    e.DOMType !== 'touchmove') {\n                    navigator.grabbedLeft = navigator.grabbedRight =\n                        navigator.grabbedCenter = navigator.fixedWidth =\n                            navigator.fixedExtreme = navigator.otherHandlePos =\n                                navigator.hasDragged = navigator.dragOffset = null;\n                }\n                // Update position of navigator shades, outline and handles (#12573)\n                if (navigator.navigatorEnabled &&\n                    isNumber(navigator.zoomedMin) &&\n                    isNumber(navigator.zoomedMax)) {\n                    zoomedMin = Math.round(navigator.zoomedMin);\n                    zoomedMax = Math.round(navigator.zoomedMax);\n                    if (navigator.shades) {\n                        navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.outline) {\n                        navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.navigatorOptions.handles.enabled &&\n                        Object.keys(navigator.handles).length ===\n                            navigator.handles.length) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n            };\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeEvents\n             */\n            Navigator.prototype.removeEvents = function () {\n                if (this.eventsToUnbind) {\n                    this.eventsToUnbind.forEach(function (unbind) {\n                        unbind();\n                    });\n                    this.eventsToUnbind = void 0;\n                }\n                this.removeBaseSeriesEvents();\n            };\n            /**\n             * Remove data events.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeBaseSeriesEvents\n             */\n            Navigator.prototype.removeBaseSeriesEvents = function () {\n                var baseSeries = this.baseSeries || [];\n                if (this.navigatorEnabled && baseSeries[0]) {\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        baseSeries.forEach(function (series) {\n                            removeEvent(series, 'updatedData', this.updatedDataHandler);\n                        }, this);\n                    }\n                    // We only listen for extremes-events on the first baseSeries\n                    if (baseSeries[0].xAxis) {\n                        removeEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes);\n                    }\n                }\n            };\n            /**\n             * Initialize the Navigator object\n             *\n             * @private\n             * @function Highcharts.Navigator#init\n             *\n             * @param {Highcharts.Chart} chart\n             */\n            Navigator.prototype.init = function (chart) {\n                var chartOptions = chart.options,\n                    navigatorOptions = chartOptions.navigator,\n                    navigatorEnabled = navigatorOptions.enabled,\n                    scrollbarOptions = chartOptions.scrollbar,\n                    scrollbarEnabled = scrollbarOptions.enabled,\n                    height = navigatorEnabled ? navigatorOptions.height : 0,\n                    scrollbarHeight = scrollbarEnabled ?\n                        scrollbarOptions.height :\n                        0;\n                this.handles = [];\n                this.shades = [];\n                this.chart = chart;\n                this.setBaseSeries();\n                this.height = height;\n                this.scrollbarHeight = scrollbarHeight;\n                this.scrollbarEnabled = scrollbarEnabled;\n                this.navigatorEnabled = navigatorEnabled;\n                this.navigatorOptions = navigatorOptions;\n                this.scrollbarOptions = scrollbarOptions;\n                this.outlineHeight = height + scrollbarHeight;\n                this.opposite = pick(navigatorOptions.opposite, Boolean(!navigatorEnabled && chart.inverted)); // #6262\n                var navigator = this,\n                    baseSeries = navigator.baseSeries,\n                    xAxisIndex = chart.xAxis.length,\n                    yAxisIndex = chart.yAxis.length,\n                    baseXaxis = baseSeries && baseSeries[0] && baseSeries[0].xAxis ||\n                        chart.xAxis[0] || { options: {} };\n                chart.isDirtyBox = true;\n                if (navigator.navigatorEnabled) {\n                    // an x axis is required for scrollbar also\n                    navigator.xAxis = new Axis(chart, merge({\n                        // inherit base xAxis' break and ordinal options\n                        breaks: baseXaxis.options.breaks,\n                        ordinal: baseXaxis.options.ordinal\n                    }, navigatorOptions.xAxis, {\n                        id: 'navigator-x-axis',\n                        yAxis: 'navigator-y-axis',\n                        isX: true,\n                        type: 'datetime',\n                        index: xAxisIndex,\n                        isInternal: true,\n                        offset: 0,\n                        keepOrdinalPadding: true,\n                        startOnTick: false,\n                        endOnTick: false,\n                        minPadding: 0,\n                        maxPadding: 0,\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        offsets: [scrollbarHeight, 0, -scrollbarHeight, 0],\n                        width: height\n                    } : {\n                        offsets: [0, -scrollbarHeight, 0, scrollbarHeight],\n                        height: height\n                    }));\n                    navigator.yAxis = new Axis(chart, merge(navigatorOptions.yAxis, {\n                        id: 'navigator-y-axis',\n                        alignTicks: false,\n                        offset: 0,\n                        index: yAxisIndex,\n                        isInternal: true,\n                        reversed: pick((navigatorOptions.yAxis &&\n                            navigatorOptions.yAxis.reversed), (chart.yAxis[0] && chart.yAxis[0].reversed), false),\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        width: height\n                    } : {\n                        height: height\n                    }));\n                    // If we have a base series, initialize the navigator series\n                    if (baseSeries || navigatorOptions.series.data) {\n                        navigator.updateNavigatorSeries(false);\n                        // If not, set up an event to listen for added series\n                    }\n                    else if (chart.series.length === 0) {\n                        navigator.unbindRedraw = addEvent(chart, 'beforeRedraw', function () {\n                            // We've got one, now add it as base\n                            if (chart.series.length > 0 && !navigator.series) {\n                                navigator.setBaseSeries();\n                                navigator.unbindRedraw(); // reset\n                            }\n                        });\n                    }\n                    navigator.reversedExtremes = (chart.inverted && !navigator.xAxis.reversed) || (!chart.inverted && navigator.xAxis.reversed);\n                    // Render items, so we can bind events to them:\n                    navigator.renderElements();\n                    // Add mouse events\n                    navigator.addMouseEvents();\n                    // in case of scrollbar only, fake an x axis to get translation\n                }\n                else {\n                    navigator.xAxis = {\n                        chart: chart,\n                        navigatorAxis: {\n                            fake: true\n                        },\n                        translate: function (value, reverse) {\n                            var axis = chart.xAxis[0], ext = axis.getExtremes(), scrollTrackWidth = axis.len - 2 * scrollbarHeight, min = numExt('min', axis.options.min, ext.dataMin), valueRange = numExt('max', axis.options.max, ext.dataMax) - min;\n                            return reverse ?\n                                // from pixel to value\n                                (value * valueRange / scrollTrackWidth) + min :\n                                // from value to pixel\n                                scrollTrackWidth * (value - min) / valueRange;\n                        },\n                        toPixels: function (value) {\n                            return this.translate(value);\n                        },\n                        toValue: function (value) {\n                            return this.translate(value, true);\n                        }\n                    };\n                    navigator.xAxis.navigatorAxis.axis = navigator.xAxis;\n                    navigator.xAxis.navigatorAxis.toFixedRange = (NavigatorAxis.AdditionsClass.prototype.toFixedRange.bind(navigator.xAxis.navigatorAxis));\n                }\n                // Initialize the scrollbar\n                if (chart.options.scrollbar.enabled) {\n                    chart.scrollbar = navigator.scrollbar = new Scrollbar(chart.renderer, merge(chart.options.scrollbar, {\n                        margin: navigator.navigatorEnabled ? 0 : 10,\n                        vertical: chart.inverted\n                    }), chart);\n                    addEvent(navigator.scrollbar, 'changed', function (e) {\n                        var range = navigator.size,\n                            to = range * this.to,\n                            from = range * this.from;\n                        navigator.hasDragged = navigator.scrollbar.hasDragged;\n                        navigator.render(0, 0, from, to);\n                        if (this.shouldUpdateExtremes(e.DOMType)) {\n                            setTimeout(function () {\n                                navigator.onMouseUp(e);\n                            });\n                        }\n                    });\n                }\n                // Add data events\n                navigator.addBaseSeriesEvents();\n                // Add redraw events\n                navigator.addChartEvents();\n            };\n            /**\n             * Get the union data extremes of the chart - the outer data extremes of the\n             * base X axis and the navigator axis.\n             *\n             * @private\n             * @function Highcharts.Navigator#getUnionExtremes\n             */\n            Navigator.prototype.getUnionExtremes = function (returnFalseOnNoBaseSeries) {\n                var baseAxis = this.chart.xAxis[0],\n                    navAxis = this.xAxis,\n                    navAxisOptions = navAxis.options,\n                    baseAxisOptions = baseAxis.options,\n                    ret;\n                if (!returnFalseOnNoBaseSeries || baseAxis.dataMin !== null) {\n                    ret = {\n                        dataMin: pick(// #4053\n                        navAxisOptions && navAxisOptions.min, numExt('min', baseAxisOptions.min, baseAxis.dataMin, navAxis.dataMin, navAxis.min)),\n                        dataMax: pick(navAxisOptions && navAxisOptions.max, numExt('max', baseAxisOptions.max, baseAxis.dataMax, navAxis.dataMax, navAxis.max))\n                    };\n                }\n                return ret;\n            };\n            /**\n             * Set the base series and update the navigator series from this. With a bit\n             * of modification we should be able to make this an API method to be called\n             * from the outside\n             *\n             * @private\n             * @function Highcharts.Navigator#setBaseSeries\n             * @param {Highcharts.SeriesOptionsType} [baseSeriesOptions]\n             *        Additional series options for a navigator\n             * @param {boolean} [redraw]\n             *        Whether to redraw after update.\n             */\n            Navigator.prototype.setBaseSeries = function (baseSeriesOptions, redraw) {\n                var chart = this.chart,\n                    baseSeries = this.baseSeries = [];\n                baseSeriesOptions = (baseSeriesOptions ||\n                    chart.options && chart.options.navigator.baseSeries ||\n                    (chart.series.length ?\n                        // Find the first non-navigator series (#8430)\n                        find(chart.series, function (s) {\n                            return !s.options.isInternal;\n                        }).index :\n                        0));\n                // Iterate through series and add the ones that should be shown in\n                // navigator.\n                (chart.series || []).forEach(function (series, i) {\n                    if (\n                    // Don't include existing nav series\n                    !series.options.isInternal &&\n                        (series.options.showInNavigator ||\n                            (i === baseSeriesOptions ||\n                                series.options.id === baseSeriesOptions) &&\n                                series.options.showInNavigator !== false)) {\n                        baseSeries.push(series);\n                    }\n                });\n                // When run after render, this.xAxis already exists\n                if (this.xAxis && !this.xAxis.navigatorAxis.fake) {\n                    this.updateNavigatorSeries(true, redraw);\n                }\n            };\n            /**\n             * Update series in the navigator from baseSeries, adding new if does not\n             * exist.\n             *\n             * @private\n             * @function Highcharts.Navigator.updateNavigatorSeries\n             * @param {boolean} addEvents\n             * @param {boolean} [redraw]\n             */\n            Navigator.prototype.updateNavigatorSeries = function (addEvents, redraw) {\n                var navigator = this,\n                    chart = navigator.chart,\n                    baseSeries = navigator.baseSeries,\n                    baseOptions,\n                    mergedNavSeriesOptions,\n                    chartNavigatorSeriesOptions = navigator.navigatorOptions.series,\n                    baseNavigatorOptions,\n                    navSeriesMixin = {\n                        enableMouseTracking: false,\n                        index: null,\n                        linkedTo: null,\n                        group: 'nav',\n                        padXAxis: false,\n                        xAxis: 'navigator-x-axis',\n                        yAxis: 'navigator-y-axis',\n                        showInLegend: false,\n                        stacking: void 0,\n                        isInternal: true,\n                        states: {\n                            inactive: {\n                                opacity: 1\n                            }\n                        }\n                    }, \n                    // Remove navigator series that are no longer in the baseSeries\n                    navigatorSeries = navigator.series =\n                        (navigator.series || []).filter(function (navSeries) {\n                            var base = navSeries.baseSeries;\n                        if (baseSeries.indexOf(base) < 0) { // Not in array\n                            // If there is still a base series connected to this\n                            // series, remove event handler and reference.\n                            if (base) {\n                                removeEvent(base, 'updatedData', navigator.updatedDataHandler);\n                                delete base.navigatorSeries;\n                            }\n                            // Kill the nav series. It may already have been\n                            // destroyed (#8715).\n                            if (navSeries.chart) {\n                                navSeries.destroy();\n                            }\n                            return false;\n                        }\n                        return true;\n                    });\n                // Go through each base series and merge the options to create new\n                // series\n                if (baseSeries && baseSeries.length) {\n                    baseSeries.forEach(function eachBaseSeries(base) {\n                        var linkedNavSeries = base.navigatorSeries,\n                            userNavOptions = extend(\n                            // Grab color and visibility from base as default\n                            {\n                                color: base.color,\n                                visible: base.visible\n                            }, !isArray(chartNavigatorSeriesOptions) ?\n                                chartNavigatorSeriesOptions :\n                                defaultOptions.navigator.series);\n                        // Don't update if the series exists in nav and we have disabled\n                        // adaptToUpdatedData.\n                        if (linkedNavSeries &&\n                            navigator.navigatorOptions.adaptToUpdatedData === false) {\n                            return;\n                        }\n                        navSeriesMixin.name = 'Navigator ' + baseSeries.length;\n                        baseOptions = base.options || {};\n                        baseNavigatorOptions = baseOptions.navigatorOptions || {};\n                        // The dataLabels options are not merged correctly\n                        // if the settings are an array, #13847.\n                        userNavOptions.dataLabels = splat(userNavOptions.dataLabels);\n                        mergedNavSeriesOptions = merge(baseOptions, navSeriesMixin, userNavOptions, baseNavigatorOptions);\n                        // Once nav series type is resolved, pick correct pointRange\n                        mergedNavSeriesOptions.pointRange = pick(\n                        // Stricte set pointRange in options\n                        userNavOptions.pointRange, baseNavigatorOptions.pointRange, \n                        // Fallback to default values, e.g. `null` for column\n                        defaultOptions.plotOptions[mergedNavSeriesOptions.type || 'line'].pointRange);\n                        // Merge data separately. Do a slice to avoid mutating the\n                        // navigator options from base series (#4923).\n                        var navigatorSeriesData = baseNavigatorOptions.data || userNavOptions.data;\n                        navigator.hasNavigatorData =\n                            navigator.hasNavigatorData || !!navigatorSeriesData;\n                        mergedNavSeriesOptions.data =\n                            navigatorSeriesData ||\n                                baseOptions.data && baseOptions.data.slice(0);\n                        // Update or add the series\n                        if (linkedNavSeries && linkedNavSeries.options) {\n                            linkedNavSeries.update(mergedNavSeriesOptions, redraw);\n                        }\n                        else {\n                            base.navigatorSeries = chart.initSeries(mergedNavSeriesOptions);\n                            base.navigatorSeries.baseSeries = base; // Store ref\n                            navigatorSeries.push(base.navigatorSeries);\n                        }\n                    });\n                }\n                // If user has defined data (and no base series) or explicitly defined\n                // navigator.series as an array, we create these series on top of any\n                // base series.\n                if (chartNavigatorSeriesOptions.data &&\n                    !(baseSeries && baseSeries.length) ||\n                    isArray(chartNavigatorSeriesOptions)) {\n                    navigator.hasNavigatorData = false;\n                    // Allow navigator.series to be an array\n                    chartNavigatorSeriesOptions =\n                        splat(chartNavigatorSeriesOptions);\n                    chartNavigatorSeriesOptions.forEach(function (userSeriesOptions, i) {\n                        navSeriesMixin.name =\n                            'Navigator ' + (navigatorSeries.length + 1);\n                        mergedNavSeriesOptions = merge(defaultOptions.navigator.series, {\n                            // Since we don't have a base series to pull color from,\n                            // try to fake it by using color from series with same\n                            // index. Otherwise pull from the colors array. We need\n                            // an explicit color as otherwise updates will increment\n                            // color counter and we'll get a new color for each\n                            // update of the nav series.\n                            color: chart.series[i] &&\n                                !chart.series[i].options.isInternal &&\n                                chart.series[i].color ||\n                                chart.options.colors[i] ||\n                                chart.options.colors[0]\n                        }, navSeriesMixin, userSeriesOptions);\n                        mergedNavSeriesOptions.data = userSeriesOptions.data;\n                        if (mergedNavSeriesOptions.data) {\n                            navigator.hasNavigatorData = true;\n                            navigatorSeries.push(chart.initSeries(mergedNavSeriesOptions));\n                        }\n                    });\n                }\n                if (addEvents) {\n                    this.addBaseSeriesEvents();\n                }\n            };\n            /**\n             * Add data events.\n             * For example when main series is updated we need to recalculate extremes\n             *\n             * @private\n             * @function Highcharts.Navigator#addBaseSeriesEvent\n             */\n            Navigator.prototype.addBaseSeriesEvents = function () {\n                var navigator = this,\n                    baseSeries = navigator.baseSeries || [];\n                // Bind modified extremes event to first base's xAxis only.\n                // In event of > 1 base-xAxes, the navigator will ignore those.\n                // Adding this multiple times to the same axis is no problem, as\n                // duplicates should be discarded by the browser.\n                if (baseSeries[0] && baseSeries[0].xAxis) {\n                    baseSeries[0].eventsToUnbind.push(addEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes));\n                }\n                baseSeries.forEach(function (base) {\n                    // Link base series show/hide to navigator series visibility\n                    base.eventsToUnbind.push(addEvent(base, 'show', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(true, false);\n                        }\n                    }));\n                    base.eventsToUnbind.push(addEvent(base, 'hide', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(false, false);\n                        }\n                    }));\n                    // Respond to updated data in the base series, unless explicitily\n                    // not adapting to data changes.\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        if (base.xAxis) {\n                            base.eventsToUnbind.push(addEvent(base, 'updatedData', this.updatedDataHandler));\n                        }\n                    }\n                    // Handle series removal\n                    base.eventsToUnbind.push(addEvent(base, 'remove', function () {\n                        if (this.navigatorSeries) {\n                            erase(navigator.series, this.navigatorSeries);\n                            if (defined(this.navigatorSeries.options)) {\n                                this.navigatorSeries.remove(false);\n                            }\n                            delete this.navigatorSeries;\n                        }\n                    }));\n                }, this);\n            };\n            /**\n             * Get minimum from all base series connected to the navigator\n             * @private\n             * @param  {number} currentSeriesMin\n             *         Minium from the current series\n             * @return {number} Minimum from all series\n             */\n            Navigator.prototype.getBaseSeriesMin = function (currentSeriesMin) {\n                return this.baseSeries.reduce(function (min, series) {\n                    // (#10193)\n                    return Math.min(min, series.xData ? series.xData[0] : min);\n                }, currentSeriesMin);\n            };\n            /**\n             * Set the navigator x axis extremes to reflect the total. The navigator\n             * extremes should always be the extremes of the union of all series in the\n             * chart as well as the navigator series.\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyNavigatorAxisExtremes\n             */\n            Navigator.prototype.modifyNavigatorAxisExtremes = function () {\n                var xAxis = this.xAxis,\n                    unionExtremes;\n                if (typeof xAxis.getExtremes !== 'undefined') {\n                    unionExtremes = this.getUnionExtremes(true);\n                    if (unionExtremes &&\n                        (unionExtremes.dataMin !== xAxis.min ||\n                            unionExtremes.dataMax !== xAxis.max)) {\n                        xAxis.min = unionExtremes.dataMin;\n                        xAxis.max = unionExtremes.dataMax;\n                    }\n                }\n            };\n            /**\n             * Hook to modify the base axis extremes with information from the Navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyBaseAxisExtremes\n             */\n            Navigator.prototype.modifyBaseAxisExtremes = function () {\n                var baseXAxis = this,\n                    navigator = baseXAxis.chart.navigator,\n                    baseExtremes = baseXAxis.getExtremes(),\n                    baseMin = baseExtremes.min,\n                    baseMax = baseExtremes.max,\n                    baseDataMin = baseExtremes.dataMin,\n                    baseDataMax = baseExtremes.dataMax,\n                    range = baseMax - baseMin,\n                    stickToMin = navigator.stickToMin,\n                    stickToMax = navigator.stickToMax,\n                    overscroll = pick(baseXAxis.options.overscroll, 0),\n                    newMax,\n                    newMin,\n                    navigatorSeries = navigator.series && navigator.series[0],\n                    hasSetExtremes = !!baseXAxis.setExtremes, \n                    // When the extremes have been set by range selector button, don't\n                    // stick to min or max. The range selector buttons will handle the\n                    // extremes. (#5489)\n                    unmutable = baseXAxis.eventArgs &&\n                        baseXAxis.eventArgs.trigger === 'rangeSelectorButton';\n                if (!unmutable) {\n                    // If the zoomed range is already at the min, move it to the right\n                    // as new data comes in\n                    if (stickToMin) {\n                        newMin = baseDataMin;\n                        newMax = newMin + range;\n                    }\n                    // If the zoomed range is already at the max, move it to the right\n                    // as new data comes in\n                    if (stickToMax) {\n                        newMax = baseDataMax + overscroll;\n                        // If stickToMin is true, the new min value is set above\n                        if (!stickToMin) {\n                            newMin = Math.max(baseDataMin, // don't go below data extremes (#13184)\n                            newMax - range, navigator.getBaseSeriesMin(navigatorSeries && navigatorSeries.xData ?\n                                navigatorSeries.xData[0] :\n                                -Number.MAX_VALUE));\n                        }\n                    }\n                    // Update the extremes\n                    if (hasSetExtremes && (stickToMin || stickToMax)) {\n                        if (isNumber(newMin)) {\n                            baseXAxis.min = baseXAxis.userMin = newMin;\n                            baseXAxis.max = baseXAxis.userMax = newMax;\n                        }\n                    }\n                }\n                // Reset\n                navigator.stickToMin =\n                    navigator.stickToMax = null;\n            };\n            /**\n             * Handler for updated data on the base series. When data is modified, the\n             * navigator series must reflect it. This is called from the Chart.redraw\n             * function before axis and series extremes are computed.\n             *\n             * @private\n             * @function Highcharts.Navigator#updateDataHandler\n             */\n            Navigator.prototype.updatedDataHandler = function () {\n                var navigator = this.chart.navigator,\n                    baseSeries = this,\n                    navigatorSeries = this.navigatorSeries;\n                // If the scrollbar is scrolled all the way to the right, keep right as\n                // new data  comes in.\n                navigator.stickToMax = navigator.reversedExtremes ?\n                    Math.round(navigator.zoomedMin) === 0 :\n                    Math.round(navigator.zoomedMax) >= Math.round(navigator.size);\n                navigator.stickToMin = navigator.shouldStickToMin(baseSeries, navigator);\n                // Set the navigator series data to the new data of the base series\n                if (navigatorSeries && !navigator.hasNavigatorData) {\n                    navigatorSeries.options.pointStart = baseSeries.xData[0];\n                    navigatorSeries.setData(baseSeries.options.data, false, null, false); // #5414\n                }\n            };\n            /**\n             * Detect if the zoomed area should stick to the minimum, #14742.\n             *\n             * @private\n             * @function Highcharts.Navigator#shouldStickToMin\n             */\n            Navigator.prototype.shouldStickToMin = function (baseSeries, navigator) {\n                var xDataMin = navigator.getBaseSeriesMin(baseSeries.xData[0]),\n                    xAxis = baseSeries.xAxis,\n                    max = xAxis.max,\n                    min = xAxis.min,\n                    range = xAxis.options.range;\n                var stickToMin = true;\n                if (isNumber(max) && isNumber(min)) {\n                    // If range declared, stick to the minimum only if the range\n                    // is smaller than the data set range.\n                    if (range && max - xDataMin > 0) {\n                        stickToMin = max - xDataMin < range;\n                    }\n                    else {\n                        // If the current axis minimum falls outside the new\n                        // updated dataset, we must adjust.\n                        stickToMin = min <= xDataMin;\n                    }\n                }\n                else {\n                    stickToMin = false; // #15864\n                }\n                return stickToMin;\n            };\n            /**\n             * Add chart events, like redrawing navigator, when chart requires that.\n             *\n             * @private\n             * @function Highcharts.Navigator#addChartEvents\n             */\n            Navigator.prototype.addChartEvents = function () {\n                if (!this.eventsToUnbind) {\n                    this.eventsToUnbind = [];\n                }\n                this.eventsToUnbind.push(\n                // Move the scrollbar after redraw, like after data updata even if\n                // axes don't redraw\n                addEvent(this.chart, 'redraw', function () {\n                    var navigator = this.navigator,\n                        xAxis = navigator && (navigator.baseSeries &&\n                            navigator.baseSeries[0] &&\n                            navigator.baseSeries[0].xAxis ||\n                            this.xAxis[0]); // #5709, #13114\n                        if (xAxis) {\n                            navigator.render(xAxis.min,\n                        xAxis.max);\n                    }\n                }), \n                // Make room for the navigator, can be placed around the chart:\n                addEvent(this.chart, 'getMargins', function () {\n                    var chart = this,\n                        navigator = chart.navigator,\n                        marginName = navigator.opposite ?\n                            'plotTop' : 'marginBottom';\n                    if (chart.inverted) {\n                        marginName = navigator.opposite ?\n                            'marginRight' : 'plotLeft';\n                    }\n                    chart[marginName] =\n                        (chart[marginName] || 0) + (navigator.navigatorEnabled || !chart.inverted ?\n                            navigator.outlineHeight :\n                            0) + navigator.navigatorOptions.margin;\n                }));\n            };\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Navigator#destroy\n             */\n            Navigator.prototype.destroy = function () {\n                // Disconnect events added in addEvents\n                this.removeEvents();\n                if (this.xAxis) {\n                    erase(this.chart.xAxis, this.xAxis);\n                    erase(this.chart.axes, this.xAxis);\n                }\n                if (this.yAxis) {\n                    erase(this.chart.yAxis, this.yAxis);\n                    erase(this.chart.axes, this.yAxis);\n                }\n                // Destroy series\n                (this.series || []).forEach(function (s) {\n                    if (s.destroy) {\n                        s.destroy();\n                    }\n                });\n                // Destroy properties\n                [\n                    'series', 'xAxis', 'yAxis', 'shades', 'outline', 'scrollbarTrack',\n                    'scrollbarRifles', 'scrollbarGroup', 'scrollbar', 'navigatorGroup',\n                    'rendered'\n                ].forEach(function (prop) {\n                    if (this[prop] && this[prop].destroy) {\n                        this[prop].destroy();\n                    }\n                    this[prop] = null;\n                }, this);\n                // Destroy elements in collection\n                [this.handles].forEach(function (coll) {\n                    destroyObjectProperties(coll);\n                }, this);\n            };\n            return Navigator;\n        }());\n        // End of prototype\n        if (!H.Navigator) {\n            H.Navigator = Navigator;\n            NavigatorAxis.compose(Axis);\n            // For Stock charts. For x only zooming, do not to create the zoom button\n            // because X axis zooming is already allowed by the Navigator and Range\n            // selector. (#9285)\n            addEvent(Chart, 'beforeShowResetZoom', function () {\n                var chartOptions = this.options,\n                    navigator = chartOptions.navigator,\n                    rangeSelector = chartOptions.rangeSelector;\n                if (((navigator && navigator.enabled) ||\n                    (rangeSelector && rangeSelector.enabled)) &&\n                    ((!isTouchDevice && chartOptions.chart.zoomType === 'x') ||\n                        (isTouchDevice && chartOptions.chart.pinchType === 'x'))) {\n                    return false;\n                }\n            });\n            // Initialize navigator for stock charts\n            addEvent(Chart, 'beforeRender', function () {\n                var options = this.options;\n                if (options.navigator.enabled ||\n                    options.scrollbar.enabled) {\n                    this.scroller = this.navigator = new Navigator(this);\n                }\n            });\n            // For stock charts, extend the Chart.setChartSize method so that we can set\n            // the final top position of the navigator once the height of the chart,\n            // including the legend, is determined. #367. We can't use Chart.getMargins,\n            // because labels offsets are not calculated yet.\n            addEvent(Chart, 'afterSetChartSize', function () {\n                var legend = this.legend,\n                    navigator = this.navigator,\n                    scrollbarHeight,\n                    legendOptions,\n                    xAxis,\n                    yAxis;\n                if (navigator) {\n                    legendOptions = legend && legend.options;\n                    xAxis = navigator.xAxis;\n                    yAxis = navigator.yAxis;\n                    scrollbarHeight = navigator.scrollbarHeight;\n                    // Compute the top position\n                    if (this.inverted) {\n                        navigator.left = navigator.opposite ?\n                            this.chartWidth - scrollbarHeight -\n                                navigator.height :\n                            this.spacing[3] + scrollbarHeight;\n                        navigator.top = this.plotTop + scrollbarHeight;\n                    }\n                    else {\n                        navigator.left = pick(xAxis.left, this.plotLeft + scrollbarHeight);\n                        navigator.top = navigator.navigatorOptions.top ||\n                            this.chartHeight -\n                                navigator.height -\n                                scrollbarHeight -\n                                this.spacing[2] -\n                                (this.rangeSelector && this.extraBottomMargin ?\n                                    this.rangeSelector.getHeight() :\n                                    0) -\n                                ((legendOptions &&\n                                    legendOptions.verticalAlign === 'bottom' &&\n                                    legendOptions.layout !== 'proximate' && // #13392\n                                    legendOptions.enabled &&\n                                    !legendOptions.floating) ?\n                                    legend.legendHeight +\n                                        pick(legendOptions.margin, 10) :\n                                    0) -\n                                (this.titleOffset ? this.titleOffset[2] : 0);\n                    }\n                    if (xAxis && yAxis) { // false if navigator is disabled (#904)\n                        if (this.inverted) {\n                            xAxis.options.left = yAxis.options.left = navigator.left;\n                        }\n                        else {\n                            xAxis.options.top = yAxis.options.top = navigator.top;\n                        }\n                        xAxis.setAxisSize();\n                        yAxis.setAxisSize();\n                    }\n                }\n            });\n            // Merge options, if no scrolling exists yet\n            addEvent(Chart, 'update', function (e) {\n                var navigatorOptions = (e.options.navigator || {}),\n                    scrollbarOptions = (e.options.scrollbar || {});\n                if (!this.navigator && !this.scroller &&\n                    (navigatorOptions.enabled || scrollbarOptions.enabled)) {\n                    merge(true, this.options.navigator, navigatorOptions);\n                    merge(true, this.options.scrollbar, scrollbarOptions);\n                    delete e.options.navigator;\n                    delete e.options.scrollbar;\n                }\n            });\n            // Initialize navigator, if no scrolling exists yet\n            addEvent(Chart, 'afterUpdate', function (event) {\n                if (!this.navigator && !this.scroller &&\n                    (this.options.navigator.enabled ||\n                        this.options.scrollbar.enabled)) {\n                    this.scroller = this.navigator = new Navigator(this);\n                    if (pick(event.redraw, true)) {\n                        this.redraw(event.animation); // #7067\n                    }\n                }\n            });\n            // Handle adding new series\n            addEvent(Chart, 'afterAddSeries', function () {\n                if (this.navigator) {\n                    // Recompute which series should be shown in navigator, and add them\n                    this.navigator.setBaseSeries(null, false);\n                }\n            });\n            // Handle updating series\n            addEvent(Series, 'afterUpdate', function () {\n                if (this.chart.navigator && !this.options.isInternal) {\n                    this.chart.navigator.setBaseSeries(null, false);\n                }\n            });\n            Chart.prototype.callbacks.push(function (chart) {\n                var extremes,\n                    navigator = chart.navigator;\n                // Initialize the navigator\n                if (navigator && chart.xAxis[0]) {\n                    extremes = chart.xAxis[0].getExtremes();\n                    navigator.render(extremes.min, extremes.max);\n                }\n            });\n        }\n        H.Navigator = Navigator;\n\n        return H.Navigator;\n    });\n    _registerModule(_modules, 'Extensions/RangeSelector.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Chart/Chart.js'], _modules['Core/Globals.js'], _modules['Core/DefaultOptions.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Core/Utilities.js']], function (Axis, Chart, H, D, SVGElement, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var defaultOptions = D.defaultOptions;\n        var addEvent = U.addEvent,\n            createElement = U.createElement,\n            css = U.css,\n            defined = U.defined,\n            destroyObjectProperties = U.destroyObjectProperties,\n            discardElement = U.discardElement,\n            extend = U.extend,\n            find = U.find,\n            fireEvent = U.fireEvent,\n            isNumber = U.isNumber,\n            merge = U.merge,\n            objectEach = U.objectEach,\n            pad = U.pad,\n            pick = U.pick,\n            pInt = U.pInt,\n            splat = U.splat;\n        /**\n         * Define the time span for the button\n         *\n         * @typedef {\"all\"|\"day\"|\"hour\"|\"millisecond\"|\"minute\"|\"month\"|\"second\"|\"week\"|\"year\"|\"ytd\"} Highcharts.RangeSelectorButtonTypeValue\n         */\n        /**\n         * Callback function to react on button clicks.\n         *\n         * @callback Highcharts.RangeSelectorClickCallbackFunction\n         *\n         * @param {global.Event} e\n         *        Event arguments.\n         *\n         * @param {boolean|undefined}\n         *        Return false to cancel the default button event.\n         */\n        /**\n         * Callback function to parse values entered in the input boxes and return a\n         * valid JavaScript time as milliseconds since 1970.\n         *\n         * @callback Highcharts.RangeSelectorParseCallbackFunction\n         *\n         * @param {string} value\n         *        Input value to parse.\n         *\n         * @return {number}\n         *         Parsed JavaScript time value.\n         */\n        /* ************************************************************************** *\n         * Start Range Selector code                                                  *\n         * ************************************************************************** */\n        extend(defaultOptions, {\n            /**\n             * The range selector is a tool for selecting ranges to display within\n             * the chart. It provides buttons to select preconfigured ranges in\n             * the chart, like 1 day, 1 week, 1 month etc. It also provides input\n             * boxes where min and max dates can be manually input.\n             *\n             * @product      highstock gantt\n             * @optionparent rangeSelector\n             */\n            rangeSelector: {\n                /**\n                 * Whether to enable all buttons from the start. By default buttons are\n                 * only enabled if the corresponding time range exists on the X axis,\n                 * but enabling all buttons allows for dynamically loading different\n                 * time ranges.\n                 *\n                 * @sample {highstock} stock/rangeselector/allbuttonsenabled-true/\n                 *         All buttons enabled\n                 *\n                 * @since     2.0.3\n                 */\n                allButtonsEnabled: false,\n                /**\n                 * An array of configuration objects for the buttons.\n                 *\n                 * Defaults to:\n                 * ```js\n                 * buttons: [{\n                 *     type: 'month',\n                 *     count: 1,\n                 *     text: '1m',\n                 *     title: 'View 1 month'\n                 * }, {\n                 *     type: 'month',\n                 *     count: 3,\n                 *     text: '3m',\n                 *     title: 'View 3 months'\n                 * }, {\n                 *     type: 'month',\n                 *     count: 6,\n                 *     text: '6m',\n                 *     title: 'View 6 months'\n                 * }, {\n                 *     type: 'ytd',\n                 *     text: 'YTD',\n                 *     title: 'View year to date'\n                 * }, {\n                 *     type: 'year',\n                 *     count: 1,\n                 *     text: '1y',\n                 *     title: 'View 1 year'\n                 * }, {\n                 *     type: 'all',\n                 *     text: 'All',\n                 *     title: 'View all'\n                 * }]\n                 * ```\n                 *\n                 * @sample {highstock} stock/rangeselector/datagrouping/\n                 *         Data grouping by buttons\n                 *\n                 * @type      {Array<*>}\n                 */\n                buttons: void 0,\n                /**\n                 * How many units of the defined type the button should span. If `type`\n                 * is \"month\" and `count` is 3, the button spans three months.\n                 *\n                 * @type      {number}\n                 * @default   1\n                 * @apioption rangeSelector.buttons.count\n                 */\n                /**\n                 * Fires when clicking on the rangeSelector button. One parameter,\n                 * event, is passed to the function, containing common event\n                 * information.\n                 *\n                 * ```js\n                 * click: function(e) {\n                 *   console.log(this);\n                 * }\n                 * ```\n                 *\n                 * Return false to stop default button's click action.\n                 *\n                 * @sample {highstock} stock/rangeselector/button-click/\n                 *         Click event on the button\n                 *\n                 * @type      {Highcharts.RangeSelectorClickCallbackFunction}\n                 * @apioption rangeSelector.buttons.events.click\n                 */\n                /**\n                 * Additional range (in milliseconds) added to the end of the calculated\n                 * time span.\n                 *\n                 * @sample {highstock} stock/rangeselector/min-max-offsets/\n                 *         Button offsets\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     6.0.0\n                 * @apioption rangeSelector.buttons.offsetMax\n                 */\n                /**\n                 * Additional range (in milliseconds) added to the start of the\n                 * calculated time span.\n                 *\n                 * @sample {highstock} stock/rangeselector/min-max-offsets/\n                 *         Button offsets\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     6.0.0\n                 * @apioption rangeSelector.buttons.offsetMin\n                 */\n                /**\n                 * When buttons apply dataGrouping on a series, by default zooming\n                 * in/out will deselect buttons and unset dataGrouping. Enable this\n                 * option to keep buttons selected when extremes change.\n                 *\n                 * @sample {highstock} stock/rangeselector/preserve-datagrouping/\n                 *         Different preserveDataGrouping settings\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     6.1.2\n                 * @apioption rangeSelector.buttons.preserveDataGrouping\n                 */\n                /**\n                 * A custom data grouping object for each button.\n                 *\n                 * @see [series.dataGrouping](#plotOptions.series.dataGrouping)\n                 *\n                 * @sample {highstock} stock/rangeselector/datagrouping/\n                 *         Data grouping by range selector buttons\n                 *\n                 * @type      {*}\n                 * @extends   plotOptions.series.dataGrouping\n                 * @apioption rangeSelector.buttons.dataGrouping\n                 */\n                /**\n                 * The text for the button itself.\n                 *\n                 * @type      {string}\n                 * @apioption rangeSelector.buttons.text\n                 */\n                /**\n                 * Explanation for the button, shown as a tooltip on hover, and used by\n                 * assistive technology.\n                 *\n                 * @type      {string}\n                 * @apioption rangeSelector.buttons.title\n                 */\n                /**\n                 * Defined the time span for the button. Can be one of `millisecond`,\n                 * `second`, `minute`, `hour`, `day`, `week`, `month`, `year`, `ytd`,\n                 * and `all`.\n                 *\n                 * @type       {Highcharts.RangeSelectorButtonTypeValue}\n                 * @apioption  rangeSelector.buttons.type\n                 */\n                /**\n                 * The space in pixels between the buttons in the range selector.\n                 */\n                buttonSpacing: 5,\n                /**\n                 * Whether to collapse the range selector buttons into a dropdown when\n                 * there is not enough room to show everything in a single row, instead\n                 * of dividing the range selector into multiple rows.\n                 * Can be one of the following:\n                 *  - `always`: Always collapse\n                 *  - `responsive`: Only collapse when there is not enough room\n                 *  - `never`: Never collapse\n                 *\n                 * @sample {highstock} stock/rangeselector/dropdown/\n                 *         Dropdown option\n                 *\n                 * @validvalue [\"always\", \"responsive\", \"never\"]\n                 * @since 9.0.0\n                 */\n                dropdown: 'responsive',\n                /**\n                 * Enable or disable the range selector. Default to `true` for stock\n                 * charts, using the `stockChart` factory.\n                 *\n                 * @sample {highstock} stock/rangeselector/enabled/\n                 *         Disable the range selector\n                 *\n                 * @type {boolean|undefined}\n                 * @default {highstock} true\n                 */\n                enabled: void 0,\n                /**\n                 * The vertical alignment of the rangeselector box. Allowed properties\n                 * are `top`, `middle`, `bottom`.\n                 *\n                 * @sample {highstock} stock/rangeselector/vertical-align-middle/\n                 *         Middle\n                 * @sample {highstock} stock/rangeselector/vertical-align-bottom/\n                 *         Bottom\n                 *\n                 * @type  {Highcharts.VerticalAlignValue}\n                 * @since 6.0.0\n                 */\n                verticalAlign: 'top',\n                /**\n                 * A collection of attributes for the buttons. The object takes SVG\n                 * attributes like `fill`, `stroke`, `stroke-width`, as well as `style`,\n                 * a collection of CSS properties for the text.\n                 *\n                 * The object can also be extended with states, so you can set\n                 * presentational options for `hover`, `select` or `disabled` button\n                 * states.\n                 *\n                 * CSS styles for the text label.\n                 *\n                 * In styled mode, the buttons are styled by the\n                 * `.highcharts-range-selector-buttons .highcharts-button` rule with its\n                 * different states.\n                 *\n                 * @sample {highstock} stock/rangeselector/styling/\n                 *         Styling the buttons and inputs\n                 *\n                 * @type {Highcharts.SVGAttributes}\n                 */\n                buttonTheme: {\n                    /** @ignore */\n                    width: 28,\n                    /** @ignore */\n                    height: 18,\n                    /** @ignore */\n                    padding: 2,\n                    /** @ignore */\n                    zIndex: 7 // #484, #852\n                },\n                /**\n                 * When the rangeselector is floating, the plot area does not reserve\n                 * space for it. This opens for positioning anywhere on the chart.\n                 *\n                 * @sample {highstock} stock/rangeselector/floating/\n                 *         Placing the range selector between the plot area and the\n                 *         navigator\n                 *\n                 * @since 6.0.0\n                 */\n                floating: false,\n                /**\n                 * The x offset of the range selector relative to its horizontal\n                 * alignment within `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @since 6.0.0\n                 */\n                x: 0,\n                /**\n                 * The y offset of the range selector relative to its horizontal\n                 * alignment within `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @since 6.0.0\n                 */\n                y: 0,\n                /**\n                 * Deprecated. The height of the range selector. Currently it is\n                 * calculated dynamically.\n                 *\n                 * @deprecated\n                 * @type  {number|undefined}\n                 * @since 2.1.9\n                 */\n                height: void 0,\n                /**\n                 * The border color of the date input boxes.\n                 *\n                 * @sample {highstock} stock/rangeselector/styling/\n                 *         Styling the buttons and inputs\n                 *\n                 * @type      {Highcharts.ColorString}\n                 * @since     1.3.7\n                 */\n                inputBoxBorderColor: 'none',\n                /**\n                 * The pixel height of the date input boxes.\n                 *\n                 * @sample {highstock} stock/rangeselector/styling/\n                 *         Styling the buttons and inputs\n                 *\n                 * @since     1.3.7\n                 */\n                inputBoxHeight: 17,\n                /**\n                 * The pixel width of the date input boxes. When `undefined`, the width\n                 * is fitted to the rendered content.\n                 *\n                 * @sample {highstock} stock/rangeselector/styling/\n                 *         Styling the buttons and inputs\n                 *\n                 * @type   {number|undefined}\n                 * @since  1.3.7\n                 */\n                inputBoxWidth: void 0,\n                /**\n                 * The date format in the input boxes when not selected for editing.\n                 * Defaults to `%b %e, %Y`.\n                 *\n                 * This is used to determine which type of input to show,\n                 * `datetime-local`, `date` or `time` and falling back to `text` when\n                 * the browser does not support the input type or the format contains\n                 * milliseconds.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-type/\n                 *         Input types\n                 * @sample {highstock} stock/rangeselector/input-format/\n                 *         Milliseconds in the range selector\n                 *\n                 */\n                inputDateFormat: '%b %e, %Y',\n                /**\n                 * A custom callback function to parse values entered in the input boxes\n                 * and return a valid JavaScript time as milliseconds since 1970.\n                 * The first argument passed is a value to parse,\n                 * second is a boolean indicating use of the UTC time.\n                 *\n                 * This will only get called for inputs of type `text`. Since v8.2.3,\n                 * the input type is dynamically determined based on the granularity\n                 * of the `inputDateFormat` and the browser support.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-format/\n                 *         Milliseconds in the range selector\n                 *\n                 * @type      {Highcharts.RangeSelectorParseCallbackFunction}\n                 * @since     1.3.3\n                 */\n                inputDateParser: void 0,\n                /**\n                 * The date format in the input boxes when they are selected for\n                 * editing. This must be a format that is recognized by JavaScript\n                 * Date.parse.\n                 *\n                 * This will only be used for inputs of type `text`. Since v8.2.3,\n                 * the input type is dynamically determined based on the granularity\n                 * of the `inputDateFormat` and the browser support.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-format/\n                 *         Milliseconds in the range selector\n                 *\n                 */\n                inputEditDateFormat: '%Y-%m-%d',\n                /**\n                 * Enable or disable the date input boxes.\n                 */\n                inputEnabled: true,\n                /**\n                 * Positioning for the input boxes. Allowed properties are `align`,\n                 *  `x` and `y`.\n                 *\n                 * @since 1.2.4\n                 */\n                inputPosition: {\n                    /**\n                     * The alignment of the input box. Allowed properties are `left`,\n                     * `center`, `right`.\n                     *\n                     * @sample {highstock} stock/rangeselector/input-button-position/\n                     *         Alignment\n                     *\n                     * @type  {Highcharts.AlignValue}\n                     * @since 6.0.0\n                     */\n                    align: 'right',\n                    /**\n                     * X offset of the input row.\n                     */\n                    x: 0,\n                    /**\n                     * Y offset of the input row.\n                     */\n                    y: 0\n                },\n                /**\n                 * The space in pixels between the labels and the date input boxes in\n                 * the range selector.\n                 *\n                 * @since 9.0.0\n                 */\n                inputSpacing: 5,\n                /**\n                 * The index of the button to appear pre-selected.\n                 *\n                 * @type      {number}\n                 */\n                selected: void 0,\n                /**\n                 * Positioning for the button row.\n                 *\n                 * @since 1.2.4\n                 */\n                buttonPosition: {\n                    /**\n                     * The alignment of the input box. Allowed properties are `left`,\n                     * `center`, `right`.\n                     *\n                     * @sample {highstock} stock/rangeselector/input-button-position/\n                     *         Alignment\n                     *\n                     * @type  {Highcharts.AlignValue}\n                     * @since 6.0.0\n                     */\n                    align: 'left',\n                    /**\n                     * X offset of the button row.\n                     */\n                    x: 0,\n                    /**\n                     * Y offset of the button row.\n                     */\n                    y: 0\n                },\n                /**\n                 * CSS for the HTML inputs in the range selector.\n                 *\n                 * In styled mode, the inputs are styled by the\n                 * `.highcharts-range-input text` rule in SVG mode, and\n                 * `input.highcharts-range-selector` when active.\n                 *\n                 * @sample {highstock} stock/rangeselector/styling/\n                 *         Styling the buttons and inputs\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @apioption rangeSelector.inputStyle\n                 */\n                inputStyle: {\n                    /** @ignore */\n                    color: \"#335cad\" /* highlightColor80 */,\n                    /** @ignore */\n                    cursor: 'pointer'\n                },\n                /**\n                 * CSS styles for the labels - the Zoom, From and To texts.\n                 *\n                 * In styled mode, the labels are styled by the\n                 * `.highcharts-range-label` class.\n                 *\n                 * @sample {highstock} stock/rangeselector/styling/\n                 *         Styling the buttons and inputs\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                labelStyle: {\n                    /** @ignore */\n                    color: \"#666666\" /* neutralColor60 */\n                }\n            }\n        });\n        extend(defaultOptions.lang, \n        /**\n         * Language object. The language object is global and it can't be set\n         * on each chart initialization. Instead, use `Highcharts.setOptions` to\n         * set it before any chart is initialized.\n         *\n         * ```js\n         * Highcharts.setOptions({\n         *     lang: {\n         *         months: [\n         *             'Janvier', 'Février', 'Mars', 'Avril',\n         *             'Mai', 'Juin', 'Juillet', 'Août',\n         *             'Septembre', 'Octobre', 'Novembre', 'Décembre'\n         *         ],\n         *         weekdays: [\n         *             'Dimanche', 'Lundi', 'Mardi', 'Mercredi',\n         *             'Jeudi', 'Vendredi', 'Samedi'\n         *         ]\n         *     }\n         * });\n         * ```\n         *\n         * @optionparent lang\n         */\n        {\n            /**\n             * The text for the label for the range selector buttons.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorZoom: 'Zoom',\n            /**\n             * The text for the label for the \"from\" input box in the range\n             * selector. Since v9.0, this string is empty as the label is not\n             * rendered by default.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorFrom: '',\n            /**\n             * The text for the label for the \"to\" input box in the range selector.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorTo: '→'\n        });\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * The range selector.\n         *\n         * @private\n         * @class\n         * @name Highcharts.RangeSelector\n         * @param {Highcharts.Chart} chart\n         */\n        var RangeSelector = /** @class */ (function () {\n                function RangeSelector(chart) {\n                    /* *\n                     *\n                     * Properties\n                     *\n                     * */\n                    this.buttons = void 0;\n                this.buttonOptions = RangeSelector.prototype.defaultButtons;\n                this.initialButtonGroupWidth = 0;\n                this.options = void 0;\n                this.chart = chart;\n                // Run RangeSelector\n                this.init(chart);\n            }\n            /**\n             * The method to run when one of the buttons in the range selectors is\n             * clicked\n             *\n             * @private\n             * @function Highcharts.RangeSelector#clickButton\n             * @param {number} i\n             *        The index of the button\n             * @param {boolean} [redraw]\n             */\n            RangeSelector.prototype.clickButton = function (i, redraw) {\n                var rangeSelector = this,\n                    chart = rangeSelector.chart,\n                    rangeOptions = rangeSelector.buttonOptions[i],\n                    baseAxis = chart.xAxis[0],\n                    unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || baseAxis || {},\n                    dataMin = unionExtremes.dataMin,\n                    dataMax = unionExtremes.dataMax,\n                    newMin,\n                    newMax = baseAxis && Math.round(Math.min(baseAxis.max,\n                    pick(dataMax,\n                    baseAxis.max))), // #1568\n                    type = rangeOptions.type,\n                    baseXAxisOptions,\n                    range = rangeOptions._range,\n                    rangeMin,\n                    minSetting,\n                    rangeSetting,\n                    ctx,\n                    ytdExtremes,\n                    dataGrouping = rangeOptions.dataGrouping;\n                // chart has no data, base series is removed\n                if (dataMin === null || dataMax === null) {\n                    return;\n                }\n                // Set the fixed range before range is altered\n                chart.fixedRange = range;\n                rangeSelector.setSelected(i);\n                // Apply dataGrouping associated to button\n                if (dataGrouping) {\n                    this.forcedDataGrouping = true;\n                    Axis.prototype.setDataGrouping.call(baseAxis || { chart: this.chart }, dataGrouping, false);\n                    this.frozenStates = rangeOptions.preserveDataGrouping;\n                }\n                // Apply range\n                if (type === 'month' || type === 'year') {\n                    if (!baseAxis) {\n                        // This is set to the user options and picked up later when the\n                        // axis is instantiated so that we know the min and max.\n                        range = rangeOptions;\n                    }\n                    else {\n                        ctx = {\n                            range: rangeOptions,\n                            max: newMax,\n                            chart: chart,\n                            dataMin: dataMin,\n                            dataMax: dataMax\n                        };\n                        newMin = baseAxis.minFromRange.call(ctx);\n                        if (isNumber(ctx.newMax)) {\n                            newMax = ctx.newMax;\n                        }\n                    }\n                    // Fixed times like minutes, hours, days\n                }\n                else if (range) {\n                    newMin = Math.max(newMax - range, dataMin);\n                    newMax = Math.min(newMin + range, dataMax);\n                }\n                else if (type === 'ytd') {\n                    // On user clicks on the buttons, or a delayed action running from\n                    // the beforeRender event (below), the baseAxis is defined.\n                    if (baseAxis) {\n                        // When \"ytd\" is the pre-selected button for the initial view,\n                        // its calculation is delayed and rerun in the beforeRender\n                        // event (below). When the series are initialized, but before\n                        // the chart is rendered, we have access to the xData array\n                        // (#942).\n                        if (typeof dataMax === 'undefined') {\n                            dataMin = Number.MAX_VALUE;\n                            dataMax = Number.MIN_VALUE;\n                            chart.series.forEach(function (series) {\n                                // reassign it to the last item\n                                var xData = series.xData;\n                                dataMin = Math.min(xData[0], dataMin);\n                                dataMax = Math.max(xData[xData.length - 1], dataMax);\n                            });\n                            redraw = false;\n                        }\n                        ytdExtremes = rangeSelector.getYTDExtremes(dataMax, dataMin, chart.time.useUTC);\n                        newMin = rangeMin = ytdExtremes.min;\n                        newMax = ytdExtremes.max;\n                        // \"ytd\" is pre-selected. We don't yet have access to processed\n                        // point and extremes data (things like pointStart and pointInterval\n                        // are missing), so we delay the process (#942)\n                    }\n                    else {\n                        rangeSelector.deferredYTDClick = i;\n                        return;\n                    }\n                }\n                else if (type === 'all' && baseAxis) {\n                    // If the navigator exist and the axis range is declared reset that\n                    // range and from now on only use the range set by a user, #14742.\n                    if (chart.navigator && chart.navigator.baseSeries[0]) {\n                        chart.navigator.baseSeries[0].xAxis.options\n                            .range = void 0;\n                    }\n                    newMin = dataMin;\n                    newMax = dataMax;\n                }\n                if (defined(newMin)) {\n                    newMin += rangeOptions._offsetMin;\n                }\n                if (defined(newMax)) {\n                    newMax += rangeOptions._offsetMax;\n                }\n                if (this.dropdown) {\n                    this.dropdown.selectedIndex = i + 1;\n                }\n                // Update the chart\n                if (!baseAxis) {\n                    // Axis not yet instanciated. Temporarily set min and range\n                    // options and remove them on chart load (#4317).\n                    baseXAxisOptions = splat(chart.options.xAxis)[0];\n                    rangeSetting = baseXAxisOptions.range;\n                    baseXAxisOptions.range = range;\n                    minSetting = baseXAxisOptions.min;\n                    baseXAxisOptions.min = rangeMin;\n                    addEvent(chart, 'load', function resetMinAndRange() {\n                        baseXAxisOptions.range = rangeSetting;\n                        baseXAxisOptions.min = minSetting;\n                    });\n                }\n                else {\n                    // Existing axis object. Set extremes after render time.\n                    baseAxis.setExtremes(newMin, newMax, pick(redraw, true), void 0, // auto animation\n                    {\n                        trigger: 'rangeSelectorButton',\n                        rangeSelectorButton: rangeOptions\n                    });\n                }\n                fireEvent(this, 'afterBtnClick');\n            };\n            /**\n             * Set the selected option. This method only sets the internal flag, it\n             * doesn't update the buttons or the actual zoomed range.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setSelected\n             * @param {number} [selected]\n             */\n            RangeSelector.prototype.setSelected = function (selected) {\n                this.selected = this.options.selected = selected;\n            };\n            /**\n             * Initialize the range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#init\n             * @param {Highcharts.Chart} chart\n             */\n            RangeSelector.prototype.init = function (chart) {\n                var rangeSelector = this,\n                    options = chart.options.rangeSelector,\n                    buttonOptions = (options.buttons || rangeSelector.defaultButtons.slice()),\n                    selectedOption = options.selected,\n                    blurInputs = function () {\n                        var minInput = rangeSelector.minInput,\n                    maxInput = rangeSelector.maxInput;\n                    // #3274 in some case blur is not defined\n                    if (minInput && minInput.blur) {\n                        fireEvent(minInput, 'blur');\n                    }\n                    if (maxInput && maxInput.blur) {\n                        fireEvent(maxInput, 'blur');\n                    }\n                };\n                rangeSelector.chart = chart;\n                rangeSelector.options = options;\n                rangeSelector.buttons = [];\n                rangeSelector.buttonOptions = buttonOptions;\n                this.eventsToUnbind = [];\n                this.eventsToUnbind.push(addEvent(chart.container, 'mousedown', blurInputs));\n                this.eventsToUnbind.push(addEvent(chart, 'resize', blurInputs));\n                // Extend the buttonOptions with actual range\n                buttonOptions.forEach(rangeSelector.computeButtonRange);\n                // zoomed range based on a pre-selected button index\n                if (typeof selectedOption !== 'undefined' &&\n                    buttonOptions[selectedOption]) {\n                    this.clickButton(selectedOption, false);\n                }\n                this.eventsToUnbind.push(addEvent(chart, 'load', function () {\n                    // If a data grouping is applied to the current button, release it\n                    // when extremes change\n                    if (chart.xAxis && chart.xAxis[0]) {\n                        addEvent(chart.xAxis[0], 'setExtremes', function (e) {\n                            if (this.max - this.min !==\n                                chart.fixedRange &&\n                                e.trigger !== 'rangeSelectorButton' &&\n                                e.trigger !== 'updatedData' &&\n                                rangeSelector.forcedDataGrouping &&\n                                !rangeSelector.frozenStates) {\n                                this.setDataGrouping(false, false);\n                            }\n                        });\n                    }\n                }));\n            };\n            /**\n             * Dynamically update the range selector buttons after a new range has been\n             * set\n             *\n             * @private\n             * @function Highcharts.RangeSelector#updateButtonStates\n             */\n            RangeSelector.prototype.updateButtonStates = function () {\n                var rangeSelector = this,\n                    chart = this.chart,\n                    dropdown = this.dropdown,\n                    baseAxis = chart.xAxis[0],\n                    actualRange = Math.round(baseAxis.max - baseAxis.min),\n                    hasNoData = !baseAxis.hasVisibleSeries,\n                    day = 24 * 36e5, // A single day in milliseconds\n                    unionExtremes = (chart.scroller &&\n                        chart.scroller.getUnionExtremes()) || baseAxis,\n                    dataMin = unionExtremes.dataMin,\n                    dataMax = unionExtremes.dataMax,\n                    ytdExtremes = rangeSelector.getYTDExtremes(dataMax,\n                    dataMin,\n                    chart.time.useUTC),\n                    ytdMin = ytdExtremes.min,\n                    ytdMax = ytdExtremes.max,\n                    selected = rangeSelector.selected,\n                    selectedExists = isNumber(selected),\n                    allButtonsEnabled = rangeSelector.options.allButtonsEnabled,\n                    buttons = rangeSelector.buttons;\n                rangeSelector.buttonOptions.forEach(function (rangeOptions, i) {\n                    var range = rangeOptions._range,\n                        type = rangeOptions.type,\n                        count = rangeOptions.count || 1,\n                        button = buttons[i],\n                        state = 0,\n                        disable,\n                        select,\n                        offsetRange = rangeOptions._offsetMax -\n                            rangeOptions._offsetMin,\n                        isSelected = i === selected, \n                        // Disable buttons where the range exceeds what is allowed in\n                        // the current view\n                        isTooGreatRange = range >\n                            dataMax - dataMin, \n                        // Disable buttons where the range is smaller than the minimum\n                        // range\n                        isTooSmallRange = range < baseAxis.minRange, \n                        // Do not select the YTD button if not explicitly told so\n                        isYTDButNotSelected = false, \n                        // Disable the All button if we're already showing all\n                        isAllButAlreadyShowingAll = false,\n                        isSameRange = range === actualRange;\n                    // Months and years have a variable range so we check the extremes\n                    if ((type === 'month' || type === 'year') &&\n                        (actualRange + 36e5 >=\n                            { month: 28, year: 365 }[type] * day * count - offsetRange) &&\n                        (actualRange - 36e5 <=\n                            { month: 31, year: 366 }[type] * day * count + offsetRange)) {\n                        isSameRange = true;\n                    }\n                    else if (type === 'ytd') {\n                        isSameRange = (ytdMax - ytdMin + offsetRange) === actualRange;\n                        isYTDButNotSelected = !isSelected;\n                    }\n                    else if (type === 'all') {\n                        isSameRange = (baseAxis.max - baseAxis.min >=\n                            dataMax - dataMin);\n                        isAllButAlreadyShowingAll = (!isSelected &&\n                            selectedExists &&\n                            isSameRange);\n                    }\n                    // The new zoom area happens to match the range for a button - mark\n                    // it selected. This happens when scrolling across an ordinal gap.\n                    // It can be seen in the intraday demos when selecting 1h and scroll\n                    // across the night gap.\n                    disable = (!allButtonsEnabled &&\n                        (isTooGreatRange ||\n                            isTooSmallRange ||\n                            isAllButAlreadyShowingAll ||\n                            hasNoData));\n                    select = ((isSelected && isSameRange) ||\n                        (isSameRange && !selectedExists && !isYTDButNotSelected) ||\n                        (isSelected && rangeSelector.frozenStates));\n                    if (disable) {\n                        state = 3;\n                    }\n                    else if (select) {\n                        selectedExists = true; // Only one button can be selected\n                        state = 2;\n                    }\n                    // If state has changed, update the button\n                    if (button.state !== state) {\n                        button.setState(state);\n                        if (dropdown) {\n                            dropdown.options[i + 1].disabled = disable;\n                            if (state === 2) {\n                                dropdown.selectedIndex = i + 1;\n                            }\n                        }\n                        // Reset (#9209)\n                        if (state === 0 && selected === i) {\n                            rangeSelector.setSelected();\n                        }\n                    }\n                });\n            };\n            /**\n             * Compute and cache the range for an individual button\n             *\n             * @private\n             * @function Highcharts.RangeSelector#computeButtonRange\n             * @param {Highcharts.RangeSelectorButtonsOptions} rangeOptions\n             */\n            RangeSelector.prototype.computeButtonRange = function (rangeOptions) {\n                var type = rangeOptions.type,\n                    count = rangeOptions.count || 1, \n                    // these time intervals have a fixed number of milliseconds, as\n                    // opposed to month, ytd and year\n                    fixedTimes = {\n                        millisecond: 1,\n                        second: 1000,\n                        minute: 60 * 1000,\n                        hour: 3600 * 1000,\n                        day: 24 * 3600 * 1000,\n                        week: 7 * 24 * 3600 * 1000\n                    };\n                // Store the range on the button object\n                if (fixedTimes[type]) {\n                    rangeOptions._range = fixedTimes[type] * count;\n                }\n                else if (type === 'month' || type === 'year') {\n                    rangeOptions._range = {\n                        month: 30,\n                        year: 365\n                    }[type] * 24 * 36e5 * count;\n                }\n                rangeOptions._offsetMin = pick(rangeOptions.offsetMin, 0);\n                rangeOptions._offsetMax = pick(rangeOptions.offsetMax, 0);\n                rangeOptions._range +=\n                    rangeOptions._offsetMax - rangeOptions._offsetMin;\n            };\n            /**\n             * Get the unix timestamp of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getInputValue\n             */\n            RangeSelector.prototype.getInputValue = function (name) {\n                var input = name === 'min' ? this.minInput : this.maxInput;\n                var options = this.chart.options\n                        .rangeSelector;\n                var time = this.chart.time;\n                if (input) {\n                    return ((input.type === 'text' && options.inputDateParser) ||\n                        this.defaultInputDateParser)(input.value, time.useUTC, time);\n                }\n                return 0;\n            };\n            /**\n             * Set the internal and displayed value of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setInputValue\n             */\n            RangeSelector.prototype.setInputValue = function (name, inputTime) {\n                var options = this.options, time = this.chart.time, input = name === 'min' ? this.minInput : this.maxInput, dateBox = name === 'min' ? this.minDateBox : this.maxDateBox;\n                if (input) {\n                    var hcTimeAttr = input.getAttribute('data-hc-time');\n                    var updatedTime = defined(hcTimeAttr) ? Number(hcTimeAttr) : void 0;\n                    if (defined(inputTime)) {\n                        var previousTime = updatedTime;\n                        if (defined(previousTime)) {\n                            input.setAttribute('data-hc-time-previous', previousTime);\n                        }\n                        input.setAttribute('data-hc-time', inputTime);\n                        updatedTime = inputTime;\n                    }\n                    input.value = time.dateFormat((this.inputTypeFormats[input.type] ||\n                        options.inputEditDateFormat), updatedTime);\n                    if (dateBox) {\n                        dateBox.attr({\n                            text: time.dateFormat(options.inputDateFormat, updatedTime)\n                        });\n                    }\n                }\n            };\n            /**\n             * Set the min and max value of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setInputExtremes\n             */\n            RangeSelector.prototype.setInputExtremes = function (name, min, max) {\n                var input = name === 'min' ? this.minInput : this.maxInput;\n                if (input) {\n                    var format = this.inputTypeFormats[input.type];\n                    var time = this.chart.time;\n                    if (format) {\n                        var newMin = time.dateFormat(format,\n                            min);\n                        if (input.min !== newMin) {\n                            input.min = newMin;\n                        }\n                        var newMax = time.dateFormat(format,\n                            max);\n                        if (input.max !== newMax) {\n                            input.max = newMax;\n                        }\n                    }\n                }\n            };\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#showInput\n             * @param {string} name\n             */\n            RangeSelector.prototype.showInput = function (name) {\n                var dateBox = name === 'min' ? this.minDateBox : this.maxDateBox;\n                var input = name === 'min' ? this.minInput : this.maxInput;\n                if (input && dateBox && this.inputGroup) {\n                    var isTextInput = input.type === 'text';\n                    var _a = this.inputGroup,\n                        translateX = _a.translateX,\n                        translateY = _a.translateY;\n                    var inputBoxWidth = this.options.inputBoxWidth;\n                    css(input, {\n                        width: isTextInput ?\n                            ((dateBox.width + (inputBoxWidth ? -2 : 20)) + 'px') :\n                            'auto',\n                        height: isTextInput ? ((dateBox.height - 2) + 'px') : 'auto',\n                        border: '2px solid silver'\n                    });\n                    if (isTextInput && inputBoxWidth) {\n                        css(input, {\n                            left: (translateX + dateBox.x) + 'px',\n                            top: translateY + 'px'\n                        });\n                        // Inputs of types date, time or datetime-local should be centered\n                        // on top of the dateBox\n                    }\n                    else {\n                        css(input, {\n                            left: Math.min(Math.round(dateBox.x +\n                                translateX -\n                                (input.offsetWidth - dateBox.width) / 2), this.chart.chartWidth - input.offsetWidth) + 'px',\n                            top: (translateY - (input.offsetHeight - dateBox.height) / 2) + 'px'\n                        });\n                    }\n                }\n            };\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#hideInput\n             * @param {string} name\n             */\n            RangeSelector.prototype.hideInput = function (name) {\n                var input = name === 'min' ? this.minInput : this.maxInput;\n                if (input) {\n                    css(input, {\n                        top: '-9999em',\n                        border: 0,\n                        width: '1px',\n                        height: '1px'\n                    });\n                }\n            };\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#defaultInputDateParser\n             */\n            RangeSelector.prototype.defaultInputDateParser = function (inputDate, useUTC, time) {\n                var hasTimezone = function (str) {\n                        return str.length > 6 &&\n                            (str.lastIndexOf('-') === str.length - 6 ||\n                                str.lastIndexOf('+') === str.length - 6);\n                };\n                var input = inputDate.split('/').join('-').split(' ').join('T');\n                if (input.indexOf('T') === -1) {\n                    input += 'T00:00';\n                }\n                if (useUTC) {\n                    input += 'Z';\n                }\n                else if (H.isSafari && !hasTimezone(input)) {\n                    var offset = new Date(input).getTimezoneOffset() / 60;\n                    input += offset <= 0 ? \"+\" + pad(-offset) + \":00\" : \"-\" + pad(offset) + \":00\";\n                }\n                var date = Date.parse(input);\n                // If the value isn't parsed directly to a value by the\n                // browser's Date.parse method, like YYYY-MM-DD in IE8, try\n                // parsing it a different way\n                if (!isNumber(date)) {\n                    var parts = inputDate.split('-');\n                    date = Date.UTC(pInt(parts[0]), pInt(parts[1]) - 1, pInt(parts[2]));\n                }\n                if (time && useUTC && isNumber(date)) {\n                    date += time.getTimezoneOffset(date);\n                }\n                return date;\n            };\n            /**\n             * Draw either the 'from' or the 'to' HTML input box of the range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#drawInput\n             */\n            RangeSelector.prototype.drawInput = function (name) {\n                var _a = this,\n                    chart = _a.chart,\n                    div = _a.div,\n                    inputGroup = _a.inputGroup;\n                var rangeSelector = this,\n                    chartStyle = chart.renderer.style || {},\n                    renderer = chart.renderer,\n                    options = chart.options.rangeSelector,\n                    lang = defaultOptions.lang,\n                    isMin = name === 'min';\n                /**\n                 * @private\n                 */\n                function updateExtremes() {\n                    var value = rangeSelector.getInputValue(name),\n                        chartAxis = chart.xAxis[0],\n                        dataAxis = chart.scroller && chart.scroller.xAxis ?\n                            chart.scroller.xAxis :\n                            chartAxis,\n                        dataMin = dataAxis.dataMin,\n                        dataMax = dataAxis.dataMax;\n                    var maxInput = rangeSelector.maxInput,\n                        minInput = rangeSelector.minInput;\n                    if (value !== Number(input.getAttribute('data-hc-time-previous')) &&\n                        isNumber(value)) {\n                        input.setAttribute('data-hc-time-previous', value);\n                        // Validate the extremes. If it goes beyound the data min or\n                        // max, use the actual data extreme (#2438).\n                        if (isMin && maxInput && isNumber(dataMin)) {\n                            if (value > Number(maxInput.getAttribute('data-hc-time'))) {\n                                value = void 0;\n                            }\n                            else if (value < dataMin) {\n                                value = dataMin;\n                            }\n                        }\n                        else if (minInput && isNumber(dataMax)) {\n                            if (value < Number(minInput.getAttribute('data-hc-time'))) {\n                                value = void 0;\n                            }\n                            else if (value > dataMax) {\n                                value = dataMax;\n                            }\n                        }\n                        // Set the extremes\n                        if (typeof value !== 'undefined') { // @todo typof undefined\n                            chartAxis.setExtremes(isMin ? value : chartAxis.min, isMin ? chartAxis.max : value, void 0, void 0, { trigger: 'rangeSelectorInput' });\n                        }\n                    }\n                }\n                // Create the text label\n                var text = lang[isMin ? 'rangeSelectorFrom' : 'rangeSelectorTo'] || '';\n                var label = renderer\n                        .label(text, 0)\n                        .addClass('highcharts-range-label')\n                        .attr({\n                        padding: text ? 2 : 0,\n                        height: text ? options.inputBoxHeight : 0\n                    })\n                        .add(inputGroup);\n                // Create an SVG label that shows updated date ranges and and records\n                // click events that bring in the HTML input.\n                var dateBox = renderer\n                        .label('', 0)\n                        .addClass('highcharts-range-input')\n                        .attr({\n                        padding: 2,\n                        width: options.inputBoxWidth,\n                        height: options.inputBoxHeight,\n                        'text-align': 'center'\n                    })\n                        .on('click',\n                    function () {\n                        // If it is already focused, the onfocus event doesn't fire\n                        // (#3713)\n                        rangeSelector.showInput(name);\n                    rangeSelector[name + 'Input'].focus();\n                });\n                if (!chart.styledMode) {\n                    dateBox.attr({\n                        stroke: options.inputBoxBorderColor,\n                        'stroke-width': 1\n                    });\n                }\n                dateBox.add(inputGroup);\n                // Create the HTML input element. This is rendered as 1x1 pixel then set\n                // to the right size when focused.\n                var input = createElement('input', {\n                        name: name,\n                        className: 'highcharts-range-selector'\n                    },\n                    void 0,\n                    div);\n                // #14788: Setting input.type to an unsupported type throws in IE, so\n                // we need to use setAttribute instead\n                input.setAttribute('type', preferredInputType(options.inputDateFormat || '%b %e, %Y'));\n                if (!chart.styledMode) {\n                    // Styles\n                    label.css(merge(chartStyle, options.labelStyle));\n                    dateBox.css(merge({\n                        color: \"#333333\" /* neutralColor80 */\n                    }, chartStyle, options.inputStyle));\n                    css(input, extend({\n                        position: 'absolute',\n                        border: 0,\n                        boxShadow: '0 0 15px rgba(0,0,0,0.3)',\n                        width: '1px',\n                        height: '1px',\n                        padding: 0,\n                        textAlign: 'center',\n                        fontSize: chartStyle.fontSize,\n                        fontFamily: chartStyle.fontFamily,\n                        top: '-9999em' // #4798\n                    }, options.inputStyle));\n                }\n                // Blow up the input box\n                input.onfocus = function () {\n                    rangeSelector.showInput(name);\n                };\n                // Hide away the input box\n                input.onblur = function () {\n                    // update extermes only when inputs are active\n                    if (input === H.doc.activeElement) { // Only when focused\n                        // Update also when no `change` event is triggered, like when\n                        // clicking inside the SVG (#4710)\n                        updateExtremes();\n                    }\n                    // #10404 - move hide and blur outside focus\n                    rangeSelector.hideInput(name);\n                    rangeSelector.setInputValue(name);\n                    input.blur(); // #4606\n                };\n                var keyDown = false;\n                // handle changes in the input boxes\n                input.onchange = function () {\n                    // Update extremes and blur input when clicking date input calendar\n                    if (!keyDown) {\n                        updateExtremes();\n                        rangeSelector.hideInput(name);\n                        input.blur();\n                    }\n                };\n                input.onkeypress = function (event) {\n                    // IE does not fire onchange on enter\n                    if (event.keyCode === 13) {\n                        updateExtremes();\n                    }\n                };\n                input.onkeydown = function (event) {\n                    keyDown = true;\n                    // Arrow keys\n                    if (event.keyCode === 38 || event.keyCode === 40) {\n                        updateExtremes();\n                    }\n                };\n                input.onkeyup = function () {\n                    keyDown = false;\n                };\n                return { dateBox: dateBox, input: input, label: label };\n            };\n            /**\n             * Get the position of the range selector buttons and inputs. This can be\n             * overridden from outside for custom positioning.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getPosition\n             */\n            RangeSelector.prototype.getPosition = function () {\n                var chart = this.chart,\n                    options = chart.options.rangeSelector,\n                    top = options.verticalAlign === 'top' ?\n                        chart.plotTop - chart.axisOffset[0] :\n                        0; // set offset only for varticalAlign top\n                    return {\n                        buttonTop: top + options.buttonPosition.y,\n                        inputTop: top + options.inputPosition.y - 10\n                    };\n            };\n            /**\n             * Get the extremes of YTD. Will choose dataMax if its value is lower than\n             * the current timestamp. Will choose dataMin if its value is higher than\n             * the timestamp for the start of current year.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getYTDExtremes\n             * @return {*}\n             * Returns min and max for the YTD\n             */\n            RangeSelector.prototype.getYTDExtremes = function (dataMax, dataMin, useUTC) {\n                var time = this.chart.time,\n                    min,\n                    now = new time.Date(dataMax),\n                    year = time.get('FullYear',\n                    now),\n                    startOfYear = useUTC ?\n                        time.Date.UTC(year, 0, 1) : // eslint-disable-line new-cap\n                        +new time.Date(year, 0, 1);\n                min = Math.max(dataMin, startOfYear);\n                var ts = now.getTime();\n                return {\n                    max: Math.min(dataMax || ts, ts),\n                    min: min\n                };\n            };\n            /**\n             * Render the range selector including the buttons and the inputs. The first\n             * time render is called, the elements are created and positioned. On\n             * subsequent calls, they are moved and updated.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#render\n             * @param {number} [min]\n             *        X axis minimum\n             * @param {number} [max]\n             *        X axis maximum\n             */\n            RangeSelector.prototype.render = function (min, max) {\n                var chart = this.chart,\n                    renderer = chart.renderer,\n                    container = chart.container,\n                    chartOptions = chart.options,\n                    options = chartOptions.rangeSelector, \n                    // Place inputs above the container\n                    inputsZIndex = pick(chartOptions.chart.style &&\n                        chartOptions.chart.style.zIndex, 0) + 1,\n                    inputEnabled = options.inputEnabled,\n                    rendered = this.rendered;\n                if (options.enabled === false) {\n                    return;\n                }\n                // create the elements\n                if (!rendered) {\n                    this.group = renderer.g('range-selector-group')\n                        .attr({\n                        zIndex: 7\n                    })\n                        .add();\n                    this.div = createElement('div', void 0, {\n                        position: 'relative',\n                        height: 0,\n                        zIndex: inputsZIndex\n                    });\n                    if (this.buttonOptions.length) {\n                        this.renderButtons();\n                    }\n                    // First create a wrapper outside the container in order to make\n                    // the inputs work and make export correct\n                    if (container.parentNode) {\n                        container.parentNode.insertBefore(this.div, container);\n                    }\n                    if (inputEnabled) {\n                        // Create the group to keep the inputs\n                        this.inputGroup = renderer.g('input-group').add(this.group);\n                        var minElems = this.drawInput('min');\n                        this.minDateBox = minElems.dateBox;\n                        this.minLabel = minElems.label;\n                        this.minInput = minElems.input;\n                        var maxElems = this.drawInput('max');\n                        this.maxDateBox = maxElems.dateBox;\n                        this.maxLabel = maxElems.label;\n                        this.maxInput = maxElems.input;\n                    }\n                }\n                if (inputEnabled) {\n                    // Set or reset the input values\n                    this.setInputValue('min', min);\n                    this.setInputValue('max', max);\n                    var unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || chart.xAxis[0] || {};\n                    if (defined(unionExtremes.dataMin) &&\n                        defined(unionExtremes.dataMax)) {\n                        var minRange = chart.xAxis[0].minRange || 0;\n                        this.setInputExtremes('min', unionExtremes.dataMin, Math.min(unionExtremes.dataMax, this.getInputValue('max')) - minRange);\n                        this.setInputExtremes('max', Math.max(unionExtremes.dataMin, this.getInputValue('min')) + minRange, unionExtremes.dataMax);\n                    }\n                    // Reflow\n                    if (this.inputGroup) {\n                        var x_1 = 0;\n                        [\n                            this.minLabel,\n                            this.minDateBox,\n                            this.maxLabel,\n                            this.maxDateBox\n                        ].forEach(function (label) {\n                            if (label) {\n                                var width = label.getBBox().width;\n                                if (width) {\n                                    label.attr({ x: x_1 });\n                                    x_1 += width + options.inputSpacing;\n                                }\n                            }\n                        });\n                    }\n                }\n                this.alignElements();\n                this.rendered = true;\n            };\n            /**\n             * Render the range buttons. This only runs the first time, later the\n             * positioning is laid out in alignElements.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#renderButtons\n             */\n            RangeSelector.prototype.renderButtons = function () {\n                var _this = this;\n                var _a = this,\n                    buttons = _a.buttons,\n                    chart = _a.chart,\n                    options = _a.options;\n                var lang = defaultOptions.lang;\n                var renderer = chart.renderer;\n                var buttonTheme = merge(options.buttonTheme);\n                var states = buttonTheme && buttonTheme.states;\n                // Prevent the button from resetting the width when the button state\n                // changes since we need more control over the width when collapsing\n                // the buttons\n                var width = buttonTheme.width || 28;\n                delete buttonTheme.width;\n                delete buttonTheme.states;\n                this.buttonGroup = renderer.g('range-selector-buttons').add(this.group);\n                var dropdown = this.dropdown = createElement('select',\n                    void 0, {\n                        position: 'absolute',\n                        width: '1px',\n                        height: '1px',\n                        padding: 0,\n                        border: 0,\n                        top: '-9999em',\n                        cursor: 'pointer',\n                        opacity: 0.0001\n                    },\n                    this.div);\n                // Prevent page zoom on iPhone\n                addEvent(dropdown, 'touchstart', function () {\n                    dropdown.style.fontSize = '16px';\n                });\n                // Forward events from select to button\n                [\n                    [H.isMS ? 'mouseover' : 'mouseenter'],\n                    [H.isMS ? 'mouseout' : 'mouseleave'],\n                    ['change', 'click']\n                ].forEach(function (_a) {\n                    var from = _a[0],\n                        to = _a[1];\n                    addEvent(dropdown, from, function () {\n                        var button = buttons[_this.currentButtonIndex()];\n                        if (button) {\n                            fireEvent(button.element, to || from);\n                        }\n                    });\n                });\n                this.zoomText = renderer\n                    .label((lang && lang.rangeSelectorZoom) || '', 0)\n                    .attr({\n                    padding: options.buttonTheme.padding,\n                    height: options.buttonTheme.height,\n                    paddingLeft: 0,\n                    paddingRight: 0\n                })\n                    .add(this.buttonGroup);\n                if (!this.chart.styledMode) {\n                    this.zoomText.css(options.labelStyle);\n                    buttonTheme['stroke-width'] = pick(buttonTheme['stroke-width'], 0);\n                }\n                createElement('option', {\n                    textContent: this.zoomText.textStr,\n                    disabled: true\n                }, void 0, dropdown);\n                this.buttonOptions.forEach(function (rangeOptions, i) {\n                    createElement('option', {\n                        textContent: rangeOptions.title || rangeOptions.text\n                    }, void 0, dropdown);\n                    buttons[i] = renderer\n                        .button(rangeOptions.text, 0, 0, function (e) {\n                        // extract events from button object and call\n                        var buttonEvents = (rangeOptions.events &&\n                                rangeOptions.events.click),\n                            callDefaultEvent;\n                        if (buttonEvents) {\n                            callDefaultEvent =\n                                buttonEvents.call(rangeOptions, e);\n                        }\n                        if (callDefaultEvent !== false) {\n                            _this.clickButton(i);\n                        }\n                        _this.isActive = true;\n                    }, buttonTheme, states && states.hover, states && states.select, states && states.disabled)\n                        .attr({\n                        'text-align': 'center',\n                        width: width\n                    })\n                        .add(_this.buttonGroup);\n                    if (rangeOptions.title) {\n                        buttons[i].attr('title', rangeOptions.title);\n                    }\n                });\n            };\n            /**\n             * Align the elements horizontally and vertically.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#alignElements\n             */\n            RangeSelector.prototype.alignElements = function () {\n                var _this = this;\n                var _a = this,\n                    buttonGroup = _a.buttonGroup,\n                    buttons = _a.buttons,\n                    chart = _a.chart,\n                    group = _a.group,\n                    inputGroup = _a.inputGroup,\n                    options = _a.options,\n                    zoomText = _a.zoomText;\n                var chartOptions = chart.options;\n                var navButtonOptions = (chartOptions.exporting &&\n                        chartOptions.exporting.enabled !== false &&\n                        chartOptions.navigation &&\n                        chartOptions.navigation.buttonOptions);\n                var buttonPosition = options.buttonPosition,\n                    inputPosition = options.inputPosition,\n                    verticalAlign = options.verticalAlign;\n                // Get the X offset required to avoid overlapping with the exporting\n                // button. This is is used both by the buttonGroup and the inputGroup.\n                var getXOffsetForExportButton = function (group,\n                    position) {\n                        if (navButtonOptions &&\n                            _this.titleCollision(chart) &&\n                            verticalAlign === 'top' &&\n                            position.align === 'right' && ((position.y -\n                            group.getBBox().height - 12) <\n                            ((navButtonOptions.y || 0) +\n                                (navButtonOptions.height || 0) +\n                                chart.spacing[0]))) {\n                            return -40;\n                    }\n                    return 0;\n                };\n                var plotLeft = chart.plotLeft;\n                if (group && buttonPosition && inputPosition) {\n                    var translateX = buttonPosition.x - chart.spacing[3];\n                    if (buttonGroup) {\n                        this.positionButtons();\n                        if (!this.initialButtonGroupWidth) {\n                            var width_1 = 0;\n                            if (zoomText) {\n                                width_1 += zoomText.getBBox().width + 5;\n                            }\n                            buttons.forEach(function (button, i) {\n                                width_1 += button.width;\n                                if (i !== buttons.length - 1) {\n                                    width_1 += options.buttonSpacing;\n                                }\n                            });\n                            this.initialButtonGroupWidth = width_1;\n                        }\n                        plotLeft -= chart.spacing[3];\n                        this.updateButtonStates();\n                        // Detect collision between button group and exporting\n                        var xOffsetForExportButton_1 = getXOffsetForExportButton(buttonGroup,\n                            buttonPosition);\n                        this.alignButtonGroup(xOffsetForExportButton_1);\n                        // Skip animation\n                        group.placed = buttonGroup.placed = chart.hasLoaded;\n                    }\n                    var xOffsetForExportButton = 0;\n                    if (inputGroup) {\n                        // Detect collision between the input group and exporting button\n                        xOffsetForExportButton = getXOffsetForExportButton(inputGroup, inputPosition);\n                        if (inputPosition.align === 'left') {\n                            translateX = plotLeft;\n                        }\n                        else if (inputPosition.align === 'right') {\n                            translateX = -Math.max(chart.axisOffset[1], -xOffsetForExportButton);\n                        }\n                        // Update the alignment to the updated spacing box\n                        inputGroup.align({\n                            y: inputPosition.y,\n                            width: inputGroup.getBBox().width,\n                            align: inputPosition.align,\n                            // fix wrong getBBox() value on right align\n                            x: inputPosition.x + translateX - 2\n                        }, true, chart.spacingBox);\n                        // Skip animation\n                        inputGroup.placed = chart.hasLoaded;\n                    }\n                    this.handleCollision(xOffsetForExportButton);\n                    // Vertical align\n                    group.align({\n                        verticalAlign: verticalAlign\n                    }, true, chart.spacingBox);\n                    var alignTranslateY = group.alignAttr.translateY;\n                    // Set position\n                    var groupHeight = group.getBBox().height + 20; // # 20 padding\n                        var translateY = 0;\n                    // Calculate bottom position\n                    if (verticalAlign === 'bottom') {\n                        var legendOptions = chart.legend && chart.legend.options;\n                        var legendHeight = (legendOptions &&\n                                legendOptions.verticalAlign === 'bottom' &&\n                                legendOptions.enabled &&\n                                !legendOptions.floating ?\n                                (chart.legend.legendHeight +\n                                    pick(legendOptions.margin, 10)) :\n                                0);\n                        groupHeight = groupHeight + legendHeight - 20;\n                        translateY = (alignTranslateY -\n                            groupHeight -\n                            (options.floating ? 0 : options.y) -\n                            (chart.titleOffset ? chart.titleOffset[2] : 0) -\n                            10 // 10 spacing\n                        );\n                    }\n                    if (verticalAlign === 'top') {\n                        if (options.floating) {\n                            translateY = 0;\n                        }\n                        if (chart.titleOffset && chart.titleOffset[0]) {\n                            translateY = chart.titleOffset[0];\n                        }\n                        translateY += ((chart.margin[0] - chart.spacing[0]) || 0);\n                    }\n                    else if (verticalAlign === 'middle') {\n                        if (inputPosition.y === buttonPosition.y) {\n                            translateY = alignTranslateY;\n                        }\n                        else if (inputPosition.y || buttonPosition.y) {\n                            if (inputPosition.y < 0 ||\n                                buttonPosition.y < 0) {\n                                translateY -= Math.min(inputPosition.y, buttonPosition.y);\n                            }\n                            else {\n                                translateY = alignTranslateY - groupHeight;\n                            }\n                        }\n                    }\n                    group.translate(options.x, options.y + Math.floor(translateY));\n                    // Translate HTML inputs\n                    var _b = this,\n                        minInput = _b.minInput,\n                        maxInput = _b.maxInput,\n                        dropdown = _b.dropdown;\n                    if (options.inputEnabled && minInput && maxInput) {\n                        minInput.style.marginTop = group.translateY + 'px';\n                        maxInput.style.marginTop = group.translateY + 'px';\n                    }\n                    if (dropdown) {\n                        dropdown.style.marginTop = group.translateY + 'px';\n                    }\n                }\n            };\n            /**\n             * Align the button group horizontally and vertically.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#alignButtonGroup\n             * @param {number} xOffsetForExportButton\n             * @param {number} [width]\n             */\n            RangeSelector.prototype.alignButtonGroup = function (xOffsetForExportButton, width) {\n                var _a = this,\n                    chart = _a.chart,\n                    options = _a.options,\n                    buttonGroup = _a.buttonGroup,\n                    buttons = _a.buttons;\n                var buttonPosition = options.buttonPosition;\n                var plotLeft = chart.plotLeft - chart.spacing[3];\n                var translateX = buttonPosition.x - chart.spacing[3];\n                if (buttonPosition.align === 'right') {\n                    translateX += xOffsetForExportButton - plotLeft; // #13014\n                }\n                else if (buttonPosition.align === 'center') {\n                    translateX -= plotLeft / 2;\n                }\n                if (buttonGroup) {\n                    // Align button group\n                    buttonGroup.align({\n                        y: buttonPosition.y,\n                        width: pick(width, this.initialButtonGroupWidth),\n                        align: buttonPosition.align,\n                        x: translateX\n                    }, true, chart.spacingBox);\n                }\n            };\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#positionButtons\n             */\n            RangeSelector.prototype.positionButtons = function () {\n                var _a = this,\n                    buttons = _a.buttons,\n                    chart = _a.chart,\n                    options = _a.options,\n                    zoomText = _a.zoomText;\n                var verb = chart.hasLoaded ? 'animate' : 'attr';\n                var buttonPosition = options.buttonPosition;\n                var plotLeft = chart.plotLeft;\n                var buttonLeft = plotLeft;\n                if (zoomText && zoomText.visibility !== 'hidden') {\n                    // #8769, allow dynamically updating margins\n                    zoomText[verb]({\n                        x: pick(plotLeft + buttonPosition.x, plotLeft)\n                    });\n                    // Button start position\n                    buttonLeft += buttonPosition.x +\n                        zoomText.getBBox().width + 5;\n                }\n                this.buttonOptions.forEach(function (rangeOptions, i) {\n                    if (buttons[i].visibility !== 'hidden') {\n                        buttons[i][verb]({ x: buttonLeft });\n                        // increase button position for the next button\n                        buttonLeft += buttons[i].width + options.buttonSpacing;\n                    }\n                    else {\n                        buttons[i][verb]({ x: plotLeft });\n                    }\n                });\n            };\n            /**\n             * Handle collision between the button group and the input group\n             *\n             * @private\n             * @function Highcharts.RangeSelector#handleCollision\n             *\n             * @param  {number} xOffsetForExportButton\n             *                  The X offset of the group required to make room for the\n             *                  exporting button\n             */\n            RangeSelector.prototype.handleCollision = function (xOffsetForExportButton) {\n                var _this = this;\n                var _a = this,\n                    chart = _a.chart,\n                    buttonGroup = _a.buttonGroup,\n                    inputGroup = _a.inputGroup;\n                var _b = this.options,\n                    buttonPosition = _b.buttonPosition,\n                    dropdown = _b.dropdown,\n                    inputPosition = _b.inputPosition;\n                var maxButtonWidth = function () {\n                        var buttonWidth = 0;\n                    _this.buttons.forEach(function (button) {\n                        var bBox = button.getBBox();\n                        if (bBox.width > buttonWidth) {\n                            buttonWidth = bBox.width;\n                        }\n                    });\n                    return buttonWidth;\n                };\n                var groupsOverlap = function (buttonGroupWidth) {\n                        if (inputGroup && buttonGroup) {\n                            var inputGroupX = (inputGroup.alignAttr.translateX +\n                                inputGroup.alignOptions.x -\n                                xOffsetForExportButton +\n                                // getBBox for detecing left margin\n                                inputGroup.getBBox().x +\n                                // 2px padding to not overlap input and label\n                                2);\n                        var inputGroupWidth = inputGroup.alignOptions.width;\n                        var buttonGroupX = buttonGroup.alignAttr.translateX +\n                                buttonGroup.getBBox().x;\n                        return (buttonGroupX + buttonGroupWidth > inputGroupX) &&\n                            (inputGroupX + inputGroupWidth > buttonGroupX) &&\n                            (buttonPosition.y <\n                                (inputPosition.y +\n                                    inputGroup.getBBox().height));\n                    }\n                    return false;\n                };\n                var moveInputsDown = function () {\n                        if (inputGroup && buttonGroup) {\n                            inputGroup.attr({\n                                translateX: inputGroup.alignAttr.translateX + (chart.axisOffset[1] >= -xOffsetForExportButton ?\n                                    0 :\n                                    -xOffsetForExportButton),\n                                translateY: inputGroup.alignAttr.translateY +\n                                    buttonGroup.getBBox().height + 10\n                            });\n                    }\n                };\n                if (buttonGroup) {\n                    if (dropdown === 'always') {\n                        this.collapseButtons(xOffsetForExportButton);\n                        if (groupsOverlap(maxButtonWidth())) {\n                            // Move the inputs down if there is still a collision\n                            // after collapsing the buttons\n                            moveInputsDown();\n                        }\n                        return;\n                    }\n                    if (dropdown === 'never') {\n                        this.expandButtons();\n                    }\n                }\n                // Detect collision\n                if (inputGroup && buttonGroup) {\n                    if ((inputPosition.align === buttonPosition.align) ||\n                        // 20 is minimal spacing between elements\n                        groupsOverlap(this.initialButtonGroupWidth + 20)) {\n                        if (dropdown === 'responsive') {\n                            this.collapseButtons(xOffsetForExportButton);\n                            if (groupsOverlap(maxButtonWidth())) {\n                                moveInputsDown();\n                            }\n                        }\n                        else {\n                            moveInputsDown();\n                        }\n                    }\n                    else if (dropdown === 'responsive') {\n                        this.expandButtons();\n                    }\n                }\n                else if (buttonGroup && dropdown === 'responsive') {\n                    if (this.initialButtonGroupWidth > chart.plotWidth) {\n                        this.collapseButtons(xOffsetForExportButton);\n                    }\n                    else {\n                        this.expandButtons();\n                    }\n                }\n            };\n            /**\n             * Collapse the buttons and put the select element on top.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#collapseButtons\n             * @param {number} xOffsetForExportButton\n             */\n            RangeSelector.prototype.collapseButtons = function (xOffsetForExportButton) {\n                var _a = this,\n                    buttons = _a.buttons,\n                    buttonOptions = _a.buttonOptions,\n                    chart = _a.chart,\n                    dropdown = _a.dropdown,\n                    options = _a.options,\n                    zoomText = _a.zoomText;\n                var userButtonTheme = (chart.userOptions.rangeSelector &&\n                        chart.userOptions.rangeSelector.buttonTheme) || {};\n                var getAttribs = function (text) { return ({\n                        text: text ? text + \" \\u25BE\" : '▾',\n                        width: 'auto',\n                        paddingLeft: pick(options.buttonTheme.paddingLeft,\n                    userButtonTheme.padding, 8),\n                        paddingRight: pick(options.buttonTheme.paddingRight,\n                    userButtonTheme.padding, 8)\n                    }); };\n                if (zoomText) {\n                    zoomText.hide();\n                }\n                var hasActiveButton = false;\n                buttonOptions.forEach(function (rangeOptions, i) {\n                    var button = buttons[i];\n                    if (button.state !== 2) {\n                        button.hide();\n                    }\n                    else {\n                        button.show();\n                        button.attr(getAttribs(rangeOptions.text));\n                        hasActiveButton = true;\n                    }\n                });\n                if (!hasActiveButton) {\n                    if (dropdown) {\n                        dropdown.selectedIndex = 0;\n                    }\n                    buttons[0].show();\n                    buttons[0].attr(getAttribs(this.zoomText && this.zoomText.textStr));\n                }\n                var align = options.buttonPosition.align;\n                this.positionButtons();\n                if (align === 'right' || align === 'center') {\n                    this.alignButtonGroup(xOffsetForExportButton, buttons[this.currentButtonIndex()].getBBox().width);\n                }\n                this.showDropdown();\n            };\n            /**\n             * Show all the buttons and hide the select element.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#expandButtons\n             */\n            RangeSelector.prototype.expandButtons = function () {\n                var _a = this,\n                    buttons = _a.buttons,\n                    buttonOptions = _a.buttonOptions,\n                    options = _a.options,\n                    zoomText = _a.zoomText;\n                this.hideDropdown();\n                if (zoomText) {\n                    zoomText.show();\n                }\n                buttonOptions.forEach(function (rangeOptions, i) {\n                    var button = buttons[i];\n                    button.show();\n                    button.attr({\n                        text: rangeOptions.text,\n                        width: options.buttonTheme.width || 28,\n                        paddingLeft: pick(options.buttonTheme.paddingLeft, 'unset'),\n                        paddingRight: pick(options.buttonTheme.paddingRight, 'unset')\n                    });\n                    if (button.state < 2) {\n                        button.setState(0);\n                    }\n                });\n                this.positionButtons();\n            };\n            /**\n             * Get the index of the visible button when the buttons are collapsed.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#currentButtonIndex\n             */\n            RangeSelector.prototype.currentButtonIndex = function () {\n                var dropdown = this.dropdown;\n                if (dropdown && dropdown.selectedIndex > 0) {\n                    return dropdown.selectedIndex - 1;\n                }\n                return 0;\n            };\n            /**\n             * Position the select element on top of the button.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#showDropdown\n             */\n            RangeSelector.prototype.showDropdown = function () {\n                var _a = this,\n                    buttonGroup = _a.buttonGroup,\n                    buttons = _a.buttons,\n                    chart = _a.chart,\n                    dropdown = _a.dropdown;\n                if (buttonGroup && dropdown) {\n                    var translateX = buttonGroup.translateX,\n                        translateY = buttonGroup.translateY;\n                    var bBox = buttons[this.currentButtonIndex()].getBBox();\n                    css(dropdown, {\n                        left: (chart.plotLeft + translateX) + 'px',\n                        top: (translateY + 0.5) + 'px',\n                        width: bBox.width + 'px',\n                        height: bBox.height + 'px'\n                    });\n                    this.hasVisibleDropdown = true;\n                }\n            };\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#hideDropdown\n             */\n            RangeSelector.prototype.hideDropdown = function () {\n                var dropdown = this.dropdown;\n                if (dropdown) {\n                    css(dropdown, {\n                        top: '-9999em',\n                        width: '1px',\n                        height: '1px'\n                    });\n                    this.hasVisibleDropdown = false;\n                }\n            };\n            /**\n             * Extracts height of range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getHeight\n             * @return {number}\n             * Returns rangeSelector height\n             */\n            RangeSelector.prototype.getHeight = function () {\n                var rangeSelector = this,\n                    options = rangeSelector.options,\n                    rangeSelectorGroup = rangeSelector.group,\n                    inputPosition = options.inputPosition,\n                    buttonPosition = options.buttonPosition,\n                    yPosition = options.y,\n                    buttonPositionY = buttonPosition.y,\n                    inputPositionY = inputPosition.y,\n                    rangeSelectorHeight = 0,\n                    minPosition;\n                if (options.height) {\n                    return options.height;\n                }\n                // Align the elements before we read the height in case we're switching\n                // between wrapped and non-wrapped layout\n                this.alignElements();\n                rangeSelectorHeight = rangeSelectorGroup ?\n                    // 13px to keep back compatibility\n                    (rangeSelectorGroup.getBBox(true).height) + 13 +\n                        yPosition :\n                    0;\n                minPosition = Math.min(inputPositionY, buttonPositionY);\n                if ((inputPositionY < 0 && buttonPositionY < 0) ||\n                    (inputPositionY > 0 && buttonPositionY > 0)) {\n                    rangeSelectorHeight += Math.abs(minPosition);\n                }\n                return rangeSelectorHeight;\n            };\n            /**\n             * Detect collision with title or subtitle\n             *\n             * @private\n             * @function Highcharts.RangeSelector#titleCollision\n             * @return {boolean}\n             * Returns collision status\n             */\n            RangeSelector.prototype.titleCollision = function (chart) {\n                return !(chart.options.title.text ||\n                    chart.options.subtitle.text);\n            };\n            /**\n             * Update the range selector with new options\n             *\n             * @private\n             * @function Highcharts.RangeSelector#update\n             * @param {Highcharts.RangeSelectorOptions} options\n             */\n            RangeSelector.prototype.update = function (options) {\n                var chart = this.chart;\n                merge(true, chart.options.rangeSelector, options);\n                this.destroy();\n                this.init(chart);\n                this.render();\n            };\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#destroy\n             */\n            RangeSelector.prototype.destroy = function () {\n                var rSelector = this,\n                    minInput = rSelector.minInput,\n                    maxInput = rSelector.maxInput;\n                if (rSelector.eventsToUnbind) {\n                    rSelector.eventsToUnbind.forEach(function (unbind) { return unbind(); });\n                    rSelector.eventsToUnbind = void 0;\n                }\n                // Destroy elements in collections\n                destroyObjectProperties(rSelector.buttons);\n                // Clear input element events\n                if (minInput) {\n                    minInput.onfocus = minInput.onblur = minInput.onchange = null;\n                }\n                if (maxInput) {\n                    maxInput.onfocus = maxInput.onblur = maxInput.onchange = null;\n                }\n                // Destroy HTML and SVG elements\n                objectEach(rSelector, function (val, key) {\n                    if (val && key !== 'chart') {\n                        if (val instanceof SVGElement) {\n                            // SVGElement\n                            val.destroy();\n                        }\n                        else if (val instanceof window.HTMLElement) {\n                            // HTML element\n                            discardElement(val);\n                        }\n                    }\n                    if (val !== RangeSelector.prototype[key]) {\n                        rSelector[key] = null;\n                    }\n                }, this);\n            };\n            return RangeSelector;\n        }());\n        /**\n         * The default buttons for pre-selecting time frames\n         */\n        RangeSelector.prototype.defaultButtons = [{\n                type: 'month',\n                count: 1,\n                text: '1m',\n                title: 'View 1 month'\n            }, {\n                type: 'month',\n                count: 3,\n                text: '3m',\n                title: 'View 3 months'\n            }, {\n                type: 'month',\n                count: 6,\n                text: '6m',\n                title: 'View 6 months'\n            }, {\n                type: 'ytd',\n                text: 'YTD',\n                title: 'View year to date'\n            }, {\n                type: 'year',\n                count: 1,\n                text: '1y',\n                title: 'View 1 year'\n            }, {\n                type: 'all',\n                text: 'All',\n                title: 'View all'\n            }];\n        /**\n         * The date formats to use when setting min, max and value on date inputs\n         */\n        RangeSelector.prototype.inputTypeFormats = {\n            'datetime-local': '%Y-%m-%dT%H:%M:%S',\n            'date': '%Y-%m-%d',\n            'time': '%H:%M:%S'\n        };\n        /**\n         * Get the preferred input type based on a date format string.\n         *\n         * @private\n         * @function preferredInputType\n         */\n        function preferredInputType(format) {\n            var ms = format.indexOf('%L') !== -1;\n            if (ms) {\n                return 'text';\n            }\n            var date = ['a', 'A', 'd', 'e', 'w', 'b', 'B', 'm', 'o', 'y', 'Y']\n                    .some(function (char) { return format.indexOf('%' + char) !== -1; });\n            var time = ['H', 'k', 'I', 'l', 'M', 'S'].some(function (char) {\n                    return format.indexOf('%' + char) !== -1;\n            });\n            if (date && time) {\n                return 'datetime-local';\n            }\n            if (date) {\n                return 'date';\n            }\n            if (time) {\n                return 'time';\n            }\n            return 'text';\n        }\n        /**\n         * Get the axis min value based on the range option and the current max. For\n         * stock charts this is extended via the {@link RangeSelector} so that if the\n         * selected range is a multiple of months or years, it is compensated for\n         * various month lengths.\n         *\n         * @private\n         * @function Highcharts.Axis#minFromRange\n         * @return {number|undefined}\n         *         The new minimum value.\n         */\n        Axis.prototype.minFromRange = function () {\n            var rangeOptions = this.range,\n                type = rangeOptions.type,\n                min,\n                max = this.max,\n                dataMin,\n                range,\n                time = this.chart.time, \n                // Get the true range from a start date\n                getTrueRange = function (base,\n                count) {\n                    var timeName = type === 'year' ?\n                        'FullYear' : 'Month';\n                var date = new time.Date(base);\n                var basePeriod = time.get(timeName,\n                    date);\n                time.set(timeName, date, basePeriod + count);\n                if (basePeriod === time.get(timeName, date)) {\n                    time.set('Date', date, 0); // #6537\n                }\n                return date.getTime() - base;\n            };\n            if (isNumber(rangeOptions)) {\n                min = max - rangeOptions;\n                range = rangeOptions;\n            }\n            else {\n                min = max + getTrueRange(max, -rangeOptions.count);\n                // Let the fixedRange reflect initial settings (#5930)\n                if (this.chart) {\n                    this.chart.fixedRange = max - min;\n                }\n            }\n            dataMin = pick(this.dataMin, Number.MIN_VALUE);\n            if (!isNumber(min)) {\n                min = dataMin;\n            }\n            if (min <= dataMin) {\n                min = dataMin;\n                if (typeof range === 'undefined') { // #4501\n                    range = getTrueRange(min, rangeOptions.count);\n                }\n                this.newMax = Math.min(min + range, this.dataMax);\n            }\n            if (!isNumber(max)) {\n                min = void 0;\n            }\n            return min;\n        };\n        if (!H.RangeSelector) {\n            var chartDestroyEvents_1 = [];\n            var initRangeSelector_1 = function (chart) {\n                    var extremes,\n                rangeSelector = chart.rangeSelector,\n                legend,\n                alignTo,\n                verticalAlign;\n                /**\n                 * @private\n                 */\n                function render() {\n                    if (rangeSelector) {\n                        extremes = chart.xAxis[0].getExtremes();\n                        legend = chart.legend;\n                        verticalAlign = (rangeSelector &&\n                            rangeSelector.options.verticalAlign);\n                        if (isNumber(extremes.min)) {\n                            rangeSelector.render(extremes.min, extremes.max);\n                        }\n                        // Re-align the legend so that it's below the rangeselector\n                        if (legend.display &&\n                            verticalAlign === 'top' &&\n                            verticalAlign === legend.options.verticalAlign) {\n                            // Create a new alignment box for the legend.\n                            alignTo = merge(chart.spacingBox);\n                            if (legend.options.layout === 'vertical') {\n                                alignTo.y = chart.plotTop;\n                            }\n                            else {\n                                alignTo.y += rangeSelector.getHeight();\n                            }\n                            legend.group.placed = false; // Don't animate the alignment.\n                            legend.align(alignTo);\n                        }\n                    }\n                }\n                if (rangeSelector) {\n                    var events = find(chartDestroyEvents_1,\n                        function (e) { return e[0] === chart; });\n                    if (!events) {\n                        chartDestroyEvents_1.push([chart, [\n                                // redraw the scroller on setExtremes\n                                addEvent(chart.xAxis[0], 'afterSetExtremes', function (e) {\n                                    if (rangeSelector) {\n                                        rangeSelector.render(e.min, e.max);\n                                    }\n                                }),\n                                // redraw the scroller chart resize\n                                addEvent(chart, 'redraw', render)\n                            ]]);\n                    }\n                    // do it now\n                    render();\n                }\n            };\n            // Initialize rangeselector for stock charts\n            addEvent(Chart, 'afterGetContainer', function () {\n                if (this.options.rangeSelector &&\n                    this.options.rangeSelector.enabled) {\n                    this.rangeSelector = new RangeSelector(this);\n                }\n            });\n            addEvent(Chart, 'beforeRender', function () {\n                var chart = this,\n                    axes = chart.axes,\n                    rangeSelector = chart.rangeSelector,\n                    verticalAlign;\n                if (rangeSelector) {\n                    if (isNumber(rangeSelector.deferredYTDClick)) {\n                        rangeSelector.clickButton(rangeSelector.deferredYTDClick);\n                        delete rangeSelector.deferredYTDClick;\n                    }\n                    axes.forEach(function (axis) {\n                        axis.updateNames();\n                        axis.setScale();\n                    });\n                    chart.getAxisMargins();\n                    rangeSelector.render();\n                    verticalAlign = rangeSelector.options.verticalAlign;\n                    if (!rangeSelector.options.floating) {\n                        if (verticalAlign === 'bottom') {\n                            this.extraBottomMargin = true;\n                        }\n                        else if (verticalAlign !== 'middle') {\n                            this.extraTopMargin = true;\n                        }\n                    }\n                }\n            });\n            addEvent(Chart, 'update', function (e) {\n                var chart = this,\n                    options = e.options,\n                    optionsRangeSelector = options.rangeSelector,\n                    rangeSelector = chart.rangeSelector,\n                    verticalAlign,\n                    extraBottomMarginWas = this.extraBottomMargin,\n                    extraTopMarginWas = this.extraTopMargin;\n                if (optionsRangeSelector &&\n                    optionsRangeSelector.enabled &&\n                    !defined(rangeSelector) &&\n                    this.options.rangeSelector) {\n                    this.options.rangeSelector.enabled = true;\n                    this.rangeSelector = rangeSelector = new RangeSelector(this);\n                }\n                this.extraBottomMargin = false;\n                this.extraTopMargin = false;\n                if (rangeSelector) {\n                    initRangeSelector_1(this);\n                    verticalAlign = (optionsRangeSelector &&\n                        optionsRangeSelector.verticalAlign) || (rangeSelector.options && rangeSelector.options.verticalAlign);\n                    if (!rangeSelector.options.floating) {\n                        if (verticalAlign === 'bottom') {\n                            this.extraBottomMargin = true;\n                        }\n                        else if (verticalAlign !== 'middle') {\n                            this.extraTopMargin = true;\n                        }\n                    }\n                    if (this.extraBottomMargin !== extraBottomMarginWas ||\n                        this.extraTopMargin !== extraTopMarginWas) {\n                        this.isDirtyBox = true;\n                    }\n                }\n            });\n            addEvent(Chart, 'render', function () {\n                var chart = this,\n                    rangeSelector = chart.rangeSelector,\n                    verticalAlign;\n                if (rangeSelector && !rangeSelector.options.floating) {\n                    rangeSelector.render();\n                    verticalAlign = rangeSelector.options.verticalAlign;\n                    if (verticalAlign === 'bottom') {\n                        this.extraBottomMargin = true;\n                    }\n                    else if (verticalAlign !== 'middle') {\n                        this.extraTopMargin = true;\n                    }\n                }\n            });\n            addEvent(Chart, 'getMargins', function () {\n                var rangeSelector = this.rangeSelector,\n                    rangeSelectorHeight;\n                if (rangeSelector) {\n                    rangeSelectorHeight = rangeSelector.getHeight();\n                    if (this.extraTopMargin) {\n                        this.plotTop += rangeSelectorHeight;\n                    }\n                    if (this.extraBottomMargin) {\n                        this.marginBottom += rangeSelectorHeight;\n                    }\n                }\n            });\n            Chart.prototype.callbacks.push(initRangeSelector_1);\n            // Remove resize/afterSetExtremes at chart destroy\n            addEvent(Chart, 'destroy', function destroyEvents() {\n                for (var i = 0; i < chartDestroyEvents_1.length; i++) {\n                    var events = chartDestroyEvents_1[i];\n                    if (events[0] === this) {\n                        events[1].forEach(function (unbind) { return unbind(); });\n                        chartDestroyEvents_1.splice(i, 1);\n                        return;\n                    }\n                }\n            });\n            H.RangeSelector = RangeSelector;\n        }\n\n        return RangeSelector;\n    });\n    _registerModule(_modules, 'Core/Chart/StockChart.js', [_modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Axis/Axis.js'], _modules['Core/Chart/Chart.js'], _modules['Core/FormatUtilities.js'], _modules['Core/DefaultOptions.js'], _modules['Core/Series/Series.js'], _modules['Core/Renderer/SVG/SVGRenderer.js'], _modules['Core/Utilities.js']], function (A, Axis, Chart, F, D, Series, SVGRenderer, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var animObject = A.animObject;\n        var format = F.format;\n        var getOptions = D.getOptions;\n        var addEvent = U.addEvent,\n            clamp = U.clamp,\n            defined = U.defined,\n            extend = U.extend,\n            find = U.find,\n            isNumber = U.isNumber,\n            isString = U.isString,\n            merge = U.merge,\n            pick = U.pick,\n            splat = U.splat;\n        // Has a dependency on Navigator due to the use of\n        // defaultOptions.navigator\n        // Has a dependency on Scrollbar due to the use of\n        // defaultOptions.scrollbar\n        // Has a dependency on RangeSelector due to the use of\n        // defaultOptions.rangeSelector\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Stock-optimized chart. Use {@link Highcharts.Chart|Chart} for common charts.\n         *\n         * @requires modules/stock\n         *\n         * @class\n         * @name Highcharts.StockChart\n         * @extends Highcharts.Chart\n         */\n        var StockChart = /** @class */ (function (_super) {\n                __extends(StockChart, _super);\n            function StockChart() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            /**\n             * Initializes the chart. The constructor's arguments are passed on\n             * directly.\n             *\n             * @function Highcharts.StockChart#init\n             *\n             * @param {Highcharts.Options} userOptions\n             *        Custom options.\n             *\n             * @param {Function} [callback]\n             *        Function to run when the chart has loaded and and all external\n             *        images are loaded.\n             *\n             *\n             * @emits Highcharts.StockChart#event:init\n             * @emits Highcharts.StockChart#event:afterInit\n             */\n            StockChart.prototype.init = function (userOptions, callback) {\n                var defaultOptions = getOptions(),\n                    xAxisOptions = userOptions.xAxis,\n                    yAxisOptions = userOptions.yAxis, \n                    // Always disable startOnTick:true on the main axis when the\n                    // navigator is enabled (#1090)\n                    navigatorEnabled = pick(userOptions.navigator && userOptions.navigator.enabled,\n                    defaultOptions.navigator.enabled,\n                    true);\n                // Avoid doing these twice\n                userOptions.xAxis = userOptions.yAxis = void 0;\n                var options = merge({\n                        chart: {\n                            panning: {\n                                enabled: true,\n                                type: 'x'\n                            },\n                            pinchType: 'x'\n                        },\n                        navigator: {\n                            enabled: navigatorEnabled\n                        },\n                        scrollbar: {\n                            // #4988 - check if setOptions was called\n                            enabled: pick((defaultOptions.scrollbar &&\n                                defaultOptions.scrollbar.enabled),\n                    true)\n                        },\n                        rangeSelector: {\n                            // #4988 - check if setOptions was called\n                            enabled: pick(defaultOptions.rangeSelector.enabled,\n                    true)\n                        },\n                        title: {\n                            text: null\n                        },\n                        tooltip: {\n                            split: pick(defaultOptions.tooltip.split,\n                    true),\n                            crosshairs: true\n                        },\n                        legend: {\n                            enabled: false\n                        }\n                    },\n                    userOptions, // user's options\n                    {\n                        isStock: true // internal flag\n                    });\n                userOptions.xAxis = xAxisOptions;\n                userOptions.yAxis = yAxisOptions;\n                // apply X axis options to both single and multi y axes\n                options.xAxis = splat(userOptions.xAxis || {}).map(function (xAxisOptions, i) {\n                    return merge(getDefaultAxisOptions('xAxis', xAxisOptions), defaultOptions.xAxis, // #3802\n                    // #7690\n                    defaultOptions.xAxis && defaultOptions.xAxis[i], xAxisOptions, // user options\n                    getForcedAxisOptions('xAxis', userOptions));\n                });\n                // apply Y axis options to both single and multi y axes\n                options.yAxis = splat(userOptions.yAxis || {}).map(function (yAxisOptions, i) {\n                    return merge(getDefaultAxisOptions('yAxis', yAxisOptions), defaultOptions.yAxis, // #3802\n                    // #7690\n                    defaultOptions.yAxis && defaultOptions.yAxis[i], yAxisOptions // user options\n                    );\n                });\n                _super.prototype.init.call(this, options, callback);\n            };\n            /**\n             * Factory for creating different axis types.\n             * Extended to add stock defaults.\n             *\n             * @private\n             * @function Highcharts.StockChart#createAxis\n             * @param {string} type\n             * An axis type.\n             * @param {Chart.CreateAxisOptionsObject} options\n             * The axis creation options.\n             */\n            StockChart.prototype.createAxis = function (type, options) {\n                options.axis = merge(getDefaultAxisOptions(type, options.axis), options.axis, getForcedAxisOptions(type, this.userOptions));\n                return _super.prototype.createAxis.call(this, type, options);\n            };\n            return StockChart;\n        }(Chart));\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        (function (StockChart) {\n            /**\n             * Factory function for creating new stock charts. Creates a new\n             * {@link Highcharts.StockChart|StockChart} object with different default\n             * options than the basic Chart.\n             *\n             * @example\n             * let chart = Highcharts.stockChart('container', {\n             *     series: [{\n             *         data: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n             *         pointInterval: 24 * 60 * 60 * 1000\n             *     }]\n             * });\n             *\n             * @function Highcharts.stockChart\n             *\n             * @param {string|Highcharts.HTMLDOMElement} [renderTo]\n             *        The DOM element to render to, or its id.\n             *\n             * @param {Highcharts.Options} options\n             *        The chart options structure as described in the\n             *        [options reference](https://api.highcharts.com/highstock).\n             *\n             * @param {Highcharts.ChartCallbackFunction} [callback]\n             *        A function to execute when the chart object is finished loading\n             *        and rendering. In most cases the chart is built in one thread,\n             *        but in Internet Explorer version 8 or less the chart is sometimes\n             *        initialized before the document is ready, and in these cases the\n             *        chart object will not be finished synchronously. As a\n             *        consequence, code that relies on the newly built Chart object\n             *        should always run in the callback. Defining a\n             *        [chart.events.load](https://api.highcharts.com/highstock/chart.events.load)\n             *        handler is equivalent.\n             *\n             * @return {Highcharts.StockChart}\n             *         The chart object.\n             */\n            function stockChart(a, b, c) {\n                return new StockChart(a, b, c);\n            }\n            StockChart.stockChart = stockChart;\n        })(StockChart || (StockChart = {}));\n        /**\n         * Get stock-specific default axis options.\n         *\n         * @private\n         * @function getDefaultAxisOptions\n         */\n        function getDefaultAxisOptions(type, options) {\n            if (type === 'xAxis') {\n                return {\n                    minPadding: 0,\n                    maxPadding: 0,\n                    overscroll: 0,\n                    ordinal: true,\n                    title: {\n                        text: null\n                    },\n                    labels: {\n                        overflow: 'justify'\n                    },\n                    showLastLabel: true\n                };\n            }\n            if (type === 'yAxis') {\n                return {\n                    labels: {\n                        y: -2\n                    },\n                    opposite: pick(options.opposite, true),\n                    /**\n                     * @default {highcharts} true\n                     * @default {highstock} false\n                     * @apioption yAxis.showLastLabel\n                     *\n                     * @private\n                     */\n                    showLastLabel: !!(\n                    // #6104, show last label by default for category axes\n                    options.categories ||\n                        options.type === 'category'),\n                    title: {\n                        text: null\n                    }\n                };\n            }\n            return {};\n        }\n        /**\n         * Get stock-specific forced axis options.\n         *\n         * @private\n         * @function getForcedAxisOptions\n         */\n        function getForcedAxisOptions(type, chartOptions) {\n            if (type === 'xAxis') {\n                var defaultOptions = getOptions(), \n                    // Always disable startOnTick:true on the main axis when the\n                    // navigator is enabled (#1090)\n                    navigatorEnabled = pick(chartOptions.navigator && chartOptions.navigator.enabled,\n                    defaultOptions.navigator.enabled,\n                    true);\n                var axisOptions = {\n                        type: 'datetime',\n                        categories: void 0\n                    };\n                if (navigatorEnabled) {\n                    axisOptions.startOnTick = false;\n                    axisOptions.endOnTick = false;\n                }\n                return axisOptions;\n            }\n            return {};\n        }\n        /* *\n         *\n         *  Compositions\n         *\n         * */\n        // Handle som Stock-specific series defaults, override the plotOptions before\n        // series options are handled.\n        addEvent(Series, 'setOptions', function (e) {\n            var overrides;\n            if (this.chart.options.isStock) {\n                if (this.is('column') || this.is('columnrange')) {\n                    overrides = {\n                        borderWidth: 0,\n                        shadow: false\n                    };\n                }\n                else if (!this.is('scatter') && !this.is('sma')) {\n                    overrides = {\n                        marker: {\n                            enabled: false,\n                            radius: 2\n                        }\n                    };\n                }\n                if (overrides) {\n                    e.plotOptions[this.type] = merge(e.plotOptions[this.type], overrides);\n                }\n            }\n        });\n        // Override the automatic label alignment so that the first Y axis' labels\n        // are drawn on top of the grid line, and subsequent axes are drawn outside\n        addEvent(Axis, 'autoLabelAlign', function (e) {\n            var chart = this.chart,\n                options = this.options,\n                panes = chart._labelPanes = chart._labelPanes || {},\n                key,\n                labelOptions = this.options.labels;\n            if (this.chart.options.isStock && this.coll === 'yAxis') {\n                key = options.top + ',' + options.height;\n                // do it only for the first Y axis of each pane\n                if (!panes[key] && labelOptions.enabled) {\n                    if (labelOptions.x === 15) { // default\n                        labelOptions.x = 0;\n                    }\n                    if (typeof labelOptions.align === 'undefined') {\n                        labelOptions.align = 'right';\n                    }\n                    panes[key] = this;\n                    e.align = 'right';\n                    e.preventDefault();\n                }\n            }\n        });\n        // Clear axis from label panes (#6071)\n        addEvent(Axis, 'destroy', function () {\n            var chart = this.chart, key = this.options && (this.options.top + ',' + this.options.height);\n            if (key && chart._labelPanes && chart._labelPanes[key] === this) {\n                delete chart._labelPanes[key];\n            }\n        });\n        // Override getPlotLinePath to allow for multipane charts\n        addEvent(Axis, 'getPlotLinePath', function (e) {\n            var axis = this,\n                series = (this.isLinked && !this.series ?\n                    this.linkedParent.series :\n                    this.series),\n                chart = axis.chart,\n                renderer = chart.renderer,\n                axisLeft = axis.left,\n                axisTop = axis.top,\n                x1,\n                y1,\n                x2,\n                y2,\n                result = [],\n                axes = [], // #3416 need a default array\n                axes2,\n                uniqueAxes,\n                translatedValue = e.translatedValue,\n                value = e.value,\n                force = e.force,\n                transVal;\n            /**\n             * Return the other axis based on either the axis option or on related\n             * series.\n             * @private\n             */\n            function getAxis(coll) {\n                var otherColl = coll === 'xAxis' ? 'yAxis' : 'xAxis',\n                    opt = axis.options[otherColl];\n                // Other axis indexed by number\n                if (isNumber(opt)) {\n                    return [chart[otherColl][opt]];\n                }\n                // Other axis indexed by id (like navigator)\n                if (isString(opt)) {\n                    return [chart.get(opt)];\n                }\n                // Auto detect based on existing series\n                return series.map(function (s) {\n                    return s[otherColl];\n                });\n            }\n            if ( // For stock chart, by default render paths across the panes\n            // except the case when `acrossPanes` is disabled by user (#6644)\n            (chart.options.isStock && e.acrossPanes !== false) &&\n                // Ignore in case of colorAxis or zAxis. #3360, #3524, #6720\n                axis.coll === 'xAxis' || axis.coll === 'yAxis') {\n                e.preventDefault();\n                // Get the related axes based on series\n                axes = getAxis(axis.coll);\n                // Get the related axes based options.*Axis setting #2810\n                axes2 = (axis.isXAxis ? chart.yAxis : chart.xAxis);\n                axes2.forEach(function (A) {\n                    if (defined(A.options.id) ?\n                        A.options.id.indexOf('navigator') === -1 :\n                        true) {\n                        var a = (A.isXAxis ? 'yAxis' : 'xAxis'),\n                            rax = (defined(A.options[a]) ?\n                                chart[a][A.options[a]] :\n                                chart[a][0]);\n                        if (axis === rax) {\n                            axes.push(A);\n                        }\n                    }\n                });\n                // Remove duplicates in the axes array. If there are no axes in the axes\n                // array, we are adding an axis without data, so we need to populate\n                // this with grid lines (#2796).\n                uniqueAxes = axes.length ?\n                    [] :\n                    [axis.isXAxis ? chart.yAxis[0] : chart.xAxis[0]]; // #3742\n                axes.forEach(function (axis2) {\n                    if (uniqueAxes.indexOf(axis2) === -1 &&\n                        // Do not draw on axis which overlap completely. #5424\n                        !find(uniqueAxes, function (unique) {\n                            return unique.pos === axis2.pos && unique.len === axis2.len;\n                        })) {\n                        uniqueAxes.push(axis2);\n                    }\n                });\n                transVal = pick(translatedValue, axis.translate(value, null, null, e.old));\n                if (isNumber(transVal)) {\n                    if (axis.horiz) {\n                        uniqueAxes.forEach(function (axis2) {\n                            var skip;\n                            y1 = axis2.pos;\n                            y2 = y1 + axis2.len;\n                            x1 = x2 = Math.round(transVal + axis.transB);\n                            // outside plot area\n                            if (force !== 'pass' &&\n                                (x1 < axisLeft || x1 > axisLeft + axis.width)) {\n                                if (force) {\n                                    x1 = x2 = clamp(x1, axisLeft, axisLeft + axis.width);\n                                }\n                                else {\n                                    skip = true;\n                                }\n                            }\n                            if (!skip) {\n                                result.push(['M', x1, y1], ['L', x2, y2]);\n                            }\n                        });\n                    }\n                    else {\n                        uniqueAxes.forEach(function (axis2) {\n                            var skip;\n                            x1 = axis2.pos;\n                            x2 = x1 + axis2.len;\n                            y1 = y2 = Math.round(axisTop + axis.height - transVal);\n                            // outside plot area\n                            if (force !== 'pass' &&\n                                (y1 < axisTop || y1 > axisTop + axis.height)) {\n                                if (force) {\n                                    y1 = y2 = clamp(y1, axisTop, axisTop + axis.height);\n                                }\n                                else {\n                                    skip = true;\n                                }\n                            }\n                            if (!skip) {\n                                result.push(['M', x1, y1], ['L', x2, y2]);\n                            }\n                        });\n                    }\n                }\n                e.path = result.length > 0 ?\n                    renderer.crispPolyLine(result, e.lineWidth || 1) :\n                    // #3557 getPlotLinePath in regular Highcharts also returns null\n                    null;\n            }\n        });\n        /**\n         * Function to crisp a line with multiple segments\n         *\n         * @private\n         * @function Highcharts.SVGRenderer#crispPolyLine\n         */\n        SVGRenderer.prototype.crispPolyLine = function (points, width) {\n            // points format: [['M', 0, 0], ['L', 100, 0]]\n            // normalize to a crisp line\n            for (var i = 0; i < points.length; i = i + 2) {\n                var start = points[i],\n                    end = points[i + 1];\n                if (start[1] === end[1]) {\n                    // Substract due to #1129. Now bottom and left axis gridlines behave\n                    // the same.\n                    start[1] = end[1] =\n                        Math.round(start[1]) - (width % 2 / 2);\n                }\n                if (start[2] === end[2]) {\n                    start[2] = end[2] =\n                        Math.round(start[2]) + (width % 2 / 2);\n                }\n            }\n            return points;\n        };\n        // Wrapper to hide the label\n        addEvent(Axis, 'afterHideCrosshair', function () {\n            if (this.crossLabel) {\n                this.crossLabel = this.crossLabel.hide();\n            }\n        });\n        // Extend crosshairs to also draw the label\n        addEvent(Axis, 'afterDrawCrosshair', function (event) {\n            // Check if the label has to be drawn\n            if (!this.crosshair ||\n                !this.crosshair.label ||\n                !this.crosshair.label.enabled ||\n                !this.cross ||\n                !isNumber(this.min) ||\n                !isNumber(this.max)) {\n                return;\n            }\n            var chart = this.chart, log = this.logarithmic, options = this.crosshair.label, // the label's options\n                horiz = this.horiz, // axis orientation\n                opposite = this.opposite, // axis position\n                left = this.left, // left position\n                top = this.top, // top position\n                crossLabel = this.crossLabel, // the svgElement\n                posx, posy, crossBox, formatOption = options.format, formatFormat = '', limit, align, tickInside = this.options.tickPosition === 'inside', snap = this.crosshair.snap !== false, offset = 0, \n                // Use last available event (#5287)\n                e = event.e || (this.cross && this.cross.e), point = event.point, min = this.min, max = this.max;\n            if (log) {\n                min = log.lin2log(min);\n                max = log.lin2log(max);\n            }\n            align = (horiz ? 'center' : opposite ?\n                (this.labelAlign === 'right' ? 'right' : 'left') :\n                (this.labelAlign === 'left' ? 'left' : 'center'));\n            // If the label does not exist yet, create it.\n            if (!crossLabel) {\n                crossLabel = this.crossLabel = chart.renderer\n                    .label('', 0, void 0, options.shape || 'callout')\n                    .addClass('highcharts-crosshair-label highcharts-color-' + (point ?\n                    point.series.colorIndex :\n                    this.series[0] && this.series[0].colorIndex))\n                    .attr({\n                    align: options.align || align,\n                    padding: pick(options.padding, 8),\n                    r: pick(options.borderRadius, 3),\n                    zIndex: 2\n                })\n                    .add(this.labelGroup);\n                // Presentational\n                if (!chart.styledMode) {\n                    crossLabel\n                        .attr({\n                        fill: options.backgroundColor ||\n                            point && point.series && point.series.color || // #14888\n                            \"#666666\" /* neutralColor60 */,\n                        stroke: options.borderColor || '',\n                        'stroke-width': options.borderWidth || 0\n                    })\n                        .css(extend({\n                        color: \"#ffffff\" /* backgroundColor */,\n                        fontWeight: 'normal',\n                        fontSize: '11px',\n                        textAlign: 'center'\n                    }, options.style || {}));\n                }\n            }\n            if (horiz) {\n                posx = snap ? (point.plotX || 0) + left : e.chartX;\n                posy = top + (opposite ? 0 : this.height);\n            }\n            else {\n                posx = opposite ? this.width + left : 0;\n                posy = snap ? (point.plotY || 0) + top : e.chartY;\n            }\n            if (!formatOption && !options.formatter) {\n                if (this.dateTime) {\n                    formatFormat = '%b %d, %Y';\n                }\n                formatOption =\n                    '{value' + (formatFormat ? ':' + formatFormat : '') + '}';\n            }\n            // Show the label\n            var value = snap ?\n                    (this.isXAxis ? point.x : point.y) :\n                    this.toValue(horiz ? e.chartX : e.chartY);\n            // Crosshair should be rendered within Axis range (#7219). Also, the point\n            // of currentPriceIndicator should be inside the plot area, #14879.\n            var isInside = point ?\n                    point.series.isPointInside(point) :\n                    (isNumber(value) && value > min && value < max);\n            var text = '';\n            if (formatOption) {\n                text = format(formatOption, { value: value }, chart);\n            }\n            else if (options.formatter && isNumber(value)) {\n                text = options.formatter.call(this, value);\n            }\n            crossLabel.attr({\n                text: text,\n                x: posx,\n                y: posy,\n                visibility: isInside ? 'visible' : 'hidden'\n            });\n            crossBox = crossLabel.getBBox();\n            // now it is placed we can correct its position\n            if (isNumber(crossLabel.y)) {\n                if (horiz) {\n                    if ((tickInside && !opposite) || (!tickInside && opposite)) {\n                        posy = crossLabel.y - crossBox.height;\n                    }\n                }\n                else {\n                    posy = crossLabel.y - (crossBox.height / 2);\n                }\n            }\n            // check the edges\n            if (horiz) {\n                limit = {\n                    left: left - crossBox.x,\n                    right: left + this.width - crossBox.x\n                };\n            }\n            else {\n                limit = {\n                    left: this.labelAlign === 'left' ? left : 0,\n                    right: this.labelAlign === 'right' ?\n                        left + this.width :\n                        chart.chartWidth\n                };\n            }\n            // left edge\n            if (crossLabel.translateX < limit.left) {\n                offset = limit.left - crossLabel.translateX;\n            }\n            // right edge\n            if (crossLabel.translateX + crossBox.width >= limit.right) {\n                offset = -(crossLabel.translateX + crossBox.width - limit.right);\n            }\n            // show the crosslabel\n            crossLabel.attr({\n                x: posx + offset,\n                y: posy,\n                // First set x and y, then anchorX and anchorY, when box is actually\n                // calculated, #5702\n                anchorX: horiz ?\n                    posx :\n                    (this.opposite ? 0 : chart.chartWidth),\n                anchorY: horiz ?\n                    (this.opposite ? chart.chartHeight : 0) :\n                    posy + crossBox.height / 2\n            });\n        });\n        /**\n         * Based on the data grouping options decides whether\n         * the data should be cropped while processing.\n         *\n         * @ignore\n         * @function Highcharts.Series#forceCropping\n         */\n        Series.prototype.forceCropping = function () {\n            var chart = this.chart,\n                options = this.options,\n                dataGroupingOptions = options.dataGrouping,\n                groupingEnabled = this.allowDG !== false && dataGroupingOptions &&\n                    pick(dataGroupingOptions.enabled,\n                chart.options.isStock);\n            return groupingEnabled;\n        };\n        addEvent(Chart, 'update', function (e) {\n            var options = e.options;\n            // Use case: enabling scrollbar from a disabled state.\n            // Scrollbar needs to be initialized from a controller, Navigator in this\n            // case (#6615)\n            if ('scrollbar' in options && this.navigator) {\n                merge(true, this.options.scrollbar, options.scrollbar);\n                this.navigator.update({}, false);\n                delete options.scrollbar;\n            }\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return StockChart;\n    });\n    _registerModule(_modules, 'masters/modules/stock.src.js', [_modules['Core/Globals.js'], _modules['Core/Axis/OrdinalAxis.js'], _modules['Series/DataModifyComposition.js'], _modules['Core/Scrollbar.js'], _modules['Core/Chart/StockChart.js']], function (Highcharts, OrdinalAxis, DataModifyComposition, Scrollbar, StockChart) {\n\n        var G = Highcharts;\n        // Classes\n        G.Scrollbar = Scrollbar;\n        G.StockChart = G.stockChart = StockChart.stockChart;\n        // Compositions\n        Scrollbar.compose(G.Axis);\n        OrdinalAxis.compose(G.Axis, G.Series, G.Chart);\n        DataModifyComposition.compose(G.Series, G.Axis, G.Point);\n\n    });\n}));"],"names":["factory","Highcharts","_registerModule","obj","path","args","fn","_modules","SeriesRegistry","U","Chart","__extends","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","create","LineSeries","addEvent","error","extend","isArray","merge","pick","splat","SMAIndicator","_super","_this","arguments","SMAIndicator.prototype.destroy","dataEventsToUnbind","forEach","unbinder","SMAIndicator.prototype.getName","name","params","nameComponents","component","index","options","nameSuffixes","nameBase","type","toUpperCase","SMAIndicator.prototype.getValues","series","period","xVal","yValLen","yVal","range","sum","SMA","xData","yData","i","SMAPoint","values","SMAIndicator.prototype.init","chart","indicator","linkedSeriesUnbiner","hasEvents","unbinder_1","order","SMAIndicator.prototype.recalculateValues","oldData","points","oldDataLength","length","processedData","getValues","linkedParent","croppedDataValues","overwriteData","hasGroupedData","visible","cropped","xAxis","min","max","croppedData","cropData","oldFirstPointIndex","oldLastPointIndex","updateData","data","calculateOn","processedXData","isDirty","redraw","isDirtyData","SMAIndicator.prototype.processData","compareToMain","dataModify","compareValue","tooltip","valueDecimals","linkedTo","hasDerivedData","useCommonDataGrouping","prototype","correctFloat","EMAIndicator","EMAIndicator.prototype.accumulatePeriodPoints","EMAIndicator.prototype.calculateEma","EMApercent","calEMA","x","yValue","y","EMAIndicator.prototype.getValues","EMA","accumulatePeriodPoints","calculateEma","EMAPoint","ADIndicator","ADIndicator.populateAverage","yValVolume","_period","high","low","close","volume","ADIndicator.prototype.getValues","volumeSeriesID","volumeSeries","AD","len","ADPoint","H","noop","_a","ColumnSeries","AOIndicator","AOIndicator.prototype.drawGraph","positiveColor","negativeColor","firstPoint","userOptions","color","AOIndicator.prototype.getValues","AO","shortSum","longSum","longPeriod","price","j","awesome","shortSMA","shortPeriod","longSMA","longLastIndex","shortLastIndex","greaterBarColor","lowerBarColor","threshold","groupPadding","pointPadding","crisp","states","hover","halo","size","markerAttribs","getColumnMetrics","crispCol","translate","drawPoints","MultipleLinesComposition","defined","getGraphPath","areaPath","fillGraph","nextPoints","higherAreaPath","drawGraph","point","linesApiNames","areaLinesNames","mainLinePoints","mainLineOptions","mainLinePath","gappedExtend","gapSize","secondaryLines","secondaryLinesNames","pointsLength","plotLine","plotX","plotY","isNull","fillColor","getLineName","secondLinePoints","firstLinePoints","originalColor","lineName","getTranslatedLinesNames","excludedValue","translatedLines","pointArrayMap","propertyName","toYData","pointColl","value","LinesNames","composedClasses","compose","IndicatorClass","proto","pointValKey","getExtremeIndexInArray","arr","extreme","extremeValue","valueIndex","AroonIndicator","AroonIndicator.prototype.getValues","AR","slicedY","elem","xHigh","aroonUp","aroonDown","xLow","marker","enabled","pointFormat","styles","lineWidth","lineColor","dataGrouping","approximation","AROON","AroonOscillatorIndicator","AroonOscillatorIndicator.prototype.getValues","ARO","aroon","oscillator","getTR","currentPoint","prevPoint","Math","abs","ATRIndicator","ATRIndicator.prototype.getValues","prevATR","TR","ATR","push","q","BBIndicator","BBIndicator.prototype.init","topLine","bottomLine","BBIndicator.prototype.getValues","standardDeviation","BB","slicedX","date","ML","variance","arrLen","isOHLC","TL","sqrt","BL","stdDev","sumArray","array","prev","cur","CCIIndicator","CCIIndicator.prototype.getValues","TP","CCI","TPtemp","smaTP","periodTP","CCIPoint","meanDev","CMFIndicator","CMFIndicator.prototype.isValid","isSeriesOHLC","CMFIndicator.prototype.getValues","isValid","getMoneyFlow","CMFIndicator.prototype.getMoneyFlow","seriesYData","volumeSeriesYData","getMoneyFlowVolume","ohlc","nullIndex","moneyFlowVolume","sumVolume","sumMoneyFlowVolume","moneyFlowXData","moneyFlowYData","DMIIndicator","DMIIndicator.prototype.calculateDM","isPositiveDM","currentHigh","currentLow","previousHigh","previousLow","DMIIndicator.prototype.calculateDI","smoothedDM","tr","DMIIndicator.prototype.calculateDX","plusDI","minusDI","DMIIndicator.prototype.smoothValues","accumulatedValues","currentValue","DMIIndicator.prototype.getTR","DMIIndicator.prototype.getValues","DMI","prevSmoothedPlusDM","prevSmoothedMinusDM","prevSmoothedTR","calculateDM","plusDM","minusDM","calculateDI","DX","calculateDX","smoothedPlusDM","smoothValues","smoothedMinusDM","smoothedTR","plusDILine","minusDILine","parallelArrays","accumulatePoints","subtract","DPOIndicator","DPOIndicator.prototype.getValues","rangeIndex","floor","DPO","periodIndex","defaultOptions","ChaikinIndicator","ChaikinIndicator.prototype.getValues","periods","CHA","ADL","SPE","LPE","periodsOffset","isNumber","CMOIndicator","CMOIndicator.prototype.getValues","CMO","firstAddedSum","sumOfLowerValues","sumOfHigherValues","DEMAIndicator","DEMAIndicator.prototype.getEMA","prevEMA","DEMAIndicator.prototype.getValues","doubledPeriod","DEMA","xDataDema","yDataDema","EMAvalues","getEMA","prevEMAlevel2","EMAlevel2","DEMAPoint","TEMAIndicator","TEMAIndicator.prototype.getEMA","TEMAIndicator.prototype.getTemaPoint","tripledPeriod","EMAlevels","TEMAPoint","TEMAIndicator.prototype.getValues","TEMA","xDataTema","yDataTema","EMAlevel2values","getTemaPoint","TRIXIndicator","TRIXIndicator.prototype.getTemaPoint","APOIndicator","APOIndicator.prototype.getValues","APO","Color","maxHigh","res","minLow","Infinity","highlowLevel","checkLineIntersection","a1","a2","b1","b2","saX","saY","sbX","sbY","sabX","sabY","u","t","drawSenkouSpan","opt","objectEach","isEmptyRange","ret","call","IKHIndicator","IKHIndicator.prototype.init","tenkanLine","kijunLine","chikouLine","senkouSpanA","fill","senkouSpanB","senkouSpan","IKHIndicator.prototype.toYData","IKHIndicator.prototype.translate","key","pointValue","IKHIndicator.prototype.drawGraph","senkouSpanTempColor","k","mainColor","pointArrayMapLength","allIchimokuPoints","ikhMap","intersectIndexColl","senkouSpanOptions","lineIndex","position","intersectPointObj","intersect","intersectPoint","graphName","startIntersect","endIntersect","sectionPoints","sectionNextPoints","nextPointsPlotYSum","pointsPlotYSum","concatArrIndex","areaName","gap","graph","IKHIndicator.prototype.getGraphPath","spanA","spanAarr","IKHIndicator.prototype.getValues","periodTenkan","closestPointRange","getClosestPointRange","axis","closestDataRange","distance","IKH","dateStart","TS","pointTS","slicedTSY","KS","pointKS","slicedKSY","periodSenkouSpanB","SSB","pointSSB","slicedSSBY","CS","SSA","KeltnerChannelsIndicator","KeltnerChannelsIndicator.prototype.init","KeltnerChannelsIndicator.prototype.getValues","periodATR","multiplierATR","KC","seriesEMA","seriesATR","pointEMA","pointATR","KlingerIndicator","KlingerIndicator.prototype.calculateTrend","KlingerIndicator.prototype.isValidData","firstYVal","isLengthValid","KlingerIndicator.prototype.getCM","previousCM","DM","trend","previousTrend","prevoiusDM","KlingerIndicator.prototype.getDM","KlingerIndicator.prototype.getVolumeForce","volumeForce","previousDM","calculateTrend","getDM","CM","getCM","force","KlingerIndicator.prototype.getEMA","KlingerIndicator.prototype.getSMA","KlingerIndicator.prototype.getValues","Klinger","KO","calcSingal","fastEMA","previousFastEMA","previousSlowEMA","signal","isValidData","getVolumeForce","SMAFast","getSMA","SMASlow","fastEMApercent","slowEMApercent","slowEMA","curr","fastAvgPeriod","slowAvgPeriod","signalPeriod","signalLine","sma","MACDIndicator","MACDIndicator.prototype.init","macdLine","macdZones","zones","startIndex","signalZones","concat","resetZones","MACDIndicator.prototype.toYData","MACDIndicator.prototype.translate","plotNames","MACDIndicator.prototype.destroy","graphmacd","destroy","graphsignal","MACDIndicator.prototype.drawGraph","histogramZones","otherSignals","MACDIndicator.prototype.getZonesGraphs","props","allZones","currentZones","currentLineZone","MACDIndicator.prototype.applyZones","hide","MACDIndicator.prototype.getValues","indexToShift","MACD","xMACD","yMACD","shortEMA","longEMA","minPointLength","calculateTypicalPrice","MFIIndicator","MFIIndicator.prototype.getValues","decimals","MFI","positiveMoneyFlow","negativeMoneyFlow","newTypicalPrice","oldTypicalPrice","isUp","rawMoneyFlow","negativeMoneyFlowSum","moneyFlowRatio","positiveMoneyFlowSum","MFIPoint","parseFloat","toFixed","MomentumIndicator","MomentumIndicator.prototype.getValues","MM","MMPoint","NATRIndicator","NATRIndicator.prototype.getValues","atrData","atrLength","valueSuffix","OBVIndicator","OBVIndicator.prototype.getValues","OBV","hasOHLC","previousOBV","OBVPoint","curentOBV","curentClose","previousClose","destroyExtraLabels","functionName","prop","PivotPointsPoint","PivotPointsPoint.prototype.destroyElements","PivotPointsPoint.prototype.destroy","pointClass","PivotPointsIndicator","PivotPointsIndicator.prototype.toYData","PivotPointsIndicator.prototype.translate","PivotPointsIndicator.prototype.getGraphPath","allPivotPoints","endPoint","pivotPoints","PivotPointsIndicator.prototype.drawDataLabels","currentLabel","pointMapping","PivotPointsIndicator.prototype.getValues","placement","PP","slicedXLen","pivot","getPivotAndHLC","lastPP","endTimestamp","avg","PivotPointsIndicator.prototype.getPivotAndHLC","PivotPointsIndicator.prototype.standardPlacement","diff","PivotPointsIndicator.prototype.camarillaPlacement","PivotPointsIndicator.prototype.fibonacciPlacement","algorithm","enableMouseTracking","dataLabels","format","PPOIndicator","PPOIndicator.prototype.getValues","PPO","ArrayUtilities","getArrayExtremes","minIndex","maxIndex","target","Number","MAX_VALUE","AU","Palettes","PCIndicator","PCIndicator.prototype.getValues","PC","extremes","PriceEnvelopesIndicator","PriceEnvelopesIndicator.prototype.init","PriceEnvelopesIndicator.prototype.toYData","PriceEnvelopesIndicator.prototype.translate","translatedEnvelopes","PriceEnvelopesIndicator.prototype.drawGraph","middleLinePoints","middleLineOptions","middleLinePath","deviations","PriceEnvelopesIndicator.prototype.getValues","topPercent","botPercent","PE","topBand","bottomBand","PSARIndicator","PSARIndicator.prototype.getValues","ind","extremePoint","maxAccelerationFactor","increment","initialAccelerationFactor","PSAR","PSARArr","previousDirection","accelerationFactor","prevLow","prevPrevLow","prevPrevHigh","prevHigh","h","direction","accelerationFactorMultiply","m","C","newExtremePoint","a","newDirection","dir","eP","pEP","pAcc","maxAcc","inc","n","initAcc","EPMinusPSAR","lineWidthPlus","ROCIndicator","ROCIndicator.prototype.getValues","ROC","r","nDaysAgoY","rocY","ROCPoint","RSIIndicator","RSIIndicator.prototype.getValues","avgLoss","RSI","loss","gain","change","avgGain","RSIPoint","StochasticIndicator","StochasticIndicator.prototype.init","smoothedLine","StochasticIndicator.prototype.getValues","periodK","periodD","SO","D","K","CL","LL","HL","seriesTypes","SlowStochasticIndicator","SlowStochasticIndicator.prototype.getValues","fastValues","slowValues","fastYData","smoothedValues","xDataLen","StockChart","createPointObj","mainSeries","SupertrendIndicator","SupertrendIndicator.prototype.init","parentOptions","options_1","SupertrendIndicator.prototype.drawGraph","indicOptions","indicPoints","indicPath","indicPointsLen","tempOffset","offset","nextPoint","mainPoint","nextMainPoint","prevMainPoint","prevPrevMainPoint","pointColor","newPoint","groupedPoitns","top","bottom","supertrendLineOptions","dashStyle","newNextPoint","SupertrendIndicator.prototype.getValues","multiplier","ST","finalUp","finalDown","ATRData","prevFinalUp","prevFinalDown","prevST","basicUp","prevY","basicDown","supertrend","risingTrendColor","fallingTrendColor","changeTrendLine","Point","VBPPoint","VBPPoint.prototype.destroy","negativeGraphic","A","animObject","arrayMax","arrayMin","columnPrototype","VBPIndicator","VBPIndicator.prototype.init","baseSeries","VBPIndicator.prototype.addCustomEvents","toEmptyIndicator","VBPIndicator.prototype.animate","init","inverted","group","attr","step","val","fx","scaleX","VBPIndicator.prototype.drawPoints","volumeDivision","posNegVolume","VBPIndicator.prototype.posNegVolume","initVol","pos","wholeVol","signOrder","pointLength","posWidths","negWidths","priceZones","priceZone","pointWidth","VBPIndicator.prototype.translate","barWidth","barX","barY","yAxis","yAxisMin","zoneLinesOptions","yBarOffset","indicatorPoints","volumeDataArray","barHeightP","barHeight","chartPlotTop","oldBarHeight","primalBarWidth","maxVolume","VBPIndicator.prototype.getValues","xValues","yValues","ranges","VBP","specifyZones","zone","VBPIndicator.prototype.specifyZones","dataLength","lowRange","rangeExtremes","highRange","zoneStarts","setData","zoneLinesSVG","rangeStep","zoneStartsLength","start","end","volumePerZone","VBPIndicator.prototype.volumePerZone","previousValue","startFlag","endFlag","volumeXData","volumeYData","lastZoneIndex","baseSeriesLength","volumeSeriesLength","VBPIndicator.prototype.drawZones","zonesValues","zonesStyles","verticalLinePos","renderer","zoneLinesPath","rightLinePos","verticalOffset","leftLinePos","stroke","dashstyle","zIndex","zoneLines","animationLimit","allowOverlap","padding","style","fontSize","verticalAlign","VWAPIndicator","VWAPIndicator.prototype.getValues","calculateVWAPValues","VWAPIndicator.prototype.calculateVWAPValues","volumeValues","volumeLength","cumulativePrice","cumulativeVolume","VWAP","commonLength","typicalPrice","cPrice","cVolume","WilliamsRIndicator","WilliamsRIndicator.prototype.getValues","WR","R","HH","registerSeriesType","populateAverage","wmaY","weightedSumArray","pLen","denominator","wmaX","WMAIndicator","WMAIndicator.prototype.getValues","xValue","WMA","WMAPoint","ZigzagIndicator","ZigzagIndicator.prototype.getValues","lowIndex","highIndex","deviation","directionUp","zigzag","exitLoop","yIndex","firstZigzagHigh","firstZigzagLow","zigzagPoint","zigzagLen","LinearRegressionIndicator","LinearRegressionIndicator.prototype.getRegressionLineParameters","getSingleYValue","xSum","accX","ySum","accY","formulaNumerator","formulaDenominator","xMean","xError","yMean","pow","slope","intercept","LinearRegressionIndicator.prototype.getEndPointY","lineParameters","endPointX","LinearRegressionIndicator.prototype.transformXData","xAxisUnit","xOffset","LinearRegressionIndicator.prototype.findClosestDistance","closestDistance","LinearRegressionIndicator.prototype.getValues","regressionSeriesParams","indicatorData","findClosestDistance","periodStart","periodEnd","periodYData","periodTransformedXData","transformXData","periodXData","getRegressionLineParameters","endPointY","getEndPointY","regressionLineParameters","LinearRegressionSlopesIndicator","LinearRegressionSlopesIndicator.prototype.getEndPointY","LinearRegressionInterceptIndicator","LinearRegressionInterceptIndicator.prototype.getEndPointY","LinearRegressionAngleIndicator","LinearRegressionAngleIndicator.prototype.slopeToAngle","PI","atan","LinearRegressionAngleIndicator.prototype.getEndPointY","slopeToAngle","ABandsIndicator","ABandsIndicator.prototype.getValues","factor","UB","LB","ABANDS","bandBase","ubSMA","lbSMA","pointSMA","TrendLineIndicator","TrendLineIndicator.prototype.getValues","LR","sumX","sumY","sumXY","sumX2","xValLength","alpha","isNaN","beta","DisparityIndexIndicator","DisparityIndexIndicator.prototype.init","ctx","averageIndicator","apply","DisparityIndexIndicator.prototype.calculateDisparityIndex","curPrice","periodAverage","DisparityIndexIndicator.prototype.getValues","disparityIndexPoint","disparityIndexValue","calculateDisparityIndex","average","module","exports","define","AST","Fullscreen","isOpen","container","browserProps","fullscreenChange","requestFullscreen","exitFullscreen","Fullscreen.prototype.close","fullscreen","optionsChart","Document","unbindFullscreenEvent","origWidth","origHeight","origWidthOption","origHeightOption","setButtonText","Fullscreen.prototype.open","unbindChange_1","unbindDestroy_1","fullscreen.unbindFullscreenEvent","promise","alert","Fullscreen.prototype.setButtonText","exportDivElements","exportingOptions","menuItems","lang","exportDivElement","Fullscreen.prototype.toggle","open","Axis","Series","OrdinalAxis","css","timeUnits","getTimeTicks","normalizedInterval","startOfWeek","positions","findHigherRanks","segmentPositions","higherRanks","tickPixelIntervalOption","tickPixelInterval","time","segmentStarts","groupPositions","lastGroupPosition","ordinal","breaks","posLength","outsideMax","info","hasCrossedHigherRank","translatedArr","distances","lastTranslated","length_1","translated","medianDistance","itemToRemove","index2val","ordinalPositions","lin2val","pixelVal","old","transA","minPixelPadding","left","mantissa","ceil","positionsLength","firstPositionsValue","lastPositionsValue","getIndexInArray","onAxisAfterInit","onAxisFoundExtremes","isXAxis","overscroll","dataMax","mouseIsDown","isInternal","eventArgs","trigger","userMin","onAxisAfterSetScale","horiz","isOrdinal","navigator","adaptToUpdatedData","onAxisInitialAxisTranslation","beforeSetTickPositions","tickInterval","postProcessTickInterval","onChartPan","e","chartX","panning","runBase","mouseDownX","hoverPoints","movedUnits","extendedAxis","index2val_1","val2lin_1","trimmedRange","searchAxisLeft","searchAxisRight","fixedRange","cursor","test","onSeriesUpdatedData","val2lin","toIndex","extendedOrdinalPositions","ordinalLength","ordinalIndex","length_2","originalPositionsReference","AxisClass","SeriesClass","ChartClass","axisProto","Additions","Additions.prototype.beforeSetTickPositions","hasBreaks","uniqueOrdinalPositions","ignoreHiddenSeries","overscrollPointsRange","useOrdinal","dist","Additions.findIndexOf","sortedArray","indirectSearch","middle","Additions.prototype.getExtendedPositions","grouping","fakeSeries","forceOrdinal","getExtremes","getGroupPixelWidth","getGroupIntervalFactor","ordinal2lin","getIndexOfPoint","fakeAxis","destroyGroupedData","getProcessedData","applyGrouping","firstAnchor","anchor","lastAnchor","forced","units","Additions.prototype.getGroupIntervalFactor","xMin","xMax","groupIntervalFactor","median","Additions.prototype.getIndexOfPoint","ordinalArray","firstPointVal","firstPointX","shiftIndex","Additions.prototype.getOverscrollPositions","extraRange","Additions.prototype.postProcessTickInterval","ordinalSlope","DataModifyComposition","pointTooltipFormatter","isString","setModifier","mode","modeState","tooltipFormatter","numberFormatter","replace","afterInit","compare","cumulative","afterGetExtremes","activeYData","dataExtremes","modifyValue","seriesSetCompare","update","initCompare","afterProcessData","processedYData","compareStart","keyIndex","indexOf","axisSetCompare","seriesSetCumulative","initCumulative","axisSetCumulative","PointClass","seriesProto","Additions.prototype.modifyValue","Additions.getCumulativeExtremes","cumulativeDataMin","cumulativeDataMax","Additions.prototype.initCompare","this.modifyValue","compareBase","Additions.prototype.initCumulative","StackItem","BrokenAxis","find","fireEvent","brokenAxis","setBreaks","onAxisAfterSetOptions","onAxisAfterSetTickPositions","tickPositions","newPositions","onAxisInit","onSeriesAfterGeneratePoints","connectNulls","isPointInBreak","onSeriesAfterRender","drawBreaks","seriesDrawBreaks","keys","eventName","brokenAxis_1","brk","seriesGappedPath","currentDataGrouping","groupingSize","slice","stack","gapUnit","basePointRange","next","current","xRange","stacking","stackKey","Additions.isInBreak","repeat","from","Additions.lin2Val","breakArray","nval","Additions.val2Lin","Additions.prototype.findBreakAt","to","Additions.prototype.isInAnyBreak","testKeep","keep","inbrk","Additions.prototype.setBreaks","axis.setExtremes","newMin","newMax","animation","eventArguments","axisBreak","breaks_1","axis.setAxisTranslation","repeat_1","i_1","breaks_2","breakArrayT_1","breakArray_1","pointRangePadding","min_1","max_1","start_1","move","inBrk_1","DateTimeAxis","F","Tooltip","approximations","averages","hlc","groupData","dataOptions","groupedXData","groupedYData","groupMap","handleYData","extendedPointArrayMap","groupAll","approximationFn","groupedY","pointX","valuesLen","pointY","baseGeneratePoints","commonOptions","groupPixelWidth","dateTimeLabelFormats","millisecond","second","minute","hour","day","week","month","year","specificOptions","line","spline","area","areaspline","arearange","column","columnrange","candlestick","heikinashi","defaultDataGroupingUnits","seriesProto.getDGApproximation","is","hasExtemesChanged","dataGroupingOptions","groupingEnabled","allowDG","lastDataGrouping","revertRequireSorting","requireSorting","skip","isCartesian","plotSizeX","groupedData","totalRange","groupedDataLength","shiftInterval","groupStart","firstGroupstEnd","groupLength","lastPoint","lastGroupStart","dataMin","allGroupedData","cropStart","preventGraphAnimation","seriesProto.destroyGroupedData","seriesProto.generatePoints","Axis.prototype.applyGrouping","Axis.prototype.getGroupPixelWidth","dgOptions","doGrouping","Axis.prototype.setDataGrouping","seriesOptions","dataGroup","labelConfig","tooltipOptions","xDateFormat","formatString","labelFormats","xDateFormatEnd","formattedKey","styledModeFormat","plotOptions","baseOptions","rangeSelector","HLCPoint","HLCSeries","HLCSeries.prototype.extendStem","halfStrokeWidth","HLCSeries.prototype.getPointPath","graphic","strokeWidth","crispCorr","crispX","round","halfWidth","plotClose","HLCSeries.prototype.drawSinglePoint","isNew","HLCSeries.prototype.drawPoints","drawSinglePoint","HLCSeries.prototype.init","HLCSeries.prototype.pointAttribs","state","attribs","HLCSeries.prototype.toYData","HLCSeries.prototype.translate","names","stickyTracking","animate","directTouch","pointAttrToOptions","OHLCPoint","OHLCPoint.prototype.getClassName","OHLCPoint.prototype.resolveUpColor","upColor","OHLCPoint.prototype.resolveColor","resolveUpColor","OHLCPoint.prototype.getZone","OHLCPoint.prototype.applyOptions","resolveColor","OHLCSeries","OHLCSeries.prototype.getPointPath","plotOpen","OHLCSeries.prototype.pointAttribs","OHLCSeries.prototype.toYData","eventOptions","CandlestickSeries","CandlestickSeries.prototype.pointAttribs","stateOptions","CandlestickSeries.prototype.drawPoints","reversedYAxis","bottomBox","hasTopWhisker","topBox","hasBottomWhisker","FlagsPoint","FlagsPoint.prototype.isValid","FlagsPoint.prototype.hasNewShapeType","shape","symbolKey","OnSeriesComposition","columnProto","stableSort","getPlotBox","onSeries","get","optionsOnSeries","onData","onKey","rightPoint","leftPoint","lastX","distanceRatio","stackIndex","seriesProto_1","RendererRegistry","SVGRenderer","createPinSymbol","symbols","w","anchorX","anchorY","labelX","startSeg","endSeg","symbols.flag","Renderer","SVGElement","distribute","wrap","FlagsSeries","FlagsSeries.prototype.animate","setClip","FlagsSeries.prototype.drawPoints","optionsY","boxesMap","boxes","outsideRight","markerGroup","align","centered","width","height","pointAttribs","text","maxDistance_1","box","proceed","FlagsSeries.prototype.drawTracker","otherPoint","FlagsSeries.prototype.pointAttribs","FlagsSeries.prototype.setClip","clip","sharedClipKey","sharedClips","pointRange","allowOverlapX","stackDistance","textAlign","fontWeight","forceCrop","invertible","noSharedTooltip","sorted","takeOrdinalPosition","trackerGroups","buildKDTree","invertGroups","ScrollbarAxis","ScrollbarAxis.compose","ScrollbarClass","axisMin","axisMax","scrollMin","scrollMax","unitedMin","shouldUpdateExtremes","setRange","scrollbar","axisTitleMargin","titleOffset","scrollbarsOffsets","axisMargin","margin","opposite","offsetsIndex","reversed","axisOffset","ScrollbarDefaults","barBorderRadius","buttonBorderRadius","liveRedraw","minWidth","barBackgroundColor","barBorderWidth","barBorderColor","buttonArrowColor","buttonBackgroundColor","buttonBorderColor","buttonBorderWidth","rifleColor","trackBackgroundColor","trackBorderColor","trackBorderWidth","destroyObjectProperties","removeEvent","Scrollbar","_events","chartY","scrollbarButtons","scrollbarGroup","scrollbarLeft","scrollbarRifles","scrollbarStrokeWidth","scrollbarTop","track","Scrollbar.compose","Scrollbar.swapXY","vertical","seg","temp","Scrollbar.prototype.addEvents","buttonsOrder","buttons","bar","element","mouseDownHandler","bind","mouseMoveHandler","mouseUpHandler","buttonToMinClick","buttonToMaxClick","trackClick","Scrollbar.prototype.buttonToMaxClick","scroller","updatePosition","DOMEvent","Scrollbar.prototype.buttonToMinClick","Scrollbar.prototype.cursorToScrollbarPosition","normalizedEvent","minWidthDifference","calculatedWidth","yOffset","Scrollbar.prototype.destroy","Scrollbar.prototype.drawScrollbarButton","tempElem","styledMode","Scrollbar.prototype.init","render","addEvents","Scrollbar.prototype.mouseDownHandler","pointer","normalize","mousePosition","cursorToScrollbarPosition","initPositions","grabbedCenter","Scrollbar.prototype.mouseMoveHandler","chartPosition","scrollPosition","hasDragged","DOMType","Scrollbar.prototype.mouseUpHandler","Scrollbar.prototype.position","method","rendered","translateX","translateY","Scrollbar.prototype.removeEvents","Scrollbar.prototype.render","drawScrollbarButton","Scrollbar.prototype.setRange","fullWidth","toPX","newSize","fromPX","newPos","newRiflesPos","show","Scrollbar.prototype.shouldUpdateExtremes","eventType","isBoosting","Scrollbar.prototype.trackClick","Scrollbar.prototype.update","Scrollbar.prototype.updatePosition","isTouchDevice","NavigatorAxisAdditions","NavigatorAxisAdditions.prototype.destroy","NavigatorAxisAdditions.prototype.toFixedRange","pxMin","pxMax","fixedMin","fixedMax","halfPointRange","changeRatio","NavigatorAxis","NavigatorAxis.compose","navigatorAxis","chartOptions","pinchType","zoomType","previousZoom","hasTouch","clamp","erase","numExt","_i","numbers","filter","defaultSeriesType","maskInside","handles","backgroundColor","borderColor","maskFill","outlineColor","outlineWidth","fillOpacity","id","className","tickLength","gridLineColor","gridLineWidth","labels","crosshair","startOnTick","endOnTick","minPadding","maxPadding","title","tickWidth","_x","_y","_w","_h","markerPosition","Navigator","zoomedMin","zoomedMax","shades","outlineHeight","outline","navigatorSize","navigatorSeries","navigatorOptions","navigatorGroup","navigatorEnabled","Navigator.prototype.drawHandle","verb","parseInt","Navigator.prototype.drawOutline","halfOutline","outlineCorrection","scrollbarHeight","navigatorTop","verticalMin","Navigator.prototype.drawMasks","navigatorHeight","shade","Navigator.prototype.renderElements","mouseCursor","visibility","hasMask","handlesOptions","Navigator.prototype.update","Navigator.prototype.render","scrollbarXAxis","minRange","maxRange","navigatorWidth","currentRange","grabbedLeft","grabbedRight","fixedWidth","drawMasks","drawOutline","drawHandle","Navigator.prototype.addMouseEvents","eventsToUnbind","Navigator.prototype.getPartsEvents","events","navigatorItem","Navigator.prototype.shadesMousedown","navigatorPosition","dragOffset","reversedExtremes","f","getUnionExtremes","ext","Navigator.prototype.handlesMousedown","baseXAxis","reverse","otherHandlePos","fixedExtreme","Navigator.prototype.onMouseMove","setTimeout","Navigator.prototype.onMouseUp","unionExtremes","triggerOp","Navigator.prototype.removeEvents","unbind","removeBaseSeriesEvents","Navigator.prototype.removeBaseSeriesEvents","updatedDataHandler","modifyBaseAxisExtremes","Navigator.prototype.init","scrollbarOptions","scrollbarEnabled","setBaseSeries","xAxisIndex","yAxisIndex","baseXaxis","isX","keepOrdinalPadding","zoomEnabled","offsets","alignTicks","fake","scrollTrackWidth","valueRange","toPixels","toValue","Navigator.prototype.getUnionExtremes","returnFalseOnNoBaseSeries","baseAxis","navAxis","navAxisOptions","baseAxisOptions","Navigator.prototype.setBaseSeries","baseSeriesOptions","s","showInNavigator","updateNavigatorSeries","Navigator.prototype.updateNavigatorSeries","mergedNavSeriesOptions","baseNavigatorOptions","chartNavigatorSeriesOptions","navSeriesMixin","padXAxis","showInLegend","inactive","opacity","navSeries","base","eachBaseSeries","linkedNavSeries","userNavOptions","navigatorSeriesData","userSeriesOptions","addBaseSeriesEvents","Navigator.prototype.addBaseSeriesEvents","setVisible","remove","Navigator.prototype.getBaseSeriesMin","currentSeriesMin","reduce","Navigator.prototype.modifyNavigatorAxisExtremes","Navigator.prototype.modifyBaseAxisExtremes","baseExtremes","baseDataMin","baseDataMax","stickToMin","stickToMax","hasSetExtremes","setExtremes","userMax","Navigator.prototype.updatedDataHandler","Navigator.prototype.shouldStickToMin","xDataMin","Navigator.prototype.addChartEvents","marginName","Navigator.prototype.destroy","removeEvents","axes","coll","legend","chartWidth","spacing","plotTop","plotLeft","chartHeight","extraBottomMargin","getHeight","legendOptions","event","createElement","discardElement","pad","pInt","allButtonsEnabled","buttonSpacing","dropdown","buttonTheme","floating","inputBoxBorderColor","inputBoxHeight","inputBoxWidth","inputDateFormat","inputDateParser","inputEditDateFormat","inputEnabled","inputPosition","inputSpacing","selected","buttonPosition","inputStyle","labelStyle","rangeSelectorZoom","rangeSelectorFrom","rangeSelectorTo","RangeSelector","buttonOptions","initialButtonGroupWidth","RangeSelector.prototype.clickButton","rangeOptions","rangeMin","setSelected","forcedDataGrouping","frozenStates","deferredYTDClick","MIN_VALUE","ytdExtremes","getYTDExtremes","selectedIndex","rangeSelectorButton","baseXAxisOptions","resetMinAndRange","rangeSetting","minSetting","RangeSelector.prototype.setSelected","RangeSelector.prototype.init","selectedOption","blurInputs","minInput","maxInput","clickButton","setDataGrouping","RangeSelector.prototype.updateButtonStates","actualRange","hasNoData","ytdMin","ytdMax","selectedExists","count","button","offsetRange","isSelected","isTooGreatRange","isTooSmallRange","isYTDButNotSelected","isAllButAlreadyShowingAll","isSameRange","disable","select","RangeSelector.prototype.computeButtonRange","fixedTimes","RangeSelector.prototype.getInputValue","input","defaultInputDateParser","RangeSelector.prototype.setInputValue","inputTime","dateBox","minDateBox","maxDateBox","hcTimeAttr","updatedTime","previousTime","inputTypeFormats","RangeSelector.prototype.setInputExtremes","RangeSelector.prototype.showInput","inputGroup","isTextInput","border","RangeSelector.prototype.hideInput","RangeSelector.prototype.defaultInputDateParser","inputDate","useUTC","str","Date","parse","parts","UTC","RangeSelector.prototype.drawInput","updateExtremes","chartAxis","dataAxis","isMin","div","chartStyle","label","preferredInputType","char","boxShadow","fontFamily","input.onfocus","input.onblur","keyDown","input.onchange","input.onkeypress","input.onkeydown","input.onkeyup","RangeSelector.prototype.getPosition","buttonTop","inputTop","RangeSelector.prototype.getYTDExtremes","now","startOfYear","ts","RangeSelector.prototype.render","inputsZIndex","renderButtons","minElems","drawInput","minLabel","maxElems","maxLabel","setInputValue","setInputExtremes","getInputValue","x_1","alignElements","RangeSelector.prototype.renderButtons","buttonGroup","zoomText","paddingLeft","paddingRight","textContent","textStr","disabled","callDefaultEvent","buttonEvents","RangeSelector.prototype.alignElements","navButtonOptions","getXOffsetForExportButton","positionButtons","width_1","updateButtonStates","xOffsetForExportButton_1","alignButtonGroup","xOffsetForExportButton","handleCollision","alignTranslateY","groupHeight","legendHeight","_b","RangeSelector.prototype.alignButtonGroup","RangeSelector.prototype.positionButtons","buttonLeft","RangeSelector.prototype.handleCollision","maxButtonWidth","buttonWidth","bBox","groupsOverlap","buttonGroupWidth","inputGroupX","inputGroupWidth","buttonGroupX","moveInputsDown","collapseButtons","expandButtons","RangeSelector.prototype.collapseButtons","userButtonTheme","getAttribs","hasActiveButton","currentButtonIndex","showDropdown","RangeSelector.prototype.expandButtons","hideDropdown","RangeSelector.prototype.currentButtonIndex","RangeSelector.prototype.showDropdown","hasVisibleDropdown","RangeSelector.prototype.hideDropdown","RangeSelector.prototype.getHeight","rangeSelectorGroup","yPosition","buttonPositionY","inputPositionY","rangeSelectorHeight","minPosition","RangeSelector.prototype.titleCollision","RangeSelector.prototype.update","RangeSelector.prototype.destroy","rSelector","window","HTMLElement","Axis.prototype.minFromRange","getTrueRange","timeName","basePeriod","chartDestroyEvents_1","initRangeSelector_1","alignTo","getAxisMargins","extraTopMargin","optionsRangeSelector","extraBottomMarginWas","extraTopMarginWas","isDirtyBox","marginBottom","destroyEvents","getDefaultAxisOptions","overflow","showLastLabel","categories","getForcedAxisOptions","getOptions","axisOptions","StockChart.prototype.init","callback","xAxisOptions","yAxisOptions","split","crosshairs","isStock","StockChart.prototype.createAxis","stockChart","c","overrides","borderWidth","shadow","radius","panes","labelOptions","x1","y1","x2","y2","isLinked","axisLeft","axisTop","result","translatedValue","getAxis","otherColl","axes2","rax","axis2","uniqueAxes","unique","transVal","SVGRenderer.prototype.crispPolyLine","crossLabel","cross","log","logarithmic","formatOption","formatFormat","tickInside","tickPosition","snap","labelAlign","labelGroup","posx","posy","dateTime","isInside","crossBox","right","Series.prototype.forceCropping"],"sourceRoot":""}