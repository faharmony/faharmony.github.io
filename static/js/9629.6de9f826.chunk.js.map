{"version":3,"file":"static/js/9629.6de9f826.chunk.js","mappings":"4NAOMA,EAAmB,CAAC,KAAM,KAAM,MAsFtC,UApCa,WACX,MAjDwB,WAExB,OAAsDC,EAAAA,EAAAA,UAAiB,IAAvE,eAAOC,EAAP,KAA4BC,EAA5B,KAYMC,EAAuC,CAC3CC,aAAa,EACbC,aAN+B,WAC/BH,EAAuB,GACxB,EAKCI,SAZ+B,SAACC,GAChCL,EAAuBK,EAAMC,OAAOC,MACrC,EAWCA,MAAOR,EACPS,WAAYC,EAAAA,UA0Bd,MAAO,CAAEC,gBAvBoD,CAC3DC,QAAS,CAAC,EACVC,SAAU,CAAEC,aAAc,gBAC1BC,eAAgB,CAAEC,YAAa,iBAAkBC,WAAYC,EAAAA,SAC7DC,SAAU,CAAEL,aAAc,iBAAkBK,UAAU,GACtDC,SAAU,CAAEN,aAAc,gBAAiBM,UAAU,GACrDC,cAAe,CACbC,SAAS,EACTR,aAAc,SACdS,WAAY,UAEdC,YAAa,CACXC,OAAO,EACPX,aAAc,OACdS,WAAY,OAEdG,QAAS,CACPC,WAAW,EACXb,aAAc,iBACdL,WAAYS,EAAAA,UAIUhB,oBAAAA,EAAqBF,oBAAAA,EAChD,CAIG4B,GADMjB,EAAR,EAAQA,gBAAiBT,EAAzB,EAAyBA,oBAAqBF,EAA9C,EAA8CA,oBAE9C,OACE,SAAC,KAAD,CAAU6B,QAAQ,YAAYC,SAAS,OAAvC,UACE,UAAC,KAAD,CAAKC,UAAU,SAAf,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAMvB,MAAM,OAAOwB,UAAQ,EAACC,QAAQ,KAAKC,MAAM,WAC/C,SAAC,KAAD,CAAM1B,MAAM,aAAawB,UAAQ,EAACC,QAAQ,QAC1C,SAAC,KAAD,CAAMzB,MAAM,uBAAuBwB,UAAQ,EAACC,QAAQ,QACpD,SAAC,KAAD,CAAMzB,MAAM,aAAawB,UAAQ,EAACC,QAAQ,UAE3CE,OAAOC,QAAQzB,GAAiB0B,KAAI,+BAAEC,EAAF,KAAQC,EAAR,YACnC,UAAC,KAAD,YACE,SAAC,KAAD,CAAMP,UAAQ,EAACxB,MAAO8B,EAAMJ,MAAM,UACjCpC,EAAMuC,KAAI,SAACG,GAAD,OACT,SAAC,MAAD,gBAAWC,QAASD,GAAsBD,GAA1C,IAA6CG,IAAK,OAAtBJ,EAAOE,EAD1B,MAFHF,EADyB,KAQrC,UAAC,KAAD,YACE,SAAC,KAAD,CAAM9B,MAAM,mBAAmBwB,UAAQ,EAACE,MAAM,WAC9C,SAAC,MAAD,gBACEO,QAAS,MAELvC,GAHN,IAIEwC,IAAK,OAFA,mBAIP,SAAC,KAAD,CAAMV,UAAU,EAAhB,SAAuBW,KAAKC,UAAU5C,MACtC,SAAC,KAAD,WAKT,C","sources":["modules/components/pages/TextField.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { TextField, ITextFieldProps } from \"@faharmony/form\";\r\nimport { Divider, Text } from \"@faharmony/components\";\r\nimport { faHeart, faSearch } from \"@faharmony/icons\";\r\nimport { SMLType, Box } from \"@faharmony/theme\";\r\nimport { PageView } from \"@faharmony/views\";\r\n\r\nconst sizes: SMLType[] = [\"sm\", \"md\", \"lg\"];\r\n\r\nconst useTextFieldProps = () => {\r\n  // State to store value from the input field\r\n  const [clearableInputValue, setClearableInputValue] = useState<string>(\"\");\r\n\r\n  // Input Field handler\r\n  const handleClearableUserInput = (event: any) => {\r\n    setClearableInputValue(event.target.value);\r\n  };\r\n\r\n  // Reset Input Field handler\r\n  const resetClearableInputField = () => {\r\n    setClearableInputValue(\"\");\r\n  };\r\n\r\n  const clearableInputProps: ITextFieldProps = {\r\n    isClearable: true,\r\n    onInputClear: resetClearableInputField,\r\n    onChange: handleClearableUserInput,\r\n    value: clearableInputValue,\r\n    suffixIcon: faSearch,\r\n  };\r\n\r\n  const textFieldsProps: { [name: string]: ITextFieldProps } = {\r\n    default: {},\r\n    withText: { defaultValue: \"Default text\" },\r\n    withPrefixIcon: { placeholder: \"Favorite hobby\", prefixIcon: faHeart },\r\n    readOnly: { defaultValue: \"Read only name\", readOnly: true },\r\n    disabled: { defaultValue: \"Disabled text\", disabled: true },\r\n    successStatus: {\r\n      success: true,\r\n      defaultValue: \"101.00\",\r\n      prefixText: \"â‚¬\",\r\n    },\r\n    errorStatus: {\r\n      error: true,\r\n      defaultValue: \"101a\",\r\n      prefixText: \"EUR\",\r\n    },\r\n    loading: {\r\n      isLoading: true,\r\n      defaultValue: \"Siddhant Gupta\",\r\n      suffixIcon: faHeart,\r\n    },\r\n  };\r\n\r\n  return { textFieldsProps, clearableInputProps, clearableInputValue };\r\n};\r\n\r\nconst Page = () => {\r\n  const { textFieldsProps, clearableInputProps, clearableInputValue } =\r\n    useTextFieldProps();\r\n  return (\r\n    <PageView heading=\"TextField\" overflow=\"auto\">\r\n      <Box direction=\"column\">\r\n        <Box>\r\n          <Text value=\"Type\" truncate variant=\"h5\" align=\"right\" />\r\n          <Text value=\"Small (sm)\" truncate variant=\"h5\" />\r\n          <Text value=\"Medium (md, default)\" truncate variant=\"h5\" />\r\n          <Text value=\"Large (lg)\" truncate variant=\"h5\" />\r\n        </Box>\r\n        {Object.entries(textFieldsProps).map(([name, o]) => (\r\n          <Box key={name}>\r\n            <Text truncate value={name} align=\"right\" />\r\n            {sizes.map((s) => (\r\n              <TextField spacing={s} key={name + s} {...o} ref={null} />\r\n            ))}\r\n          </Box>\r\n        ))}\r\n        <Box>\r\n          <Text value=\"Clearable field \" truncate align=\"right\" />\r\n          <TextField\r\n            spacing={\"sm\"}\r\n            key={\"clearableInput\"}\r\n            {...clearableInputProps}\r\n            ref={null}\r\n          />\r\n          <Text truncate={true}>{JSON.stringify(clearableInputValue)}</Text>\r\n          <Divider />\r\n        </Box>\r\n      </Box>\r\n    </PageView>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["sizes","useState","clearableInputValue","setClearableInputValue","clearableInputProps","isClearable","onInputClear","onChange","event","target","value","suffixIcon","faSearch","textFieldsProps","default","withText","defaultValue","withPrefixIcon","placeholder","prefixIcon","faHeart","readOnly","disabled","successStatus","success","prefixText","errorStatus","error","loading","isLoading","useTextFieldProps","heading","overflow","direction","truncate","variant","align","Object","entries","map","name","o","s","spacing","ref","JSON","stringify"],"sourceRoot":""}