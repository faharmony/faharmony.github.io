{"version":3,"file":"static/js/5203.1d6e1615.chunk.js","mappings":"sLAiBaA,EAAgB,SAAH,OAAMC,EAAW,EAAXA,YAAW,OACzCC,EAAAA,QAAAA,IACO,WAAY,CAAED,YAAAA,IAClBE,KAAKC,EAAAA,eACLC,MAAMC,EAAAA,cAAe,C,mQCfbJ,EAAcK,EAAAA,GAAAA,OAAa,CACtCC,QAAQ,2BAKVN,EAAYO,aAAaC,QAAQC,KAC/B,SAACC,GAGC,OADAA,EAAOC,QAASC,cAAa,kBAAaC,EAAAA,EAAAA,OAAkB,IACrDH,CACT,IACA,SAACI,GAAK,OAAKC,QAAQC,OAAOF,EAAM,IAGlC,YAQO,IAAMG,EAAe,SAACC,GAAQ,OACnCA,EAAIC,SACY,MAAfD,EAAIC,QAAiC,MAAfD,EAAIC,QAAiC,MAAfD,EAAIC,OAAgB,EAGtDC,EAAa,SAACF,GAAQ,OACjCD,EAAaC,GAAOA,EAAIG,KAAKC,OAASC,QAAQC,KAAKN,EAAIO,WAAY,EAGxDvB,EAAgB,SAACgB,GAAQ,OACpCD,EAAaC,GAAOA,EAAIG,KAAKC,OAAOI,QAAUH,QAAQC,KAAKN,EAAIO,WAAY,EAGhEE,EAAgBJ,QAAQK,IAGxBxB,EAAgBmB,QAAQT,K","sources":["modules/logo/services/api.ts","modules/logo/services/axios.ts"],"sourcesContent":["/**\r\n * List of all REST API used in this module.\r\n */\r\nimport apiInstance, {\r\n  ICancelTokenProps,\r\n  returnSuccess,\r\n  returnWarning,\r\n} from \"./axios\";\r\n\r\n// The following API functions use an initialized instance of Axios\r\n// @see axios.ts\r\n// @param cancelToken is optional and can be used to interrupt api call.\r\n\r\n/**\r\n * Get all files/folders in a directory\r\n * @returns Array of file objects\r\n */\r\nexport const sampleRestApi = ({ cancelToken }: ICancelTokenProps) =>\r\n  apiInstance\r\n    .get(`endpoint`, { cancelToken })\r\n    .then(returnSuccess)\r\n    .catch(returnWarning);\r\n","// Axios is used for managing REST API calls\r\n// Axios Documentation: https://github.com/axios/axios\r\nimport { getAuthToken, axios, CancelToken } from \"@faharmony/service\";\r\n\r\n// Base API\r\n// Axios instance initialized with common information like baseURL and headers.\r\nexport const apiInstance = axios.create({\r\n  baseURL: `/services/service-name`,\r\n});\r\n\r\n// Interceptor to add current authentication bearer token\r\n// Comment this if no bearer token is required.\r\napiInstance.interceptors.request.use(\r\n  (config) => {\r\n    // Read token from in-memory.\r\n    config.headers!.Authorization = `Bearer ${getAuthToken() || \"\"}`;\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\nexport default apiInstance;\r\n\r\n///////////////////////////\r\n\r\n/**\r\n * Return functions for API call\r\n */\r\n// Return whether request was successful or not.\r\nexport const returnStatus = (res: any): boolean =>\r\n  res.status &&\r\n  (res.status === 200 || res.status === 201 || res.status === 204);\r\n\r\n// Returns JSON data if found, else undefined.\r\nexport const returnJSON = (res: any) =>\r\n  returnStatus(res) ? res.data.result : console.warn(res.statusText);\r\n\r\n// Returns Boolean: True if success\r\nexport const returnSuccess = (res: any): boolean =>\r\n  returnStatus(res) ? res.data.result.success : console.warn(res.statusText);\r\n\r\n// Display return data in console\r\nexport const displayResult = console.dir;\r\n\r\n// Warning for API catch\r\nexport const returnWarning = console.error;\r\n\r\n/**\r\n * TypeDefinitions for API props\r\n */\r\n\r\n/**\r\n * Base interface for all API.\r\n * Extend it to create your own interfaces.\r\n */\r\nexport interface ICancelTokenProps {\r\n  cancelToken?: CancelToken;\r\n}\r\n"],"names":["sampleRestApi","cancelToken","apiInstance","then","returnSuccess","catch","returnWarning","axios","baseURL","interceptors","request","use","config","headers","Authorization","getAuthToken","error","Promise","reject","returnStatus","res","status","returnJSON","data","result","console","warn","statusText","success","displayResult","dir"],"sourceRoot":""}