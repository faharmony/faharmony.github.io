{"version":3,"file":"static/js/1010.7b89c26a.chunk.js","mappings":"0VAMaA,EAAcC,EAAAA,GAAAA,OAAa,CACtCC,QAAQ,2BAKVF,EAAYG,aAAaC,QAAQC,KAC/B,SAACC,GAGC,OADAA,EAAOC,QAASC,cAAhB,kBAA0CC,EAAAA,EAAAA,OAAkB,IACrDH,CACR,IACD,SAACI,GAAD,OAAWC,QAAQC,OAAOF,EAA1B,IAGF,YAQO,IAAMG,EAAe,SAACC,GAAD,OAC1BA,EAAIC,SACY,MAAfD,EAAIC,QAAiC,MAAfD,EAAIC,QAAiC,MAAfD,EAAIC,OAFvB,EAKfC,EAAa,SAACF,GAAD,OACxBD,EAAaC,GAAOA,EAAIG,KAAKC,OAASC,QAAQC,KAAKN,EAAIO,WAD/B,EAIbC,EAAgB,SAACR,GAAD,OAC3BD,EAAaC,GAAOA,EAAIG,KAAKC,OAAOK,QAAUJ,QAAQC,KAAKN,EAAIO,WADpC,EAIhBG,EAAgBL,QAAQM,IAGxBC,EAAgBP,QAAQT,K","sources":["modules/logo/services/axios.ts"],"sourcesContent":["// Axios is used for managing REST API calls\n// Axios Documentation: https://github.com/axios/axios\nimport { getAuthToken, axios, CancelToken } from \"@faharmony/service\";\n\n// Base API\n// Axios instance initialized with common information like baseURL and headers.\nexport const apiInstance = axios.create({\n  baseURL: `/services/service-name`,\n});\n\n// Interceptor to add current authentication bearer token\n// Comment this if no bearer token is required.\napiInstance.interceptors.request.use(\n  (config) => {\n    // Read token from in-memory.\n    config.headers!.Authorization = `Bearer ${getAuthToken() || \"\"}`;\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport default apiInstance;\n\n///////////////////////////\n\n/**\n * Return functions for API call\n */\n// Return whether request was successful or not.\nexport const returnStatus = (res: any): boolean =>\n  res.status &&\n  (res.status === 200 || res.status === 201 || res.status === 204);\n\n// Returns JSON data if found, else undefined.\nexport const returnJSON = (res: any) =>\n  returnStatus(res) ? res.data.result : console.warn(res.statusText);\n\n// Returns Boolean: True if success\nexport const returnSuccess = (res: any): boolean =>\n  returnStatus(res) ? res.data.result.success : console.warn(res.statusText);\n\n// Display return data in console\nexport const displayResult = console.dir;\n\n// Warning for API catch\nexport const returnWarning = console.error;\n\n/**\n * TypeDefinitions for API props\n */\n\n/**\n * Base interface for all API.\n * Extend it to create your own interfaces.\n */\nexport interface ICancelTokenProps {\n  cancelToken?: CancelToken;\n}\n"],"names":["apiInstance","axios","baseURL","interceptors","request","use","config","headers","Authorization","getAuthToken","error","Promise","reject","returnStatus","res","status","returnJSON","data","result","console","warn","statusText","returnSuccess","success","displayResult","dir","returnWarning"],"sourceRoot":""}